(()=>{var e="undefined"!=typeof globalThis?globalThis:"undefined"!=typeof self?self:"undefined"!=typeof window?window:"undefined"!=typeof global?global:{};function t(e,t,n,s){Object.defineProperty(e,t,{get:n,set:s,enumerable:!0,configurable:!0})}function n(e,t){return Object.keys(t).forEach((function(n){"default"===n||"__esModule"===n||e.hasOwnProperty(n)||Object.defineProperty(e,n,{enumerable:!0,get:function(){return t[n]}})})),e}var s={},r={},a=e.parcelRequireee9d;null==a&&((a=function(e){if(e in s)return s[e].exports;if(e in r){var t=r[e];delete r[e];var n={id:e,exports:{}};return s[e]=n,t.call(n.exports,n,n.exports),n.exports}var a=new Error("Cannot find module '"+e+"'");throw a.code="MODULE_NOT_FOUND",a}).register=function(e,t){r[e]=t},e.parcelRequireee9d=a),a.register("foUwZ",(function(e,t){})),a.register("gj6Et",(function(e,t){!function(e,t,n){function s(e){var t,n=this,s=(t=4022871197,function(e){e=e.toString();for(var n=0;n<e.length;n++){var s=.02519603282416938*(t+=e.charCodeAt(n));s-=t=s>>>0,t=(s*=t)>>>0,t+=4294967296*(s-=t)}return 2.3283064365386963e-10*(t>>>0)});n.next=function(){var e=2091639*n.s0+2.3283064365386963e-10*n.c;return n.s0=n.s1,n.s1=n.s2,n.s2=e-(n.c=0|e)},n.c=1,n.s0=s(" "),n.s1=s(" "),n.s2=s(" "),n.s0-=s(e),n.s0<0&&(n.s0+=1),n.s1-=s(e),n.s1<0&&(n.s1+=1),n.s2-=s(e),n.s2<0&&(n.s2+=1),s=null}function r(e,t){return t.c=e.c,t.s0=e.s0,t.s1=e.s1,t.s2=e.s2,t}function a(e,t){var n=new s(e),a=t&&t.state,i=n.next;return i.int32=function(){return 4294967296*n.next()|0},i.double=function(){return i()+11102230246251565e-32*(2097152*i()|0)},i.quick=i,a&&("object"==typeof a&&r(a,n),i.state=function(){return r(n,{})}),i}t&&t.exports?t.exports=a:n&&n.amd?n((function(){return a})):this.alea=a}(0,e,"function"==typeof define&&define)})),a.register("4gDjz",(function(e,t){!function(e,t,n){function s(e){var t=this,n="";t.x=0,t.y=0,t.z=0,t.w=0,t.next=function(){var e=t.x^t.x<<11;return t.x=t.y,t.y=t.z,t.z=t.w,t.w^=t.w>>>19^e^e>>>8},e===(0|e)?t.x=e:n+=e;for(var s=0;s<n.length+64;s++)t.x^=0|n.charCodeAt(s),t.next()}function r(e,t){return t.x=e.x,t.y=e.y,t.z=e.z,t.w=e.w,t}function a(e,t){var n=new s(e),a=t&&t.state,i=function(){return(n.next()>>>0)/4294967296};return i.double=function(){do{var e=((n.next()>>>11)+(n.next()>>>0)/4294967296)/2097152}while(0===e);return e},i.int32=n.next,i.quick=i,a&&("object"==typeof a&&r(a,n),i.state=function(){return r(n,{})}),i}t&&t.exports?t.exports=a:n&&n.amd?n((function(){return a})):this.xor128=a}(0,e,"function"==typeof define&&define)})),a.register("HLBv4",(function(e,t){!function(e,t,n){function s(e){var t=this,n="";t.next=function(){var e=t.x^t.x>>>2;return t.x=t.y,t.y=t.z,t.z=t.w,t.w=t.v,(t.d=t.d+362437|0)+(t.v=t.v^t.v<<4^e^e<<1)|0},t.x=0,t.y=0,t.z=0,t.w=0,t.v=0,e===(0|e)?t.x=e:n+=e;for(var s=0;s<n.length+64;s++)t.x^=0|n.charCodeAt(s),s==n.length&&(t.d=t.x<<10^t.x>>>4),t.next()}function r(e,t){return t.x=e.x,t.y=e.y,t.z=e.z,t.w=e.w,t.v=e.v,t.d=e.d,t}function a(e,t){var n=new s(e),a=t&&t.state,i=function(){return(n.next()>>>0)/4294967296};return i.double=function(){do{var e=((n.next()>>>11)+(n.next()>>>0)/4294967296)/2097152}while(0===e);return e},i.int32=n.next,i.quick=i,a&&("object"==typeof a&&r(a,n),i.state=function(){return r(n,{})}),i}t&&t.exports?t.exports=a:n&&n.amd?n((function(){return a})):this.xorwow=a}(0,e,"function"==typeof define&&define)})),a.register("ktaoY",(function(e,t){!function(e,t,n){function s(e){var t=this;t.next=function(){var e,n,s=t.x,r=t.i;return e=s[r],n=(e^=e>>>7)^e<<24,n^=(e=s[r+1&7])^e>>>10,n^=(e=s[r+3&7])^e>>>3,n^=(e=s[r+4&7])^e<<7,e=s[r+7&7],n^=(e^=e<<13)^e<<9,s[r]=n,t.i=r+1&7,n},function(e,t){var n,s=[];if(t===(0|t))s[0]=t;else for(t=""+t,n=0;n<t.length;++n)s[7&n]=s[7&n]<<15^t.charCodeAt(n)+s[n+1&7]<<13;for(;s.length<8;)s.push(0);for(n=0;n<8&&0===s[n];++n);for(8==n?s[7]=-1:s[n],e.x=s,e.i=0,n=256;n>0;--n)e.next()}(t,e)}function r(e,t){return t.x=e.x.slice(),t.i=e.i,t}function a(e,t){null==e&&(e=+new Date);var n=new s(e),a=t&&t.state,i=function(){return(n.next()>>>0)/4294967296};return i.double=function(){do{var e=((n.next()>>>11)+(n.next()>>>0)/4294967296)/2097152}while(0===e);return e},i.int32=n.next,i.quick=i,a&&(a.x&&r(a,n),i.state=function(){return r(n,{})}),i}t&&t.exports?t.exports=a:n&&n.amd?n((function(){return a})):this.xorshift7=a}(0,e,"function"==typeof define&&define)})),a.register("gBs5C",(function(e,t){!function(e,t,n){function s(e){var t=this;t.next=function(){var e,n,s=t.w,r=t.X,a=t.i;return t.w=s=s+1640531527|0,n=r[a+34&127],e=r[a=a+1&127],n^=n<<13,e^=e<<17,n^=n>>>15,e^=e>>>12,n=r[a]=n^e,t.i=a,n+(s^s>>>16)|0},function(e,t){var n,s,r,a,i,o=[],l=128;for(t===(0|t)?(s=t,t=null):(t+="\0",s=0,l=Math.max(l,t.length)),r=0,a=-32;a<l;++a)t&&(s^=t.charCodeAt((a+32)%t.length)),0===a&&(i=s),s^=s<<10,s^=s>>>15,s^=s<<4,s^=s>>>13,a>=0&&(i=i+1640531527|0,r=0==(n=o[127&a]^=s+i)?r+1:0);for(r>=128&&(o[127&(t&&t.length||0)]=-1),r=127,a=512;a>0;--a)s=o[r+34&127],n=o[r=r+1&127],s^=s<<13,n^=n<<17,s^=s>>>15,n^=n>>>12,o[r]=s^n;e.w=i,e.X=o,e.i=r}(t,e)}function r(e,t){return t.i=e.i,t.w=e.w,t.X=e.X.slice(),t}function a(e,t){null==e&&(e=+new Date);var n=new s(e),a=t&&t.state,i=function(){return(n.next()>>>0)/4294967296};return i.double=function(){do{var e=((n.next()>>>11)+(n.next()>>>0)/4294967296)/2097152}while(0===e);return e},i.int32=n.next,i.quick=i,a&&(a.X&&r(a,n),i.state=function(){return r(n,{})}),i}t&&t.exports?t.exports=a:n&&n.amd?n((function(){return a})):this.xor4096=a}(0,e,"function"==typeof define&&define)})),a.register("ktLSh",(function(e,t){!function(e,t,n){function s(e){var t=this,n="";t.next=function(){var e=t.b,n=t.c,s=t.d,r=t.a;return e=e<<25^e>>>7^n,n=n-s|0,s=s<<24^s>>>8^r,r=r-e|0,t.b=e=e<<20^e>>>12^n,t.c=n=n-s|0,t.d=s<<16^n>>>16^r,t.a=r-e|0},t.a=0,t.b=0,t.c=-1640531527,t.d=1367130551,e===Math.floor(e)?(t.a=e/4294967296|0,t.b=0|e):n+=e;for(var s=0;s<n.length+20;s++)t.b^=0|n.charCodeAt(s),t.next()}function r(e,t){return t.a=e.a,t.b=e.b,t.c=e.c,t.d=e.d,t}function a(e,t){var n=new s(e),a=t&&t.state,i=function(){return(n.next()>>>0)/4294967296};return i.double=function(){do{var e=((n.next()>>>11)+(n.next()>>>0)/4294967296)/2097152}while(0===e);return e},i.int32=n.next,i.quick=i,a&&("object"==typeof a&&r(a,n),i.state=function(){return r(n,{})}),i}t&&t.exports?t.exports=a:n&&n.amd?n((function(){return a})):this.tychei=a}(0,e,"function"==typeof define&&define)}));class o{constructor(e,t){this.backend=e,this.dataMover=t,this.data=new WeakMap,this.dataIdsCount=0}get(e){return this.data.has(e)||this.dataMover.moveData(this.backend,e),this.data.get(e)}set(e,t){this.dataIdsCount++,this.data.set(e,t)}has(e){return this.data.has(e)}delete(e){return this.dataIdsCount--,this.data.delete(e)}numDataIds(){return this.dataIdsCount}}class l{refCount(e){return u("refCount")}incRef(e){return u("incRef")}timerAvailable(){return!0}time(e){return u("time")}read(e){return u("read")}readSync(e){return u("readSync")}readToGPU(e,t){return u("readToGPU")}numDataIds(){return u("numDataIds")}disposeData(e,t){return u("disposeData")}write(e,t,n){return u("write")}move(e,t,n,s,r){return u("move")}memory(){return u("memory")}floatPrecision(){return u("floatPrecision")}epsilon(){return 32===this.floatPrecision()?1e-7:1e-4}dispose(){return u("dispose")}}function u(e){throw new Error(`'${e}' not yet implemented or not found in the registry. This kernel may not be supported by the tfjs backend you have chosen`)}var c={};function h(e){let t=e.length,n=0;for(;t>0;)n=Math.random()*t|0,t--,m(e,t,n)}function p(e,t){if(e.length!==t.length)throw new Error(`Array sizes must match to be shuffled together First array length was ${e.length}Second array length was ${t.length}`);let n=e.length,s=0;for(;n>0;)s=Math.random()*n|0,n--,m(e,n,s),m(t,n,s)}function d(e,t,n){return Math.max(e,Math.min(t,n))}function f(e){return e%2==0?e:e+1}function m(e,t,n){const s=e[t];e[t]=e[n],e[n]=s}function g(e){let t=0;for(let n=0;n<e.length;n++)t+=e[n];return t}function y(e,t){const n=Math.random();return t*n+(1-n)*e}function b(e,t){let n=0;for(let s=0;s<e.length;s++){const r=Number(e[s])-Number(t[s]);n+=r*r}return n}function x(e,t){if(!e)throw new Error("string"==typeof t?t:t())}function w(e,t,n=""){x(N(e,t),(()=>n+` Shapes ${e} and ${t} must match`))}function v(e){x(null!=e,(()=>"The input to the tensor constructor must be a non-null value."))}function k(e,t=[],n=!1){if(null==t&&(t=[]),Array.isArray(e)||P(e)&&!n)for(let s=0;s<e.length;++s)k(e[s],t,n);else t.push(e);return t}function I(e){if(0===e.length)return 1;let t=e[0];for(let n=1;n<e.length;n++)t*=e[n];return t}function S(e){return 0===e.length}function N(e,t){if(e===t)return!0;if(null==e||null==t)return!1;if(e.length!==t.length)return!1;for(let n=0;n<e.length;n++)if(e[n]!==t[n])return!1;return!0}function T(e){return e%1==0}function C(e){if(null!=Math.tanh)return Math.tanh(e);if(e===1/0)return 1;if(e===-1/0)return-1;{const t=Math.exp(2*e);return(t-1)/(t+1)}}function $(e){const t=Math.ceil(Math.sqrt(e));return[t,Math.ceil(e/t)]}function E(e){const t=new Uint32Array(e);for(let n=0;n<e;++n)t[n]=n;return h(t),t}function A(e,t){return t<=e.length?e:e+" ".repeat(t-e.length)}function R(e,t=(e=>0),n){return new Promise(((s,r)=>{let a=0;const i=()=>{if(e())return void s();a++;const o=t(a);null!=n&&a>=n?r():setTimeout(i,o)};i()}))}function F(e,t){let n=1,s=-1;for(let t=0;t<e.length;++t)if(e[t]>=0)n*=e[t];else if(-1===e[t]){if(-1!==s)throw Error(`Shapes can only have 1 implicit size. Found -1 at dim ${s} and dim ${t}`);s=t}else if(e[t]<0)throw Error(`Shapes can not be < 0. Found ${e[t]} at dim ${t}`);if(-1===s){if(t>0&&t!==n)throw Error(`Size(${t}) must match the product of shape ${e}`);return e}if(0===n)throw Error(`Cannot infer the missing size in [${e}] when there are 0 elements`);if(t%n!=0)throw Error(`The implicit shape can't be a fractional number. Got ${t} / ${n}`);const r=e.slice();return r[s]=t/n,r}function D(e,t){const n=t.length;return x((e=null==e?t.map(((e,t)=>t)):[].concat(e)).every((e=>e>=-n&&e<n)),(()=>`All values in axis param must be in range [-${n}, ${n}) but got axis ${e}`)),x(e.every((e=>T(e))),(()=>`All values in axis param must be integers but got axis ${e}`)),e.map((e=>e<0?n+e:e))}function _(e,t){const n=[],s=[],r=null!=t&&Array.isArray(t)&&0===t.length,a=null==t||r?null:D(t,e).sort();let i=0;for(let t=0;t<e.length;++t){if(null!=a){if(a[i]===t&&1!==e[t])throw new Error(`Can't squeeze axis ${t} since its dim '${e[t]}' is not 1`);(null==a[i]||a[i]>t)&&1===e[t]&&(n.push(e[t]),s.push(t)),a[i]<=t&&i++}1!==e[t]&&(n.push(e[t]),s.push(t))}return{newShape:n,keptDims:s}}function O(e,t){let n=null;if(null==e||"float32"===e)n=new Float32Array(t);else if("int32"===e)n=new Int32Array(t);else{if("bool"!==e)throw new Error(`Unknown data type ${e}`);n=new Uint8Array(t)}return n}function M(e,t){let n=null;if(null==e||"float32"===e)n=new Float32Array(t);else if("int32"===e)n=new Int32Array(t);else if("bool"===e)n=new Uint8Array(t);else{if("string"!==e)throw new Error(`Unknown data type ${e}`);n=new Array(t)}return n}function L(e,t){for(let n=0;n<e.length;n++){const s=e[n];if(isNaN(s)||!isFinite(s))throw Error(`A tensor of type ${t} being uploaded contains ${s}.`)}}function z(e){return"bool"===e||"complex64"===e||"float32"===e||"int32"===e||"string"===e}function B(e,t){return"complex64"!==t&&(("float32"!==t||"complex64"===e)&&(("int32"!==t||"float32"===e||"complex64"===e)&&("bool"!==t||"bool"!==e)))}function P(e){return e instanceof Float32Array||e instanceof Int32Array||e instanceof Uint8Array||e instanceof Uint8ClampedArray}function W(e){if("float32"===e||"int32"===e)return 4;if("complex64"===e)return 8;if("bool"===e)return 1;throw new Error(`Unknown dtype ${e}`)}function U(e){if(null==e)return 0;let t=0;return e.forEach((e=>t+=e.length)),t}function V(e){return"string"==typeof e||e instanceof String}function G(e){return"boolean"==typeof e}function H(e){return"number"==typeof e}function j(e){return Array.isArray(e)?j(e[0]):e instanceof Float32Array?"float32":e instanceof Int32Array||e instanceof Uint8Array||e instanceof Uint8ClampedArray?"int32":H(e)?"float32":V(e)?"string":G(e)?"bool":"float32"}function q(e){return!!(e&&e.constructor&&e.call&&e.apply)}function K(e,t){for(let n=t;n<e;++n)if(e%n==0)return n;return e}function X(e){const t=e.length;if(t<2)return[];const n=new Array(t-1);n[t-2]=e[t-1];for(let s=t-3;s>=0;--s)n[s]=n[s+1]*e[s+1];return n}function Y(e,t,n,s=!1){const r=new Array;if(1===t.length){const a=t[0]*(s?2:1);for(let t=0;t<a;t++)r[t]=n[e+t]}else{const a=t[0],i=t.slice(1),o=i.reduce(((e,t)=>e*t))*(s?2:1);for(let t=0;t<a;t++)r[t]=Y(e+t*o,i,n,s)}return r}function Z(e,t,n=!1){if(0===e.length)return t[0];const s=e.reduce(((e,t)=>e*t))*(n?2:1);if(0===s)return[];if(s!==t.length)throw new Error(`[${e}] does not match the input size ${t.length}${n?" for a complex tensor":""}.`);return Y(0,e,t,n)}function J(e,t){const n=Q(e,t);for(let e=0;e<n.length;e++)n[e]=1;return n}function Q(e,t){if(null==t||"float32"===t||"complex64"===t)return new Float32Array(e);if("int32"===t)return new Int32Array(e);if("bool"===t)return new Uint8Array(e);throw new Error(`Unknown data type ${t}`)}function ee(e,t){const n=e.reduce(((e,t)=>e*t),1);if(null==t||"float32"===t)return Z(e,new Float32Array(n));if("int32"===t)return Z(e,new Int32Array(n));if("bool"===t)return Z(e,new Uint8Array(n));throw new Error(`Unknown data type ${t}`)}function te(e){e.forEach((t=>{x(Number.isInteger(t)&&t>=0,(()=>`Tensor must have a shape comprised of positive integers but got shape [${e}].`))}))}function ne(e,t,n){if(0===t)return 0;if(1===t)return e[0];let s=e[e.length-1];for(let t=0;t<e.length-1;++t)s+=n[t]*e[t];return s}function se(e,t,n){if(0===t)return[];if(1===t)return[e];const s=new Array(t);for(let t=0;t<s.length-1;++t)s[t]=Math.floor(e/n[t]),e-=s[t]*n[t];return s[s.length-1]=e,s}function re(e){return e&&e.then&&"function"==typeof e.then}t(c,"shuffle",(()=>h)),t(c,"swap",(()=>m)),t(c,"shuffleCombo",(()=>p)),t(c,"clamp",(()=>d)),t(c,"nearestLargerEven",(()=>f)),t(c,"sum",(()=>g)),t(c,"randUniform",(()=>y)),t(c,"distSquared",(()=>b)),t(c,"assert",(()=>x)),t(c,"assertShapesMatch",(()=>w)),t(c,"arraysEqual",(()=>N)),t(c,"assertNonNull",(()=>v)),t(c,"flatten",(()=>k)),t(c,"isTypedArray",(()=>P)),t(c,"sizeFromShape",(()=>I)),t(c,"isScalarShape",(()=>S)),t(c,"isInt",(()=>T)),t(c,"tanh",(()=>C)),t(c,"sizeToSquarishShape",(()=>$)),t(c,"createShuffledIndices",(()=>E)),t(c,"rightPad",(()=>A)),t(c,"repeatedTry",(()=>R)),t(c,"inferFromImplicitShape",(()=>F)),t(c,"parseAxisParam",(()=>D)),t(c,"squeezeShape",(()=>_)),t(c,"getTypedArrayFromDType",(()=>O)),t(c,"getArrayFromDType",(()=>M)),t(c,"checkConversionForErrors",(()=>L)),t(c,"isValidDtype",(()=>z)),t(c,"hasEncodingLoss",(()=>B)),t(c,"bytesPerElement",(()=>W)),t(c,"bytesFromStringArray",(()=>U)),t(c,"isString",(()=>V)),t(c,"isBoolean",(()=>G)),t(c,"isNumber",(()=>H)),t(c,"inferDtype",(()=>j)),t(c,"isFunction",(()=>q)),t(c,"nearestDivisor",(()=>K)),t(c,"computeStrides",(()=>X)),t(c,"toNestedArray",(()=>Z)),t(c,"makeOnesTypedArray",(()=>J)),t(c,"makeZerosTypedArray",(()=>Q)),t(c,"makeZerosNestedTypedArray",(()=>ee)),t(c,"assertNonNegativeIntegerDimensions",(()=>te)),t(c,"locToIndex",(()=>ne)),t(c,"indexToLoc",(()=>se)),t(c,"isPromise",(()=>re));const ae="tfjsflags";class ie{constructor(e){this.global=e,this.flags={},this.flagRegistry={},this.urlFlags={},this.getQueryParams=oe,this.populateURLFlags()}setPlatform(e,t){null!=this.platform&&(le().getBool("IS_TEST")||le().getBool("PROD")||console.warn(`Platform ${this.platformName} has already been set. Overwriting the platform with ${t}.`)),this.platformName=e,this.platform=t}registerFlag(e,t,n){if(this.flagRegistry[e]={evaluationFn:t,setHook:n},null!=this.urlFlags[e]){const t=this.urlFlags[e];le().getBool("IS_TEST")||le().getBool("PROD")||console.warn(`Setting feature override from URL ${e}: ${t}.`),this.set(e,t)}}async getAsync(e){return e in this.flags||(this.flags[e]=await this.evaluateFlag(e)),this.flags[e]}get(e){if(e in this.flags)return this.flags[e];const t=this.evaluateFlag(e);if(re(t))throw new Error(`Flag ${e} cannot be synchronously evaluated. Please use getAsync() instead.`);return this.flags[e]=t,this.flags[e]}getNumber(e){return this.get(e)}getBool(e){return this.get(e)}getFlags(){return this.flags}get features(){return this.flags}set(e,t){if(null==this.flagRegistry[e])throw new Error(`Cannot set flag ${e} as it has not been registered.`);this.flags[e]=t,null!=this.flagRegistry[e].setHook&&this.flagRegistry[e].setHook(t)}evaluateFlag(e){if(null==this.flagRegistry[e])throw new Error(`Cannot evaluate flag '${e}': no evaluation function found.`);return this.flagRegistry[e].evaluationFn()}setFlags(e){this.flags=Object.assign({},e)}reset(){this.flags={},this.urlFlags={},this.populateURLFlags()}populateURLFlags(){if(void 0===this.global||void 0===this.global.location||void 0===this.global.location.search)return;const e=this.getQueryParams(this.global.location.search);if(ae in e){e.tfjsflags.split(",").forEach((e=>{const[t,n]=e.split(":");this.urlFlags[t]=function(e,t){if("true"===(t=t.toLowerCase())||"false"===t)return"true"===t;if(""+ +t===t)return+t;throw new Error(`Could not parse value flag value ${t} for flag ${e}.`)}(t,n)}))}}}function oe(e){const t={};return e.replace(/[?&]([^=?&]+)(?:=([^&]*))?/g,((e,...n)=>(function(e,t,n){e[decodeURIComponent(t)]=decodeURIComponent(n||"")}(t,n[0],n[1]),n.join("=")))),t}function le(){return ue}let ue=null;var ce,he,pe={},de=pe={};function fe(){throw new Error("setTimeout has not been defined")}function me(){throw new Error("clearTimeout has not been defined")}function ge(e){if(ce===setTimeout)return setTimeout(e,0);if((ce===fe||!ce)&&setTimeout)return ce=setTimeout,setTimeout(e,0);try{return ce(e,0)}catch(t){try{return ce.call(null,e,0)}catch(t){return ce.call(this,e,0)}}}!function(){try{ce="function"==typeof setTimeout?setTimeout:fe}catch(e){ce=fe}try{he="function"==typeof clearTimeout?clearTimeout:me}catch(e){he=me}}();var ye,be=[],xe=!1,we=-1;function ve(){xe&&ye&&(xe=!1,ye.length?be=ye.concat(be):we=-1,be.length&&ke())}function ke(){if(!xe){var e=ge(ve);xe=!0;for(var t=be.length;t;){for(ye=be,be=[];++we<t;)ye&&ye[we].run();we=-1,t=be.length}ye=null,xe=!1,function(e){if(he===clearTimeout)return clearTimeout(e);if((he===me||!he)&&clearTimeout)return he=clearTimeout,clearTimeout(e);try{he(e)}catch(t){try{return he.call(null,e)}catch(t){return he.call(this,e)}}}(e)}}function Ie(e,t){this.fun=e,this.array=t}function Se(){}
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
let Ne;function Te(){if(null==Ne){let t;if("undefined"!=typeof window)t=window;else if(void 0!==e)t=e;else if(void 0!==pe)t=pe;else{if("undefined"==typeof self)throw new Error("Could not find a global object");t=self}Ne=t}return Ne}function Ce(e,t){const n=function(){const e=Te();return null==e._tfGlobals&&(e._tfGlobals=new Map),e._tfGlobals}();if(n.has(e))return n.get(e);{const s=t();return n.set(e,s),n.get(e)}}de.nextTick=function(e){var t=new Array(arguments.length-1);if(arguments.length>1)for(var n=1;n<arguments.length;n++)t[n-1]=arguments[n];be.push(new Ie(e,t)),1!==be.length||xe||ge(ke)},Ie.prototype.run=function(){this.fun.apply(null,this.array)},de.title="browser",de.browser=!0,de.env={},de.argv=[],de.version="",de.versions={},de.on=Se,de.addListener=Se,de.once=Se,de.off=Se,de.removeListener=Se,de.removeAllListeners=Se,de.emit=Se,de.prependListener=Se,de.prependOnceListener=Se,de.listeners=function(e){return[]},de.binding=function(e){throw new Error("process.binding is not supported")},de.cwd=function(){return"/"},de.chdir=function(e){throw new Error("process.chdir is not supported")},de.umask=function(){return 0};const $e="Abs",Ee="Acos",Ae="Acosh",Re="Add",Fe="AddN",De="All",_e="Any",Oe="ArgMax",Me="ArgMin",Le="Asin",ze="Asinh",Be="Atan",Pe="Atanh",We="Atan2",Ue="AvgPool",Ve="AvgPoolGrad",Ge="AvgPool3D",He="AvgPool3DGrad",je="BatchMatMul",qe="BatchToSpaceND",Ke="Bincount",Xe="BroadcastArgs",Ye="Cast",Ze="Ceil",Je="ClipByValue",Qe="Complex",et="ComplexAbs",tt="Concat",nt="Conv2D",st="Conv2DBackpropFilter",rt="Conv2DBackpropInput",at="Conv3D",it="Conv3DBackpropFilterV2",ot="Conv3DBackpropInputV2",lt="Cos",ut="Cosh",ct="Cumsum",ht="CropAndResize",pt="DenseBincount",dt="DepthToSpace",ft="DepthwiseConv2dNative",mt="DepthwiseConv2dNativeBackpropFilter",gt="DepthwiseConv2dNativeBackpropInput",yt="Diag",bt="Dilation2D",xt="Dilation2DBackpropInput",wt="Dilation2DBackpropFilter",vt="RealDiv",kt="Einsum",It="Elu",St="EluGrad",Nt="Erf",Tt="Equal",Ct="Exp",$t="ExpandDims",Et="Expm1",At="FFT",Rt="Fill",Ft="FlipLeftRight",Dt="Floor",_t="FloorDiv",Ot="FusedBatchNorm",Mt="GatherV2",Lt="GatherNd",zt="Greater",Bt="GreaterEqual",Pt="Identity",Wt="IFFT",Ut="Imag",Vt="IsFinite",Gt="IsInf",Ht="IsNan",jt="LeakyRelu",qt="Less",Kt="LessEqual",Xt="LinSpace",Yt="Log",Zt="Log1p",Jt="LogicalAnd",Qt="LogicalNot",en="LogicalOr",tn="LRN",nn="LRNGrad",sn="Max",rn="Maximum",an="MaxPool",on="MaxPoolGrad",ln="MaxPool3D",un="MaxPool3DGrad",cn="MaxPoolWithArgmax",hn="Mean",pn="Min",dn="Minimum",fn="MirrorPad",mn="Mod",gn="Multinomial",yn="Multiply",bn="Neg",xn="NotEqual",wn="NonMaxSuppressionV3",vn="NonMaxSuppressionV4",kn="NonMaxSuppressionV5",In="OnesLike",Sn="OneHot",Nn="Pack",Tn="PadV2",Cn="Pow",$n="Prelu",En="Prod",An="Range",Rn="Real",Fn="Reciprocal",Dn="Relu",_n="Reshape",On="ResizeNearestNeighbor",Mn="ResizeNearestNeighborGrad",Ln="ResizeBilinear",zn="ResizeBilinearGrad",Bn="Relu6",Pn="Reverse",Wn="Round",Un="Rsqrt",Vn="ScatterNd",Gn="Select",Hn="Selu",jn="Slice",qn="Sin",Kn="Sinh",Xn="Sign",Yn="Sigmoid",Zn="Softplus",Jn="Sqrt",Qn="Sum",es="SpaceToBatchND",ts="SplitV",ns="Softmax",ss="SparseFillEmptyRows",rs="SparseReshape",as="SparseSegmentMean",is="SparseSegmentSum",os="SparseToDense",ls="SquaredDifference",us="Square",cs="StridedSlice",hs="StringNGrams",ps="StringSplit",ds="StringToHashBucketFast",fs="Sub",ms="Tan",gs="Tanh",ys="Tile",bs="TopK",xs="Transform",ws="Transpose",vs="Unique",ks="Unpack",Is="UnsortedSegmentSum",Ss="ZerosLike",Ns="Step",Ts="FromPixels",Cs="RotateWithOffset",$s="_FusedMatMul",Es="FusedConv2D",As="FusedDepthwiseConv2D";var Rs={};function Fs(...e){le().getBool("IS_TEST")||le().getBool("PROD")||console.warn(...e)}function Ds(...e){le().getBool("IS_TEST")||le().getBool("PROD")||console.log(...e)}t(Rs,"warn",(()=>Fs)),t(Rs,"log",(()=>Ds));const _s=Ce("kernelRegistry",(()=>new Map)),Os=Ce("gradRegistry",(()=>new Map));function Ms(e,t){const n=Ws(e,t);return _s.get(n)}function Ls(e){return Os.get(e)}function zs(e){const t=_s.entries(),n=[];for(;;){const{done:s,value:r}=t.next();if(s)break;const[a,i]=r,[o]=a.split("_");o===e&&n.push(i)}return n}function Bs(e){const{kernelName:t,backendName:n}=e,s=Ws(t,n);_s.has(s)&&Fs(`The kernel '${t}' for backend '${n}' is already registered`),_s.set(s,e)}function Ps(e){const{kernelName:t}=e;Os.has(t)&&le().getBool("DEBUG")&&Fs(`Overriding the gradient for '${t}'`),Os.set(t,e)}function Ws(e,t){return`${t}_${e}`}var Us={};t(Us,"createScalarValue",(()=>$r)),t(Us,"encodeString",(()=>Fr)),t(Us,"toTypedArray",(()=>Er)),t(Us,"now",(()=>Ar)),t(Us,"fetch",(()=>Rr)),t(Us,"decodeString",(()=>Dr));var Vs={};t(Vs,"hexToLong",(()=>gr)),t(Vs,"fingerPrint64",(()=>Cr));var Gs;Gs=js;var Hs=null;try{Hs=new WebAssembly.Instance(new WebAssembly.Module(new Uint8Array([0,97,115,109,1,0,0,0,1,13,2,96,0,1,127,96,4,127,127,127,127,1,127,3,7,6,0,1,1,1,1,1,6,6,1,127,1,65,0,11,7,50,6,3,109,117,108,0,1,5,100,105,118,95,115,0,2,5,100,105,118,95,117,0,3,5,114,101,109,95,115,0,4,5,114,101,109,95,117,0,5,8,103,101,116,95,104,105,103,104,0,0,10,191,1,6,4,0,35,0,11,36,1,1,126,32,0,173,32,1,173,66,32,134,132,32,2,173,32,3,173,66,32,134,132,126,34,4,66,32,135,167,36,0,32,4,167,11,36,1,1,126,32,0,173,32,1,173,66,32,134,132,32,2,173,32,3,173,66,32,134,132,127,34,4,66,32,135,167,36,0,32,4,167,11,36,1,1,126,32,0,173,32,1,173,66,32,134,132,32,2,173,32,3,173,66,32,134,132,128,34,4,66,32,135,167,36,0,32,4,167,11,36,1,1,126,32,0,173,32,1,173,66,32,134,132,32,2,173,32,3,173,66,32,134,132,129,34,4,66,32,135,167,36,0,32,4,167,11,36,1,1,126,32,0,173,32,1,173,66,32,134,132,32,2,173,32,3,173,66,32,134,132,130,34,4,66,32,135,167,36,0,32,4,167,11])),{}).exports}catch(e){}function js(e,t,n){this.low=0|e,this.high=0|t,this.unsigned=!!n}function qs(e){return!0===(e&&e.__isLong__)}js.prototype.__isLong__,Object.defineProperty(js.prototype,"__isLong__",{value:!0}),js.isLong=qs;var Ks={},Xs={};function Ys(e,t){var n,s,r;return t?(r=0<=(e>>>=0)&&e<256)&&(s=Xs[e])?s:(n=Js(e,(0|e)<0?-1:0,!0),r&&(Xs[e]=n),n):(r=-128<=(e|=0)&&e<128)&&(s=Ks[e])?s:(n=Js(e,e<0?-1:0,!1),r&&(Ks[e]=n),n)}function Zs(e,t){if(isNaN(e))return t?or:ir;if(t){if(e<0)return or;if(e>=sr)return pr}else{if(e<=-rr)return dr;if(e+1>=rr)return hr}return e<0?Zs(-e,t).neg():Js(e%nr|0,e/nr|0,t)}function Js(e,t,n){return new js(e,t,n)}js.fromInt=Ys,js.fromNumber=Zs,js.fromBits=Js;var Qs=Math.pow;function er(e,t,n){if(0===e.length)throw Error("empty string");if("NaN"===e||"Infinity"===e||"+Infinity"===e||"-Infinity"===e)return ir;if("number"==typeof t?(n=t,t=!1):t=!!t,(n=n||10)<2||36<n)throw RangeError("radix");var s;if((s=e.indexOf("-"))>0)throw Error("interior hyphen");if(0===s)return er(e.substring(1),t,n).neg();for(var r=Zs(Qs(n,8)),a=ir,i=0;i<e.length;i+=8){var o=Math.min(8,e.length-i),l=parseInt(e.substring(i,i+o),n);if(o<8){var u=Zs(Qs(n,o));a=a.mul(u).add(Zs(l))}else a=(a=a.mul(r)).add(Zs(l))}return a.unsigned=t,a}function tr(e,t){return"number"==typeof e?Zs(e,t):"string"==typeof e?er(e,t):Js(e.low,e.high,"boolean"==typeof t?t:e.unsigned)}js.fromString=er,js.fromValue=tr;var nr=4294967296,sr=nr*nr,rr=sr/2,ar=Ys(16777216),ir=Ys(0);js.ZERO=ir;var or=Ys(0,!0);js.UZERO=or;var lr=Ys(1);js.ONE=lr;var ur=Ys(1,!0);js.UONE=ur;var cr=Ys(-1);js.NEG_ONE=cr;var hr=Js(-1,2147483647,!1);js.MAX_VALUE=hr;var pr=Js(-1,-1,!0);js.MAX_UNSIGNED_VALUE=pr;var dr=Js(0,-2147483648,!1);js.MIN_VALUE=dr;var fr=js.prototype;fr.toInt=function(){return this.unsigned?this.low>>>0:this.low},fr.toNumber=function(){return this.unsigned?(this.high>>>0)*nr+(this.low>>>0):this.high*nr+(this.low>>>0)},fr.toString=function(e){if((e=e||10)<2||36<e)throw RangeError("radix");if(this.isZero())return"0";if(this.isNegative()){if(this.eq(dr)){var t=Zs(e),n=this.div(t),s=n.mul(t).sub(this);return n.toString(e)+s.toInt().toString(e)}return"-"+this.neg().toString(e)}for(var r=Zs(Qs(e,6),this.unsigned),a=this,i="";;){var o=a.div(r),l=(a.sub(o.mul(r)).toInt()>>>0).toString(e);if((a=o).isZero())return l+i;for(;l.length<6;)l="0"+l;i=""+l+i}},fr.getHighBits=function(){return this.high},fr.getHighBitsUnsigned=function(){return this.high>>>0},fr.getLowBits=function(){return this.low},fr.getLowBitsUnsigned=function(){return this.low>>>0},fr.getNumBitsAbs=function(){if(this.isNegative())return this.eq(dr)?64:this.neg().getNumBitsAbs();for(var e=0!=this.high?this.high:this.low,t=31;t>0&&0==(e&1<<t);t--);return 0!=this.high?t+33:t+1},fr.isZero=function(){return 0===this.high&&0===this.low},fr.eqz=fr.isZero,fr.isNegative=function(){return!this.unsigned&&this.high<0},fr.isPositive=function(){return this.unsigned||this.high>=0},fr.isOdd=function(){return 1==(1&this.low)},fr.isEven=function(){return 0==(1&this.low)},fr.equals=function(e){return qs(e)||(e=tr(e)),(this.unsigned===e.unsigned||this.high>>>31!=1||e.high>>>31!=1)&&(this.high===e.high&&this.low===e.low)},fr.eq=fr.equals,fr.notEquals=function(e){return!this.eq(e)},fr.neq=fr.notEquals,fr.ne=fr.notEquals,fr.lessThan=function(e){return this.comp(e)<0},fr.lt=fr.lessThan,fr.lessThanOrEqual=function(e){return this.comp(e)<=0},fr.lte=fr.lessThanOrEqual,fr.le=fr.lessThanOrEqual,fr.greaterThan=function(e){return this.comp(e)>0},fr.gt=fr.greaterThan,fr.greaterThanOrEqual=function(e){return this.comp(e)>=0},fr.gte=fr.greaterThanOrEqual,fr.ge=fr.greaterThanOrEqual,fr.compare=function(e){if(qs(e)||(e=tr(e)),this.eq(e))return 0;var t=this.isNegative(),n=e.isNegative();return t&&!n?-1:!t&&n?1:this.unsigned?e.high>>>0>this.high>>>0||e.high===this.high&&e.low>>>0>this.low>>>0?-1:1:this.sub(e).isNegative()?-1:1},fr.comp=fr.compare,fr.negate=function(){return!this.unsigned&&this.eq(dr)?dr:this.not().add(lr)},fr.neg=fr.negate,fr.add=function(e){qs(e)||(e=tr(e));var t=this.high>>>16,n=65535&this.high,s=this.low>>>16,r=65535&this.low,a=e.high>>>16,i=65535&e.high,o=e.low>>>16,l=0,u=0,c=0,h=0;return c+=(h+=r+(65535&e.low))>>>16,u+=(c+=s+o)>>>16,l+=(u+=n+i)>>>16,l+=t+a,Js((c&=65535)<<16|(h&=65535),(l&=65535)<<16|(u&=65535),this.unsigned)},fr.subtract=function(e){return qs(e)||(e=tr(e)),this.add(e.neg())},fr.sub=fr.subtract,fr.multiply=function(e){if(this.isZero())return ir;if(qs(e)||(e=tr(e)),Hs)return Js(Hs.mul(this.low,this.high,e.low,e.high),Hs.get_high(),this.unsigned);if(e.isZero())return ir;if(this.eq(dr))return e.isOdd()?dr:ir;if(e.eq(dr))return this.isOdd()?dr:ir;if(this.isNegative())return e.isNegative()?this.neg().mul(e.neg()):this.neg().mul(e).neg();if(e.isNegative())return this.mul(e.neg()).neg();if(this.lt(ar)&&e.lt(ar))return Zs(this.toNumber()*e.toNumber(),this.unsigned);var t=this.high>>>16,n=65535&this.high,s=this.low>>>16,r=65535&this.low,a=e.high>>>16,i=65535&e.high,o=e.low>>>16,l=65535&e.low,u=0,c=0,h=0,p=0;return h+=(p+=r*l)>>>16,c+=(h+=s*l)>>>16,h&=65535,c+=(h+=r*o)>>>16,u+=(c+=n*l)>>>16,c&=65535,u+=(c+=s*o)>>>16,c&=65535,u+=(c+=r*i)>>>16,u+=t*l+n*o+s*i+r*a,Js((h&=65535)<<16|(p&=65535),(u&=65535)<<16|(c&=65535),this.unsigned)},fr.mul=fr.multiply,fr.divide=function(e){if(qs(e)||(e=tr(e)),e.isZero())throw Error("division by zero");var t,n,s;if(Hs)return this.unsigned||-2147483648!==this.high||-1!==e.low||-1!==e.high?Js((this.unsigned?Hs.div_u:Hs.div_s)(this.low,this.high,e.low,e.high),Hs.get_high(),this.unsigned):this;if(this.isZero())return this.unsigned?or:ir;if(this.unsigned){if(e.unsigned||(e=e.toUnsigned()),e.gt(this))return or;if(e.gt(this.shru(1)))return ur;s=or}else{if(this.eq(dr))return e.eq(lr)||e.eq(cr)?dr:e.eq(dr)?lr:(t=this.shr(1).div(e).shl(1)).eq(ir)?e.isNegative()?lr:cr:(n=this.sub(e.mul(t)),s=t.add(n.div(e)));if(e.eq(dr))return this.unsigned?or:ir;if(this.isNegative())return e.isNegative()?this.neg().div(e.neg()):this.neg().div(e).neg();if(e.isNegative())return this.div(e.neg()).neg();s=ir}for(n=this;n.gte(e);){t=Math.max(1,Math.floor(n.toNumber()/e.toNumber()));for(var r=Math.ceil(Math.log(t)/Math.LN2),a=r<=48?1:Qs(2,r-48),i=Zs(t),o=i.mul(e);o.isNegative()||o.gt(n);)o=(i=Zs(t-=a,this.unsigned)).mul(e);i.isZero()&&(i=lr),s=s.add(i),n=n.sub(o)}return s},fr.div=fr.divide,fr.modulo=function(e){return qs(e)||(e=tr(e)),Hs?Js((this.unsigned?Hs.rem_u:Hs.rem_s)(this.low,this.high,e.low,e.high),Hs.get_high(),this.unsigned):this.sub(this.div(e).mul(e))},fr.mod=fr.modulo,fr.rem=fr.modulo,fr.not=function(){return Js(~this.low,~this.high,this.unsigned)},fr.and=function(e){return qs(e)||(e=tr(e)),Js(this.low&e.low,this.high&e.high,this.unsigned)},fr.or=function(e){return qs(e)||(e=tr(e)),Js(this.low|e.low,this.high|e.high,this.unsigned)},fr.xor=function(e){return qs(e)||(e=tr(e)),Js(this.low^e.low,this.high^e.high,this.unsigned)},fr.shiftLeft=function(e){return qs(e)&&(e=e.toInt()),0==(e&=63)?this:e<32?Js(this.low<<e,this.high<<e|this.low>>>32-e,this.unsigned):Js(0,this.low<<e-32,this.unsigned)},fr.shl=fr.shiftLeft,fr.shiftRight=function(e){return qs(e)&&(e=e.toInt()),0==(e&=63)?this:e<32?Js(this.low>>>e|this.high<<32-e,this.high>>e,this.unsigned):Js(this.high>>e-32,this.high>=0?0:-1,this.unsigned)},fr.shr=fr.shiftRight,fr.shiftRightUnsigned=function(e){if(qs(e)&&(e=e.toInt()),0===(e&=63))return this;var t=this.high;return e<32?Js(this.low>>>e|t<<32-e,t>>>e,this.unsigned):Js(32===e?t:t>>>e-32,0,this.unsigned)},fr.shru=fr.shiftRightUnsigned,fr.shr_u=fr.shiftRightUnsigned,fr.toSigned=function(){return this.unsigned?Js(this.low,this.high,!1):this},fr.toUnsigned=function(){return this.unsigned?this:Js(this.low,this.high,!0)},fr.toBytes=function(e){return e?this.toBytesLE():this.toBytesBE()},fr.toBytesLE=function(){var e=this.high,t=this.low;return[255&t,t>>>8&255,t>>>16&255,t>>>24,255&e,e>>>8&255,e>>>16&255,e>>>24]},fr.toBytesBE=function(){var e=this.high,t=this.low;return[e>>>24,e>>>16&255,e>>>8&255,255&e,t>>>24,t>>>16&255,t>>>8&255,255&t]},js.fromBytes=function(e,t,n){return n?js.fromBytesLE(e,t):js.fromBytesBE(e,t)},js.fromBytesLE=function(e,t){return new js(e[0]|e[1]<<8|e[2]<<16|e[3]<<24,e[4]|e[5]<<8|e[6]<<16|e[7]<<24,t)},js.fromBytesBE=function(e,t){return new js(e[4]<<24|e[5]<<16|e[6]<<8|e[7],e[0]<<24|e[1]<<16|e[2]<<8|e[3],t)};const mr=Gs.default||Gs;function gr(e){return mr.fromString(e,!0,16)}const yr=gr("c3a5c85c97cb3127"),br=gr("b492b66fbe98f273"),xr=gr("9ae16a3b2f90404f");function wr(e){return e.xor(e.shru(47))}function vr(e,t,n){const s=e.slice(t,t+n);return mr.fromBytes(Array.from(s),!0,!0)}function kr(e,t){return vr(e,t,8)}function Ir(e,t){return vr(e,t,4)}function Sr(e,t){return 0===t?e:e.shru(t).or(e.shl(64-t))}function Nr(e,t,n=gr("9ddfea08eb382d69")){let s=e.xor(t).mul(n);s=s.xor(s.shru(47));let r=t.xor(s).mul(n);return r=r.xor(r.shru(47)),r=r.mul(n),r}function Tr(e,t,n,s){return function(e,t,n,s,r,a){r=r.add(e),a=Sr(a.add(r).add(s),21);const i=r;return r=(r=r.add(t)).add(n),a=a.add(Sr(r,44)),[r.add(s),a.add(i)]}(kr(e,t),kr(e,t+8),kr(e,t+16),kr(e,t+24),n,s)}function Cr(e,t=e.length){const n=mr.fromNumber(81,!0);if(t<=32)return t<=16?function(e,t=e.length){if(t>=8){const n=xr.add(2*t),s=kr(e,0).add(xr),r=kr(e,t-8);return Nr(Sr(r,37).mul(n).add(s),Sr(s,25).add(r).mul(n),n)}if(t>=4){const n=xr.add(2*t);return Nr(Ir(e,0).shl(3).add(t),Ir(e,t-4),n)}if(t>0){const n=e[0]+(e[t>>1]<<8),s=t+(e[t-1]<<2);return wr(xr.mul(n).xor(yr.mul(s))).mul(xr)}return xr}(e,t):function(e,t=e.length){const n=xr.add(2*t),s=kr(e,0).mul(br),r=kr(e,8),a=kr(e,t-8).mul(n),i=kr(e,t-16).mul(xr);return Nr(Sr(s.add(r),43).add(Sr(a,30)).add(i),s.add(Sr(r.add(xr),18)).add(a),n)}(e,t);if(t<=64)return function(e,t=e.length){const n=xr.add(2*t),s=kr(e,0).mul(xr),r=kr(e,8),a=kr(e,t-8).mul(n),i=kr(e,t-16).mul(xr),o=Sr(s.add(r),43).add(Sr(a,30)).add(i),l=Nr(o,s.add(Sr(r.add(xr),18)).add(a),n),u=kr(e,16).mul(n),c=kr(e,24),h=o.add(kr(e,t-32)).mul(n),p=l.add(kr(e,t-24)).mul(n);return Nr(Sr(u.add(c),43).add(Sr(h,30)).add(p),u.add(Sr(c.add(s),18)).add(h),n)}(e,t);let s=n,r=n.mul(br).add(113),a=wr(r.mul(xr).add(113)).mul(xr),i=[mr.UZERO,mr.UZERO],o=[mr.UZERO,mr.UZERO];s=s.mul(xr).add(kr(e,0));let l=0;const u=64*(t-1>>6),c=u+(t-1&63)-63;do{s=Sr(s.add(r).add(i[0]).add(kr(e,l+8)),37).mul(br),r=Sr(r.add(i[1]).add(kr(e,l+48)),42).mul(br),s=s.xor(o[1]),r=r.add(i[0]).add(kr(e,l+40)),a=Sr(a.add(o[0]),33).mul(br),i=Tr(e,l,i[1].mul(br),s.add(o[0])),o=Tr(e,l+32,a.add(o[1]),r.add(kr(e,l+16))),[a,s]=[s,a],l+=64}while(l!==u);const h=br.add(a.and(255).shl(1));return l=c,o[0]=o[0].add(t-1&63),i[0]=i[0].add(o[0]),o[0]=o[0].add(i[0]),s=Sr(s.add(r).add(i[0]).add(kr(e,l+8)),37).mul(h),r=Sr(r.add(i[1]).add(kr(e,l+48)),42).mul(h),s=s.xor(o[1].mul(9)),r=r.add(i[0].mul(9).add(kr(e,l+40))),a=Sr(a.add(o[0]),33).mul(h),i=Tr(e,l,i[1].mul(h),s.add(o[0])),o=Tr(e,l+32,a.add(o[1]),r.add(kr(e,l+16))),[a,s]=[s,a],Nr(Nr(i[0],o[0],h).add(wr(r).mul(yr)).add(a),Nr(i[1],o[1],h).add(s),h)}function $r(e,t){return"string"===t?Fr(e):Er([e],t)}function Er(e,t){if("string"===t)throw new Error("Cannot convert a string[] to a TypedArray");if(Array.isArray(e)&&(e=k(e)),le().getBool("DEBUG")&&L(e,t),function(e,t){return e instanceof Float32Array&&"float32"===t||e instanceof Int32Array&&"int32"===t||e instanceof Uint8Array&&"bool"===t}(e,t))return e;if(null==t||"float32"===t||"complex64"===t)return new Float32Array(e);if("int32"===t)return new Int32Array(e);if("bool"===t){const t=new Uint8Array(e.length);for(let n=0;n<t.length;++n)0!==Math.round(e[n])&&(t[n]=1);return t}throw new Error(`Unknown data type ${t}`)}function Ar(){return le().platform.now()}function Rr(e,t){return le().platform.fetch(e,t)}function Fr(e,t="utf-8"){return t=t||"utf-8",le().platform.encode(e,t)}function Dr(e,t="utf-8"){return t=t||"utf-8",le().platform.decode(e,t)}n(Us,c),n(Us,Vs);class _r{constructor(e,t){this.backendTimer=e,this.logger=t,null==t&&(this.logger=new Mr)}profileKernel(e,t,n){let s;const r=()=>{s=n()};let a;const i=Ar();if(this.backendTimer.timerAvailable())a=this.backendTimer.time(r);else{r();for(const e of s)e.dataSync();a=Promise.resolve({kernelMs:Ar()-i})}if(le().getBool("CHECK_COMPUTATION_FOR_ERRORS"))for(let t=0;t<s.length;t++){const n=s[t];n.data().then((t=>{Or(t,n.dtype,e)}))}return{kernelName:e,outputs:s,inputs:t,timeMs:a.then((e=>e.kernelMs)),extraInfo:a.then((e=>null!=e.getExtraProfileInfo?e.getExtraProfileInfo():""))}}logKernelProfile(e){const{kernelName:t,outputs:n,timeMs:s,inputs:r,extraInfo:a}=e;n.forEach((e=>{Promise.all([e.data(),s,a]).then((n=>{this.logger.logKernelProfile(t,e,n[0],n[1],r,n[2])}))}))}}function Or(e,t,n){if("float32"!==t)return!1;for(let t=0;t<e.length;t++){const s=e[t];if(isNaN(s)||!isFinite(s))return console.warn(`Found ${s} in the result of '${n}'`),!0}return!1}class Mr{logKernelProfile(e,t,n,s,r,a){const i="number"==typeof s?A(`${s}ms`,9):s.error,o=A(e,25),l=t.rank,u=t.size,c=A(t.shape.toString(),14);let h="";for(const e in r){const n=r[e];if(null!=n){const s=n.shape||t.shape,r=s.length;h+=`${e}: ${r}D ${r>0?s:""} `}}console.log(`%c${o}\t%c${i}\t%c${l}D ${c}\t%c${u}\t%c${h}\t%c${a}`,"font-weight:bold","color:red","color:blue","color: orange","color: green","color: steelblue")}}function Lr(e,t,n,s){const r=X(t),a=function(e,t,n,s){const r=I(t),a=s[s.length-1],i=new Array(a).fill(0),o=t.length,l="complex64"===n?Wr(e):e;if(o>1)for(let e=0;e<r/a;e++){const t=e*a;for(let e=0;e<a;e++)i[e]=Math.max(i[e],zr(l[t+e],0,n).length)}return i}(e,t,n,r),i=t.length,o=Pr(e,t,n,r,a),l=["Tensor"];return s&&(l.push(`  dtype: ${n}`),l.push(`  rank: ${i}`),l.push(`  shape: [${t}]`),l.push("  values:")),l.push(o.map((e=>"    "+e)).join("\n")),l.join("\n")}function zr(e,t,n){let s;return s=Array.isArray(e)?`${parseFloat(e[0].toFixed(7))} + ${parseFloat(e[1].toFixed(7))}j`:V(e)?`'${e}'`:"bool"===n?Br(e):parseFloat(e.toFixed(7)).toString(),A(s,t)}function Br(e){return 0===e?"false":"true"}function Pr(e,t,n,s,r,a=!0){const i="complex64"===n?2:1,o=t[0],l=t.length;if(0===l){if("complex64"===n){return[zr(Wr(e)[0],0,n)]}return"bool"===n?[Br(e[0])]:[e[0].toString()]}if(1===l){if(o>20){const t=3*i;let s=Array.from(e.slice(0,t)),a=Array.from(e.slice((o-3)*i,o*i));return"complex64"===n&&(s=Wr(s),a=Wr(a)),["["+s.map(((e,t)=>zr(e,r[t],n))).join(", ")+", ..., "+a.map(((e,t)=>zr(e,r[o-3+t],n))).join(", ")+"]"]}return["["+("complex64"===n?Wr(e):Array.from(e)).map(((e,t)=>zr(e,r[t],n))).join(", ")+"]"]}const u=t.slice(1),c=s.slice(1),h=s[0]*i,p=[];if(o>20){for(let t=0;t<3;t++){const s=t*h,a=s+h;p.push(...Pr(e.slice(s,a),u,n,c,r,!1))}p.push("...");for(let t=o-3;t<o;t++){const s=t*h,a=s+h;p.push(...Pr(e.slice(s,a),u,n,c,r,t===o-1))}}else for(let t=0;t<o;t++){const s=t*h,a=s+h;p.push(...Pr(e.slice(s,a),u,n,c,r,t===o-1))}const d=2===l?",":"";p[0]="["+p[0]+d;for(let e=1;e<p.length-1;e++)p[e]=" "+p[e]+d;let f=",\n";for(let e=2;e<l;e++)f+="\n";return p[p.length-1]=" "+p[p.length-1]+"]"+(a?"":f),p}function Wr(e){const t=[];for(let n=0;n<e.length;n+=2)t.push([e[n],e[n+1]]);return t}class Ur{constructor(e,t,n){if(this.dtype=t,this.shape=e.slice(),this.size=I(e),null!=n){const e=n.length;x(e===this.size,(()=>`Length of values '${e}' does not match the size inferred by the shape '${this.size}'.`))}if("complex64"===t)throw new Error("complex64 dtype TensorBuffers are not supported. Please create a TensorBuffer for the real and imaginary parts separately and call tf.complex(real, imag).");this.values=n||M(t,this.size),this.strides=X(e)}set(e,...t){0===t.length&&(t=[0]),x(t.length===this.rank,(()=>`The number of provided coordinates (${t.length}) must match the rank (${this.rank})`));const n=this.locToIndex(t);this.values[n]=e}get(...e){0===e.length&&(e=[0]);let t=0;for(const n of e){if(n<0||n>=this.shape[t]){const t=`Requested out of range element at ${e}.   Buffer shape=${this.shape}`;throw new Error(t)}t++}let n=e[e.length-1];for(let t=0;t<e.length-1;++t)n+=this.strides[t]*e[t];return this.values[n]}locToIndex(e){if(0===this.rank)return 0;if(1===this.rank)return e[0];let t=e[e.length-1];for(let n=0;n<e.length-1;++n)t+=this.strides[n]*e[n];return t}indexToLoc(e){if(0===this.rank)return[];if(1===this.rank)return[e];const t=new Array(this.shape.length);for(let n=0;n<t.length-1;++n)t[n]=Math.floor(e/this.strides[n]),e-=t[n]*this.strides[n];return t[t.length-1]=e,t}get rank(){return this.shape.length}toTensor(){return Vr().makeTensor(this.values,this.shape,this.dtype)}}let Vr=null,Gr=null,Hr=null;class jr{constructor(e,t,n,s){this.kept=!1,this.isDisposedInternal=!1,this.shape=e.slice(),this.dtype=t||"float32",this.size=I(e),this.strides=X(e),this.dataId=n,this.id=s,this.rankType=this.rank<5?this.rank.toString():"higher"}get rank(){return this.shape.length}async buffer(){const e=await this.data();return Gr.buffer(this.shape,this.dtype,e)}bufferSync(){return Gr.buffer(this.shape,this.dtype,this.dataSync())}async array(){const e=await this.data();return Z(this.shape,e,"complex64"===this.dtype)}arraySync(){return Z(this.shape,this.dataSync(),"complex64"===this.dtype)}async data(){this.throwIfDisposed();const e=Vr().read(this.dataId);if("string"===this.dtype){const t=await e;try{return t.map((e=>Dr(e)))}catch(e){throw new Error("Failed to decode the string bytes into utf-8. To get the original bytes, call tensor.bytes().")}}return e}dataToGPU(e){return this.throwIfDisposed(),Vr().readToGPU(this.dataId,e)}dataSync(){this.throwIfDisposed();const e=Vr().readSync(this.dataId);if("string"===this.dtype)try{return e.map((e=>Dr(e)))}catch(e){throw new Error("Failed to decode the string bytes into utf-8. To get the original bytes, call tensor.bytes().")}return e}async bytes(){this.throwIfDisposed();const e=await Vr().read(this.dataId);return"string"===this.dtype?e:new Uint8Array(e.buffer)}dispose(){this.isDisposed||(Vr().disposeTensor(this),this.isDisposedInternal=!0)}get isDisposed(){return this.isDisposedInternal}throwIfDisposed(){if(this.isDisposed)throw new Error("Tensor is disposed.")}print(e=!1){return Gr.print(this,e)}clone(){return this.throwIfDisposed(),Gr.clone(this)}toString(e=!1){return Lr(this.dataSync(),this.shape,this.dtype,e)}cast(e){return this.throwIfDisposed(),Gr.cast(this,e)}variable(e=!0,t,n){return this.throwIfDisposed(),Vr().makeVariable(this,e,t,n)}}function qr(){return Ce("Tensor",(()=>jr))}Object.defineProperty(jr,Symbol.hasInstance,{value:e=>!!e&&null!=e.data&&null!=e.dataSync&&null!=e.throwIfDisposed}),qr();class Kr extends jr{constructor(e,t,n,s){super(e.shape,e.dtype,e.dataId,s),this.trainable=t,this.name=n}assign(e){if(e.dtype!==this.dtype)throw new Error(`dtype of the new value (${e.dtype}) and previous value (${this.dtype}) must match`);if(!N(e.shape,this.shape))throw new Error(`shape of the new value (${e.shape}) and previous value (${this.shape}) must match`);Vr().disposeTensor(this),this.dataId=e.dataId,Vr().incRef(this,null)}dispose(){Vr().disposeVariable(this),this.isDisposedInternal=!0}}Object.defineProperty(Kr,Symbol.hasInstance,{value:e=>e instanceof jr&&null!=e.assign&&e.assign instanceof Function});var Xr,Yr,Zr,Jr,Qr,ea,ta,na,sa,ra={};t(ra,"makeTypesMatch",(()=>la)),t(ra,"assertTypesMatch",(()=>ua)),t(ra,"isTensorInList",(()=>ca)),t(ra,"getTensorsInContainer",(()=>ha)),function(e){e.R0="R0",e.R1="R1",e.R2="R2",e.R3="R3",e.R4="R4",e.R5="R5",e.R6="R6"}(Xr||(Xr={})),(Zr=Yr||(Yr={})).float32="float32",Zr.int32="int32",Zr.bool="int32",Zr.complex64="complex64",(Qr=Jr||(Jr={})).float32="float32",Qr.int32="int32",Qr.bool="bool",Qr.complex64="complex64",(ta=ea||(ea={})).float32="float32",ta.int32="float32",ta.bool="float32",ta.complex64="complex64",(sa=na||(na={})).float32="complex64",sa.int32="complex64",sa.bool="complex64",sa.complex64="complex64";const aa={float32:ea,int32:Yr,bool:Jr,complex64:na};function ia(e,t){if("string"===e||"string"===t){if("string"===e&&"string"===t)return"string";throw new Error(`Can not upcast ${e} with ${t}`)}return aa[e][t]}function oa(e){return ia(e,"int32")}function la(e,t){if(e.dtype===t.dtype)return[e,t];const n=ia(e.dtype,t.dtype);return[e.cast(n),t.cast(n)]}function ua(e,t){x(e.dtype===t.dtype,(()=>`The dtypes of the first(${e.dtype}) and second(${t.dtype}) input must match`))}function ca(e,t){return t.some((t=>t.id===e.id))}function ha(e){const t=[];return pa(e,t,new Set),t}function pa(e,t,n){if(null==e)return;if(e instanceof jr)return void t.push(e);if(s=e,!Array.isArray(s)&&"object"!=typeof s)return;var s;const r=e;for(const e in r){const s=r[e];n.has(s)||(n.add(s),pa(s,t,n))}}function da(e){return null!=e.kernelName}class fa{constructor(){this.registeredVariables={},this.nextTapeNodeId=0,this.numBytes=0,this.numTensors=0,this.numStringTensors=0,this.numDataBuffers=0,this.gradientDepth=0,this.kernelDepth=0,this.scopeStack=[],this.numDataMovesStack=[],this.nextScopeId=0,this.tensorInfo=new WeakMap,this.profiling=!1,this.activeProfile={newBytes:0,newTensors:0,peakBytes:0,kernels:[],result:null,get kernelNames(){return Array.from(new Set(this.kernels.map((e=>e.name))))}}}dispose(){for(const e in this.registeredVariables)this.registeredVariables[e].dispose()}}class ma{constructor(e){this.ENV=e,this.registry={},this.registryFactory={},this.pendingBackendInitId=0,this.state=new fa}async ready(){if(null!=this.pendingBackendInit)return this.pendingBackendInit.then((()=>{}));if(null!=this.backendInstance)return;const e=this.getSortedBackends();for(let t=0;t<e.length;t++){const n=e[t];if(await this.initializeBackend(n).success)return void await this.setBackend(n)}throw new Error("Could not initialize any backends, all backend initializations failed.")}get backend(){if(null!=this.pendingBackendInit)throw new Error(`Backend '${this.backendName}' has not yet been initialized. Make sure to await tf.ready() or await tf.setBackend() before calling other methods`);if(null==this.backendInstance){const{name:e,asyncInit:t}=this.initializeBackendsAndReturnBest();if(t)throw new Error(`The highest priority backend '${e}' has not yet been initialized. Make sure to await tf.ready() or await tf.setBackend() before calling other methods`);this.setBackend(e)}return this.backendInstance}backendNames(){return Object.keys(this.registryFactory)}findBackend(e){if(!(e in this.registry)){if(!(e in this.registryFactory))return null;{const{asyncInit:t}=this.initializeBackend(e);if(t)return null}}return this.registry[e]}findBackendFactory(e){return e in this.registryFactory?this.registryFactory[e].factory:null}registerBackend(e,t,n=1){return e in this.registryFactory?(Fs(`${e} backend was already registered. Reusing existing backend factory.`),!1):(this.registryFactory[e]={factory:t,priority:n},!0)}async setBackend(e){if(null==this.registryFactory[e])throw new Error(`Backend name '${e}' not found in registry`);if(this.backendName=e,null==this.registry[e]){this.backendInstance=null;const{success:t,asyncInit:n}=this.initializeBackend(e);if(!(n?await t:t))return!1}return this.backendInstance=this.registry[e],this.setupRegisteredKernels(),this.profiler=new _r(this.backendInstance),!0}setupRegisteredKernels(){zs(this.backendName).forEach((e=>{null!=e.setupFunc&&e.setupFunc(this.backendInstance)}))}disposeRegisteredKernels(e){zs(e).forEach((t=>{null!=t.disposeFunc&&t.disposeFunc(this.registry[e])}))}initializeBackend(e){const t=this.registryFactory[e];if(null==t)throw new Error(`Cannot initialize backend ${e}, no registration found.`);try{const n=t.factory();if(!n||n instanceof l||"function"!=typeof n.then)return this.registry[e]=n,{success:!0,asyncInit:!1};{const t=++this.pendingBackendInitId,s=n.then((n=>!(t<this.pendingBackendInitId)&&(this.registry[e]=n,this.pendingBackendInit=null,!0))).catch((n=>(t<this.pendingBackendInitId||(this.pendingBackendInit=null,Fs(`Initialization of backend ${e} failed`),Fs(n.stack||n.message)),!1)));return this.pendingBackendInit=s,{success:s,asyncInit:!0}}}catch(t){return Fs(`Initialization of backend ${e} failed`),Fs(t.stack||t.message),{success:!1,asyncInit:!1}}}removeBackend(e){if(!(e in this.registryFactory))throw new Error(`${e} backend not found in registry`);this.backendName===e&&null!=this.pendingBackendInit&&this.pendingBackendInitId++,e in this.registry&&(this.disposeRegisteredKernels(e),this.registry[e].dispose(),delete this.registry[e]),delete this.registryFactory[e],this.backendName===e&&(this.pendingBackendInit=null,this.backendName=null,this.backendInstance=null)}getSortedBackends(){if(0===Object.keys(this.registryFactory).length)throw new Error("No backend found in registry.");return Object.keys(this.registryFactory).sort(((e,t)=>this.registryFactory[t].priority-this.registryFactory[e].priority))}initializeBackendsAndReturnBest(){const e=this.getSortedBackends();for(let t=0;t<e.length;t++){const n=e[t],{success:s,asyncInit:r}=this.initializeBackend(n);if(r||s)return{name:n,asyncInit:r}}throw new Error("Could not initialize any backends, all backend initializations failed.")}moveData(e,t){const n=this.state.tensorInfo.get(t),s=n.backend,r=this.readSync(t),a=s.refCount(t);s.disposeData(t,!0),n.backend=e,e.move(t,r,n.shape,n.dtype,a),this.shouldCheckForMemLeaks()&&this.state.numDataMovesStack[this.state.numDataMovesStack.length-1]++}tidy(e,t){let n,s=null;if(null==t){if("function"!=typeof e)throw new Error("Please provide a function to tidy()");t=e}else{if("string"!=typeof e&&!(e instanceof String))throw new Error("When calling with two arguments, the first argument to tidy() must be a string");if("function"!=typeof t)throw new Error("When calling with two arguments, the 2nd argument to tidy() must be a function");s=e}return this.scopedRun((()=>this.startScope(s)),(()=>this.endScope(n)),(()=>(n=t(),n instanceof Promise&&console.error("Cannot return a Promise inside of tidy."),n)))}scopedRun(e,t,n){e();try{const e=n();return t(),e}catch(e){throw t(),e}}nextTensorId(){return ma.nextTensorId++}nextVariableId(){return ma.nextVariableId++}clone(e){const t=ya.runKernel(Pt,{x:e}),n={x:e};return this.addTapeNode(this.state.activeScope.name,n,[t],(e=>({x:()=>{const t={x:e},n={dtype:"float32"};return ya.runKernel(Ye,t,n)}})),[],{}),t}runKernel(e,t,n){null==this.backendName&&this.backend;if(!(null!=Ms(e,this.backendName)))throw new Error(`Kernel '${e}' not registered for backend '${this.backendName}'`);return this.runKernelFunc({kernelName:e,inputs:t,attrs:n})}shouldCheckForMemLeaks(){return this.ENV.getBool("IS_TEST")}checkKernelForMemLeak(e,t,n){const s=this.backend.numDataIds();let r=0;n.forEach((e=>{r+="complex64"===e.dtype?3:1}));const a=this.state.numDataMovesStack[this.state.numDataMovesStack.length-1],i=s-t-r-a;if(i>0)throw new Error(`Backend '${this.backendName}' has an internal memory leak (${i} data ids) after running '${e}'`)}runKernelFunc(e){let t,n=[];const s=this.isTapeOn(),r=this.state.numBytes,a=this.state.numTensors;let i,o;this.shouldCheckForMemLeaks()&&this.state.numDataMovesStack.push(0),null==this.backendName&&this.backend;const l=da(e)?e.kernelName:null!=this.state.activeScope?this.state.activeScope.name:"";if(da(e)){const{kernelName:t,inputs:r,attrs:a}=e;null==this.backendName&&this.backend;const l=Ms(t,this.backendName);x(null!=l,(()=>`Cannot find registered kernel '${t}' for backend '${this.backendName}'`)),i=()=>{const e=this.backend.numDataIds();o=l.kernelFunc({inputs:r,attrs:a,backend:this.backend});const i=Array.isArray(o)?o:[o];this.shouldCheckForMemLeaks()&&this.checkKernelForMemLeak(t,e,i);const u=i.map((e=>{if(null!=e.rank)return e;const{dataId:t,shape:n,dtype:s}=e;return this.makeTensorFromDataId(t,n,s)}));if(s){const e=this.getTensorsForGradient(t,r,u);n=this.saveTensorsForBackwardMode(e)}return u}}else{const{forwardFunc:t}=e,r=e=>{s&&(n=e.map((e=>this.keep(this.clone(e)))))};i=()=>{const e=this.backend.numDataIds();o=this.tidy((()=>t(this.backend,r)));const n=Array.isArray(o)?o:[o];return this.shouldCheckForMemLeaks()&&this.checkKernelForMemLeak(l,e,n),n}}const{inputs:u,attrs:c}=e,h=da(e)?null:e.backwardsFunc;let p;return this.scopedRun((()=>this.state.kernelDepth++),(()=>this.state.kernelDepth--),(()=>{this.ENV.getBool("DEBUG")||this.state.profiling?(p=this.profiler.profileKernel(l,u,(()=>i())),this.ENV.getBool("DEBUG")&&this.profiler.logKernelProfile(p),t=p.outputs):t=i()})),s&&this.addTapeNode(l,u,t,h,n,c),this.state.profiling&&this.state.activeProfile.kernels.push({name:l,bytesAdded:this.state.numBytes-r,totalBytesSnapshot:this.state.numBytes,tensorsAdded:this.state.numTensors-a,totalTensorsSnapshot:this.state.numTensors,inputShapes:Object.keys(u).map((e=>null!=u[e]?u[e].shape:null)),outputShapes:t.map((e=>e.shape)),kernelTimeMs:p.timeMs,extraInfo:p.extraInfo}),Array.isArray(o)?t:t[0]}saveTensorsForBackwardMode(e){return e.map((e=>this.keep(this.clone(e))))}getTensorsForGradient(e,t,n){const s=Ls(e);if(null!=s){const e=s.inputsToSave||[],r=s.outputsToSave||[];let a;s.saveAllInputs?(x(Array.isArray(t),(()=>"saveAllInputs is true, expected inputs to be an array.")),a=Object.keys(t).map((e=>t[e]))):a=e.map((e=>t[e]));const i=n.filter(((e,t)=>r[t]));return a.concat(i)}return[]}makeTensor(e,t,n,s){if(null==e)throw new Error("Values passed to engine.makeTensor() are null");n=n||"float32",s=s||this.backend;let r=e;"string"===n&&V(e[0])&&(r=e.map((e=>Fr(e))));const a=s.write(r,t,n),i=new jr(t,n,a,this.nextTensorId());if(this.trackTensor(i,s),"string"===n){const e=this.state.tensorInfo.get(a),t=U(r);this.state.numBytes+=t-e.bytes,e.bytes=t}return i}makeTensorFromDataId(e,t,n,s){const r=new jr(t,n=n||"float32",e,this.nextTensorId());return this.trackTensor(r,s),r}makeVariable(e,t=!0,n,s){n=n||this.nextVariableId().toString(),null!=s&&s!==e.dtype&&(e=e.cast(s));const r=new Kr(e,t,n,this.nextTensorId());if(null!=this.state.registeredVariables[r.name])throw new Error(`Variable with name ${r.name} was already registered`);return this.state.registeredVariables[r.name]=r,this.incRef(r,this.backend),r}trackTensor(e,t){this.state.numTensors++,"string"===e.dtype&&this.state.numStringTensors++;let n=0;"complex64"!==e.dtype&&"string"!==e.dtype&&(n=e.size*W(e.dtype)),this.state.numBytes+=n,this.state.tensorInfo.has(e.dataId)||(this.state.numDataBuffers++,this.state.tensorInfo.set(e.dataId,{backend:t||this.backend,dtype:e.dtype,shape:e.shape,bytes:n})),e instanceof Kr||this.track(e)}incRef(e,t){this.trackTensor(e,t),this.backend.incRef(e.dataId)}removeDataId(e,t){this.state.tensorInfo.has(e)&&this.state.tensorInfo.get(e).backend===t&&(this.state.tensorInfo.delete(e),this.state.numDataBuffers--)}disposeTensor(e){if(!this.state.tensorInfo.has(e.dataId))return;const t=this.state.tensorInfo.get(e.dataId);if(this.state.numTensors--,"string"===e.dtype&&(this.state.numStringTensors--,this.state.numBytes-=t.bytes),"complex64"!==e.dtype&&"string"!==e.dtype){const t=e.size*W(e.dtype);this.state.numBytes-=t}t.backend.disposeData(e.dataId)&&this.removeDataId(e.dataId,t.backend)}disposeVariables(){for(const e in this.state.registeredVariables){const t=this.state.registeredVariables[e];this.disposeVariable(t)}}disposeVariable(e){this.disposeTensor(e),null!=this.state.registeredVariables[e.name]&&delete this.state.registeredVariables[e.name]}memory(){const e=this.backend.memory();return e.numTensors=this.state.numTensors,e.numDataBuffers=this.state.numDataBuffers,e.numBytes=this.state.numBytes,this.state.numStringTensors>0&&(e.unreliable=!0,null==e.reasons&&(e.reasons=[]),e.reasons.push("Memory usage by string tensors is approximate (2 bytes per character)")),e}async profile(e){this.state.profiling=!0;const t=this.state.numBytes,n=this.state.numTensors;this.state.activeProfile.kernels=[],this.state.activeProfile.result=await e(),this.state.profiling=!1,this.state.activeProfile.peakBytes=Math.max(...this.state.activeProfile.kernels.map((e=>e.totalBytesSnapshot))),this.state.activeProfile.newBytes=this.state.numBytes-t,this.state.activeProfile.newTensors=this.state.numTensors-n;for(const e of this.state.activeProfile.kernels)e.kernelTimeMs=await e.kernelTimeMs,e.extraInfo=await e.extraInfo;return this.state.activeProfile}isTapeOn(){return this.state.gradientDepth>0&&0===this.state.kernelDepth}addTapeNode(e,t,n,s,r,a){const i={id:this.state.nextTapeNodeId++,kernelName:e,inputs:t,outputs:n,saved:r},o=Ls(e);null!=o&&(s=o.gradFunc),null!=s&&(i.gradient=e=>(e=e.map(((e,t)=>{if(null==e){const e=n[t],s=Q(e.size,e.dtype);return this.makeTensor(s,e.shape,e.dtype)}return e})),s(e.length>1?e:e[0],r,a))),this.state.activeTape.push(i)}keep(e){return e.kept=!0,e}startTape(){0===this.state.gradientDepth&&(this.state.activeTape=[]),this.state.gradientDepth++}endTape(){this.state.gradientDepth--}startScope(e){const t={track:[],name:"unnamed scope",id:this.state.nextScopeId++};e&&(t.name=e),this.state.scopeStack.push(t),this.state.activeScope=t}endScope(e){const t=ha(e),n=new Set(t.map((e=>e.id)));for(let e=0;e<this.state.activeScope.track.length;e++){const t=this.state.activeScope.track[e];t.kept||n.has(t.id)||t.dispose()}const s=this.state.scopeStack.pop();this.state.activeScope=0===this.state.scopeStack.length?null:this.state.scopeStack[this.state.scopeStack.length-1],t.forEach((e=>{e.kept||e.scopeId!==s.id||this.track(e)}))}gradients(e,t,n,s=!1){if(x(t.length>0,(()=>"gradients() received an empty list of xs.")),null!=n&&"float32"!==n.dtype)throw new Error(`dy must have 'float32' dtype, but has '${n.dtype}'`);const r=this.scopedRun((()=>this.startTape()),(()=>this.endTape()),(()=>this.tidy("forward",e)));x(r instanceof jr,(()=>"The result y returned by f() must be a tensor."));const a=function(e,t,n){const s={},r={};for(let e=0;e<t.length;e++)s[t[e].id]=!0;for(let n=0;n<e.length;n++){const a=e[n],i=a.inputs;for(const e in i){const n=i[e];let o=!1;for(let e=0;e<t.length;e++)if(s[n.id]){a.outputs.forEach((e=>s[e.id]=!0)),o=!0,r[a.id]=!0;break}if(o)break}}const a={};a[n.id]=!0;const i={};for(let t=e.length-1;t>=0;t--){const n=e[t],s=n.inputs;for(let e=0;e<n.outputs.length;e++)if(a[n.outputs[e].id]){for(const e in s)a[s[e].id]=!0,i[n.id]=!0;break}}const o=[];for(let t=0;t<e.length;t++){const n=e[t];if(r[n.id]&&i[n.id]){const e={};for(const t in n.inputs){const r=n.inputs[t];s[r.id]&&(e[t]=r)}const t=Object.assign({},n);t.inputs=e,t.outputs=n.outputs,o.push(t)}}return o}(this.state.activeTape,t,r);if(!s&&0===a.length&&t.length>0)throw new Error("Cannot compute gradient of y=f(x) with respect to x. Make sure that the f you passed encloses all operations that lead from x to y.");return this.tidy("backward",(()=>{const e={};e[r.id]=null==n?function(e){const t=J(I(e),"float32");return ya.makeTensor(t,e,"float32")}(r.shape):n,function(e,t,n,s){for(let r=t.length-1;r>=0;r--){const a=t[r],i=[];if(a.outputs.forEach((t=>{const n=e[t.id];null!=n?i.push(n):i.push(null)})),null==a.gradient)throw new Error(`Cannot compute gradient: gradient function not found for ${a.kernelName}.`);const o=a.gradient(i);for(const t in a.inputs){if(!(t in o))throw new Error(`Cannot backprop through input ${t}. Available gradients found: ${Object.keys(o)}.`);const r=n((()=>o[t]()));if("float32"!==r.dtype)throw new Error(`Error in gradient for op ${a.kernelName}. The gradient of input ${t} must have 'float32' dtype, but has '${r.dtype}'`);const i=a.inputs[t];if(!N(r.shape,i.shape))throw new Error(`Error in gradient for op ${a.kernelName}. The gradient of input '${t}' has shape '${r.shape}', which does not match the shape of the input '${i.shape}'`);if(null==e[i.id])e[i.id]=r;else{const t=e[i.id];e[i.id]=s(t,r),t.dispose()}}}}(e,a,(e=>this.tidy(e)),ba);const s=t.map((t=>e[t.id]));return 0===this.state.gradientDepth&&(this.state.activeTape.forEach((e=>{for(const t of e.saved)t.dispose()})),this.state.activeTape=null),{value:r,grads:s}}))}customGrad(e){return x(q(e),(()=>"The f passed in customGrad(f) must be a function.")),(...t)=>{let n;x(t.every((e=>e instanceof jr)),(()=>"The args passed in customGrad(f)(x1, x2,...) must all be tensors"));const s={};t.forEach(((e,t)=>{s[t]=e}));return this.runKernelFunc({forwardFunc:(s,r)=>(n=e(...t,r),x(n.value instanceof jr,(()=>"The function f passed in customGrad(f) must return an object where `obj.value` is a tensor")),x(q(n.gradFunc),(()=>"The function f passed in customGrad(f) must return an object where `obj.gradFunc` is a function.")),n.value),backwardsFunc:(e,s)=>{const r=n.gradFunc(e,s),a=Array.isArray(r)?r:[r];x(a.length===t.length,(()=>"The function f passed in customGrad(f) must return an object where `obj.gradFunc` is a function that returns the same number of tensors as inputs passed to f(...).")),x(a.every((e=>e instanceof jr)),(()=>"The function f passed in customGrad(f) must return an object where `obj.gradFunc` is a function that returns a list of only tensors."));const i={};return a.forEach(((e,t)=>{i[t]=()=>e})),i},inputs:s})}}readSync(e){return this.state.tensorInfo.get(e).backend.readSync(e)}read(e){return this.state.tensorInfo.get(e).backend.read(e)}readToGPU(e,t){return this.state.tensorInfo.get(e).backend.readToGPU(e,t)}async time(e){const t=Ar(),n=await this.backend.time(e);return n.wallMs=Ar()-t,n}track(e){return null!=this.state.activeScope&&(e.scopeId=this.state.activeScope.id,this.state.activeScope.track.push(e)),e}get registeredVariables(){return this.state.registeredVariables}reset(){this.pendingBackendInitId++,this.state.dispose(),this.ENV.reset(),this.state=new fa;for(const e in this.registry)this.disposeRegisteredKernels(e),this.registry[e].dispose(),delete this.registry[e];this.backendName=null,this.backendInstance=null,this.pendingBackendInit=null}}function ga(){const e=Te();if(null==e._tfengine){const t=new ie(e);e._tfengine=new ma(t)}var t;return t=e._tfengine.ENV,ue=t,Vr=()=>e._tfengine,e._tfengine}ma.nextTensorId=0,ma.nextVariableId=0;const ya=ga();function ba(e,t){const n={a:e,b:t};return ya.runKernel(Re,n)}var xa={};let wa;function va(e){wa=e}function ka(e){if(void 0!==wa)return wa;if(e||"undefined"!=typeof navigator&&null!=navigator){if(e||(e=navigator),"ReactNative"===e.product)return!0;const t=e.userAgent||e.vendor||("undefined"!=typeof window?window.opera:"");if(!t){const t=e;return t.userAgentData&&t.userAgentData.mobile}return/(android|bb\d+|meego).+mobile|avantgo|bada\/|blackberry|blazer|compal|elaine|fennec|hiptop|iemobile|ip(hone|od)|iris|kindle|lge |maemo|midp|mmp|mobile.+firefox|netfront|opera m(ob|in)i|palm( os)?|phone|p(ixi|re)\/|plucker|pocket|psp|series(4|6)0|symbian|treo|up\.(browser|link)|vodafone|wap|windows ce|xda|xiino/i.test(t)||/1207|6310|6590|3gso|4thp|50[1-6]i|770s|802s|a wa|abac|ac(er|oo|s\-)|ai(ko|rn)|al(av|ca|co)|amoi|an(ex|ny|yw)|aptu|ar(ch|go)|as(te|us)|attw|au(di|\-m|r |s )|avan|be(ck|ll|nq)|bi(lb|rd)|bl(ac|az)|br(e|v)w|bumb|bw\-(n|u)|c55\/|capi|ccwa|cdm\-|cell|chtm|cldc|cmd\-|co(mp|nd)|craw|da(it|ll|ng)|dbte|dc\-s|devi|dica|dmob|do(c|p)o|ds(12|\-d)|el(49|ai)|em(l2|ul)|er(ic|k0)|esl8|ez([4-7]0|os|wa|ze)|fetc|fly(\-|_)|g1 u|g560|gene|gf\-5|g\-mo|go(\.w|od)|gr(ad|un)|haie|hcit|hd\-(m|p|t)|hei\-|hi(pt|ta)|hp( i|ip)|hs\-c|ht(c(\-| |_|a|g|p|s|t)|tp)|hu(aw|tc)|i\-(20|go|ma)|i230|iac( |\-|\/)|ibro|idea|ig01|ikom|im1k|inno|ipaq|iris|ja(t|v)a|jbro|jemu|jigs|kddi|keji|kgt( |\/)|klon|kpt |kwc\-|kyo(c|k)|le(no|xi)|lg( g|\/(k|l|u)|50|54|\-[a-w])|libw|lynx|m1\-w|m3ga|m50\/|ma(te|ui|xo)|mc(01|21|ca)|m\-cr|me(rc|ri)|mi(o8|oa|ts)|mmef|mo(01|02|bi|de|do|t(\-| |o|v)|zz)|mt(50|p1|v )|mwbp|mywa|n10[0-2]|n20[2-3]|n30(0|2)|n50(0|2|5)|n7(0(0|1)|10)|ne((c|m)\-|on|tf|wf|wg|wt)|nok(6|i)|nzph|o2im|op(ti|wv)|oran|owg1|p800|pan(a|d|t)|pdxg|pg(13|\-([1-8]|c))|phil|pire|pl(ay|uc)|pn\-2|po(ck|rt|se)|prox|psio|pt\-g|qa\-a|qc(07|12|21|32|60|\-[2-7]|i\-)|qtek|r380|r600|raks|rim9|ro(ve|zo)|s55\/|sa(ge|ma|mm|ms|ny|va)|sc(01|h\-|oo|p\-)|sdk\/|se(c(\-|0|1)|47|mc|nd|ri)|sgh\-|shar|sie(\-|m)|sk\-0|sl(45|id)|sm(al|ar|b3|it|t5)|so(ft|ny)|sp(01|h\-|v\-|v )|sy(01|mb)|t2(18|50)|t6(00|10|18)|ta(gt|lk)|tcl\-|tdg\-|tel(i|m)|tim\-|t\-mo|to(pl|sh)|ts(70|m\-|m3|m5)|tx\-9|up(\.b|g1|si)|utst|v400|v750|veri|vi(rg|te)|vk(40|5[0-3]|\-v)|vm40|voda|vulc|vx(52|53|60|61|70|80|81|83|85|98)|w3c(\-| )|webc|whit|wi(g |nc|nw)|wmlb|wonu|x700|yas\-|your|zeto|zte\-/i.test(t.substr(0,4))}return!1}function Ia(){return"undefined"!=typeof window&&null!=window.document||"undefined"!=typeof WorkerGlobalScope}t(xa,"mockIsMobile",(()=>va)),t(xa,"isMobile",(()=>ka)),t(xa,"isBrowser",(()=>Ia));const Sa=le();function Na(e,t){let n=e;if(P(e))return"string"===t?[]:[e.length];if(!Array.isArray(e))return[];const s=[];for(;Array.isArray(n)||P(n)&&"string"!==t;)s.push(n.length),n=n[0];return Array.isArray(e)&&le().getBool("TENSORLIKE_CHECK_SHAPE_CONSISTENCY")&&Ta(e,s,[]),s}function Ta(e,t,n){if(n=n||[],!Array.isArray(e)&&!P(e))return void x(0===t.length,(()=>`Element arr[${n.join("][")}] is a primitive, but should be an array/TypedArray of ${t[0]} elements`));x(t.length>0,(()=>`Element arr[${n.join("][")}] should be a primitive, but is an array of ${e.length} elements`)),x(e.length===t[0],(()=>`Element arr[${n.join("][")}] should have ${t[0]} elements, but has ${e.length} elements`));const s=t.slice(1);for(let t=0;t<e.length;++t)Ta(e[t],s,n.concat(t))}function Ca(e,t,n,s){if("string_or_numeric"!==e){if(null==e)throw new Error("Expected dtype cannot be null.");if("numeric"!==e&&e!==t||"numeric"===e&&"string"===t)throw new Error(`Argument '${n}' passed to '${s}' must be ${e} tensor, but got ${t} tensor`)}}function $a(e,t,n,s="numeric"){if(e instanceof jr)return Ca(s,e.dtype,t,n),e;let r=j(e);if("string"!==r&&["bool","int32","float32"].indexOf(s)>=0&&(r=s),Ca(s,r,t,n),null==e||!P(e)&&!Array.isArray(e)&&"number"!=typeof e&&"boolean"!=typeof e&&"string"!=typeof e){const s=null==e?"null":e.constructor.name;throw new Error(`Argument '${t}' passed to '${n}' must be a Tensor or TensorLike, but got '${s}'`)}const a=Na(e,r);P(e)||Array.isArray(e)||(e=[e]);const i="string"!==r?Er(e,r):k(e,[],!0);return ya.makeTensor(i,a,r)}function Ea(e,t,n,s="numeric"){if(!Array.isArray(e))throw new Error(`Argument ${t} passed to ${n} must be a \`Tensor[]\` or \`TensorLike[]\``);return e.map(((e,r)=>$a(e,`${t}[${r}]`,n,s)))}Sa.registerFlag("DEBUG",(()=>!1),(e=>{e&&console.warn("Debugging mode is ON. The output of every math call will be downloaded to CPU and checked for NaNs. This significantly impacts performance.")})),Sa.registerFlag("IS_BROWSER",(()=>Ia())),Sa.registerFlag("IS_NODE",(()=>void 0!==pe&&void 0!==pe.versions&&void 0!==pe.versions.node)),Sa.registerFlag("IS_CHROME",(()=>"undefined"!=typeof navigator&&null!=navigator&&null!=navigator.userAgent&&/Chrome/.test(navigator.userAgent)&&/Google Inc/.test(navigator.vendor))),Sa.registerFlag("PROD",(()=>!1)),Sa.registerFlag("TENSORLIKE_CHECK_SHAPE_CONSISTENCY",(()=>Sa.getBool("DEBUG"))),Sa.registerFlag("DEPRECATION_WARNINGS_ENABLED",(()=>!0)),Sa.registerFlag("IS_TEST",(()=>!1)),Sa.registerFlag("CHECK_COMPUTATION_FOR_ERRORS",(()=>!0)),Sa.registerFlag("WRAP_TO_IMAGEBITMAP",(()=>!1));function Aa(e){const t=Object.keys(e);if(1!==t.length)throw new Error(`Please provide an object with a single key (operation name) mapping to a function. Got an object with ${t.length} keys.`);let n=t[0];const s=e[n];n.endsWith("_")&&(n=n.substring(0,n.length-1)),n+="__op";const r=(...e)=>{ya.startScope(n);try{const t=s(...e);return re(t)&&console.error("Cannot return a Promise inside of tidy."),ya.endScope(t),t}catch(e){throw ya.endScope(null),e}};return Object.defineProperty(r,"name",{value:n,configurable:!0}),r}const Ra=Aa({complex_:function(e,t){const n=$a(e,"real","complex"),s=$a(t,"imag","complex");w(n.shape,s.shape,`real and imag shapes, ${n.shape} and ${s.shape}, must match in call to tf.complex().`);const r={real:n,imag:s};return ya.runKernel(Qe,r)}});function Fa(e,t,n,s){if(null==s&&(s=j(e)),"complex64"===s)throw new Error("Cannot construct a complex64 tensor directly. Please use tf.complex(real, imag).");if(!P(e)&&!Array.isArray(e)&&"number"!=typeof e&&"boolean"!=typeof e&&"string"!=typeof e)throw new Error("values passed to tensor(values) must be a number/boolean/string or an array of numbers/booleans/strings, or a TypedArray");if(null!=t){te(t);const e=I(t),s=I(n);x(e===s,(()=>`Based on the provided shape, [${t}], the tensor should have ${e} values but has ${s}`));for(let e=0;e<n.length;++e){const s=n[e],r=e!==n.length-1||s!==I(t.slice(e));x(n[e]===t[e]||!r,(()=>`Error creating a new Tensor. Inferred shape (${n}) does not match the provided shape (${t}). `))}}return P(e)||Array.isArray(e)||(e=[e]),t=t||n,e="string"!==s?Er(e,s):k(e,[],!0),ya.makeTensor(e,t,s)}function Da(e,t,n){return Fa(e,t,Na(e,n),n)}const _a={float32:4,float16:2,int32:4,uint16:2,uint8:1,bool:1,complex64:8};var Oa,Ma,La;Ma=function(e){var t,n,s=ja(e),r=s[0],a=s[1],i=new Ua(function(e,t,n){return 3*(t+n)/4-n}(0,r,a)),o=0,l=a>0?r-4:r;for(n=0;n<l;n+=4)t=Wa[e.charCodeAt(n)]<<18|Wa[e.charCodeAt(n+1)]<<12|Wa[e.charCodeAt(n+2)]<<6|Wa[e.charCodeAt(n+3)],i[o++]=t>>16&255,i[o++]=t>>8&255,i[o++]=255&t;2===a&&(t=Wa[e.charCodeAt(n)]<<2|Wa[e.charCodeAt(n+1)]>>4,i[o++]=255&t);1===a&&(t=Wa[e.charCodeAt(n)]<<10|Wa[e.charCodeAt(n+1)]<<4|Wa[e.charCodeAt(n+2)]>>2,i[o++]=t>>8&255,i[o++]=255&t);return i},La=function(e){for(var t,n=e.length,s=n%3,r=[],a=16383,i=0,o=n-s;i<o;i+=a)r.push(qa(e,i,i+a>o?o:i+a));1===s?(t=e[n-1],r.push(Pa[t>>2]+Pa[t<<4&63]+"==")):2===s&&(t=(e[n-2]<<8)+e[n-1],r.push(Pa[t>>10]+Pa[t>>4&63]+Pa[t<<2&63]+"="));return r.join("")}
/*! ieee754. BSD-3-Clause License. Feross Aboukhadijeh <https://feross.org/opensource> */;for(var za,Ba,Pa=[],Wa=[],Ua="undefined"!=typeof Uint8Array?Uint8Array:Array,Va="ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/",Ga=0,Ha=Va.length;Ga<Ha;++Ga)Pa[Ga]=Va[Ga],Wa[Va.charCodeAt(Ga)]=Ga;function ja(e){var t=e.length;if(t%4>0)throw new Error("Invalid string. Length must be a multiple of 4");var n=e.indexOf("=");return-1===n&&(n=t),[n,n===t?0:4-n%4]}function qa(e,t,n){for(var s,r,a=[],i=t;i<n;i+=3)s=(e[i]<<16&16711680)+(e[i+1]<<8&65280)+(255&e[i+2]),a.push(Pa[(r=s)>>18&63]+Pa[r>>12&63]+Pa[r>>6&63]+Pa[63&r]);return a.join("")}Wa["-".charCodeAt(0)]=62,Wa["_".charCodeAt(0)]=63,za=function(e,t,n,s,r){var a,i,o=8*r-s-1,l=(1<<o)-1,u=l>>1,c=-7,h=n?r-1:0,p=n?-1:1,d=e[t+h];for(h+=p,a=d&(1<<-c)-1,d>>=-c,c+=o;c>0;a=256*a+e[t+h],h+=p,c-=8);for(i=a&(1<<-c)-1,a>>=-c,c+=s;c>0;i=256*i+e[t+h],h+=p,c-=8);if(0===a)a=1-u;else{if(a===l)return i?NaN:1/0*(d?-1:1);i+=Math.pow(2,s),a-=u}return(d?-1:1)*i*Math.pow(2,a-s)},Ba=function(e,t,n,s,r,a){var i,o,l,u=8*a-r-1,c=(1<<u)-1,h=c>>1,p=23===r?Math.pow(2,-24)-Math.pow(2,-77):0,d=s?0:a-1,f=s?1:-1,m=t<0||0===t&&1/t<0?1:0;for(t=Math.abs(t),isNaN(t)||t===1/0?(o=isNaN(t)?1:0,i=c):(i=Math.floor(Math.log(t)/Math.LN2),t*(l=Math.pow(2,-i))<1&&(i--,l*=2),(t+=i+h>=1?p/l:p*Math.pow(2,1-h))*l>=2&&(i++,l/=2),i+h>=c?(o=0,i=c):i+h>=1?(o=(t*l-1)*Math.pow(2,r),i+=h):(o=t*Math.pow(2,h-1)*Math.pow(2,r),i=0));r>=8;e[n+d]=255&o,d+=f,o/=256,r-=8);for(i=i<<r|o,u+=r;u>0;e[n+d]=255&i,d+=f,i/=256,u-=8);e[n+d-f]|=128*m};const Ka="function"==typeof Symbol&&"function"==typeof Symbol.for?Symbol.for("nodejs.util.inspect.custom"):null;Oa=Za;const Xa=2147483647;function Ya(e){if(e>Xa)throw new RangeError('The value "'+e+'" is invalid for option "size"');const t=new Uint8Array(e);return Object.setPrototypeOf(t,Za.prototype),t}function Za(e,t,n){if("number"==typeof e){if("string"==typeof t)throw new TypeError('The "string" argument must be of type string. Received type number');return ei(e)}return Ja(e,t,n)}function Ja(e,t,n){if("string"==typeof e)return function(e,t){"string"==typeof t&&""!==t||(t="utf8");if(!Za.isEncoding(t))throw new TypeError("Unknown encoding: "+t);const n=0|ri(e,t);let s=Ya(n);const r=s.write(e,t);r!==n&&(s=s.slice(0,r));return s}(e,t);if(ArrayBuffer.isView(e))return function(e){if(zi(e,Uint8Array)){const t=new Uint8Array(e);return ni(t.buffer,t.byteOffset,t.byteLength)}return ti(e)}(e);if(null==e)throw new TypeError("The first argument must be one of type string, Buffer, ArrayBuffer, Array, or Array-like Object. Received type "+typeof e);if(zi(e,ArrayBuffer)||e&&zi(e.buffer,ArrayBuffer))return ni(e,t,n);if("undefined"!=typeof SharedArrayBuffer&&(zi(e,SharedArrayBuffer)||e&&zi(e.buffer,SharedArrayBuffer)))return ni(e,t,n);if("number"==typeof e)throw new TypeError('The "value" argument must not be of type number. Received type number');const s=e.valueOf&&e.valueOf();if(null!=s&&s!==e)return Za.from(s,t,n);const r=function(e){if(Za.isBuffer(e)){const t=0|si(e.length),n=Ya(t);return 0===n.length||e.copy(n,0,0,t),n}if(void 0!==e.length)return"number"!=typeof e.length||Bi(e.length)?Ya(0):ti(e);if("Buffer"===e.type&&Array.isArray(e.data))return ti(e.data)}(e);if(r)return r;if("undefined"!=typeof Symbol&&null!=Symbol.toPrimitive&&"function"==typeof e[Symbol.toPrimitive])return Za.from(e[Symbol.toPrimitive]("string"),t,n);throw new TypeError("The first argument must be one of type string, Buffer, ArrayBuffer, Array, or Array-like Object. Received type "+typeof e)}function Qa(e){if("number"!=typeof e)throw new TypeError('"size" argument must be of type number');if(e<0)throw new RangeError('The value "'+e+'" is invalid for option "size"')}function ei(e){return Qa(e),Ya(e<0?0:0|si(e))}function ti(e){const t=e.length<0?0:0|si(e.length),n=Ya(t);for(let s=0;s<t;s+=1)n[s]=255&e[s];return n}function ni(e,t,n){if(t<0||e.byteLength<t)throw new RangeError('"offset" is outside of buffer bounds');if(e.byteLength<t+(n||0))throw new RangeError('"length" is outside of buffer bounds');let s;return s=void 0===t&&void 0===n?new Uint8Array(e):void 0===n?new Uint8Array(e,t):new Uint8Array(e,t,n),Object.setPrototypeOf(s,Za.prototype),s}function si(e){if(e>=Xa)throw new RangeError("Attempt to allocate Buffer larger than maximum size: 0x"+Xa.toString(16)+" bytes");return 0|e}function ri(e,t){if(Za.isBuffer(e))return e.length;if(ArrayBuffer.isView(e)||zi(e,ArrayBuffer))return e.byteLength;if("string"!=typeof e)throw new TypeError('The "string" argument must be one of type string, Buffer, or ArrayBuffer. Received type '+typeof e);const n=e.length,s=arguments.length>2&&!0===arguments[2];if(!s&&0===n)return 0;let r=!1;for(;;)switch(t){case"ascii":case"latin1":case"binary":return n;case"utf8":case"utf-8":return Oi(e).length;case"ucs2":case"ucs-2":case"utf16le":case"utf-16le":return 2*n;case"hex":return n>>>1;case"base64":return Mi(e).length;default:if(r)return s?-1:Oi(e).length;t=(""+t).toLowerCase(),r=!0}}function ai(e,t,n){let s=!1;if((void 0===t||t<0)&&(t=0),t>this.length)return"";if((void 0===n||n>this.length)&&(n=this.length),n<=0)return"";if((n>>>=0)<=(t>>>=0))return"";for(e||(e="utf8");;)switch(e){case"hex":return xi(this,t,n);case"utf8":case"utf-8":return mi(this,t,n);case"ascii":return yi(this,t,n);case"latin1":case"binary":return bi(this,t,n);case"base64":return fi(this,t,n);case"ucs2":case"ucs-2":case"utf16le":case"utf-16le":return wi(this,t,n);default:if(s)throw new TypeError("Unknown encoding: "+e);e=(e+"").toLowerCase(),s=!0}}function ii(e,t,n){const s=e[t];e[t]=e[n],e[n]=s}function oi(e,t,n,s,r){if(0===e.length)return-1;if("string"==typeof n?(s=n,n=0):n>2147483647?n=2147483647:n<-2147483648&&(n=-2147483648),Bi(n=+n)&&(n=r?0:e.length-1),n<0&&(n=e.length+n),n>=e.length){if(r)return-1;n=e.length-1}else if(n<0){if(!r)return-1;n=0}if("string"==typeof t&&(t=Za.from(t,s)),Za.isBuffer(t))return 0===t.length?-1:li(e,t,n,s,r);if("number"==typeof t)return t&=255,"function"==typeof Uint8Array.prototype.indexOf?r?Uint8Array.prototype.indexOf.call(e,t,n):Uint8Array.prototype.lastIndexOf.call(e,t,n):li(e,[t],n,s,r);throw new TypeError("val must be string, number or Buffer")}function li(e,t,n,s,r){let a,i=1,o=e.length,l=t.length;if(void 0!==s&&("ucs2"===(s=String(s).toLowerCase())||"ucs-2"===s||"utf16le"===s||"utf-16le"===s)){if(e.length<2||t.length<2)return-1;i=2,o/=2,l/=2,n/=2}function u(e,t){return 1===i?e[t]:e.readUInt16BE(t*i)}if(r){let s=-1;for(a=n;a<o;a++)if(u(e,a)===u(t,-1===s?0:a-s)){if(-1===s&&(s=a),a-s+1===l)return s*i}else-1!==s&&(a-=a-s),s=-1}else for(n+l>o&&(n=o-l),a=n;a>=0;a--){let n=!0;for(let s=0;s<l;s++)if(u(e,a+s)!==u(t,s)){n=!1;break}if(n)return a}return-1}function ui(e,t,n,s){n=Number(n)||0;const r=e.length-n;s?(s=Number(s))>r&&(s=r):s=r;const a=t.length;let i;for(s>a/2&&(s=a/2),i=0;i<s;++i){const s=parseInt(t.substr(2*i,2),16);if(Bi(s))return i;e[n+i]=s}return i}function ci(e,t,n,s){return Li(Oi(t,e.length-n),e,n,s)}function hi(e,t,n,s){return Li(function(e){const t=[];for(let n=0;n<e.length;++n)t.push(255&e.charCodeAt(n));return t}(t),e,n,s)}function pi(e,t,n,s){return Li(Mi(t),e,n,s)}function di(e,t,n,s){return Li(function(e,t){let n,s,r;const a=[];for(let i=0;i<e.length&&!((t-=2)<0);++i)n=e.charCodeAt(i),s=n>>8,r=n%256,a.push(r),a.push(s);return a}(t,e.length-n),e,n,s)}function fi(e,t,n){return 0===t&&n===e.length?La(e):La(e.slice(t,n))}function mi(e,t,n){n=Math.min(e.length,n);const s=[];let r=t;for(;r<n;){const t=e[r];let a=null,i=t>239?4:t>223?3:t>191?2:1;if(r+i<=n){let n,s,o,l;switch(i){case 1:t<128&&(a=t);break;case 2:n=e[r+1],128==(192&n)&&(l=(31&t)<<6|63&n,l>127&&(a=l));break;case 3:n=e[r+1],s=e[r+2],128==(192&n)&&128==(192&s)&&(l=(15&t)<<12|(63&n)<<6|63&s,l>2047&&(l<55296||l>57343)&&(a=l));break;case 4:n=e[r+1],s=e[r+2],o=e[r+3],128==(192&n)&&128==(192&s)&&128==(192&o)&&(l=(15&t)<<18|(63&n)<<12|(63&s)<<6|63&o,l>65535&&l<1114112&&(a=l))}}null===a?(a=65533,i=1):a>65535&&(a-=65536,s.push(a>>>10&1023|55296),a=56320|1023&a),s.push(a),r+=i}return function(e){const t=e.length;if(t<=gi)return String.fromCharCode.apply(String,e);let n="",s=0;for(;s<t;)n+=String.fromCharCode.apply(String,e.slice(s,s+=gi));return n}(s)}Za.TYPED_ARRAY_SUPPORT=function(){try{const e=new Uint8Array(1),t={foo:function(){return 42}};return Object.setPrototypeOf(t,Uint8Array.prototype),Object.setPrototypeOf(e,t),42===e.foo()}catch(e){return!1}}(),Za.TYPED_ARRAY_SUPPORT||"undefined"==typeof console||"function"!=typeof console.error||console.error("This browser lacks typed array (Uint8Array) support which is required by `buffer` v5.x. Use `buffer` v4.x if you require old browser support."),Object.defineProperty(Za.prototype,"parent",{enumerable:!0,get:function(){if(Za.isBuffer(this))return this.buffer}}),Object.defineProperty(Za.prototype,"offset",{enumerable:!0,get:function(){if(Za.isBuffer(this))return this.byteOffset}}),Za.poolSize=8192,Za.from=function(e,t,n){return Ja(e,t,n)},Object.setPrototypeOf(Za.prototype,Uint8Array.prototype),Object.setPrototypeOf(Za,Uint8Array),Za.alloc=function(e,t,n){return function(e,t,n){return Qa(e),e<=0?Ya(e):void 0!==t?"string"==typeof n?Ya(e).fill(t,n):Ya(e).fill(t):Ya(e)}(e,t,n)},Za.allocUnsafe=function(e){return ei(e)},Za.allocUnsafeSlow=function(e){return ei(e)},Za.isBuffer=function(e){return null!=e&&!0===e._isBuffer&&e!==Za.prototype},Za.compare=function(e,t){if(zi(e,Uint8Array)&&(e=Za.from(e,e.offset,e.byteLength)),zi(t,Uint8Array)&&(t=Za.from(t,t.offset,t.byteLength)),!Za.isBuffer(e)||!Za.isBuffer(t))throw new TypeError('The "buf1", "buf2" arguments must be one of type Buffer or Uint8Array');if(e===t)return 0;let n=e.length,s=t.length;for(let r=0,a=Math.min(n,s);r<a;++r)if(e[r]!==t[r]){n=e[r],s=t[r];break}return n<s?-1:s<n?1:0},Za.isEncoding=function(e){switch(String(e).toLowerCase()){case"hex":case"utf8":case"utf-8":case"ascii":case"latin1":case"binary":case"base64":case"ucs2":case"ucs-2":case"utf16le":case"utf-16le":return!0;default:return!1}},Za.concat=function(e,t){if(!Array.isArray(e))throw new TypeError('"list" argument must be an Array of Buffers');if(0===e.length)return Za.alloc(0);let n;if(void 0===t)for(t=0,n=0;n<e.length;++n)t+=e[n].length;const s=Za.allocUnsafe(t);let r=0;for(n=0;n<e.length;++n){let t=e[n];if(zi(t,Uint8Array))r+t.length>s.length?(Za.isBuffer(t)||(t=Za.from(t)),t.copy(s,r)):Uint8Array.prototype.set.call(s,t,r);else{if(!Za.isBuffer(t))throw new TypeError('"list" argument must be an Array of Buffers');t.copy(s,r)}r+=t.length}return s},Za.byteLength=ri,Za.prototype._isBuffer=!0,Za.prototype.swap16=function(){const e=this.length;if(e%2!=0)throw new RangeError("Buffer size must be a multiple of 16-bits");for(let t=0;t<e;t+=2)ii(this,t,t+1);return this},Za.prototype.swap32=function(){const e=this.length;if(e%4!=0)throw new RangeError("Buffer size must be a multiple of 32-bits");for(let t=0;t<e;t+=4)ii(this,t,t+3),ii(this,t+1,t+2);return this},Za.prototype.swap64=function(){const e=this.length;if(e%8!=0)throw new RangeError("Buffer size must be a multiple of 64-bits");for(let t=0;t<e;t+=8)ii(this,t,t+7),ii(this,t+1,t+6),ii(this,t+2,t+5),ii(this,t+3,t+4);return this},Za.prototype.toString=function(){const e=this.length;return 0===e?"":0===arguments.length?mi(this,0,e):ai.apply(this,arguments)},Za.prototype.toLocaleString=Za.prototype.toString,Za.prototype.equals=function(e){if(!Za.isBuffer(e))throw new TypeError("Argument must be a Buffer");return this===e||0===Za.compare(this,e)},Za.prototype.inspect=function(){let e="";return e=this.toString("hex",0,50).replace(/(.{2})/g,"$1 ").trim(),this.length>50&&(e+=" ... "),"<Buffer "+e+">"},Ka&&(Za.prototype[Ka]=Za.prototype.inspect),Za.prototype.compare=function(e,t,n,s,r){if(zi(e,Uint8Array)&&(e=Za.from(e,e.offset,e.byteLength)),!Za.isBuffer(e))throw new TypeError('The "target" argument must be one of type Buffer or Uint8Array. Received type '+typeof e);if(void 0===t&&(t=0),void 0===n&&(n=e?e.length:0),void 0===s&&(s=0),void 0===r&&(r=this.length),t<0||n>e.length||s<0||r>this.length)throw new RangeError("out of range index");if(s>=r&&t>=n)return 0;if(s>=r)return-1;if(t>=n)return 1;if(this===e)return 0;let a=(r>>>=0)-(s>>>=0),i=(n>>>=0)-(t>>>=0);const o=Math.min(a,i),l=this.slice(s,r),u=e.slice(t,n);for(let e=0;e<o;++e)if(l[e]!==u[e]){a=l[e],i=u[e];break}return a<i?-1:i<a?1:0},Za.prototype.includes=function(e,t,n){return-1!==this.indexOf(e,t,n)},Za.prototype.indexOf=function(e,t,n){return oi(this,e,t,n,!0)},Za.prototype.lastIndexOf=function(e,t,n){return oi(this,e,t,n,!1)},Za.prototype.write=function(e,t,n,s){if(void 0===t)s="utf8",n=this.length,t=0;else if(void 0===n&&"string"==typeof t)s=t,n=this.length,t=0;else{if(!isFinite(t))throw new Error("Buffer.write(string, encoding, offset[, length]) is no longer supported");t>>>=0,isFinite(n)?(n>>>=0,void 0===s&&(s="utf8")):(s=n,n=void 0)}const r=this.length-t;if((void 0===n||n>r)&&(n=r),e.length>0&&(n<0||t<0)||t>this.length)throw new RangeError("Attempt to write outside buffer bounds");s||(s="utf8");let a=!1;for(;;)switch(s){case"hex":return ui(this,e,t,n);case"utf8":case"utf-8":return ci(this,e,t,n);case"ascii":case"latin1":case"binary":return hi(this,e,t,n);case"base64":return pi(this,e,t,n);case"ucs2":case"ucs-2":case"utf16le":case"utf-16le":return di(this,e,t,n);default:if(a)throw new TypeError("Unknown encoding: "+s);s=(""+s).toLowerCase(),a=!0}},Za.prototype.toJSON=function(){return{type:"Buffer",data:Array.prototype.slice.call(this._arr||this,0)}};const gi=4096;function yi(e,t,n){let s="";n=Math.min(e.length,n);for(let r=t;r<n;++r)s+=String.fromCharCode(127&e[r]);return s}function bi(e,t,n){let s="";n=Math.min(e.length,n);for(let r=t;r<n;++r)s+=String.fromCharCode(e[r]);return s}function xi(e,t,n){const s=e.length;(!t||t<0)&&(t=0),(!n||n<0||n>s)&&(n=s);let r="";for(let s=t;s<n;++s)r+=Pi[e[s]];return r}function wi(e,t,n){const s=e.slice(t,n);let r="";for(let e=0;e<s.length-1;e+=2)r+=String.fromCharCode(s[e]+256*s[e+1]);return r}function vi(e,t,n){if(e%1!=0||e<0)throw new RangeError("offset is not uint");if(e+t>n)throw new RangeError("Trying to access beyond buffer length")}function ki(e,t,n,s,r,a){if(!Za.isBuffer(e))throw new TypeError('"buffer" argument must be a Buffer instance');if(t>r||t<a)throw new RangeError('"value" argument is out of bounds');if(n+s>e.length)throw new RangeError("Index out of range")}function Ii(e,t,n,s,r){Ri(t,s,r,e,n,7);let a=Number(t&BigInt(4294967295));e[n++]=a,a>>=8,e[n++]=a,a>>=8,e[n++]=a,a>>=8,e[n++]=a;let i=Number(t>>BigInt(32)&BigInt(4294967295));return e[n++]=i,i>>=8,e[n++]=i,i>>=8,e[n++]=i,i>>=8,e[n++]=i,n}function Si(e,t,n,s,r){Ri(t,s,r,e,n,7);let a=Number(t&BigInt(4294967295));e[n+7]=a,a>>=8,e[n+6]=a,a>>=8,e[n+5]=a,a>>=8,e[n+4]=a;let i=Number(t>>BigInt(32)&BigInt(4294967295));return e[n+3]=i,i>>=8,e[n+2]=i,i>>=8,e[n+1]=i,i>>=8,e[n]=i,n+8}function Ni(e,t,n,s,r,a){if(n+s>e.length)throw new RangeError("Index out of range");if(n<0)throw new RangeError("Index out of range")}function Ti(e,t,n,s,r){return t=+t,n>>>=0,r||Ni(e,0,n,4),Ba(e,t,n,s,23,4),n+4}function Ci(e,t,n,s,r){return t=+t,n>>>=0,r||Ni(e,0,n,8),Ba(e,t,n,s,52,8),n+8}Za.prototype.slice=function(e,t){const n=this.length;(e=~~e)<0?(e+=n)<0&&(e=0):e>n&&(e=n),(t=void 0===t?n:~~t)<0?(t+=n)<0&&(t=0):t>n&&(t=n),t<e&&(t=e);const s=this.subarray(e,t);return Object.setPrototypeOf(s,Za.prototype),s},Za.prototype.readUintLE=Za.prototype.readUIntLE=function(e,t,n){e>>>=0,t>>>=0,n||vi(e,t,this.length);let s=this[e],r=1,a=0;for(;++a<t&&(r*=256);)s+=this[e+a]*r;return s},Za.prototype.readUintBE=Za.prototype.readUIntBE=function(e,t,n){e>>>=0,t>>>=0,n||vi(e,t,this.length);let s=this[e+--t],r=1;for(;t>0&&(r*=256);)s+=this[e+--t]*r;return s},Za.prototype.readUint8=Za.prototype.readUInt8=function(e,t){return e>>>=0,t||vi(e,1,this.length),this[e]},Za.prototype.readUint16LE=Za.prototype.readUInt16LE=function(e,t){return e>>>=0,t||vi(e,2,this.length),this[e]|this[e+1]<<8},Za.prototype.readUint16BE=Za.prototype.readUInt16BE=function(e,t){return e>>>=0,t||vi(e,2,this.length),this[e]<<8|this[e+1]},Za.prototype.readUint32LE=Za.prototype.readUInt32LE=function(e,t){return e>>>=0,t||vi(e,4,this.length),(this[e]|this[e+1]<<8|this[e+2]<<16)+16777216*this[e+3]},Za.prototype.readUint32BE=Za.prototype.readUInt32BE=function(e,t){return e>>>=0,t||vi(e,4,this.length),16777216*this[e]+(this[e+1]<<16|this[e+2]<<8|this[e+3])},Za.prototype.readBigUInt64LE=Wi((function(e){Fi(e>>>=0,"offset");const t=this[e],n=this[e+7];void 0!==t&&void 0!==n||Di(e,this.length-8);const s=t+256*this[++e]+65536*this[++e]+this[++e]*2**24,r=this[++e]+256*this[++e]+65536*this[++e]+n*2**24;return BigInt(s)+(BigInt(r)<<BigInt(32))})),Za.prototype.readBigUInt64BE=Wi((function(e){Fi(e>>>=0,"offset");const t=this[e],n=this[e+7];void 0!==t&&void 0!==n||Di(e,this.length-8);const s=t*2**24+65536*this[++e]+256*this[++e]+this[++e],r=this[++e]*2**24+65536*this[++e]+256*this[++e]+n;return(BigInt(s)<<BigInt(32))+BigInt(r)})),Za.prototype.readIntLE=function(e,t,n){e>>>=0,t>>>=0,n||vi(e,t,this.length);let s=this[e],r=1,a=0;for(;++a<t&&(r*=256);)s+=this[e+a]*r;return r*=128,s>=r&&(s-=Math.pow(2,8*t)),s},Za.prototype.readIntBE=function(e,t,n){e>>>=0,t>>>=0,n||vi(e,t,this.length);let s=t,r=1,a=this[e+--s];for(;s>0&&(r*=256);)a+=this[e+--s]*r;return r*=128,a>=r&&(a-=Math.pow(2,8*t)),a},Za.prototype.readInt8=function(e,t){return e>>>=0,t||vi(e,1,this.length),128&this[e]?-1*(255-this[e]+1):this[e]},Za.prototype.readInt16LE=function(e,t){e>>>=0,t||vi(e,2,this.length);const n=this[e]|this[e+1]<<8;return 32768&n?4294901760|n:n},Za.prototype.readInt16BE=function(e,t){e>>>=0,t||vi(e,2,this.length);const n=this[e+1]|this[e]<<8;return 32768&n?4294901760|n:n},Za.prototype.readInt32LE=function(e,t){return e>>>=0,t||vi(e,4,this.length),this[e]|this[e+1]<<8|this[e+2]<<16|this[e+3]<<24},Za.prototype.readInt32BE=function(e,t){return e>>>=0,t||vi(e,4,this.length),this[e]<<24|this[e+1]<<16|this[e+2]<<8|this[e+3]},Za.prototype.readBigInt64LE=Wi((function(e){Fi(e>>>=0,"offset");const t=this[e],n=this[e+7];void 0!==t&&void 0!==n||Di(e,this.length-8);const s=this[e+4]+256*this[e+5]+65536*this[e+6]+(n<<24);return(BigInt(s)<<BigInt(32))+BigInt(t+256*this[++e]+65536*this[++e]+this[++e]*2**24)})),Za.prototype.readBigInt64BE=Wi((function(e){Fi(e>>>=0,"offset");const t=this[e],n=this[e+7];void 0!==t&&void 0!==n||Di(e,this.length-8);const s=(t<<24)+65536*this[++e]+256*this[++e]+this[++e];return(BigInt(s)<<BigInt(32))+BigInt(this[++e]*2**24+65536*this[++e]+256*this[++e]+n)})),Za.prototype.readFloatLE=function(e,t){return e>>>=0,t||vi(e,4,this.length),za(this,e,!0,23,4)},Za.prototype.readFloatBE=function(e,t){return e>>>=0,t||vi(e,4,this.length),za(this,e,!1,23,4)},Za.prototype.readDoubleLE=function(e,t){return e>>>=0,t||vi(e,8,this.length),za(this,e,!0,52,8)},Za.prototype.readDoubleBE=function(e,t){return e>>>=0,t||vi(e,8,this.length),za(this,e,!1,52,8)},Za.prototype.writeUintLE=Za.prototype.writeUIntLE=function(e,t,n,s){if(e=+e,t>>>=0,n>>>=0,!s){ki(this,e,t,n,Math.pow(2,8*n)-1,0)}let r=1,a=0;for(this[t]=255&e;++a<n&&(r*=256);)this[t+a]=e/r&255;return t+n},Za.prototype.writeUintBE=Za.prototype.writeUIntBE=function(e,t,n,s){if(e=+e,t>>>=0,n>>>=0,!s){ki(this,e,t,n,Math.pow(2,8*n)-1,0)}let r=n-1,a=1;for(this[t+r]=255&e;--r>=0&&(a*=256);)this[t+r]=e/a&255;return t+n},Za.prototype.writeUint8=Za.prototype.writeUInt8=function(e,t,n){return e=+e,t>>>=0,n||ki(this,e,t,1,255,0),this[t]=255&e,t+1},Za.prototype.writeUint16LE=Za.prototype.writeUInt16LE=function(e,t,n){return e=+e,t>>>=0,n||ki(this,e,t,2,65535,0),this[t]=255&e,this[t+1]=e>>>8,t+2},Za.prototype.writeUint16BE=Za.prototype.writeUInt16BE=function(e,t,n){return e=+e,t>>>=0,n||ki(this,e,t,2,65535,0),this[t]=e>>>8,this[t+1]=255&e,t+2},Za.prototype.writeUint32LE=Za.prototype.writeUInt32LE=function(e,t,n){return e=+e,t>>>=0,n||ki(this,e,t,4,4294967295,0),this[t+3]=e>>>24,this[t+2]=e>>>16,this[t+1]=e>>>8,this[t]=255&e,t+4},Za.prototype.writeUint32BE=Za.prototype.writeUInt32BE=function(e,t,n){return e=+e,t>>>=0,n||ki(this,e,t,4,4294967295,0),this[t]=e>>>24,this[t+1]=e>>>16,this[t+2]=e>>>8,this[t+3]=255&e,t+4},Za.prototype.writeBigUInt64LE=Wi((function(e,t=0){return Ii(this,e,t,BigInt(0),BigInt("0xffffffffffffffff"))})),Za.prototype.writeBigUInt64BE=Wi((function(e,t=0){return Si(this,e,t,BigInt(0),BigInt("0xffffffffffffffff"))})),Za.prototype.writeIntLE=function(e,t,n,s){if(e=+e,t>>>=0,!s){const s=Math.pow(2,8*n-1);ki(this,e,t,n,s-1,-s)}let r=0,a=1,i=0;for(this[t]=255&e;++r<n&&(a*=256);)e<0&&0===i&&0!==this[t+r-1]&&(i=1),this[t+r]=(e/a>>0)-i&255;return t+n},Za.prototype.writeIntBE=function(e,t,n,s){if(e=+e,t>>>=0,!s){const s=Math.pow(2,8*n-1);ki(this,e,t,n,s-1,-s)}let r=n-1,a=1,i=0;for(this[t+r]=255&e;--r>=0&&(a*=256);)e<0&&0===i&&0!==this[t+r+1]&&(i=1),this[t+r]=(e/a>>0)-i&255;return t+n},Za.prototype.writeInt8=function(e,t,n){return e=+e,t>>>=0,n||ki(this,e,t,1,127,-128),e<0&&(e=255+e+1),this[t]=255&e,t+1},Za.prototype.writeInt16LE=function(e,t,n){return e=+e,t>>>=0,n||ki(this,e,t,2,32767,-32768),this[t]=255&e,this[t+1]=e>>>8,t+2},Za.prototype.writeInt16BE=function(e,t,n){return e=+e,t>>>=0,n||ki(this,e,t,2,32767,-32768),this[t]=e>>>8,this[t+1]=255&e,t+2},Za.prototype.writeInt32LE=function(e,t,n){return e=+e,t>>>=0,n||ki(this,e,t,4,2147483647,-2147483648),this[t]=255&e,this[t+1]=e>>>8,this[t+2]=e>>>16,this[t+3]=e>>>24,t+4},Za.prototype.writeInt32BE=function(e,t,n){return e=+e,t>>>=0,n||ki(this,e,t,4,2147483647,-2147483648),e<0&&(e=4294967295+e+1),this[t]=e>>>24,this[t+1]=e>>>16,this[t+2]=e>>>8,this[t+3]=255&e,t+4},Za.prototype.writeBigInt64LE=Wi((function(e,t=0){return Ii(this,e,t,-BigInt("0x8000000000000000"),BigInt("0x7fffffffffffffff"))})),Za.prototype.writeBigInt64BE=Wi((function(e,t=0){return Si(this,e,t,-BigInt("0x8000000000000000"),BigInt("0x7fffffffffffffff"))})),Za.prototype.writeFloatLE=function(e,t,n){return Ti(this,e,t,!0,n)},Za.prototype.writeFloatBE=function(e,t,n){return Ti(this,e,t,!1,n)},Za.prototype.writeDoubleLE=function(e,t,n){return Ci(this,e,t,!0,n)},Za.prototype.writeDoubleBE=function(e,t,n){return Ci(this,e,t,!1,n)},Za.prototype.copy=function(e,t,n,s){if(!Za.isBuffer(e))throw new TypeError("argument should be a Buffer");if(n||(n=0),s||0===s||(s=this.length),t>=e.length&&(t=e.length),t||(t=0),s>0&&s<n&&(s=n),s===n)return 0;if(0===e.length||0===this.length)return 0;if(t<0)throw new RangeError("targetStart out of bounds");if(n<0||n>=this.length)throw new RangeError("Index out of range");if(s<0)throw new RangeError("sourceEnd out of bounds");s>this.length&&(s=this.length),e.length-t<s-n&&(s=e.length-t+n);const r=s-n;return this===e&&"function"==typeof Uint8Array.prototype.copyWithin?this.copyWithin(t,n,s):Uint8Array.prototype.set.call(e,this.subarray(n,s),t),r},Za.prototype.fill=function(e,t,n,s){if("string"==typeof e){if("string"==typeof t?(s=t,t=0,n=this.length):"string"==typeof n&&(s=n,n=this.length),void 0!==s&&"string"!=typeof s)throw new TypeError("encoding must be a string");if("string"==typeof s&&!Za.isEncoding(s))throw new TypeError("Unknown encoding: "+s);if(1===e.length){const t=e.charCodeAt(0);("utf8"===s&&t<128||"latin1"===s)&&(e=t)}}else"number"==typeof e?e&=255:"boolean"==typeof e&&(e=Number(e));if(t<0||this.length<t||this.length<n)throw new RangeError("Out of range index");if(n<=t)return this;let r;if(t>>>=0,n=void 0===n?this.length:n>>>0,e||(e=0),"number"==typeof e)for(r=t;r<n;++r)this[r]=e;else{const a=Za.isBuffer(e)?e:Za.from(e,s),i=a.length;if(0===i)throw new TypeError('The value "'+e+'" is invalid for argument "value"');for(r=0;r<n-t;++r)this[r+t]=a[r%i]}return this};const $i={};function Ei(e,t,n){$i[e]=class extends n{constructor(){super(),Object.defineProperty(this,"message",{value:t.apply(this,arguments),writable:!0,configurable:!0}),this.name=`${this.name} [${e}]`,this.stack,delete this.name}get code(){return e}set code(e){Object.defineProperty(this,"code",{configurable:!0,enumerable:!0,value:e,writable:!0})}toString(){return`${this.name} [${e}]: ${this.message}`}}}function Ai(e){let t="",n=e.length;const s="-"===e[0]?1:0;for(;n>=s+4;n-=3)t=`_${e.slice(n-3,n)}${t}`;return`${e.slice(0,n)}${t}`}function Ri(e,t,n,s,r,a){if(e>n||e<t){const s="bigint"==typeof t?"n":"";let r;throw r=a>3?0===t||t===BigInt(0)?`>= 0${s} and < 2${s} ** ${8*(a+1)}${s}`:`>= -(2${s} ** ${8*(a+1)-1}${s}) and < 2 ** ${8*(a+1)-1}${s}`:`>= ${t}${s} and <= ${n}${s}`,new $i.ERR_OUT_OF_RANGE("value",r,e)}!function(e,t,n){Fi(t,"offset"),void 0!==e[t]&&void 0!==e[t+n]||Di(t,e.length-(n+1))}(s,r,a)}function Fi(e,t){if("number"!=typeof e)throw new $i.ERR_INVALID_ARG_TYPE(t,"number",e)}function Di(e,t,n){if(Math.floor(e)!==e)throw Fi(e,n),new $i.ERR_OUT_OF_RANGE(n||"offset","an integer",e);if(t<0)throw new $i.ERR_BUFFER_OUT_OF_BOUNDS;throw new $i.ERR_OUT_OF_RANGE(n||"offset",`>= ${n?1:0} and <= ${t}`,e)}Ei("ERR_BUFFER_OUT_OF_BOUNDS",(function(e){return e?`${e} is outside of buffer bounds`:"Attempt to access memory outside buffer bounds"}),RangeError),Ei("ERR_INVALID_ARG_TYPE",(function(e,t){return`The "${e}" argument must be of type number. Received type ${typeof t}`}),TypeError),Ei("ERR_OUT_OF_RANGE",(function(e,t,n){let s=`The value of "${e}" is out of range.`,r=n;return Number.isInteger(n)&&Math.abs(n)>2**32?r=Ai(String(n)):"bigint"==typeof n&&(r=String(n),(n>BigInt(2)**BigInt(32)||n<-(BigInt(2)**BigInt(32)))&&(r=Ai(r)),r+="n"),s+=` It must be ${t}. Received ${r}`,s}),RangeError);const _i=/[^+/0-9A-Za-z-_]/g;function Oi(e,t){let n;t=t||1/0;const s=e.length;let r=null;const a=[];for(let i=0;i<s;++i){if(n=e.charCodeAt(i),n>55295&&n<57344){if(!r){if(n>56319){(t-=3)>-1&&a.push(239,191,189);continue}if(i+1===s){(t-=3)>-1&&a.push(239,191,189);continue}r=n;continue}if(n<56320){(t-=3)>-1&&a.push(239,191,189),r=n;continue}n=65536+(r-55296<<10|n-56320)}else r&&(t-=3)>-1&&a.push(239,191,189);if(r=null,n<128){if((t-=1)<0)break;a.push(n)}else if(n<2048){if((t-=2)<0)break;a.push(n>>6|192,63&n|128)}else if(n<65536){if((t-=3)<0)break;a.push(n>>12|224,n>>6&63|128,63&n|128)}else{if(!(n<1114112))throw new Error("Invalid code point");if((t-=4)<0)break;a.push(n>>18|240,n>>12&63|128,n>>6&63|128,63&n|128)}}return a}function Mi(e){return Ma(function(e){if((e=(e=e.split("=")[0]).trim().replace(_i,"")).length<2)return"";for(;e.length%4!=0;)e+="=";return e}(e))}function Li(e,t,n,s){let r;for(r=0;r<s&&!(r+n>=t.length||r>=e.length);++r)t[r+n]=e[r];return r}function zi(e,t){return e instanceof t||null!=e&&null!=e.constructor&&null!=e.constructor.name&&e.constructor.name===t.name}function Bi(e){return e!=e}const Pi=function(){const e="0123456789abcdef",t=new Array(256);for(let n=0;n<16;++n){const s=16*n;for(let r=0;r<16;++r)t[s+r]=e[n]+e[r]}return t}();function Wi(e){return"undefined"==typeof BigInt?Ui:e}function Ui(){throw new Error("BigInt not supported")}var Vi=Oa;async function Gi(e,t){const n=[],s=[],r=Array.isArray(e)?e.map((e=>e.name)):Object.keys(e);for(let a=0;a<r.length;++a){const i=r[a],o=Array.isArray(e)?e[a].tensor:e[i];if("float32"!==o.dtype&&"int32"!==o.dtype&&"bool"!==o.dtype&&"string"!==o.dtype&&"complex64"!==o.dtype)throw new Error(`Unsupported dtype in weight '${i}': ${o.dtype}`);const l={name:i,shape:o.shape,dtype:o.dtype};if("string"===o.dtype){const e=new Promise((async e=>{const t=await o.bytes(),n=t.reduce(((e,t)=>e+t.length),0)+4*t.length,s=new Uint8Array(n);let r=0;for(let e=0;e<t.length;e++){const n=t[e],a=new Uint8Array(new Uint32Array([n.length]).buffer);s.set(a,r),r+=4,s.set(n,r),r+=n.length}e(s)}));s.push(e)}else s.push(o.data());null!=t&&(l.group=t),n.push(l)}return{data:ji(await Promise.all(s)),specs:n}}function Hi(e,t){const n={};let s,r=0;for(const a of t){const t=a.name,i=a.dtype,o=a.shape,l=I(o);let u;if("quantization"in a){const n=a.quantization;if("uint8"===n.dtype||"uint16"===n.dtype){if(!("min"in n)||!("scale"in n))throw new Error(`Weight ${a.name} with quantization ${n.dtype} doesn't have corresponding metadata min and scale.`)}else{if("float16"!==n.dtype)throw new Error(`Weight ${a.name} has unknown quantization dtype ${n.dtype}. Supported quantization dtypes are: 'uint8', 'uint16', and 'float16'.`);if("float32"!==i)throw new Error(`Weight ${a.name} is quantized with ${n.dtype} which only supports weights of type float32 not ${i}.`)}const o=_a[n.dtype],c=e.slice(r,r+l*o),h="uint8"===n.dtype?new Uint8Array(c):new Uint16Array(c);if("float32"===i)if("uint8"===n.dtype||"uint16"===n.dtype){u=new Float32Array(h.length);for(let e=0;e<h.length;e++){const t=h[e];u[e]=t*n.scale+n.min}}else{if("float16"!==n.dtype)throw new Error(`Unsupported quantization type ${n.dtype} for weight type float32.`);void 0===s&&(s=eo()),u=s(h)}else{if("int32"!==i)throw new Error(`Unsupported dtype in weight '${t}': ${i}`);if("uint8"!==n.dtype&&"uint16"!==n.dtype)throw new Error(`Unsupported quantization type ${n.dtype} for weight type int32.`);u=new Int32Array(h.length);for(let e=0;e<h.length;e++){const t=h[e];u[e]=Math.round(t*n.scale+n.min)}}r+=l*o}else if("string"===i){const t=I(a.shape);u=[];for(let n=0;n<t;n++){const t=new Uint32Array(e.slice(r,r+4))[0];r+=4;const n=new Uint8Array(e.slice(r,r+t));u.push(n),r+=t}}else{const s=_a[i],a=e.slice(r,r+l*s);if("float32"===i)u=new Float32Array(a);else if("int32"===i)u=new Int32Array(a);else if("bool"===i)u=new Uint8Array(a);else{if("complex64"!==i)throw new Error(`Unsupported dtype in weight '${t}': ${i}`);{u=new Float32Array(a);const e=new Float32Array(u.length/2),s=new Float32Array(u.length/2);for(let t=0;t<e.length;t++)e[t]=u[2*t],s[t]=u[2*t+1];const r=Da(e,o,"float32"),i=Da(s,o,"float32");n[t]=Ra(r,i),r.dispose(),i.dispose()}}r+=l*s}"complex64"!==i&&(n[t]=Da(u,o,i))}return n}function ji(e){if(null===e)throw new Error(`Invalid input value: ${JSON.stringify(e)}`);let t=0;const n=[];e.forEach((e=>{if(t+=e.byteLength,n.push(e.byteLength===e.buffer.byteLength?e:new e.constructor(e)),!(e instanceof Float32Array||e instanceof Int32Array||e instanceof Uint8Array))throw new Error(`Unsupported TypedArray subtype: ${e.constructor.name}`)}));const s=new Uint8Array(t);let r=0;return n.forEach((e=>{s.set(new Uint8Array(e.buffer),r),r+=e.byteLength})),s.buffer}const qi=void 0!==Vi&&("undefined"==typeof Blob||"undefined"==typeof atob||"undefined"==typeof btoa);function Ki(e){return qi?Vi.byteLength(e):new Blob([e]).size}function Xi(e){if(1===e.length)return e[0];let t=0;e.forEach((e=>{t+=e.byteLength}));const n=new Uint8Array(t);let s=0;return e.forEach((e=>{n.set(new Uint8Array(e),s),s+=e.byteLength})),n.buffer}function Yi(e){for(e=e.trim();e.endsWith("/");)e=e.slice(0,e.length-1);const t=e.split("/");return t[t.length-1]}function Zi(e,t){const n={modelTopology:e.modelTopology,format:e.format,generatedBy:e.generatedBy,convertedBy:e.convertedBy,weightsManifest:t};return null!=e.signature&&(n.signature=e.signature),null!=e.userDefinedMetadata&&(n.userDefinedMetadata=e.userDefinedMetadata),null!=e.modelInitializer&&(n.modelInitializer=e.modelInitializer),null!=e.trainingConfig&&(n.trainingConfig=e.trainingConfig),n}async function Ji(e,t){const n={modelTopology:e.modelTopology,format:e.format,generatedBy:e.generatedBy,convertedBy:e.convertedBy};if(null!=e.trainingConfig&&(n.trainingConfig=e.trainingConfig),null!=e.weightsManifest){const[s,r]=await t(e.weightsManifest);n.weightSpecs=s,n.weightData=r}return null!=e.signature&&(n.signature=e.signature),null!=e.userDefinedMetadata&&(n.userDefinedMetadata=e.userDefinedMetadata),null!=e.modelInitializer&&(n.modelInitializer=e.modelInitializer),n}function Qi(e){if(e.modelTopology instanceof ArrayBuffer)throw new Error("Expected JSON model topology, received ArrayBuffer.");return{dateSaved:new Date,modelTopologyType:"JSON",modelTopologyBytes:null==e.modelTopology?0:Ki(JSON.stringify(e.modelTopology)),weightSpecsBytes:null==e.weightSpecs?0:Ki(JSON.stringify(e.weightSpecs)),weightDataBytes:null==e.weightData?0:e.weightData.byteLength}}function eo(){const e=function(){const e=e=>{let t=e<<13,n=0;for(;0==(8388608&t);)n-=8388608,t<<=1;return t&=-8388609,n+=947912704,t|n},t=new Uint32Array(2048);t[0]=0;for(let n=1;n<1024;n++)t[n]=e(n);for(let e=1024;e<2048;e++)t[e]=939524096+(e-1024<<13);return t}(),t=function(){const e=new Uint32Array(64);e[0]=0,e[31]=1199570944,e[32]=2147483648,e[63]=3347054592;for(let t=1;t<31;t++)e[t]=t<<23;for(let t=33;t<63;t++)e[t]=2147483648+(t-32<<23);return e}(),n=function(){const e=new Uint32Array(64);for(let t=0;t<64;t++)e[t]=1024;return e[0]=e[32]=0,e}();return s=>{const r=new ArrayBuffer(4*s.length),a=new Uint32Array(r);for(let r=0;r<s.length;r++){const i=s[r],o=e[n[i>>10]+(1023&i)]+t[i>>10];a[r]=o}return new Float32Array(r)}}class to{constructor(){this.saveRouters=[],this.loadRouters=[]}static getInstance(){return null==to.instance&&(to.instance=new to),to.instance}static registerSaveRouter(e){to.getInstance().saveRouters.push(e)}static registerLoadRouter(e){to.getInstance().loadRouters.push(e)}static getSaveHandlers(e){return to.getHandlers(e,"save")}static getLoadHandlers(e,t){return to.getHandlers(e,"load",t)}static getHandlers(e,t,n){const s=[];return("load"===t?to.getInstance().loadRouters:to.getInstance().saveRouters).forEach((t=>{const r=t(e,n);null!==r&&s.push(r)})),s}}const no=e=>to.registerSaveRouter(e),so=e=>to.registerLoadRouter(e),ro=e=>to.getSaveHandlers(e),ao=(e,t)=>to.getLoadHandlers(e,t),io="tensorflowjs",oo="models_store",lo="model_info_store";function uo(){if(!le().getBool("IS_BROWSER"))throw new Error("Failed to obtain IndexedDB factory because the current environmentis not a web browser.");const e="undefined"==typeof window?self:window,t=e.indexedDB||e.mozIndexedDB||e.webkitIndexedDB||e.msIndexedDB||e.shimIndexedDB;if(null==t)throw new Error("The current browser does not appear to support IndexedDB.");return t}function co(e){const t=e.result;t.createObjectStore(oo,{keyPath:"modelPath"}),t.createObjectStore(lo,{keyPath:"modelPath"})}class ho{constructor(e){if(this.indexedDB=uo(),null==e||!e)throw new Error("For IndexedDB, modelPath must not be null, undefined or empty.");this.modelPath=e}async save(e){if(e.modelTopology instanceof ArrayBuffer)throw new Error("BrowserLocalStorage.save() does not support saving model topology in binary formats yet.");return this.databaseAction(this.modelPath,e)}async load(){return this.databaseAction(this.modelPath)}databaseAction(e,t){return new Promise(((e,n)=>{const s=this.indexedDB.open(io,1);s.onupgradeneeded=()=>co(s),s.onsuccess=()=>{const r=s.result;if(null==t){const t=r.transaction(oo,"readonly"),s=t.objectStore(oo).get(this.modelPath);s.onsuccess=()=>{if(null==s.result)return r.close(),n(new Error(`Cannot find model with path '${this.modelPath}' in IndexedDB.`));e(s.result.modelArtifacts)},s.onerror=e=>(r.close(),n(s.error)),t.oncomplete=()=>r.close()}else{const s=Qi(t),a=r.transaction(lo,"readwrite");let i=a.objectStore(lo);const o=i.put({modelPath:this.modelPath,modelArtifactsInfo:s});let l;o.onsuccess=()=>{l=r.transaction(oo,"readwrite");const o=l.objectStore(oo).put({modelPath:this.modelPath,modelArtifacts:t,modelArtifactsInfo:s});o.onsuccess=()=>e({modelArtifactsInfo:s}),o.onerror=e=>{i=a.objectStore(lo);const t=i.delete(this.modelPath);t.onsuccess=()=>(r.close(),n(o.error)),t.onerror=e=>(r.close(),n(o.error))}},o.onerror=e=>(r.close(),n(o.error)),a.oncomplete=()=>{null==l?r.close():l.oncomplete=()=>r.close()}}},s.onerror=e=>n(s.error)}))}}ho.URL_SCHEME="indexeddb://";const po=e=>{return le().getBool("IS_BROWSER")&&!Array.isArray(e)&&e.startsWith(ho.URL_SCHEME)?(t=e.slice(ho.URL_SCHEME.length),new ho(t)):null;var t};to.registerSaveRouter(po),to.registerLoadRouter(po);class fo{constructor(){this.indexedDB=uo()}async listModels(){return new Promise(((e,t)=>{const n=this.indexedDB.open(io,1);n.onupgradeneeded=()=>co(n),n.onsuccess=()=>{const s=n.result,r=s.transaction(lo,"readonly"),a=r.objectStore(lo).getAll();a.onsuccess=()=>{const t={};for(const e of a.result)t[e.modelPath]=e.modelArtifactsInfo;e(t)},a.onerror=e=>(s.close(),t(a.error)),r.oncomplete=()=>s.close()},n.onerror=e=>t(n.error)}))}async removeModel(e){var t;return e=(t=e).startsWith(ho.URL_SCHEME)?t.slice(ho.URL_SCHEME.length):t,new Promise(((t,n)=>{const s=this.indexedDB.open(io,1);s.onupgradeneeded=()=>co(s),s.onsuccess=()=>{const r=s.result,a=r.transaction(lo,"readwrite"),i=a.objectStore(lo),o=i.get(e);let l;o.onsuccess=()=>{if(null==o.result)return r.close(),n(new Error(`Cannot find model with path '${e}' in IndexedDB.`));{const s=i.delete(e),a=()=>{l=r.transaction(oo,"readwrite");const s=l.objectStore(oo).delete(e);s.onsuccess=()=>t(o.result.modelArtifactsInfo),s.onerror=e=>n(o.error)};s.onsuccess=a,s.onerror=e=>(a(),r.close(),n(o.error))}},o.onerror=e=>(r.close(),n(o.error)),a.oncomplete=()=>{null==l?r.close():l.oncomplete=()=>r.close()}},s.onerror=e=>n(s.error)}))}}const mo="/",go="tensorflowjs_models",yo="info",bo="model_topology",xo="weight_specs",wo="weight_data",vo="model_metadata";function ko(e){return{info:[go,e,yo].join(mo),topology:[go,e,bo].join(mo),weightSpecs:[go,e,xo].join(mo),weightData:[go,e,wo].join(mo),modelMetadata:[go,e,vo].join(mo)}}function Io(e){for(const t of Object.values(e))window.localStorage.removeItem(t)}function So(e){const t=e.split(mo);if(t.length<3)throw new Error(`Invalid key format: ${e}`);return t.slice(1,t.length-1).join(mo)}class No{constructor(e){if(!le().getBool("IS_BROWSER")||"undefined"==typeof window||void 0===window.localStorage)throw new Error("The current environment does not support local storage.");if(this.LS=window.localStorage,null==e||!e)throw new Error("For local storage, modelPath must not be null, undefined or empty.");this.modelPath=e,this.keys=ko(this.modelPath)}async save(e){if(e.modelTopology instanceof ArrayBuffer)throw new Error("BrowserLocalStorage.save() does not support saving model topology in binary formats yet.");{const t=JSON.stringify(e.modelTopology),n=JSON.stringify(e.weightSpecs),s=Qi(e);try{this.LS.setItem(this.keys.info,JSON.stringify(s)),this.LS.setItem(this.keys.topology,t),this.LS.setItem(this.keys.weightSpecs,n),this.LS.setItem(this.keys.weightData,function(e){if(qi)return Vi.from(e).toString("base64");const t=new Uint8Array(e);let n="";for(let e=0,s=t.length;e<s;e++)n+=String.fromCharCode(t[e]);return btoa(n)}(e.weightData));const r={format:e.format,generatedBy:e.generatedBy,convertedBy:e.convertedBy,signature:null!=e.signature?e.signature:void 0,userDefinedMetadata:null!=e.userDefinedMetadata?e.userDefinedMetadata:void 0,modelInitializer:null!=e.modelInitializer?e.modelInitializer:void 0,trainingConfig:null!=e.trainingConfig?e.trainingConfig:void 0};return this.LS.setItem(this.keys.modelMetadata,JSON.stringify(r)),{modelArtifactsInfo:s}}catch(e){throw Io(this.keys),new Error(`Failed to save model '${this.modelPath}' to local storage: size quota being exceeded is a possible cause of this failure: modelTopologyBytes=${s.modelTopologyBytes}, weightSpecsBytes=${s.weightSpecsBytes}, weightDataBytes=${s.weightDataBytes}.`)}}}async load(){const e=JSON.parse(this.LS.getItem(this.keys.info));if(null==e)throw new Error(`In local storage, there is no model with name '${this.modelPath}'`);if("JSON"!==e.modelTopologyType)throw new Error("BrowserLocalStorage does not support loading non-JSON model topology yet.");const t={},n=JSON.parse(this.LS.getItem(this.keys.topology));if(null==n)throw new Error(`In local storage, the topology of model '${this.modelPath}' is missing.`);t.modelTopology=n;const s=JSON.parse(this.LS.getItem(this.keys.weightSpecs));if(null==s)throw new Error(`In local storage, the weight specs of model '${this.modelPath}' are missing.`);t.weightSpecs=s;const r=this.LS.getItem(this.keys.modelMetadata);if(null!=r){const e=JSON.parse(r);t.format=e.format,t.generatedBy=e.generatedBy,t.convertedBy=e.convertedBy,null!=e.signature&&(t.signature=e.signature),null!=e.userDefinedMetadata&&(t.userDefinedMetadata=e.userDefinedMetadata),null!=e.modelInitializer&&(t.modelInitializer=e.modelInitializer),null!=e.trainingConfig&&(t.trainingConfig=e.trainingConfig)}const a=this.LS.getItem(this.keys.weightData);if(null==a)throw new Error(`In local storage, the binary weight values of model '${this.modelPath}' are missing.`);return t.weightData=function(e){if(qi){const t=Vi.from(e,"base64");return t.buffer.slice(t.byteOffset,t.byteOffset+t.byteLength)}const t=atob(e),n=new Uint8Array(t.length);for(let e=0;e<t.length;++e)n.set([t.charCodeAt(e)],e);return n.buffer}(a),t}}No.URL_SCHEME="localstorage://";const To=e=>{return le().getBool("IS_BROWSER")&&!Array.isArray(e)&&e.startsWith(No.URL_SCHEME)?(t=e.slice(No.URL_SCHEME.length),new No(t)):null;var t};to.registerSaveRouter(To),to.registerLoadRouter(To);class Co{constructor(){x(le().getBool("IS_BROWSER"),(()=>"Current environment is not a web browser")),x("undefined"==typeof window||void 0!==window.localStorage,(()=>"Current browser does not appear to support localStorage")),this.LS=window.localStorage}async listModels(){const e={},t=go+mo,n=mo+yo;for(let s=0;s<this.LS.length;++s){const r=this.LS.key(s);if(r.startsWith(t)&&r.endsWith(n)){e[So(r)]=JSON.parse(this.LS.getItem(r))}}return e}async removeModel(e){var t;const n=ko(e=(t=e).startsWith(No.URL_SCHEME)?t.slice(No.URL_SCHEME.length):t);if(null==this.LS.getItem(n.info))throw new Error(`Cannot find model at path '${e}'`);const s=JSON.parse(this.LS.getItem(n.info));return Io(n),s}}const $o="://";class Eo{constructor(){this.managers={}}static getInstance(){return null==Eo.instance&&(Eo.instance=new Eo),Eo.instance}static registerManager(e,t){x(null!=e,(()=>"scheme must not be undefined or null.")),e.endsWith($o)&&(e=e.slice(0,e.indexOf($o))),x(e.length>0,(()=>"scheme must not be an empty string."));const n=Eo.getInstance();x(null==n.managers[e],(()=>`A model store manager is already registered for scheme '${e}'.`)),n.managers[e]=t}static getManager(e){const t=this.getInstance().managers[e];if(null==t)throw new Error(`Cannot find model manager for scheme '${e}'`);return t}static getSchemes(){return Object.keys(this.getInstance().managers)}}function Ao(e){if(-1===e.indexOf($o))throw new Error(`The url string provided does not contain a scheme. Supported schemes are: ${Eo.getSchemes().join(",")}`);return{scheme:e.split($o)[0],path:e.split($o)[1]}}async function Ro(e,t,n=!1){x(e!==t,(()=>`Old path and new path are the same: '${e}'`));const s=to.getLoadHandlers(e);x(s.length>0,(()=>`Copying failed because no load handler is found for source URL ${e}.`)),x(s.length<2,(()=>`Copying failed because more than one (${s.length}) load handlers for source URL ${e}.`));const r=s[0],a=to.getSaveHandlers(t);x(a.length>0,(()=>`Copying failed because no save handler is found for destination URL ${t}.`)),x(a.length<2,(()=>`Copying failed because more than one (${s.length}) save handlers for destination URL ${t}.`));const i=a[0],o=Ao(e).scheme,l=Ao(e).path,u=o===Ao(e).scheme,c=await r.load();n&&u&&await Eo.getManager(o).removeModel(l);const h=await i.save(c);return n&&!u&&await Eo.getManager(o).removeModel(l),h.modelArtifactsInfo}async function Fo(){const e=Eo.getSchemes(),t={};for(const n of e){const e=await Eo.getManager(n).listModels();for(const s in e){t[n+$o+s]=e[s]}}return t}async function Do(e){const t=Ao(e);return Eo.getManager(t.scheme).removeModel(t.path)}async function _o(e,t){return Ro(e,t,!1)}async function Oo(e,t){return Ro(e,t,!0)}class Mo{fetch(e,t){return fetch(e,t)}now(){return performance.now()}encode(e,t){if("utf-8"!==t&&"utf8"!==t)throw new Error(`Browser's encoder only supports utf-8, but got ${t}`);return null==this.textEncoder&&(this.textEncoder=new TextEncoder),this.textEncoder.encode(e)}decode(e,t){return new TextDecoder(t).decode(e)}}if(le().get("IS_BROWSER")){le().setPlatform("browser",new Mo);try{Eo.registerManager(No.URL_SCHEME,new Co)}catch(e){}try{Eo.registerManager(ho.URL_SCHEME,new fo)}catch(e){}}const Lo=()=>a("foUwZ");let zo;function Bo(e,t="float32",n){return t=t||"float32",te(e),new Ur(e,t,n)}le().get("IS_NODE")&&le().setPlatform("node",new class{constructor(){this.util=a("foUwZ"),this.textEncoder=new this.util.TextEncoder}fetch(e,t){return null!=le().global.fetch?le().global.fetch(e,t):(null==zo&&(zo=Lo()),zo(e,t))}now(){const e=pe.hrtime();return 1e3*e[0]+e[1]/1e6}encode(e,t){if("utf-8"!==t&&"utf8"!==t)throw new Error(`Node built-in encoder only supports utf-8, but got ${t}`);return this.textEncoder.encode(e)}decode(e,t){return 0===e.length?"":new this.util.TextDecoder(t).decode(e)}});const Po=Aa({cast_:function(e,t){const n=$a(e,"x","cast");if(!z(t))throw new Error(`Failed to cast to unknown dtype ${t}`);if("string"===t&&"string"!==n.dtype||"string"!==t&&"string"===n.dtype)throw new Error("Only strings can be casted to strings");const s={x:n},r={dtype:t};return ya.runKernel(Ye,s,r)}});const Wo=Aa({clone_:function(e){const t={x:$a(e,"x","clone","string_or_numeric")};return ya.runKernel(Pt,t)}});ga();Gr={buffer:Bo,cast:Po,clone:Wo,print:function(e,t=!1){console.log(e.toString(t))}};var Uo={};t(Uo,"copyModel",(()=>_o)),t(Uo,"listModels",(()=>Fo)),t(Uo,"moveModel",(()=>Oo)),t(Uo,"removeModel",(()=>Do)),t(Uo,"browserFiles",(()=>jo)),t(Uo,"browserHTTPRequest",(()=>tl)),t(Uo,"concatenateArrayBuffers",(()=>Xi)),t(Uo,"decodeWeights",(()=>Hi)),t(Uo,"encodeWeights",(()=>Gi)),t(Uo,"fromMemory",(()=>rl)),t(Uo,"getLoadHandlers",(()=>ao)),t(Uo,"getModelArtifactsForJSON",(()=>Ji)),t(Uo,"getModelArtifactsInfoForJSON",(()=>Qi)),t(Uo,"getSaveHandlers",(()=>ro)),t(Uo,"http",(()=>el)),t(Uo,"isHTTPScheme",(()=>Jo)),t(Uo,"loadWeights",(()=>Xo)),t(Uo,"registerLoadRouter",(()=>so)),t(Uo,"registerSaveRouter",(()=>no)),t(Uo,"weightsLoaderFactory",(()=>Yo)),t(Uo,"withSaveHandler",(()=>al));function Vo(e){return new Promise((e=>setTimeout(e))).then(e)}class Go{constructor(e){if(!le().getBool("IS_BROWSER"))throw new Error("browserDownloads() cannot proceed because the current environment is not a browser.");e.startsWith(Go.URL_SCHEME)&&(e=e.slice(Go.URL_SCHEME.length)),null!=e&&0!==e.length||(e="model"),this.modelJsonFileName=e+".json",this.weightDataFileName=e+".weights.bin"}async save(e){if("undefined"==typeof document)throw new Error("Browser downloads are not supported in this environment since `document` is not present");const t=window.URL.createObjectURL(new Blob([e.weightData],{type:"application/octet-stream"}));if(e.modelTopology instanceof ArrayBuffer)throw new Error("BrowserDownloads.save() does not support saving model topology in binary formats yet.");{const n=Zi(e,[{paths:["./"+this.weightDataFileName],weights:e.weightSpecs}]),s=window.URL.createObjectURL(new Blob([JSON.stringify(n)],{type:"application/json"})),r=null==this.modelJsonAnchor?document.createElement("a"):this.modelJsonAnchor;if(r.download=this.modelJsonFileName,r.href=s,await Vo((()=>r.dispatchEvent(new MouseEvent("click")))),null!=e.weightData){const e=null==this.weightDataAnchor?document.createElement("a"):this.weightDataAnchor;e.download=this.weightDataFileName,e.href=t,await Vo((()=>e.dispatchEvent(new MouseEvent("click"))))}return{modelArtifactsInfo:Qi(e)}}}}Go.URL_SCHEME="downloads://";class Ho{constructor(e){if(null==e||e.length<1)throw new Error(`When calling browserFiles, at least 1 file is required, but received ${e}`);this.jsonFile=e[0],this.weightsFiles=e.slice(1)}async load(){return new Promise(((e,t)=>{const n=new FileReader;n.onload=n=>{const s=JSON.parse(n.target.result),r=s.modelTopology;if(null==r)return void t(new Error(`modelTopology field is missing from file ${this.jsonFile.name}`));if(null==s.weightsManifest)return void t(new Error(`weightManifest field is missing from file ${this.jsonFile.name}`));if(0===this.weightsFiles.length)return void e({modelTopology:r});const a=Ji(s,(e=>this.loadWeights(e)));e(a)},n.onerror=e=>t(`Failed to read model topology and weights manifest JSON from file '${this.jsonFile.name}'. BrowserFiles supports loading Keras-style tf.Model artifacts only.`),n.readAsText(this.jsonFile)}))}loadWeights(e){const t=[],n=[];for(const s of e)t.push(...s.weights),n.push(...s.paths);const s=this.checkManifestAndWeightFiles(e),r=n.map((e=>this.loadWeightsFile(e,s[e])));return Promise.all(r).then((e=>[t,Xi(e)]))}loadWeightsFile(e,t){return new Promise(((n,s)=>{const r=new FileReader;r.onload=e=>{const t=e.target.result;n(t)},r.onerror=t=>s(`Failed to weights data from file of path '${e}'.`),r.readAsArrayBuffer(t)}))}checkManifestAndWeightFiles(e){const t=[],n=this.weightsFiles.map((e=>Yi(e.name))),s={};for(const r of e)r.paths.forEach((e=>{const r=Yi(e);if(-1!==t.indexOf(r))throw new Error(`Duplicate file basename found in weights manifest: '${r}'`);if(t.push(r),-1===n.indexOf(r))throw new Error(`Weight file with basename '${r}' is not provided.`);s[e]=this.weightsFiles[n.indexOf(r)]}));if(t.length!==this.weightsFiles.length)throw new Error(`Mismatch in the number of files in weights manifest (${t.length}) and the number of weight files provided (${this.weightsFiles.length}).`);return s}}function jo(e){return new Ho(e)}function qo(e,t,n,s){var r,a,i;x(null!=(r=e)&&Array.isArray(r)&&r.length>0,(()=>"promises must be a none empty array")),i=s=null==s?1:s,x((a=n=null==n?0:n)>=0&&a<=1,(()=>`Progress fraction must be in range [0, 1], but got startFraction ${a}`)),x(i>=0&&i<=1,(()=>`Progress fraction must be in range [0, 1], but got endFraction ${i}`)),x(i>=a,(()=>`startFraction must be no more than endFraction, but got startFraction ${a} and endFraction ${i}`));let o=0;return Promise.all(e.map((r=>(r.then((r=>{const a=n+ ++o/e.length*(s-n);return t(a),r})),r))))}async function Ko(e,t){null==t&&(t={});const n=null==t.fetchFunc?le().platform.fetch:t.fetchFunc,s=e.map((e=>n(e,t.requestInit,{isBinary:!0}))),r=(null==t.onProgress?await Promise.all(s):await qo(s,t.onProgress,0,.5)).map((e=>e.arrayBuffer()));return null==t.onProgress?await Promise.all(r):await qo(r,t.onProgress,.5,1)}async function Xo(e,t="",n,s){return Yo((e=>Ko(e,{requestInit:s})))(e,t,n)}function Yo(e){return async(t,n="",s)=>{const r=t.map((()=>!1)),a={},i=null!=s?s.map((()=>!1)):[],o=[];if(t.forEach(((e,t)=>{let n=0;e.weights.forEach((e=>{const l="quantization"in e?e.quantization.dtype:e.dtype,u=_a[l]*I(e.shape),c=()=>{r[t]=!0,null==a[t]&&(a[t]=[]),a[t].push({manifestEntry:e,groupOffset:n,sizeBytes:u})};null!=s?s.forEach(((t,n)=>{t===e.name&&(c(),i[n]=!0)})):c(),o.push(e.name),n+=u}))})),!i.every((e=>e))){const e=s.filter(((e,t)=>!i[t]));throw new Error(`Could not find weights in manifest with names: ${e.join(", ")}. \nManifest JSON has weights with names: ${o.join(", ")}.`)}const l=r.reduce(((e,t,n)=>(t&&e.push(n),e)),[]),u=[];l.forEach((e=>{t[e].paths.forEach((e=>{const t=n+(n.endsWith("/")?"":"/")+e;u.push(t)}))}));const c=await e(u),h={};let p=0;return l.forEach((e=>{const n=t[e].paths.length;let s=0;for(let e=0;e<n;e++)s+=c[p+e].byteLength;const r=new ArrayBuffer(s),i=new Uint8Array(r);let o=0;for(let e=0;e<n;e++){const t=new Uint8Array(c[p+e]);i.set(t,o),o+=t.byteLength}a[e].forEach((e=>{const t=Hi(r.slice(e.groupOffset,e.groupOffset+e.sizeBytes),[e.manifestEntry]);for(const e in t)h[e]=t[e]})),p+=n})),h}}to.registerSaveRouter((e=>le().getBool("IS_BROWSER")&&!Array.isArray(e)&&e.startsWith(Go.URL_SCHEME)?function(e="model"){return new Go(e)}(e.slice(Go.URL_SCHEME.length)):null));class Zo{constructor(e,t){if(this.DEFAULT_METHOD="POST",null==t&&(t={}),this.weightPathPrefix=t.weightPathPrefix,this.onProgress=t.onProgress,this.weightUrlConverter=t.weightUrlConverter,null!=t.fetchFunc?(x("function"==typeof t.fetchFunc,(()=>"Must pass a function that matches the signature of `fetch` (see https://developer.mozilla.org/en-US/docs/Web/API/Fetch_API)")),this.fetch=t.fetchFunc):this.fetch=le().platform.fetch,x(null!=e&&e.length>0,(()=>"URL path for http must not be null, undefined or empty.")),Array.isArray(e)&&x(2===e.length,(()=>`URL paths for http must have a length of 2, (actual length is ${e.length}).`)),this.path=e,null!=t.requestInit&&null!=t.requestInit.body)throw new Error("requestInit is expected to have no pre-existing body, but has one.");this.requestInit=t.requestInit||{}}async save(e){if(e.modelTopology instanceof ArrayBuffer)throw new Error("BrowserHTTPRequest.save() does not support saving model topology in binary formats yet.");const t=Object.assign({method:this.DEFAULT_METHOD},this.requestInit);t.body=new FormData;const n=Zi(e,[{paths:["./model.weights.bin"],weights:e.weightSpecs}]);t.body.append("model.json",new Blob([JSON.stringify(n)],{type:"application/json"}),"model.json"),null!=e.weightData&&t.body.append("model.weights.bin",new Blob([e.weightData],{type:"application/octet-stream"}),"model.weights.bin");const s=await this.fetch(this.path,t);if(s.ok)return{modelArtifactsInfo:Qi(e),responses:[s]};throw new Error(`BrowserHTTPRequest.save() failed due to HTTP response status ${s.status}.`)}async load(){const e=await this.fetch(this.path,this.requestInit);if(!e.ok)throw new Error(`Request to ${this.path} failed with status code ${e.status}. Please verify this URL points to the model JSON of the model to load.`);let t;try{t=await e.json()}catch(e){let t=`Failed to parse model JSON of response from ${this.path}.`;throw this.path.endsWith(".pb")?t+=" Your path contains a .pb file extension. Support for .pb models have been removed in TensorFlow.js 1.0 in favor of .json models. You can re-convert your Python TensorFlow model using the TensorFlow.js 1.0 conversion scripts or you can convert your.pb models with the 'pb2json'NPM script in the tensorflow/tfjs-converter repository.":t+=" Please make sure the server is serving valid JSON for this request.",new Error(t)}const n=t.modelTopology,s=t.weightsManifest;if(null==n&&null==s)throw new Error(`The JSON from HTTP path ${this.path} contains neither model topology or manifest for weights.`);return Ji(t,(e=>this.loadWeights(e)))}async loadWeights(e){const t=Array.isArray(this.path)?this.path[1]:this.path,[n,s]=function(e){const t=e.lastIndexOf("/"),n=e.lastIndexOf("?"),s=e.substring(0,t),r=n>t?e.substring(n):"";return[s+"/",r]}(t),r=this.weightPathPrefix||n,a=[];for(const t of e)a.push(...t.weights);const i=[],o=[];for(const t of e)for(const e of t.paths)null!=this.weightUrlConverter?o.push(this.weightUrlConverter(e)):i.push(r+e+s);this.weightUrlConverter&&i.push(...await Promise.all(o));return[a,Xi(await Ko(i,{requestInit:this.requestInit,fetchFunc:this.fetch,onProgress:this.onProgress}))]}}function Jo(e){return null!=e.match(Zo.URL_SCHEME_REGEX)}Zo.URL_SCHEME_REGEX=/^https?:\/\//;const Qo=(e,t)=>{if("undefined"==typeof fetch&&(null==t||null==t.fetchFunc))return null;{let n=!0;if(n=Array.isArray(e)?e.every((e=>Jo(e))):Jo(e),n)return el(e,t)}return null};function el(e,t){return new Zo(e,t)}function tl(e,t){return el(e,t)}
/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */to.registerSaveRouter(Qo),to.registerLoadRouter(Qo);class nl{constructor(e){this.modelArtifacts=e}async load(){return this.modelArtifacts}}class sl{constructor(e){this.saveHandler=e}async save(e){return this.saveHandler(e)}}function rl(e,t,n,s){if(1===arguments.length){return null!=e.modelTopology||null!=e.weightSpecs?new nl(e):(console.warn("Please call tf.io.fromMemory() with only one argument. The argument should be of type ModelArtifacts. The multi-argument signature of tf.io.fromMemory() has been deprecated and will be removed in a future release."),new nl({modelTopology:e}))}return console.warn("Please call tf.io.fromMemory() with only one argument. The argument should be of type ModelArtifacts. The multi-argument signature of tf.io.fromMemory() has been deprecated and will be removed in a future release."),new nl({modelTopology:e,weightSpecs:t,weightData:n,trainingConfig:s})}function al(e){return new sl(e)}var il={};function ol(e,t){const n=e.length,s=[];for(let r=0;r<n;r++){const a=n-1-r,i=e[a]||1;(t[t.length-1-r]||1)>1&&1===i&&s.unshift(a)}return s}function ll(e,t){const n=[];for(let s=0;s<t.length;s++){const r=e[e.length-s-1],a=t.length-s-1,i=t[a];(null==r||1===r&&i>1)&&n.unshift(a)}return n}function ul(e,t){const n=[],s=Math.max(e.length,t.length);for(let r=0;r<s;r++){let s=e[e.length-r-1];null==s&&(s=1);let a=t[t.length-r-1];if(null==a&&(a=1),1===s)n.unshift(a);else if(1===a)n.unshift(s);else{if(s!==a){throw Error(`Operands could not be broadcast together with shapes ${e} and ${t}.`)}n.unshift(s)}}return n}t(il,"getBroadcastDims",(()=>ol)),t(il,"getReductionAxes",(()=>ll)),t(il,"assertAndGetBroadcastShape",(()=>ul));var cl={};let hl;function pl(e,t=3){if(t>4)throw new Error("Cannot construct Tensor with more than 4 channels from pixels.");if(null==e)throw new Error("pixels passed to tf.browser.fromPixels() can not be null");let n=!1,s=!1,r=!1,a=!1,i=!1,o=!1;if(e.data instanceof Uint8Array)n=!0;else if("undefined"!=typeof ImageData&&e instanceof ImageData)s=!0;else if("undefined"!=typeof HTMLVideoElement&&e instanceof HTMLVideoElement)r=!0;else if("undefined"!=typeof HTMLImageElement&&e instanceof HTMLImageElement)a=!0;else if(null!=e.getContext)i=!0;else{if(!("undefined"!=typeof ImageBitmap&&e instanceof ImageBitmap))throw new Error(`pixels passed to tf.browser.fromPixels() must be either an HTMLVideoElement, HTMLImageElement, HTMLCanvasElement, ImageData in browser, or OffscreenCanvas, ImageData in webworker or {data: Uint32Array, width: number, height: number}, but was ${e.constructor.name}`);o=!0}if(r){const t=2;if(r&&e.readyState<t)throw new Error("The video element has not loaded data yet. Please wait for `loadeddata` event on the <video> element.")}if(null!=Ms(Ts,ya.backendName)){const n={pixels:e},s={numChannels:t};return ya.runKernel(Ts,n,s)}const[l,u]=r?[e.videoWidth,e.videoHeight]:[e.width,e.height];let c,h;if(i)c=e.getContext("2d").getImageData(0,0,l,u).data;else if(s||n)c=e.data;else if(a||r||o){if(null==hl)if("undefined"==typeof document){if("undefined"==typeof OffscreenCanvas||"undefined"==typeof OffscreenCanvasRenderingContext2D)throw new Error("Cannot parse input in current context. Reason: OffscreenCanvas Context2D rendering is not supported.");hl=new OffscreenCanvas(1,1).getContext("2d")}else hl=document.createElement("canvas").getContext("2d");hl.canvas.width=l,hl.canvas.height=u,hl.drawImage(e,0,0,l,u),c=hl.getImageData(0,0,l,u).data}if(4===t)h=new Int32Array(c);else{const e=l*u;h=new Int32Array(e*t);for(let n=0;n<e;n++)for(let e=0;e<t;++e)h[n*t+e]=c[4*n+e]}return function(e,t,n){if(v(e),null!=t&&3!==t.length)throw new Error("tensor3d() requires shape to have three numbers");const s=Na(e,n);if(3!==s.length&&1!==s.length)throw new Error("tensor3d() requires values to be number[][][] or flat/TypedArray");if(1===s.length&&null==t)throw new Error("tensor3d() requires shape to be provided when `values` are a flat array");return Fa(e,t,s,n)}(h,[u,l,t],"int32")}function dl(e){return"undefined"!=typeof window&&"undefined"!=typeof ImageBitmap&&window.hasOwnProperty("createImageBitmap")&&!(e instanceof ImageBitmap)&&function(e){return null!=e&&0!==e.width&&0!==e.height}(e)&&!function(e){return null!=e&&e.data instanceof Uint8Array}(e)}async function fl(e,t=3){let n=null;if(le().getBool("WRAP_TO_IMAGEBITMAP")&&dl(e)){let t;try{t=await createImageBitmap(e,{premultiplyAlpha:"none"})}catch(e){t=null}n=null!=t&&t.width===e.width&&t.height===e.height?t:e}else n=e;return pl(n,t)}async function ml(e,t){let n=$a(e,"img","toPixels");if(!(e instanceof jr)){const e=n;n=Po(e,"int32"),e.dispose()}if(2!==n.rank&&3!==n.rank)throw new Error(`toPixels only supports rank 2 or 3 tensors, got rank ${n.rank}.`);const[s,r]=n.shape.slice(0,2),a=2===n.rank?1:n.shape[2];if(a>4||2===a)throw new Error(`toPixels only supports depth of size 1, 3 or 4 but got ${a}`);if("float32"!==n.dtype&&"int32"!==n.dtype)throw new Error(`Unsupported type for toPixels: ${n.dtype}. Please use float32 or int32 tensors.`);const i=await n.data(),o="float32"===n.dtype?255:1,l=new Uint8ClampedArray(r*s*4);for(let e=0;e<s*r;++e){const t=[0,0,0,255];for(let s=0;s<a;s++){const r=i[e*a+s];if("float32"===n.dtype){if(r<0||r>1)throw new Error(`Tensor values for a float32 Tensor must be in the range [0 - 1] but encountered ${r}.`)}else if("int32"===n.dtype&&(r<0||r>255))throw new Error(`Tensor values for a int32 Tensor must be in the range [0 - 255] but encountered ${r}.`);1===a?(t[0]=r*o,t[1]=r*o,t[2]=r*o):t[s]=r*o}const s=4*e;l[s+0]=Math.round(t[0]),l[s+1]=Math.round(t[1]),l[s+2]=Math.round(t[2]),l[s+3]=Math.round(t[3])}if(null!=t){t.width=r,t.height=s;const e=t.getContext("2d"),n=new ImageData(l,r,s);e.putImageData(n,0,0)}return n!==e&&n.dispose(),l}t(cl,"fromPixelsAsync",(()=>fl)),t(cl,"toPixels",(()=>ml)),t(cl,"fromPixels",(()=>gl));const gl=Aa({fromPixels_:pl});var yl={};t(yl,"assertParamsValid",(()=>bl)),t(yl,"maskToAxes",(()=>xl)),t(yl,"computeOutShape",(()=>wl)),t(yl,"stridesWithElidedDims",(()=>vl)),t(yl,"getNormalizedAxes",(()=>Sl)),t(yl,"startIndicesWithElidedDims",(()=>Nl)),t(yl,"stopIndicesWithElidedDims",(()=>Tl)),t(yl,"startForAxis",(()=>$l)),t(yl,"stopForAxis",(()=>El)),t(yl,"stridesForAxis",(()=>Cl)),t(yl,"isSliceContinous",(()=>Al)),t(yl,"computeFlatOffset",(()=>Rl)),t(yl,"parseSliceParams",(()=>Fl)),t(yl,"sliceInfo",(()=>Dl));function bl(e,t,n){const s=e.shape.length;x(s===t.length,(()=>`Error in slice${s}D: Length of begin ${t} must match the rank of the array (${s}).`)),x(s===n.length,(()=>`Error in slice${s}D: Length of size ${n} must match the rank of the array (${s}).`));for(let r=0;r<s;++r)x(t[r]+n[r]<=e.shape[r],(()=>`Error in slice${s}D: begin[${r}] + size[${r}] (${t[r]+n[r]}) would overflow input.shape[${r}] (${e.shape[r]})`))}function xl(e){const t=[];let n=0;for(;e>0;)1&e&&t.push(n),e/=2,n++;return t}function wl(e,t,n){const s=[];for(let r=0;r<e.length;r++)s[r]=Math.ceil((t[r]-e[r])/n[r]);return s}function vl(e,t,n,s){const r=[...e];for(let e=r.length;e<s.length;e++)r.push(1);for(let e=0;e<n;e++)0===e?r[t]=1:(r.splice(t,0,1),r.pop());return r}function kl(e,t,n){return n<=e?n:n-(t-1)}function Il(e,t){const n=[];for(let s=0;s<e;s++)n.push(t+s);return n}function Sl(e,t,n,s,r,a,i,o,l){const u=e.length;let c=new Array(u),h=new Array(u),p=new Array(u);if(t.length&&n>0){const l=t[0],u=n+1;c=Nl(i,l,u,s,e),h=Tl(o,l,u,r,e),p=vl(a,l,u,e)}else for(let t=0;t<u;t++)c[t]=$l(i,s,a,e,t,l),h[t]=El(o,r,a,e,t,l),p[t]=Cl(a,t,l);return{begin:c,end:h,strides:p}}function Nl(e,t,n,s,r){const a=[...r],i=Il(n,t);for(let r=0;r<a.length;r++)if(i.indexOf(r)>-1)a[r]=0;else{const i=kl(t,n,r);let o=s[i];e&1<<i&&(o=0),a[r]=o}return a}function Tl(e,t,n,s,r){const a=[...r],i=Il(n,t);for(let r=0;r<a.length;r++)if(i.indexOf(r)>-1)a[r]=Number.MAX_SAFE_INTEGER;else{const i=kl(t,n,r);let o=s[i];e&1<<i&&(o=Number.MAX_SAFE_INTEGER),a[r]=o}for(let e=0;e<a.length;e++){const t=r[e];a[e]<0&&(a[e]+=t),a[e]=d(0,a[e],r[e])}return a}function Cl(e,t,n){let s=e[t];return(n&1<<t||null==s)&&(s=1),s}function $l(e,t,n,s,r,a){let i=t[r];const o=n[r]||1;(e&1<<r||a&1<<r||null==i)&&(i=o>0?Number.MIN_SAFE_INTEGER:Number.MAX_SAFE_INTEGER);const l=s[r];return i<0&&(i+=l),i=d(0,i,l-1),i}function El(e,t,n,s,r,a){let i=t[r];const o=n[r]||1;(e&1<<r||a&1<<r||null==i)&&(i=o>0?Number.MAX_SAFE_INTEGER:Number.MIN_SAFE_INTEGER);const l=s[r];return i<0&&(i+=l),i=o>0?d(0,i,l):d(-1,i,l-1),i}function Al(e,t,n){let s=n.length;for(let e=0;e<n.length;e++)if(n[e]>1){s=e;break}for(let r=s+1;r<n.length;r++)if(t[r]>0||n[r]!==e[r])return!1;return!0}function Rl(e,t){let n=e.length>0?e[e.length-1]:1;for(let s=0;s<e.length-1;s++)n+=e[s]*t[s];return n}function Fl(e,t,n){let s;const r=e.shape.length;let a;return s="number"==typeof t?[t,...new Array(r-1).fill(0)]:t.length<r?t.concat(new Array(r-t.length).fill(0)):t.slice(),s.forEach((e=>{x(-1!==e,(()=>"slice() does not support negative begin indexing."))})),a=null==n?new Array(r).fill(-1):"number"==typeof n?[n,...new Array(r-1).fill(-1)]:n.length<r?n.concat(new Array(r-n.length).fill(-1)):n,a=a.map(((t,n)=>t>=0?t:(x(-1===t,(()=>`Negative size values should be exactly -1 but got ${t} for the slice() size at index ${n}.`)),e.shape[n]-s[n]))),[s,a]}function Dl(e,t,n,s,r,a,i,o,l){let u;if(null==s?(u=new Array(t.length),u.fill(1)):u=s,null!=i&&0!=(i&i-1))throw new Error("Multiple ellipses in slice is not allowed.");let c=!1;const h={dims:u.length,numAddAxisAfterEllipsis:0,begin:t.slice(),end:n.slice(),strides:u.slice(),beginMask:r,endMask:a,ellipsisMask:i,newAxisMask:o,shrinkAxisMask:l};for(let e=0;e<h.dims;e++)c&&0!=(1<<e&o)&&h.numAddAxisAfterEllipsis++,1<<e&i&&(c=!0);c||(h.ellipsisMask|=1<<h.dims,h.dims++);const p={dims:e.length,beginMask:0,endMask:0,beginValid:!1,endValid:!1};!function(e,t){t.beginMask=0,t.endMask=0,t.shrinkAxisMask=0;let n=0;t.beginValid=null!=e.begin,t.endValid=null!=e.end,t.begin=new Array(t.dims),t.end=new Array(t.dims),t.strides=new Array(t.dims),t.finalShapeGatherIndices=[],t.finalShapeGatherIndicesSparse=[],t.inputShapeGatherIndicesSparse=new Array(t.dims);for(let s=0;s<e.dims;s++)if(1<<s&e.ellipsisMask){const r=Math.min(t.dims-(e.dims-s)+1+e.numAddAxisAfterEllipsis,t.dims);for(;n<r;n++)t.begin[n]=0,t.end[n]=0,t.strides[n]=1,t.beginMask|=1<<n,t.endMask|=1<<n,t.finalShapeGatherIndices.push(n),t.finalShapeGatherIndicesSparse.push(-1),t.inputShapeGatherIndicesSparse[n]=s}else if(1<<s&e.newAxisMask)t.finalShapeGatherIndices.push(-2),t.finalShapeGatherIndicesSparse.push(-1);else{if(n===t.begin.length)throw Error(`Index out of range using input dim ${n}; input has only ${t.dims} dims, ${t.begin.length}.`);null!=e.begin&&(t.begin[n]=e.begin[s]),null!=e.end&&(t.end[n]=e.end[s]),t.strides[n]=e.strides[s],e.beginMask&1<<s&&(t.beginMask|=1<<n),e.endMask&1<<s&&(t.endMask|=1<<n),e.shrinkAxisMask&1<<s?(t.finalShapeGatherIndices.push(-1),t.finalShapeGatherIndicesSparse.push(-1),t.shrinkAxisMask|=1<<n):(t.finalShapeGatherIndices.push(n),t.finalShapeGatherIndicesSparse.push(s)),t.inputShapeGatherIndicesSparse[n]=s,n++}}(h,p);let d=!0,f=!0,m=!0;const g=[],y=[];for(let t=0;t<e.length;++t){if(0===p.strides[t])throw Error(`strides[${t}] must be non-zero`);const n=!!(p.shrinkAxisMask&1<<t),s=e[t];if(-1===s){g.push(n?1:-1);continue}const r=[p.beginMask&1<<t,p.endMask&1<<t],a=[p.strides[t]>0?0:-1,p.strides[t]>0?s:s-1];if(n&&p.strides[t]<=0)throw Error("only stride 1 allowed on non-range indexing.");m=m&&1===p.strides[t];const i=!!(p.beginMask&1<<t&&p.endMask&1<<t);if(p.beginValid&&p.endValid){if(n){const e=p.begin[t]<0?s+p.begin[t]:p.begin[t];if(p.begin[t]=e,p.end[t]=p.begin[t]+1,e<0||e>=s)throw Error(`slice index ${p.begin[t]} of dimension ${t} out of bounds.`)}else p.begin[t]=_l(p.begin[t],0,p.strides[t],s,r,a),p.end[t]=_l(p.end[t],1,p.strides[t],s,r,a);const e=1===p.strides[t]&&0===p.begin[t]&&p.end[t]===s;d=d&&e,f=f&&(0===t&&1===p.strides[t]||e)}else d=d&&1===p.strides[t]&&i,f=f&&(0===t&&1===p.strides[t]||i);let o,l=!1;if(p.beginValid&&p.endValid?(o=p.end[t]-p.begin[t],l=!0):n?(o=1,l=!0):i&&s>=0&&(o=p.strides[t]<0?-s:s,l=!0),l){let e;e=0===o||o<0!=p.strides[t]<0?0:Math.trunc(o/p.strides[t])+(o%p.strides[t]!=0?1:0),g.push(e)}else g.push(-1)}for(let e=0;e<p.finalShapeGatherIndices.length;++e){const t=p.finalShapeGatherIndices[e];t>=0?y.push(g[t]):-2===t&&y.push(1)}return{finalShapeSparse:y.filter(((e,t)=>-2!==p.finalShapeGatherIndices[t])),finalShape:y,isIdentity:d,sliceDim0:f,isSimpleSlice:m,begin:p.begin,end:p.end,strides:p.strides}}function _l(e,t,n,s,r,a){if(r[t])return n>0?a[t]:a[t+1&1];{const t=e<0?s+e:e;return t<a[0]?a[0]:t>a[1]?a[1]:t}}var Ol={};t(Ol,"Serializable",(()=>Ml)),t(Ol,"SerializationMap",(()=>Ll)),t(Ol,"registerClass",(()=>zl));class Ml{getClassName(){return this.constructor.className}static fromConfig(e,t){return new e(t)}}class Ll{constructor(){this.classNameMap={}}static getMap(){return null==Ll.instance&&(Ll.instance=new Ll),Ll.instance}static register(e){Ll.getMap().classNameMap[e.className]=[e,e.fromConfig]}}function zl(e){x(null!=e.className,(()=>"Class being registered does not have the static className property defined.")),x("string"==typeof e.className,(()=>"className is required to be a string, but got type "+typeof e.className)),x(e.className.length>0,(()=>"Class being registered has an empty-string as its className, which is disallowed.")),Ll.register(e)}
/** @license See the LICENSE file. */var Bl={};t(Bl,"fromUint8ToStringArray",(()=>Pc)),t(Bl,"fromStringArrayToUint8",(()=>Wc)),t(Bl,"slice_util",(()=>yl)),t(Bl,"upcastType",(()=>ia)),t(Bl,"segment_util",(()=>Pl));var Pl={};t(Pl,"segOpComputeOptimalWindowSize",(()=>Gl)),t(Pl,"computeOutShape",(()=>Hl)),t(Pl,"collectGatherOpShapeInfo",(()=>jl));var Wl={};t(Wl,"PARALLELIZE_THRESHOLD",(()=>Ul)),t(Wl,"computeOptimalWindowSize",(()=>Vl));const Ul=30;function Vl(e){return e<=Ul?e:K(e,Math.floor(Math.sqrt(e)))}function Gl(e,t){let n,s=!1;for(e<=Ul?(n=e,s=!0):n=K(e,Math.floor(Math.sqrt(e)));!s;)n>t||n===e?s=!0:n=K(e,n+1);return n}function Hl(e,t,n){const s=[],r=e.length;for(let a=0;a<r;a++)a!==t?s.push(e[a]):s.push(n);return s}function jl(e,t,n,s){const r=t.shape.length,a=e.shape.length;if(0!==s&&(s<-r||s>r))throw new Error(`Expect batchDims in the range of [-${r}, ${r}], but got ${s}`);if(s<0&&(s+=r),s>a)throw new Error(`batchDims (${s}) must be less than rank(x) (\n    ${a}).`);if(n<s)throw new Error(`batchDims (${s}) must be less than or equal to axis (${n}).`);for(let n=0;n<s;++n)if(e.shape[n]!==t.shape[n])throw new Error(`x.shape[${n}]: ${e.shape[n]} should be equal to indices.shape[${n}]: ${t.shape[n]}.`);const i=e.shape[n],o=[];let l=1,u=1,c=1;for(let t=0;t<s;++t)o.push(e.shape[t]),l*=e.shape[t];for(let t=s;t<n;t++)o.push(e.shape[t]),u*=e.shape[t];for(let e=s;e<r;e++)o.push(t.shape[e]);for(let t=n+1;t<a;t++)o.push(e.shape[t]),c*=e.shape[t];return{batchSize:l,sliceSize:c,outerSize:u,dimSize:i,outputShape:o}}var ql={};function Kl(e,t){for(let n=0;n<e.length;++n)if(e[e.length-n-1]!==t-1-n)return!1;return!0}function Xl(e,t,n){const s=e.length+t.length,r=[];let a=0,i=0;for(let o=0;o<s;o++)-1===n.indexOf(o)?r.push(e[a++]):r.push(t[i++]);return r}function Yl(e,t){const n=[],s=e.length;for(let r=0;r<s;r++)-1===t.indexOf(r)&&n.push(e[r]);return[n,t.map((t=>e[t]))]}function Zl(e,t){return Xl(e,t.map((e=>1)),t)}function Jl(e,t,n){x(Kl(t,n),(()=>`${e} supports only inner-most axes for now. Got axes ${t} and rank-${n} input.`))}function Ql(e,t){if(Kl(e,t))return null;const n=[];for(let s=0;s<t;++s)-1===e.indexOf(s)&&n.push(s);return e.forEach((e=>n.push(e))),n}function eu(e){return e.map(((e,t)=>[t,e])).sort(((e,t)=>e[1]-t[1])).map((e=>e[0]))}function tu(e,t){const n=[];for(let s=t-e;s<t;++s)n.push(s);return n}t(ql,"axesAreInnerMostDims",(()=>Kl)),t(ql,"combineLocations",(()=>Xl)),t(ql,"computeOutAndReduceShapes",(()=>Yl)),t(ql,"expandShapeToKeepDim",(()=>Zl)),t(ql,"assertAxesAreInnerMostDims",(()=>Jl)),t(ql,"getAxesPermutation",(()=>Ql)),t(ql,"getUndoAxesPermutation",(()=>eu)),t(ql,"getInnerMostAxes",(()=>tu));var nu={};function su(e,t){const n=e[0].length;e.forEach(((e,t)=>{x(e.length===n,(()=>`Error in concat${n}D: rank of tensors[${t}] must be the same as the rank of the rest (${n})`))})),x(t>=0&&t<n,(()=>`Error in concat${n}D: axis must be between 0 and ${n-1}.`));const s=e[0];e.forEach(((e,r)=>{for(let a=0;a<n;a++)x(a===t||e[a]===s[a],(()=>`Error in concat${n}D: Shape of tensors[${r}] (${e}) does not match the shape of the rest (${s}) along the non-concatenated axis ${r}.`))}))}function ru(e,t){const n=e[0].slice();for(let s=1;s<e.length;s++)n[t]+=e[s][t];return n}t(nu,"assertParamsConsistent",(()=>su)),t(nu,"computeOutShape",(()=>ru));var au={};function iu(e,t,n,s,r="NHWC",a){return uu(e,[...t,e[3]],n,a,s,null,null,bu(r))}function ou(e,t,n,s,r,a,i="channelsLast"){const[o,l]=pu(t);let u;if("channelsLast"===i)u=[o,l,e[3],e[3]];else{if("channelsFirst"!==i)throw new Error(`Unknown dataFormat ${i}`);u=[o,l,e[1],e[1]]}return uu(e,u,n,s,r,a,!1,i)}function lu(e,t,n,s,r,a,i="NDHWC"){const[o,l,u]=du(t);let c,h;if("NDHWC"===i)h="channelsLast",c=[o,l,u,e[4],e[4]];else{if("NCDHW"!==i)throw new Error(`Unknown dataFormat ${i}`);h="channelsFirst",c=[o,l,u,e[1],e[1]]}return cu(e,c,n,s,r,!1,h,a)}function uu(e,t,n,s,r,a,i=!1,o="channelsLast"){let[l,u,c,h]=[-1,-1,-1,-1];if("channelsLast"===o)[l,u,c,h]=e;else{if("channelsFirst"!==o)throw new Error(`Unknown dataFormat ${o}`);[l,h,u,c]=e}const[p,d,,f]=t,[m,g]=pu(n),[y,b]=pu(s),x=fu(p,y),w=fu(d,b),{padInfo:v,outHeight:k,outWidth:I}=function(e,t,n,s,r,a,i,o,l){let u,c,h;if("number"==typeof e){u={top:e,bottom:e,left:e,right:e,type:0===e?"VALID":"NUMBER"};const r=function(e,t,n,s,r){null==s&&(s=hu(e,t,n));const a=e[0],i=e[1],o=mu((a-t+2*s)/n+1,r),l=mu((i-t+2*s)/n+1,r);return[o,l]}([t,n],a,s,e,o);c=r[0],h=r[1]}else if("same"===e){c=Math.ceil(t/s),h=Math.ceil(n/r);const e=Math.max(0,(c-1)*s+a-t),o=Math.max(0,(h-1)*r+i-n),l=Math.floor(e/2),p=e-l,d=Math.floor(o/2);u={top:l,bottom:p,left:d,right:o-d,type:"SAME"}}else if("valid"===e)u={top:0,bottom:0,left:0,right:0,type:"VALID"},c=Math.ceil((t-a+1)/s),h=Math.ceil((n-i+1)/r);else{if("object"!=typeof e)throw Error(`Unknown padding parameter: ${e}`);{const p="channelsLast"===l?e[1][0]:e[2][0],d="channelsLast"===l?e[1][1]:e[2][1],f="channelsLast"===l?e[2][0]:e[3][0],m="channelsLast"===l?e[2][1]:e[3][1];u={top:p,bottom:d,left:f,right:m,type:0===p&&0===d&&0===f&&0===m?"VALID":"EXPLICIT"},c=mu((t-a+p+d)/s+1,o),h=mu((n-i+f+m)/r+1,o)}}return{padInfo:u,outHeight:c,outWidth:h}}(r,u,c,m,g,x,w,a,o),S=i?f*h:f;let N;return"channelsFirst"===o?N=[l,S,k,I]:"channelsLast"===o&&(N=[l,k,I,S]),{batchSize:l,dataFormat:o,inHeight:u,inWidth:c,inChannels:h,outHeight:k,outWidth:I,outChannels:S,padInfo:v,strideHeight:m,strideWidth:g,filterHeight:p,filterWidth:d,effectiveFilterHeight:x,effectiveFilterWidth:w,dilationHeight:y,dilationWidth:b,inShape:e,outShape:N,filterShape:t}}function cu(e,t,n,s,r,a=!1,i="channelsLast",o){let[l,u,c,h,p]=[-1,-1,-1,-1,-1];if("channelsLast"===i)[l,u,c,h,p]=e;else{if("channelsFirst"!==i)throw new Error(`Unknown dataFormat ${i}`);[l,p,u,c,h]=e}const[d,f,m,,g]=t,[y,b,x]=du(n),[w,v,k]=du(s),I=fu(d,w),S=fu(f,v),N=fu(m,k),{padInfo:T,outDepth:C,outHeight:$,outWidth:E}=function(e,t,n,s,r,a,i,o,l,u,c){let h,p,d,f;if("number"==typeof e){h={top:e,bottom:e,left:e,right:e,front:e,back:e,type:0===e?"VALID":"NUMBER"};const a=function(e,t,n,s,r,a){null==r&&(r=hu(e,t,s));const i=e[0],o=e[1],l=e[2],u=mu((i-t+2*r)/s+1,a),c=mu((o-t+2*r)/s+1,a),h=mu((l-t+2*r)/s+1,a);return[u,c,h,n]}([t,n,s,1],o,1,r,e,c);p=a[0],d=a[1],f=a[2]}else if("same"===e){p=Math.ceil(t/r),d=Math.ceil(n/a),f=Math.ceil(s/i);const e=(p-1)*r+o-t,c=(d-1)*a+l-n,m=(f-1)*i+u-s,g=Math.floor(e/2),y=e-g,b=Math.floor(c/2),x=c-b,w=Math.floor(m/2);h={top:b,bottom:x,left:w,right:m-w,front:g,back:y,type:"SAME"}}else{if("valid"!==e)throw Error(`Unknown padding parameter: ${e}`);h={top:0,bottom:0,left:0,right:0,front:0,back:0,type:"VALID"},p=Math.ceil((t-o+1)/r),d=Math.ceil((n-l+1)/a),f=Math.ceil((s-u+1)/i)}return{padInfo:h,outDepth:p,outHeight:d,outWidth:f}}(r,u,c,h,y,b,x,I,S,N,o),A=a?g*p:g;let R;return"channelsFirst"===i?R=[l,A,C,$,E]:"channelsLast"===i&&(R=[l,C,$,E,A]),{batchSize:l,dataFormat:i,inDepth:u,inHeight:c,inWidth:h,inChannels:p,outDepth:C,outHeight:$,outWidth:E,outChannels:A,padInfo:T,strideDepth:y,strideHeight:b,strideWidth:x,filterDepth:d,filterHeight:f,filterWidth:m,effectiveFilterDepth:I,effectiveFilterHeight:S,effectiveFilterWidth:N,dilationDepth:w,dilationHeight:v,dilationWidth:k,inShape:e,outShape:R,filterShape:t}}function hu(e,t,n,s=1){const r=fu(t,s);return Math.floor((e[0]*(n-1)-n+r)/2)}function pu(e){return"number"==typeof e?[e,e,e]:2===e.length?[e[0],e[1],1]:e}function du(e){return"number"==typeof e?[e,e,e]:e}function fu(e,t){return t<=1?e:e+(e-1)*(t-1)}function mu(e,t){if(!t)return Math.trunc(e);switch(t){case"round":return Math.round(e);case"ceil":return Math.ceil(e);case"floor":return Math.floor(e);default:throw new Error(`Unknown roundingMode ${t}`)}}function gu(e){const[t,n,s]=pu(e);return 1===t&&1===n&&1===s}function yu(e,t){return gu(e)||gu(t)}function bu(e){if("NHWC"===e)return"channelsLast";if("NCHW"===e)return"channelsFirst";throw new Error(`Unknown dataFormat ${e}`)}function xu(e,t,n){if(null!=n){if("string"==typeof t)throw Error(`Error in ${e}: pad must be an integer when using dimRoundingMode ${n} but got pad ${t}.`);if("number"==typeof t)x(T(t),(()=>`Error in ${e}: pad must be an integer when using dimRoundingMode ${n} but got pad ${t}.`));else{if("object"!=typeof t)throw Error(`Error in ${e}: Unknown padding parameter: ${t}`);t.forEach((t=>{t.forEach((t=>{x(T(t),(()=>`Error in ${e}: pad must be an integer when using dimRoundingMode ${n} but got pad ${t}.`))}))}))}}}t(au,"computeDilation2DInfo",(()=>iu)),t(au,"convertConv2DDataFormat",(()=>bu)),t(au,"computeConv2DInfo",(()=>uu)),t(au,"computePool2DInfo",(()=>ou)),t(au,"computePool3DInfo",(()=>lu)),t(au,"computeConv3DInfo",(()=>cu)),t(au,"computeDefaultPad",(()=>hu)),t(au,"tupleValuesAreOne",(()=>gu)),t(au,"eitherStridesOrDilationsAreOne",(()=>yu)),t(au,"checkPadOnDimRoundingMode",(()=>xu));var wu={};t(wu,"getFusedDyActivation",(()=>Ru)),t(wu,"getFusedBiasGradient",(()=>Fu)),t(wu,"applyActivation",(()=>Du)),t(wu,"shouldFuse",(()=>_u));const vu=Aa({elu_:function(e){const t={x:$a(e,"x","elu","float32")};return ya.runKernel(It,t)}});const ku=Aa({leakyRelu_:function(e,t=.2){const n={x:$a(e,"x","leakyRelu")},s={alpha:t};return ya.runKernel(jt,n,s)}});const Iu=Aa({mul_:function(e,t){let n=$a(e,"a","mul"),s=$a(t,"b","mul");[n,s]=la(n,s);const r={a:n,b:s};return ya.runKernel(yn,r)}});const Su=Aa({prelu_:function(e,t){const n={x:$a(e,"x","prelu"),alpha:$a(t,"alpha","prelu")};return ya.runKernel($n,n)}});const Nu=Aa({relu_:function(e){const t={x:$a(e,"x","relu")};return ya.runKernel(Dn,t)}});const Tu=Aa({relu6_:function(e){const t={x:$a(e,"x","relu6")};return ya.runKernel(Bn,t)}});const Cu=Aa({reshape_:function(e,t){const n={x:$a(e,"x","reshape","string_or_numeric")},s={shape:t};return ya.runKernel(_n,n,s)}});const $u=Aa({sigmoid_:function(e){const t={x:$a(e,"x","sigmoid","float32")};return ya.runKernel(Yn,t)}});const Eu=Aa({step_:function(e,t=0){const n={x:$a(e,"x","step")},s={alpha:t};return ya.runKernel(Ns,n,s)}});const Au=Aa({sum_:function(e,t=null,n=!1){let s=$a(e,"x","sum");"bool"===s.dtype&&(s=Po(s,"int32"));const r={x:s},a={axis:t,keepDims:n};return ya.runKernel(Qn,r,a)}});function Ru(e,t,n){if(null==n||"linear"===n)return e;if("relu"===n)return Iu(e,Eu(t));throw new Error(`Cannot compute gradient for fused activation ${n}.`)}function Fu(e,t){let n=t;const s=ll(e.shape,t.shape);return s.length>0&&(n=Au(n,s)),Cu(n,e.shape)}function Du(e,t,n,s){if("linear"===t)return e;if("relu"===t)return Nu(e);if("elu"===t)return vu(e);if("relu6"===t)return Tu(e);if("prelu"===t)return Su(e,n);if("leakyrelu"===t)return ku(e,s);if("sigmoid"===t)return $u(e);throw new Error(`Unknown fused activation ${t}.`)}const _u=(e,t)=>!(e>0)||"linear"===t;var Ou={};function Mu(e,t,n){return[n*("number"==typeof e?e:e[0]),t*("number"==typeof e?e:e[1])]}t(Ou,"getImageCenter",(()=>Mu));var Lu={};function zu(e,t,n,s=!0){let r=[];if(s)r=r.concat(t.slice(0)),r.push(e[0]/n),r=r.concat(e.slice(1));else{r=r.concat(e[0]);const n=t.length;for(let s=0;s<n;++s)r=r.concat([e[s+1]/t[s],t[s]]);r=r.concat(e.slice(n+1))}return r}function Bu(e,t,n=!0){const s=[];if(n){s.push(t);for(let n=t+1;n<e;++n)n<=2*t?(s.push(n),s.push(n-(t+1))):s.push(n)}else{const n=[],r=[];for(let s=1;s<e;++s)s>=2*t+1||s%2==1?r.push(s):n.push(s);s.push(...n),s.push(0),s.push(...r)}return s}function Pu(e,t,n,s=!0){const r=[];s?r.push(e[0]/n):r.push(e[0]*n);for(let n=1;n<e.length;++n)n<=t.length?s?r.push(t[n-1]*e[n]):r.push(e[n]/t[n-1]):r.push(e[n]);return r}function Wu(e,t){const n=[0];for(let s=0;s<t;++s)n.push(e[s][0]);return n}function Uu(e,t,n){const s=e.slice(0,1);for(let r=0;r<n;++r)s.push(e[r+1]-t[r][0]-t[r][1]);return s}t(Lu,"getReshaped",(()=>zu)),t(Lu,"getPermuted",(()=>Bu)),t(Lu,"getReshapedPermuted",(()=>Pu)),t(Lu,"getSliceBeginCoords",(()=>Wu)),t(Lu,"getSliceSize",(()=>Uu));var Vu={};function Gu(e,t){const n=e.shape.length,s=t.shape.length;if(n<1)throw new Error(`tf.gatherND() expects the input to be rank 1 or higher, but the rank was ${n}.`);if(s<1)throw new Error(`tf.gatherND() expects the indices to be rank 1 or higher, but the rank was ${s}.`);if("int32"!==t.dtype)throw new Error(`tf.gatherND() expects the indices to be int32 type, but the dtype was ${t.dtype}.`);if(t.shape[s-1]>n)throw new Error(`index innermost dimension length must be <= tensor rank; saw: ${t.shape[s-1]} vs. ${n}`);if(0===I(e.shape))throw new Error(`Requested more than 0 entries, but input is empty. Input shape: ${e.shape}.`);const r=t.shape,a=r[r.length-1];let i=1;for(let e=0;e<r.length-1;++e)i*=r[e];const o=e.shape,l=r.slice();l.pop();let u=1;for(let e=a;e<n;++e)u*=o[e],l.push(o[e]);const c=[...X(e.shape).map((e=>e/u)),1].slice(0,a);return[l,i,u,c]}t(Vu,"prepareAndValidate",(()=>Gu));var Hu={};function ju(e,t,n){const s=t.rank>1?t.shape[t.rank-1]:1,r=t.rank>1?t.rank-1:1,a=`Must have updates.shape = indices.shape[:batchDim] + shape[sliceDim:], got updates.shape: ${n.shape}, indices.shape: ${t.shape}, shape: ${e}, sliceDim: ${s}, and batchDim: ${r}.`;if(n.rank<r)throw new Error(a+` update.rank < ${r}. `);if(e.length<s+(n.rank-r))throw new Error(a+` Output shape length < ${s+(n.rank-r)}`);if(n.rank!==r+e.length-s)throw new Error(a+" update.rank != "+(r+e.length-s));for(let e=0;e<r;++e)if(n.shape[e]!==t.shape[e])throw new Error(a+` updates.shape[${e}] (${n.shape[e]}) != indices.shape[${e}] (${t.shape[e]}).`);for(let t=0;t<n.rank-r;++t)if(n.shape[t+r]!==e[t+s])throw new Error(a+` updates.shape[${t+r}] (${n.shape[t+r]}) != shape[${t+r}] (${e[t+r]})`)}function qu(e,t,n){if(t.rank<1)throw new Error(`tf.scatterND() expects the indices to be rank 1 or higher, but the rank was ${t.rank}.`);if(e.rank<1)throw new Error(`tf.scatterND() expects the updates to be rank 1 or higher, but the rank was ${e.rank}.`);if("int32"!==t.dtype)throw new Error(`The dtype of 'indices' should be int32, but got dtype: ${t.dtype}`);if(n.length<1)throw new Error(`Output rank must be greater or equal to 1, but got shape: ${n}`);if(0===n.length){if(0===t.size)throw new Error(`Indices specified for empty output. indices shape: ${t.shape}`);if(0===e.size)throw new Error(`Updates specified for empty output. updates shape: ${e.shape}`)}ju(n,t,e)}function Ku(e,t,n){const s=t.shape.length,r=s>1?t.shape[s-1]:1,a=n.length;let i=1;for(let e=r;e<a;++e)i*=n[e];const o=r<1?1:r;return{sliceRank:r,numUpdates:I(t.shape)/o,sliceSize:i,strides:[...X(n.slice(0,r)),1],outputSize:I(n)}}t(Hu,"validateUpdateShape",(()=>ju)),t(Hu,"validateInput",(()=>qu)),t(Hu,"calculateShapes",(()=>Ku));var Xu={};t(Xu,"SELU_SCALEALPHA",(()=>Yu)),t(Xu,"SELU_SCALE",(()=>Zu));const Yu=1.7580993408473768,Zu=1.0507009873554805;var Ju={};t(Ju,"ERF_P",(()=>Qu)),t(Ju,"ERF_A1",(()=>ec)),t(Ju,"ERF_A2",(()=>tc)),t(Ju,"ERF_A3",(()=>nc)),t(Ju,"ERF_A4",(()=>sc)),t(Ju,"ERF_A5",(()=>rc));const Qu=.3275911,ec=.254829592,tc=-.284496736,nc=1.421413741,sc=-1.453152027,rc=1.061405429;var ac={};function ic(e,t){if(e.length!==t.length)throw new Error(`Cannot merge real and imag arrays of different lengths. real:${e.length}, imag: ${t.length}.`);const n=new Float32Array(2*e.length);for(let s=0;s<n.length;s+=2)n[s]=e[s/2],n[s+1]=t[s/2];return n}function oc(e){const t=new Float32Array(e.length/2),n=new Float32Array(e.length/2);for(let s=0;s<e.length;s+=2)t[s/2]=e[s],n[s/2]=e[s+1];return{real:t,imag:n}}function lc(e){const t=Math.ceil(e.length/4),n=new Float32Array(t),s=new Float32Array(t);for(let t=0;t<e.length;t+=4)n[Math.floor(t/4)]=e[t],s[Math.floor(t/4)]=e[t+1];return{real:n,imag:s}}function uc(e){const t=Math.floor(e.length/4),n=new Float32Array(t),s=new Float32Array(t);for(let t=2;t<e.length;t+=4)n[Math.floor(t/4)]=e[t],s[Math.floor(t/4)]=e[t+1];return{real:n,imag:s}}function cc(e,t){return{real:e[2*t],imag:e[2*t+1]}}function hc(e,t,n,s){e[2*s]=t,e[2*s+1]=n}function pc(e,t){const n=new Float32Array(e/2),s=new Float32Array(e/2);for(let r=0;r<Math.ceil(e/2);r++){const a=(t?2:-2)*Math.PI*(r/e);n[r]=Math.cos(a),s[r]=Math.sin(a)}return{real:n,imag:s}}function dc(e,t,n){const s=(n?2:-2)*Math.PI*(e/t);return{real:Math.cos(s),imag:Math.sin(s)}}t(ac,"mergeRealAndImagArrays",(()=>ic)),t(ac,"splitRealAndImagArrays",(()=>oc)),t(ac,"complexWithEvenIndex",(()=>lc)),t(ac,"complexWithOddIndex",(()=>uc)),t(ac,"getComplexWithIndex",(()=>cc)),t(ac,"assignToTypedArray",(()=>hc)),t(ac,"exponents",(()=>pc)),t(ac,"exponent",(()=>dc));var fc={};t(fc,"decodeEinsumEquation",(()=>yc)),t(fc,"getEinsumPermutation",(()=>bc)),t(fc,"checkEinsumDimSizes",(()=>xc)),t(fc,"getEinsumComputePath",(()=>wc)),t(fc,"isIdentityPermutation",(()=>vc));const mc="->",gc=/->/g;function yc(e,t){const n=((e=e.replace(/\s/g,"")).length-e.replace(gc,"").length)/mc.length;if(n<1)throw new Error("Equations without an arrow are not supported.");if(n>1)throw new Error('Equation must contain exactly one arrow ("->").');const[s,r]=e.split(mc);x(-1===s.indexOf("..."),(()=>'The ellipsis notation ("...") is not supported yet.'));const a=s.split(","),i=a.length;if(t!==i)throw new Error(`Expected ${i} input tensors, received ${t}`);if(i>2)throw new Error("Support for more than 2 input tensors is not implemented yet.");const o=[];for(let e=0;e<r.length;++e){const t=r[e];if(!a.some((e=>-1!==e.indexOf(t))))throw new Error(`Output subscripts contain the label ${t} not present in the input subscripts.`);-1===o.indexOf(t)&&o.push(t)}for(let e=0;e<s.length;++e){const t=s[e];-1===o.indexOf(t)&&","!==t&&o.push(t)}const l=new Array(a.length);for(let e=0;e<i;++e){if(new Set(a[e].split("")).size!==a[e].length)throw new Error(`Found duplicate axes in input component ${a[e]}. Support for duplicate axes in input is not implemented yet.`);l[e]=[];for(let t=0;t<a[e].length;++t)l[e].push(o.indexOf(a[e][t]))}const u=o.length,c=[];for(let e=r.length;e<u;++e)c.push(e);return{allDims:o,summedDims:c,idDims:l}}function bc(e,t){let n=new Array(e);n.fill(-1);for(let e=0;e<t.length;++e)n[t[e]]=e;const s=[];for(let t=0;t<e;++t)-1===n[t]&&s.push(t);return n=n.filter((e=>-1!==e)),{permutationIndices:n,expandDims:s}}function xc(e,t,n){const s=new Array(e);for(let e=0;e<n.length;++e){const r=n[e].shape;for(let n=0;n<t[e].length;++n)void 0===s[t[e][n]]?s[t[e][n]]=r[n]:x(s[t[e][n]]===r[n],(()=>`Expected dimension ${s[t[e][n]]} at axis ${n} of input shaped ${JSON.stringify(r)}, but got dimension ${r[n]}`))}}function wc(e,t){const n=e,s=[];let r=0;0===e.length&&n.push(-1),r=e.length+1;for(let e=0;e<r;++e)s.push([]);const a=[];for(let e=0;e<n.length;++e){const r=kc(t,n[e]);for(const t of r)-1===a.indexOf(t)&&(s[e].push(t),a.push(t))}return{path:n,steps:s}}function vc(e){return e.every(((e,t)=>e===t))}function kc(e,t){const n=[];for(let s=0;s<e.length;++s)0!==e[s].length&&-1===e[s].indexOf(t)&&-1!==t||n.push(s);return n}var Ic={};function Sc(e,t,n=0){let s=[];if("number"==typeof t)x(e.shape[n]%t==0,(()=>"Number of splits must evenly divide the axis.")),s=new Array(t).fill(e.shape[n]/t);else{x(t.reduce(((e,t)=>(-1===t&&(e+=1),e)),0)<=1,(()=>"There should be only one negative value in split array."));const r=t.indexOf(-1);if(-1!==r){const s=t.reduce(((e,t)=>t>0?e+t:e));t[r]=e.shape[n]-s}x(e.shape[n]===t.reduce(((e,t)=>e+t)),(()=>"The sum of sizes must match the size of the axis dimension.")),s=t}return s}t(Ic,"prepareSplitSize",(()=>Sc));var Nc={};function Tc(e){return`Received SparseTensor with denseShape[0] = 0 but\n  indices.shape[0] = ${e}`}function Cc(e,t){return`indices(${e}, 0) is invalid: ${t} < 0`}function $c(e,t,n){return`indices(${e}, 0) is invalid: ${t} >= ${n}`}t(Nc,"getSparseFillEmptyRowsIndicesDenseShapeMismatch",(()=>Tc)),t(Nc,"getSparseFillEmptyRowsNegativeIndexErrorMessage",(()=>Cc)),t(Nc,"getSparseFillEmptyRowsOutOfRangeIndexErrorMessage",(()=>$c));var Ec={};function Ac(e,t){return`only one output dimension may be -1, not both ${e} and ${t}`}function Rc(e,t){return`size ${e} must be non-negative, not ${t}`}function Fc(){return"reshape cannot infer the missing input size for an empty tensor unless all specified input sizes are non-zero"}function Dc(e,t){return`Input to reshape is a SparseTensor with ${I(e)}\n  dense values, but the requested shape requires a multiple of ${I(t)}. inputShape=${e} outputShape= ${t}`}function _c(e,t){return`Input to reshape is a tensor with ${I(e)} dense values, but the requested shape has ${I(t)}. inputShape=${e} outputShape=${t}`}t(Ec,"getSparseReshapeMultipleNegativeOneOutputDimErrorMessage",(()=>Ac)),t(Ec,"getSparseReshapeNegativeOutputDimErrorMessage",(()=>Rc)),t(Ec,"getSparseReshapeEmptyTensorZeroOutputDimErrorMessage",(()=>Fc)),t(Ec,"getSparseReshapeInputOutputMultipleErrorMessage",(()=>Dc)),t(Ec,"getSparseReshapeInputOutputMismatchErrorMessage",(()=>_c));var Oc={};function Mc(){return"segment ids must be >= 0"}function Lc(){return"segment ids are not increasing"}function zc(e,t){return`Segment id ${e} out of range [0, ${t}), possibly because segmentIds input is not sorted.`}function Bc(e,t,n){return`Bad: indices[${e}] == ${t} out of range [0, ${n})`}function Pc(e){try{return e.map((e=>Dr(e)))}catch(e){throw new Error(`Failed to decode encoded string bytes into utf-8, error: ${e}`)}}function Wc(e){return e.map((e=>Fr(e)))}t(Oc,"getSparseSegmentReductionNegativeSegmentIdsErrorMessage",(()=>Mc)),t(Oc,"getSparseSegmentReductionNonIncreasingSegmentIdsErrorMessage",(()=>Lc)),t(Oc,"getSparseSegmentReductionSegmentIdOutOfRangeErrorMessage",(()=>zc)),t(Oc,"getSparseSegmentReductionIndicesOutOfRangeErrorMessage",(()=>Bc)),n(Bl,ql),n(Bl,il),n(Bl,nu),n(Bl,au),n(Bl,wu),n(Bl,Wl),n(Bl,Ou),n(Bl,Lu),n(Bl,Vu),n(Bl,Hu),n(Bl,Xu),n(Bl,Ju),n(Bl,Rs),n(Bl,ac),n(Bl,fc),n(Bl,Ic),n(Bl,Nc),n(Bl,Ec),n(Bl,Oc);var Uc={};function Vc(e,t,n){const s=function(e,t,n){return function(e,t,n){let s=0,r=e.length,a=0,i=!1;for(;s<r;){a=s+(r-s>>>1);const o=n(t,e[a]);o>0?s=a+1:(r=a,i=!o)}return i?s:-s-1}(e,t,n||Gc)}(e,t,n),r=s<0?-(s+1):s;e.splice(r,0,t)}function Gc(e,t){return e>t?1:e<t?-1:0}function Hc(e,t,n,s,r){return Kc(e,t,n,s,r,0)}function jc(e,t,n,s,r,a){return Kc(e,t,n,s,r,0,!1,a,!0)}function qc(e,t,n,s,r,a){return Kc(e,t,n,s,r,a,!0)}function Kc(e,t,n,s,r,a,i=!1,o=!1,l=!1){const u=[];for(let e=0;e<t.length;e++)t[e]>r&&u.push({score:t[e],boxIndex:e,suppressBeginIndex:0});u.sort(Zc);const c=a>0?-.5/a:0,h=[],p=[];for(;h.length<n&&u.length>0;){const t=u.pop(),{score:n,boxIndex:a,suppressBeginIndex:i}=t;if(n<r)break;let o=!1;for(let n=h.length-1;n>=i;--n){const i=Xc(e,a,h[n]);if(i>=s){o=!0;break}if(t.score=t.score*Yc(s,c,i),t.score<=r)break}t.suppressBeginIndex=h.length,o||(t.score===n?(h.push(a),p.push(t.score)):t.score>r&&Vc(u,t,Zc))}const d=h.length,f=n-d;o&&f>0&&(h.push(...new Array(f).fill(0)),p.push(...new Array(f).fill(0)));const m={selectedIndices:h};return i&&(m.selectedScores=p),l&&(m.validOutputs=d),m}function Xc(e,t,n){const s=e.subarray(4*t,4*t+4),r=e.subarray(4*n,4*n+4),a=Math.min(s[0],s[2]),i=Math.min(s[1],s[3]),o=Math.max(s[0],s[2]),l=Math.max(s[1],s[3]),u=Math.min(r[0],r[2]),c=Math.min(r[1],r[3]),h=Math.max(r[0],r[2]),p=Math.max(r[1],r[3]),d=(o-a)*(l-i),f=(h-u)*(p-c);if(d<=0||f<=0)return 0;const m=Math.max(a,u),g=Math.max(i,c),y=Math.min(o,h),b=Math.min(l,p),x=Math.max(y-m,0)*Math.max(b-g,0);return x/(d+f-x)}function Yc(e,t,n){const s=Math.exp(t*n*n);return n<=e?s:0}function Zc(e,t){return e.score-t.score||e.score===t.score&&t.boxIndex-e.boxIndex}function Jc(e,t){const n=[];for(let e=0;e<t.length;e++)t[e]&&n.push(e);const s=Bo(e,"int32"),r=Bo([n.length,e.length],"int32");for(let t=0;t<n.length;t++){const a=s.indexToLoc(n[t]),i=t*e.length;r.values.set(a,i)}return r.toTensor()}function Qc(){return ya}function eh(){return ya.memory()}function th(e,t){return ya.tidy(e,t)}function nh(e){ha(e).forEach((e=>e.dispose()))}function sh(e){return ya.keep(e)}function rh(e,t,n=1){return ya.registerBackend(e,t,n)}function ah(e,t){x(q(e),(()=>"The f passed in variableGrads(f) must be a function")),x(null==t||Array.isArray(t)&&t.every((e=>e instanceof Kr)),(()=>"The varList passed in variableGrads(f, varList) must be an array of variables"));const n=null!=t;if(!n){t=[];for(const e in ya.registeredVariables)t.push(ya.registeredVariables[e])}const s=n?t.filter((e=>!e.trainable)):null,r=t.length;x((t=t.filter((e=>e.trainable))).length>0,(()=>`variableGrads() expects at least one of the input variables to be trainable, but none of the ${r} variables is trainable.`));const{value:a,grads:i}=ya.gradients(e,t,null,!0);x(i.some((e=>null!=e)),(()=>"Cannot find a connection between any variable and the result of the loss function y=f(x). Please make sure the operations that use variables are inside the function f passed to minimize().")),x(0===a.rank,(()=>`The f passed in variableGrads(f) must return a scalar, but it returned a rank-${a.rank} tensor`));const o={};return t.forEach(((e,t)=>{null!=i[t]&&(o[e.name]=i[t])})),null!=s&&s.forEach((e=>o[e.name]=null)),{value:a,grads:o}}function ih(e){return ya.customGrad(e)}t(Uc,"nonMaxSuppressionV3Impl",(()=>Hc)),t(Uc,"nonMaxSuppressionV4Impl",(()=>jc)),t(Uc,"nonMaxSuppressionV5Impl",(()=>qc)),t(Uc,"whereImpl",(()=>Jc)),Hr=function(e){le().getBool("DEPRECATION_WARNINGS_ENABLED")&&console.warn(e+" You can disable deprecation warnings with tf.disableDeprecationWarnings().")};const oh=Aa({concat_:function(e,t=0){x(e.length>=1,(()=>"Pass at least one tensor to concat"));const n=Ea(e,"tensors","concat","string_or_numeric");if("complex64"===n[0].dtype&&n.forEach((e=>{if("complex64"!==e.dtype)throw new Error(`Cannot concatenate complex64 tensors with a tensor\n          with dtype ${e.dtype}. `)})),1===n.length)return Wo(n[0]);const s=n,r={axis:t};return ya.runKernel(tt,s,r)}});const lh=Aa({imag_:function(e){const t={input:$a(e,"input","imag")};return ya.runKernel(Ut,t)}});const uh=Aa({real_:function(e){const t={input:$a(e,"input","real")};return ya.runKernel(Rn,t)}});const ch=Aa({slice_:function(e,t,n){const s=$a(e,"x","slice","string_or_numeric");if(0===s.rank)throw new Error("Slicing scalar is not possible");const r={x:s},a={begin:t,size:n};return ya.runKernel(jn,r,a)}});const hh=Aa({split_:function(e,t,n=0){const s={x:$a(e,"x","split")},r={numOrSizeSplits:t,axis:n};return ya.runKernel(ts,s,r)}});function ph(e,t="float32"){if("complex64"===t){const t=ph(e,"float32"),n=ph(e,"float32");return Ra(t,n)}const n=Q(I(e),t);return ya.makeTensor(n,e,t)}const dh=Aa({zerosLike_:function(e){const t={x:$a(e,"x","zerosLike")};return ya.runKernel(Ss,t)}});const fh=Aa({fft_:function(e){x("complex64"===e.dtype,(()=>`The dtype for tf.spectral.fft() must be complex64 but got ${e.dtype}.`));const t={input:e};return ya.runKernel(At,t)}});const mh=Aa({rfft_:function(e,t){x("float32"===e.dtype,(()=>`The dtype for rfft() must be real value but got ${e.dtype}`));let n=e.shape[e.shape.length-1];const s=e.size/n;let r;if(null!=t&&t<n){const s=e.shape.map((e=>0)),a=e.shape.map((e=>e));a[e.shape.length-1]=t,r=ch(e,s,a),n=t}else if(null!=t&&t>n){const s=e.shape.map((e=>e));s[e.shape.length-1]=t-n,r=oh([e,ph(s)],e.shape.length-1),n=t}else r=e;const a=dh(r),i=Cu(Ra(r,a),[s,n]),o=fh(i),l=Math.floor(n/2)+1,u=uh(o),c=lh(o),h=hh(u,[l,n-l],u.shape.length-1),p=hh(c,[l,n-l],c.shape.length-1),d=r.shape.slice();return d[r.shape.length-1]=l,Cu(Ra(h[0],p[0]),d)}});const gh=Aa({ifft_:function(e){x("complex64"===e.dtype,(()=>`The dtype for tf.spectral.ifft() must be complex64 but got ${e.dtype}.`));const t={input:e};return ya.runKernel(Wt,t)}});const yh=Aa({reverse_:function(e,t){const n={x:$a(e,"x","reverse")},s={dims:t};return ya.runKernel(Pn,n,s)}});function bh(e,t){if((P(e)&&"string"!==t||Array.isArray(e))&&"complex64"!==t)throw new Error("Error creating a new Scalar: value must be a primitive (number|boolean|string)");if("string"===t&&P(e)&&!(e instanceof Uint8Array))throw new Error("When making a scalar from encoded string, the value must be `Uint8Array`.");return Fa(e,[],[],t)}const xh=Aa({irfft_:function(e){const t=e.shape[e.shape.length-1],n=e.size/t;let s;if(t<=2){const r=Cu(e,[n,t]);s=gh(r)}else{const r=[n,2*(t-1)],a=Cu(uh(e),[n,t]),i=Cu(lh(e),[n,t]),o=yh(ch(a,[0,1],[n,t-2]),1),l=Iu(yh(ch(i,[0,1],[n,t-2]),1),bh(-1)),u=oh([a,o],1),c=oh([i,l],1),h=Cu(Ra(u,c),[r[0],r[1]]);s=gh(h)}if(s=uh(s),3===e.rank&&0!==e.shape[0]){const t=s,n=e.shape[0];s=Cu(s,[n,s.shape[0]/n,s.shape[1]]),t.dispose()}return s}});var wh={};t(wh,"conv2d",(()=>Nh)),t(wh,"depthwiseConv2d",(()=>Eh)),t(wh,"matMul",(()=>Rh));const vh=Aa({add_:function(e,t){let n=$a(e,"a","add"),s=$a(t,"b","add");[n,s]=la(n,s);const r={a:n,b:s};return ya.runKernel(Re,r)}});const kh=Aa({conv2d_:function(e,t,n,s,r="NHWC",a=[1,1],i){const o=$a(e,"x","conv2d","float32"),l=$a(t,"filter","conv2d","float32");let u=o,c=!1;3===o.rank&&(c=!0,u=Cu(o,[1,o.shape[0],o.shape[1],o.shape[2]])),x(4===u.rank,(()=>`Error in conv2d: input must be rank 4, but got rank ${u.rank}.`)),x(4===l.rank,(()=>`Error in conv2d: filter must be rank 4, but got rank ${l.rank}.`)),xu("conv2d",s,i);const h="NHWC"===r?u.shape[3]:u.shape[1];x(h===l.shape[2],(()=>`Error in conv2d: depth of input (${h}) must match input depth for filter ${l.shape[2]}.`)),x(yu(n,a),(()=>`Error in conv2D: Either strides or dilations must be 1. Got strides ${n} and dilations '${a}'`));const p={x:u,filter:l},d={strides:n,pad:s,dataFormat:r,dilations:a,dimRoundingMode:i},f=ya.runKernel(nt,p,d);return c?Cu(f,[f.shape[1],f.shape[2],f.shape[3]]):f}});const Ih=Aa({conv2DBackpropFilter_:function(e,t,n,s,r,a="NHWC",i){let o=e;3===e.rank&&(o=Cu(e,[1,e.shape[0],e.shape[1],e.shape[2]]));let l=t;3===l.rank&&(l=Cu(t,[1,t.shape[0],t.shape[1],t.shape[2]])),x(4===o.rank,(()=>`Error in conv2dDerFilter: input must be rank 4, but got shape ${o.shape}.`)),x(4===l.rank,(()=>`Error in conv2dDerFilter: dy must be rank 4, but got shape ${l.shape}.`)),x(4===n.length,(()=>`Error in conv2dDerFilter: filterShape must be length 4, but got ${n}.`));const u="NHWC"===a?o.shape[3]:o.shape[1],c="NHWC"===a?l.shape[3]:l.shape[1];x(u===n[2],(()=>`Error in conv2dDerFilter: depth of input ${u}) must match input depth in filter (${n[2]}.`)),x(c===n[3],(()=>`Error in conv2dDerFilter: depth of dy (${c}) must match output depth for filter (${n[3]}).`)),xu("conv2dDerFilter",r,i);const h={x:o,dy:l},p={strides:s,pad:r,dataFormat:a,dimRoundingMode:i,filterShape:n};return ya.runKernel(st,h,p)}});const Sh=Aa({conv2DBackpropInput_:function(e,t,n,s,r,a="NHWC",i){x(e.length===t.rank,(()=>`Length of inShape (${e.length}) and rank of dy (${t.rank}) must match`));let o=e,l=t,u=!1;3===t.rank&&(u=!0,l=Cu(t,[1,t.shape[0],t.shape[1],t.shape[2]]),o=[1,e[0],e[1],e[2]]),x(4===o.length,(()=>`Error in conv2dDerInput: inShape must be length 4, but got length ${o.length}.`)),x(4===l.rank,(()=>`Error in conv2dDerInput: dy must be rank 4, but got rank ${l.rank}`)),x(4===n.rank,(()=>`Error in conv2dDerInput: filter must be rank 4, but got rank ${n.rank}`));const c="NHWC"===a?o[3]:o[1],h="NHWC"===a?l.shape[3]:l.shape[1];x(c===n.shape[2],(()=>`Error in conv2dDerInput: depth of input (${c}) must match input depth for filter ${n.shape[2]}.`)),x(h===n.shape[3],(()=>`Error in conv2dDerInput: depth of output (${h}) must match output depth for filter ${n.shape[3]}.`)),xu("conv2dDerInput",r,i);const p={dy:l,filter:n},d={strides:s,pad:r,dataFormat:a,dimRoundingMode:i,inputShape:o},f=ya.runKernel(rt,p,d);return u?Cu(f,[f.shape[1],f.shape[2],f.shape[3]]):f}});const Nh=Aa({fusedConv2d_:function({x:e,filter:t,strides:n,pad:s,dataFormat:r="NHWC",dilations:a=[1,1],dimRoundingMode:i,bias:o,activation:l="linear",preluActivationWeights:u,leakyreluAlpha:c}){if(l=l||"linear",!1===_u(ya.state.gradientDepth,l)){let h=kh(e,t,n,s,r,a,i);return null!=o&&(h=vh(h,o)),Du(h,l,u,c)}const h=$a(e,"x","conv2d","float32"),p=$a(t,"filter","conv2d","float32");let d=h,f=!1;3===h.rank&&(f=!0,d=Cu(h,[1,h.shape[0],h.shape[1],h.shape[2]])),x(4===d.rank,(()=>`Error in fused conv2d: input must be rank 4, but got rank ${d.rank}.`)),x(4===p.rank,(()=>`Error in fused conv2d: filter must be rank 4, but got rank ${p.rank}.`)),xu("fused conv2d",s,i),x(d.shape[3]===p.shape[2],(()=>`Error in conv2d: depth of input (${d.shape[3]}) must match input depth for filter ${p.shape[2]}.`)),x(yu(n,a),(()=>`Error in conv2D: Either strides or dilations must be 1. Got strides ${n} and dilations '${a}'`)),x("NHWC"===r,(()=>`Error in conv2d: got dataFormat of ${r} but only NHWC is currently supported.`));const m=uu(d.shape,p.shape,n,a,s,i);let g,y;null!=o&&(g=$a(o,"bias","fused conv2d"),[g]=la(g,h),ul(m.outShape,g.shape)),null!=u&&(y=$a(u,"prelu weights","fused conv2d"));const b=(e,t)=>{const[r,i,o,u]=t,c=Ru(e,o,l);x(gu(a),(()=>`Error in gradient of fused conv2D: dilation rates greater than 1 are not yet supported in gradients. Got dilations '${a}'`));const h=[Sh(i.shape,c,r,n,s),Ih(i,c,r.shape,n,s)];if(null!=u){const e=Fu(u,c);h.push(e)}return h},w={x:d,filter:p,bias:g,preluActivationWeights:y},v={strides:n,pad:s,dataFormat:r,dilations:a,dimRoundingMode:i,activation:l,leakyreluAlpha:c};if(null==o){return ih(((e,t,n)=>{let s=ya.runKernel(Es,w,v);return n([t,e,s]),f&&(s=Cu(s,[s.shape[1],s.shape[2],s.shape[3]])),{value:s,gradFunc:b}}))(d,p)}return ih(((e,t,n,s)=>{let r=ya.runKernel(Es,w,v);return s([t,e,r,n]),f&&(r=Cu(r,[r.shape[1],r.shape[2],r.shape[3]])),{value:r,gradFunc:b}}))(d,p,g)}});const Th=Aa({depthwiseConv2d_:function(e,t,n,s,r="NHWC",a=[1,1],i){const o=$a(e,"x","depthwiseConv2d","float32"),l=$a(t,"filter","depthwiseConv2d","float32");let u=o,c=!1;3===o.rank&&(c=!0,u=Cu(o,[1,o.shape[0],o.shape[1],o.shape[2]])),x(4===u.rank,(()=>`Error in depthwiseConv2d: input must be rank 4, but got rank ${u.rank}.`)),x(4===l.rank,(()=>`Error in depthwiseConv2d: filter must be rank 4, but got rank ${l.rank}.`)),x(u.shape[3]===l.shape[2],(()=>`Error in depthwiseConv2d: number of input channels (${u.shape[3]}) must match the inChannels dimension in filter ${l.shape[2]}.`)),xu("depthwiseConv2d",s,i);const h={x:u,filter:l},p={strides:n,pad:s,dataFormat:r,dilations:a,dimRoundingMode:i},d=ya.runKernel(ft,h,p);return c?Cu(d,[d.shape[1],d.shape[2],d.shape[3]]):d}});const Ch=Aa({depthwiseConv2dNativeBackpropFilter_:function(e,t,n,s,r,a=[1,1],i){let o=e;3===e.rank&&(o=Cu(e,[1,e.shape[0],e.shape[1],e.shape[2]]));let l=t;3===l.rank&&(l=Cu(t,[1,t.shape[0],t.shape[1],t.shape[2]]));const u={x:o,dy:l},c={strides:s,pad:r,dimRoundingMode:i,dilations:a,filterShape:n};return ya.runKernel(mt,u,c)}});const $h=Aa({depthwiseConv2dNativeBackpropInput_:function(e,t,n,s,r,a=[1,1],i){let o=t,l=!1;3===t.rank&&(l=!0,o=Cu(t,[1,t.shape[0],t.shape[1],t.shape[2]]));const u={dy:o,filter:n},c={strides:s,pad:r,dimRoundingMode:i,dilations:a,inputShape:e},h=ya.runKernel(gt,u,c);return l?Cu(h,[h.shape[1],h.shape[2],h.shape[3]]):h}});const Eh=Aa({fusedDepthwiseConv2d_:function({x:e,filter:t,strides:n,pad:s,dataFormat:r="NHWC",dilations:a=[1,1],dimRoundingMode:i,bias:o,activation:l="linear",preluActivationWeights:u,leakyreluAlpha:c}){if(!1===_u(ya.state.gradientDepth,l)){let h=Th(e,t,n,s,r,a,i);return null!=o&&(h=vh(h,o)),Du(h,l,u,c)}const h=$a(e,"x","depthwiseConv2d","float32"),p=$a(t,"filter","depthwiseConv2d","float32");let d=h,f=!1;3===h.rank&&(f=!0,d=Cu(h,[1,h.shape[0],h.shape[1],h.shape[2]])),x(4===d.rank,(()=>`Error in fused depthwiseConv2d: input must be rank 4, but got rank ${d.rank}.`)),x(4===p.rank,(()=>`Error in fused depthwiseConv2d: filter must be rank 4, but got rank ${p.rank}.`)),x(d.shape[3]===p.shape[2],(()=>`Error in fused depthwiseConv2d: number of input channels (${d.shape[3]}) must match the inChannels dimension in filter ${p.shape[2]}.`)),null==a&&(a=[1,1]),x(yu(n,a),(()=>`Error in fused depthwiseConv2d: Either strides or dilations must be 1. Got strides ${n} and dilations '${a}'`)),xu("fused depthwiseConv2d",s,i);const m=uu(d.shape,p.shape,n,a,s,i,!0);let g,y;null!=o&&(g=$a(o,"bias","fused conv2d"),[g]=la(g,h),ul(m.outShape,g.shape)),null!=u&&(y=$a(u,"prelu weights","fused depthwiseConv2d"));const b=(e,t)=>{x(gu(a),(()=>`Error in gradient of fused depthwiseConv2d: dilation rates greater than 1 are not yet supported. Got dilations '${a}'`));const[r,o,u,c]=t,h=Ru(e,u,l),p=$h(o.shape,h,r,n,s,a,i),d=Ch(o,h,r.shape,n,s,a,i);if(null!=c){return[p,d,Fu(g,h)]}return[p,d]},w={x:d,filter:p,bias:g,preluActivationWeights:y},v={strides:n,pad:s,dataFormat:r,dilations:a,dimRoundingMode:i,activation:l,leakyreluAlpha:c};if(null==o){return ih(((e,t,n)=>{let s=ya.runKernel(As,w,v);return n([t,e,s]),f&&(s=Cu(s,[s.shape[1],s.shape[2],s.shape[3]])),{value:s,gradFunc:b}}))(d,p)}return ih(((e,t,n,s)=>{let r=ya.runKernel(As,w,v);return s([t,e,r,n]),f&&(r=Cu(r,[r.shape[1],r.shape[2],r.shape[3]])),{value:r,gradFunc:b}}))(d,p,g)}});const Ah=Aa({matMul_:function(e,t,n=!1,s=!1){let r=$a(e,"a","matMul"),a=$a(t,"b","matMul");[r,a]=la(r,a);const i={a:r,b:a},o={transposeA:n,transposeB:s};return ya.runKernel(je,i,o)}});const Rh=Aa({fusedMatMul_:function({a:e,b:t,transposeA:n=!1,transposeB:s=!1,bias:r,activation:a="linear",preluActivationWeights:i,leakyreluAlpha:o}){if(!1===_u(ya.state.gradientDepth,a)){let l=Ah(e,t,n,s);return null!=r&&(l=vh(l,r)),Du(l,a,i,o)}let l=$a(e,"a","fused matMul"),u=$a(t,"b","fused matMul");[l,u]=la(l,u);const c=n?l.shape[l.rank-2]:l.shape[l.rank-1],h=s?u.shape[u.rank-1]:u.shape[u.rank-2],p=n?l.shape[l.rank-1]:l.shape[l.rank-2],d=s?u.shape[u.rank-2]:u.shape[u.rank-1],f=l.shape.slice(0,-2),m=u.shape.slice(0,-2),g=I(f),y=I(m);x(c===h,(()=>`Error in fused matMul: inner shapes (${c}) and (${h}) of Tensors with shapes ${l.shape} and ${u.shape} and transposeA=${n} and transposeB=${s} must match.`));const b=ul(l.shape.slice(0,-2),u.shape.slice(0,-2)).concat([p,d]),w=Cu(l,n?[g,c,p]:[g,p,c]),v=Cu(u,s?[y,d,h]:[y,h,d]);let k,S;null!=r&&(k=$a(r,"bias","fused matMul"),[k]=la(k,l),ul(b,k.shape)),null!=i&&(S=$a(i,"prelu weights","fused matMul"));const N=(e,t)=>{const[i,o,l,u]=t,c=Ru(Cu(e,l.shape),l,a);let h,p;if(n||s?!n&&s?(h=Ah(c,o,!1,!1),p=Ah(c,i,!0,!1)):n&&!s?(h=Ah(o,c,!1,!0),p=Ah(i,c,!1,!1)):(h=Ah(o,c,!0,!0),p=Ah(c,i,!0,!0)):(h=Ah(c,o,!1,!0),p=Ah(i,c,!0,!1)),null!=r){return[h,p,Fu(u,c)]}return[h,p]},T={a:w,b:v,bias:k,preluActivationWeights:S},C={transposeA:n,transposeB:s,activation:a,leakyreluAlpha:o};if(null==r){return ih(((e,t,n)=>{const s=ya.runKernel($s,T,C);return n([e,t,s]),{value:Cu(s,b),gradFunc:N}}))(w,v)}return ih(((e,t,n,s)=>{const r=ya.runKernel($s,T,C);return s([e,t,r,n]),{value:Cu(r,b),gradFunc:N}}))(w,v,k)}});function Fh(e,t){v(e);const n=Na(e,t);if(1!==n.length)throw new Error("tensor1d() requires values to be a flat/TypedArray");return Fa(e,null,n,t)}function Dh(e,t,n){const s=1-e%2,r=new Float32Array(e);for(let a=0;a<e;++a){const i=2*Math.PI*a/(e+s-1);r[a]=t-n*Math.cos(i)}return Fh(r,"float32")}Aa({hammingWindow_:function(e){return Dh(e,.54,.46)}});const _h=Aa({hannWindow_:function(e){return Dh(e,.5,.5)}});function Oh(e,t,n){const s={shape:e,value:t,dtype:n};return ya.runKernel(Rt,{},s)}function Mh(e,t,n){if(v(e),null!=t&&2!==t.length)throw new Error("tensor2d() requires shape to have two numbers");const s=Na(e,n);if(2!==s.length&&1!==s.length)throw new Error("tensor2d() requires values to be number[][] or flat/TypedArray");if(1===s.length&&null==t)throw new Error("tensor2d() requires shape to be provided when `values` are a flat/TypedArray");return Fa(e,t,s,n)}const Lh=Aa({frame_:function(e,t,n,s=!1,r=0){let a=0;const i=[];for(;a+t<=e.size;)i.push(ch(e,a,t)),a+=n;if(s)for(;a<e.size;){const s=a+t-e.size,o=oh([ch(e,a,t-s),Oh([s],r)]);i.push(o),a+=n}return 0===i.length?Mh([],[0,t]):Cu(oh(i),[i.length,t])}});Aa({stft_:function(e,t,n,s,r=_h){var a;null==s&&(a=t,s=Math.floor(Math.pow(2,Math.ceil(Math.log(a)/Math.log(2)))));const i=Lh(e,t,n),o=Iu(i,r(t));return mh(o,s)}});const zh=Aa({cropAndResize_:function(e,t,n,s,r="bilinear",a=0){const i=$a(e,"image","cropAndResize"),o=$a(t,"boxes","cropAndResize","float32"),l=$a(n,"boxInd","cropAndResize","int32"),u=o.shape[0];x(4===i.rank,(()=>`Error in cropAndResize: image must be rank 4,but got rank ${i.rank}.`)),x(2===o.rank&&4===o.shape[1],(()=>`Error in cropAndResize: boxes must be have size [${u},4] but had shape ${o.shape}.`)),x(1===l.rank&&l.shape[0]===u,(()=>`Error in cropAndResize: boxInd must be have size [${u}] but had shape ${o.shape}.`)),x(2===s.length,(()=>`Error in cropAndResize: cropSize must be of length 2, but got length ${s.length}.`)),x(s[0]>=1&&s[1]>=1,(()=>`cropSize must be atleast [1,1], but was ${s}`)),x("bilinear"===r||"nearest"===r,(()=>`method must be bilinear or nearest, but was ${r}`));const c={image:i,boxes:o,boxInd:l},h={method:r,extrapolationValue:a,cropSize:s};return ya.runKernel(ht,c,h)}});const Bh=Aa({flipLeftRight_:function(e){const t=$a(e,"image","flipLeftRight","float32");x(4===t.rank,(()=>`Error in flipLeftRight: image must be rank 4,but got rank ${t.rank}.`));const n={image:t};return ya.runKernel(Ft,n,{})}});const Ph=Aa({tile_:function(e,t){const n=$a(e,"x","tile","string_or_numeric");x(n.rank===t.length,(()=>`Error in transpose: rank of input ${n.rank} must match length of reps ${t}.`));const s={x:n},r={reps:t};return ya.runKernel(ys,s,r)}});const Wh=Aa({grayscaleToRGB_:function(e){const t=$a(e,"image","grayscaleToRGB"),n=t.rank-1,s=t.shape[n];x(t.rank>=2,(()=>`Error in grayscaleToRGB: images must be at least rank 2, but got rank ${t.rank}.`)),x(1===s,(()=>`Error in grayscaleToRGB: last dimension of a grayscale image should be size 1, but got size ${s}.`));const r=new Array(t.rank);return r.fill(1,0,n),r[n]=3,Ph(t,r)}});const Uh=Aa({rotateWithOffset_:function(e,t,n=0,s=.5){const r=$a(e,"image","rotateWithOffset","float32");x(4===r.rank,(()=>`Error in rotateWithOffset: image must be rank 4,but got rank ${r.rank}.`));const a={image:r},i={radians:t,fillValue:n,center:s};return ya.runKernel(Cs,a,i)}});function Vh(e,t,n,s,r,a){null==s&&(s=.5),null==r&&(r=Number.NEGATIVE_INFINITY),null==a&&(a=0);const i=e.shape[0];return n=Math.min(n,i),x(0<=s&&s<=1,(()=>`iouThreshold must be in [0, 1], but was '${s}'`)),x(2===e.rank,(()=>`boxes must be a 2D tensor, but was of rank '${e.rank}'`)),x(4===e.shape[1],(()=>`boxes must have 4 columns, but 2nd dimension was ${e.shape[1]}`)),x(1===t.rank,(()=>"scores must be a 1D tensor")),x(t.shape[0]===i,(()=>`scores has incompatible shape with boxes. Expected ${i}, but was ${t.shape[0]}`)),x(0<=a&&a<=1,(()=>`softNmsSigma must be in [0, 1], but was '${a}'`)),{maxOutputSize:n,iouThreshold:s,scoreThreshold:r,softNmsSigma:a}}const Gh=Aa({nonMaxSuppression_:function(e,t,n,s=.5,r=Number.NEGATIVE_INFINITY){const a=$a(e,"boxes","nonMaxSuppression","float32"),i=$a(t,"scores","nonMaxSuppression","float32"),o=Vh(a,i,n,s,r),l={maxOutputSize:n=o.maxOutputSize,iouThreshold:s=o.iouThreshold,scoreThreshold:r=o.scoreThreshold};return ya.runKernel(wn,{boxes:a,scores:i},l)}});const Hh=async function(e,t,n,s=.5,r=Number.NEGATIVE_INFINITY){const a=$a(e,"boxes","nonMaxSuppressionAsync"),i=$a(t,"scores","nonMaxSuppressionAsync"),o=Vh(a,i,n,s,r);n=o.maxOutputSize,s=o.iouThreshold,r=o.scoreThreshold;const l=await Promise.all([a.data(),i.data()]),u=l[0],c=l[1],{selectedIndices:h}=Hc(u,c,n,s,r);return a!==e&&a.dispose(),i!==t&&i.dispose(),Fh(h,"int32")};const jh=Aa({nonMaxSuppressionWithScore_:function(e,t,n,s=.5,r=Number.NEGATIVE_INFINITY,a=0){const i=$a(e,"boxes","nonMaxSuppression"),o=$a(t,"scores","nonMaxSuppression"),l=Vh(i,o,n,s,r,a),u={boxes:i,scores:o},c={maxOutputSize:n=l.maxOutputSize,iouThreshold:s=l.iouThreshold,scoreThreshold:r=l.scoreThreshold,softNmsSigma:a=l.softNmsSigma},h=ya.runKernel(kn,u,c);return{selectedIndices:h[0],selectedScores:h[1]}}});const qh=async function(e,t,n,s=.5,r=Number.NEGATIVE_INFINITY,a=0){const i=$a(e,"boxes","nonMaxSuppressionAsync"),o=$a(t,"scores","nonMaxSuppressionAsync"),l=Vh(i,o,n,s,r,a);n=l.maxOutputSize,s=l.iouThreshold,r=l.scoreThreshold,a=l.softNmsSigma;const u=await Promise.all([i.data(),o.data()]),c=u[0],h=u[1],{selectedIndices:p,selectedScores:d}=qc(c,h,n,s,r,a);return i!==e&&i.dispose(),o!==t&&o.dispose(),{selectedIndices:Fh(p,"int32"),selectedScores:Fh(d)}};const Kh=Aa({nonMaxSuppressionPadded_:function(e,t,n,s=.5,r=Number.NEGATIVE_INFINITY,a=!1){const i=$a(e,"boxes","nonMaxSuppression"),o=$a(t,"scores","nonMaxSuppression"),l=Vh(i,o,n,s,r,null),u={boxes:i,scores:o},c={maxOutputSize:l.maxOutputSize,iouThreshold:l.iouThreshold,scoreThreshold:l.scoreThreshold,padToMaxOutputSize:a},h=ya.runKernel(vn,u,c);return{selectedIndices:h[0],validOutputs:h[1]}}});const Xh=async function(e,t,n,s=.5,r=Number.NEGATIVE_INFINITY,a=!1){const i=$a(e,"boxes","nonMaxSuppressionAsync"),o=$a(t,"scores","nonMaxSuppressionAsync"),l=Vh(i,o,n,s,r,null),u=l.maxOutputSize,c=l.iouThreshold,h=l.scoreThreshold,[p,d]=await Promise.all([i.data(),o.data()]),{selectedIndices:f,validOutputs:m}=jc(p,d,u,c,h,a);return i!==e&&i.dispose(),o!==t&&o.dispose(),{selectedIndices:Fh(f,"int32"),validOutputs:bh(m,"int32")}};const Yh=Aa({resizeBilinear_:function(e,t,n=!1,s=!1){const r=$a(e,"images","resizeBilinear");x(3===r.rank||4===r.rank,(()=>`Error in resizeBilinear: x must be rank 3 or 4, but got rank ${r.rank}.`)),x(2===t.length,(()=>`Error in resizeBilinear: new shape must 2D, but got shape ${t}.`)),x(!1===s||!1===n,(()=>"Error in resizeBilinear: If halfPixelCenters is true, alignCorners must be false."));let a=r,i=!1;3===r.rank&&(i=!0,a=Cu(r,[1,r.shape[0],r.shape[1],r.shape[2]]));const[]=t,o={images:a},l={alignCorners:n,halfPixelCenters:s,size:t},u=ya.runKernel(Ln,o,l);return i?Cu(u,[u.shape[1],u.shape[2],u.shape[3]]):u}});const Zh=Aa({resizeNearestNeighbor_:function(e,t,n=!1,s=!1){const r=$a(e,"images","resizeNearestNeighbor");x(3===r.rank||4===r.rank,(()=>`Error in resizeNearestNeighbor: x must be rank 3 or 4, but got rank ${r.rank}.`)),x(2===t.length,(()=>`Error in resizeNearestNeighbor: new shape must 2D, but got shape ${t}.`)),x("float32"===r.dtype||"int32"===r.dtype,(()=>"`images` must have `int32` or `float32` as dtype")),x(!1===s||!1===n,(()=>"Error in resizeNearestNeighbor: If halfPixelCenters is true, alignCorners must be false."));let a=r,i=!1;3===r.rank&&(i=!0,a=Cu(r,[1,r.shape[0],r.shape[1],r.shape[2]]));const[]=t,o={images:a},l={alignCorners:n,halfPixelCenters:s,size:t},u=ya.runKernel(On,o,l);return i?Cu(u,[u.shape[1],u.shape[2],u.shape[3]]):u}});const Jh=Aa({bincount_:function(e,t,n){const s=$a(e,"x","bincount"),r=$a(t,"weights","bincount");x("int32"===s.dtype,(()=>`Error in bincount: input dtype must be int32, but got ${s.dtype}`)),x(n>=0,(()=>`size must be non-negative, but got ${n}.`)),x(r.size===s.size||0===r.size,(()=>`Error in bincount: weights must have the same size as input or0-length, but got input shape: ${s.shape}, weights shape: ${r.shape}.`));const a={x:s,weights:r},i={size:n};return ya.runKernel(Ke,a,i)}});const Qh=Aa({lessEqual_:function(e,t){let n=$a(e,"a","lessEqual","string_or_numeric"),s=$a(t,"b","lessEqual","string_or_numeric");[n,s]=la(n,s),ul(n.shape,s.shape);const r={a:n,b:s};return ya.runKernel(Kt,r)}});const ep=Aa({greater_:function(e,t){let n=$a(e,"a","greater","string_or_numeric"),s=$a(t,"b","greater","string_or_numeric");[n,s]=la(n,s),ul(n.shape,s.shape);const r={a:n,b:s};return ya.runKernel(zt,r)}});const tp=Aa({floorDiv_:function(e,t){let n=$a(e,"a","floorDiv"),s=$a(t,"b","floorDiv");[n,s]=la(n,s);const r={a:n,b:s};return ya.runKernel(_t,r)}});const np=Aa({div_:function(e,t){let n=$a(e,"a","div"),s=$a(t,"b","div");if([n,s]=la(n,s),"int32"===n.dtype&&"int32"===s.dtype)return tp(n,s);const r={a:n,b:s};return ya.runKernel(vt,r,{})}});const sp=Aa({sub_:function(e,t){let n=$a(e,"a","sub"),s=$a(t,"b","sub");[n,s]=la(n,s);const r={a:n,b:s};return ya.runKernel(fs,r)}});const rp=Aa({round_:function(e){const t={x:$a(e,"x","round")};return ya.runKernel(Wn,t)}});const ap=Aa({broadcastTo_:function(e,t){let n=$a(e,"broadcastTo","x");const s=n.shape;if(t.some((e=>!(e>0)||e%1!=0)))throw new Error(`broadcastTo(): Invalid broadcast shape [${t}].`);if(t.length<n.rank)throw new Error(`broadcastTo(): shape.length=${t.length} < input.rank=${n.rank}.`);if(t.length>n.rank){const e=n.shape.slice();for(;e.length<t.length;)e.unshift(1);n=Cu(n,e)}const r=n.shape,a=Array.from(t);for(let e=t.length-1;e>=0;e--)if(r[e]===t[e])a[e]=1;else if(1!==n.shape[e])throw new Error(`broadcastTo(): [${s}] cannot be broadcast to [${t}].`);if(0===a.map(((e,t)=>e>1?t:-1)).filter((e=>e>=0)).length)return Wo(n);const i={x:n},o={reps:a};return ya.runKernel(ys,i,o)}});const ip=Aa({where_:function(e,t,n){const s=$a(t,"a","where"),r=$a(n,"b","where"),a=$a(e,"condition","where","bool"),i=ul(ul(a.shape,s.shape),r.shape),o={condition:ap(a,i),t:ap(s,i),e:ap(r,i)};return ya.runKernel(Gn,o)}});function op(e,t,n=1,s="float32"){if(0===n)throw new Error("Cannot have a step of zero");const r={start:e,stop:t,step:n,dtype:s};return ya.runKernel(An,{},r)}const lp=Aa({threshold_:function(e,t="binary",n=!1,s=.5){const r=$a(e,"image","threshold"),a=r.shape[0]*r.shape[1];let i,o,l,u,c=Iu(Fh([s]),255);if(x(3===r.rank,(()=>`Error in threshold: image must be rank 3,but got rank ${r.rank}.`)),x(3===r.shape[2]||1===r.shape[2],(()=>`Error in threshold: image color channel must be equal to 3 or 1but got ${r.shape[2]}.`)),x("int32"===r.dtype||"float32"===r.dtype,(()=>`Error in dtype: image dtype must be int32 or float32,but got dtype ${r.dtype}.`)),x("otsu"===t||"binary"===t,(()=>`Method must be binary or otsu, but was ${t}`)),3===r.shape[2]){[i,o,l]=hh(r,[1,1,1],-1);const e=Iu(i,.2989),t=Iu(o,.587),n=Iu(l,.114);u=vh(vh(e,t),n)}else u=e;if("otsu"===t){c=function(e,t){let n,s,r,a,i,o,l=Fh([-1]),u=Fh([0]),c=Fh([0]);for(let h=0;h<e.size-1;h++){n=ch(e,0,h+1),s=ch(e,h+1),i=np(Au(n),t),o=np(Au(s),t);const p=Au(Iu(n,op(0,n.size)));r=np(p,Au(n));const d=Oh(s.shape,n.size),f=vh(op(0,s.size),d),m=Iu(s,f);a=np(Au(m),Au(s));const g=sp(r,a),y=sp(r,a),b=Iu(i,o);c=Iu(Iu(b,g),y);const x=ep(c,u);u=ip(x,c,u),l=ip(x,Fh([h]),l)}return l}(Jh(Po(rp(u),"int32"),Da([]),256),a)}const h=n?Qh(u,c):ep(u,c);return Po(Iu(h,255),"int32")}});const up=Aa({transform_:function(e,t,n="nearest",s="constant",r=0,a){const i=$a(e,"image","transform","float32"),o=$a(t,"transforms","transform","float32");x(4===i.rank,(()=>`Error in transform: image must be rank 4,but got rank ${i.rank}.`)),x(2===o.rank&&(o.shape[0]===i.shape[0]||1===o.shape[0])&&8===o.shape[1],(()=>"Error in transform: Input transform should be batch x 8 or 1 x 8")),x(null==a||2===a.length,(()=>`Error in transform: outputShape must be [height, width] or null, but got ${a}.`));const l={image:i,transforms:o},u={interpolation:n,fillMode:s,fillValue:r,outputShape:a};return ya.runKernel(xs,l,u)}});const cp=Aa({greaterEqual_:function(e,t){let n=$a(e,"a","greaterEqual","string_or_numeric"),s=$a(t,"b","greaterEqual","string_or_numeric");[n,s]=la(n,s),ul(n.shape,s.shape);const r={a:n,b:s};return ya.runKernel(Bt,r)}});const hp=Aa({logicalAnd_:function(e,t){const n=$a(e,"a","logicalAnd","bool"),s=$a(t,"b","logicalAnd","bool");ul(n.shape,s.shape);const r={a:n,b:s};return ya.runKernel(Jt,r)}});const pp=Aa({stack_:function(e,t=0){const n=Ea(e,"tensors","stack","string_or_numeric");x(n.length>=1,(()=>"Pass at least one tensor to tf.stack")),n.length>0&&x(t<=n[0].rank,(()=>"Axis must be <= rank of the tensor"));const s=n,r={axis:t};return ya.runKernel(Nn,s,r)}});const dp=Aa({unstack_:function(e,t=0){const n=$a(e,"x","unstack","string_or_numeric");x(t>=-n.shape.length&&t<n.shape.length,(()=>`Axis = ${t} is not in [-${n.shape.length}, ${n.shape.length})`));const s={value:n},r={axis:t};return ya.runKernel(ks,s,r)}});const fp=Aa({bandPart_:function(e,t,n){x(t%1==0,(()=>`bandPart(): numLower must be an integer, got ${t}.`)),x(n%1==0,(()=>`bandPart(): numUpper must be an integer, got ${n}.`));const s=$a(e,"a","bandPart");x(s.rank>=2,(()=>`bandPart(): Rank must be at least 2, got ${s.rank}.`));const r=s.shape,[a,i]=s.shape.slice(-2);if(!(t<=a))throw new Error(`bandPart(): numLower (${t}) must not be greater than the number of rows (${a}).`);if(!(n<=i))throw new Error(`bandPart(): numUpper (${n}) must not be greater than the number of columns (${i}).`);t<0&&(t=a),n<0&&(n=i);const o=Cu(op(0,a,1,"int32"),[-1,1]),l=op(0,i,1,"int32"),u=sp(o,l),c=hp(Qh(u,bh(+t,"int32")),cp(u,bh(-n,"int32"))),h=ph([a,i],s.dtype);return Cu(pp(dp(Cu(s,[-1,a,i])).map((e=>ip(c,e,h)))),r)}});const mp=Aa({abs_:function(e){const t=$a(e,"x","abs");if("complex64"===t.dtype){const e={x:t};return ya.runKernel(et,e)}{const e={x:t};return ya.runKernel($e,e)}}});const gp=Aa({max_:function(e,t=null,n=!1){const s={x:$a(e,"x","max")},r={reductionIndices:t,keepDims:n};return ya.runKernel(sn,s,r)}});const yp=Aa({min_:function(e,t=null,n=!1){const s={x:$a(e,"x","min")},r={axis:t,keepDims:n};return ya.runKernel(pn,s,r)}});const bp=Aa({pow_:function(e,t){let n=$a(e,"base","pow"),s=$a(t,"exp","pow");[n,s]=la(n,s);const r={a:n,b:s};return ya.runKernel(Cn,r)}});const xp=Aa({sqrt_:function(e){const t={x:$a(e,"x","sqrt","float32")};return ya.runKernel(Jn,t)}});const wp=Aa({square_:function(e){const t=$a(e,"x","square");return ya.runKernel("Square",{x:t},{})}});function vp(e,t,n=null){if(0===e.rank)return mp(e);if(1!==e.rank&&null===n)return vp(Cu(e,[-1]),t,n);if(1===e.rank||"number"==typeof n||Array.isArray(n)&&1===n.length){if(1===t)return Au(mp(e),n);if(t===1/0)return gp(mp(e),n);if(t===-1/0)return yp(mp(e),n);if("euclidean"===t||2===t)return xp(Au(bp(mp(e),bh(2,"int32")),n));throw new Error(`Error in norm: invalid ord value: ${t}`)}if(Array.isArray(n)&&2===n.length){if(1===t)return gp(Au(mp(e),n[0]),n[1]-1);if(t===1/0)return gp(Au(mp(e),n[1]),n[0]);if(t===-1/0)return yp(Au(mp(e),n[1]),n[0]);if("fro"===t||"euclidean"===t)return xp(Au(wp(e),n));throw new Error(`Error in norm: invalid ord value: ${t}`)}throw new Error(`Error in norm: invalid axis: ${n}`)}const kp=Aa({norm_:function(e,t="euclidean",n=null,s=!1){const r=vp(e=$a(e,"x","norm"),t,n);let a=r.shape;if(s){const t=D(n,e.shape);a=Zl(r.shape,t)}return Cu(r,a)}});const Ip=Aa({squeeze_:function(e,t){const n=$a(e,"x","squeeze");return Cu(n,_(n.shape,t).newShape)}});const Sp=Aa({gramSchmidt_:function(e){let t;if(Array.isArray(e)){t=!1,x(null!=e&&e.length>0,(()=>"Gram-Schmidt process: input must not be null, undefined, or empty"));const n=e[0].shape[0];for(let t=1;t<e.length;++t)x(e[t].shape[0]===n,(()=>`Gram-Schmidt: Non-unique lengths found in the input vectors: (${e[t].shape[0]} vs. ${n})`))}else t=!0,e=hh(e,e.shape[0],0).map((e=>Ip(e,[0])));x(e.length<=e[0].shape[0],(()=>`Gram-Schmidt: Number of vectors (${e.length}) exceeds number of dimensions (${e[0].shape[0]}).`));const n=[],s=e;for(let t=0;t<e.length;++t)n.push(ya.tidy((()=>{let e=s[t];if(t>0)for(let s=0;s<t;++s){const t=Iu(Au(Iu(n[s],e)),n[s]);e=sp(e,t)}return np(e,kp(e,"euclidean"))})));return t?pp(n,0):n}});const Np=Aa({expandDims_:function(e,t=0){const n=$a(e,"x","expandDims","string_or_numeric");x(t<=n.rank,(()=>"Axis must be <= rank of the tensor"));const s={input:n},r={dim:t};return ya.runKernel($t,s,r)}});const Tp=Aa({eye_:function(e,t,n,s="float32"){null==t&&(t=e);const r=Bo([e,t],s),a=e<=t?e:t;for(let e=0;e<a;++e)r.set(1,e,e);const i=Cu(r.toTensor(),[e,t]);if(null==n)return i;if(1===n.length)return Ph(Np(i,0),[n[0],1,1]);if(2===n.length)return Ph(Np(Np(i,0),0),[n[0],n[1],1,1]);if(3===n.length)return Ph(Np(Np(Np(i,0),0),0),[n[0],n[1],n[2],1,1]);throw new Error(`eye() currently supports only 1D and 2D batchShapes, but received ${n.length}D.`)}});const Cp=Aa({neg_:function(e){const t={x:$a(e,"x","neg")};return ya.runKernel(bn,t)}});const $p=Aa({transpose_:function(e,t){const n=$a(e,"x","transpose");if(null==t&&(t=n.shape.map(((e,t)=>t)).reverse()),x(n.rank===t.length,(()=>`Error in transpose: rank of input ${n.rank} must match length of perm ${t}.`)),t.forEach((e=>{x(e>=0&&e<n.rank,(()=>"All entries in 'perm' must be between 0 and "+(n.rank-1)+` but got ${t}`))})),n.rank<=1)return n.clone();const s={x:n},r={perm:t};return ya.runKernel(ws,s,r)}});function Ep(e,t=!1){return ya.tidy((()=>{x(2===e.shape.length,(()=>`qr2d() requires a 2D Tensor, but got a ${e.shape.length}D Tensor.`));const n=e.shape[0],s=e.shape[1];let r=Tp(n),a=Wo(e);const i=Mh([[1]],[1,1]);let o=Wo(i);const l=n>=s?s:n;for(let e=0;e<l;++e){const t=a,l=o,u=r;[o,a,r]=ya.tidy((()=>{const t=ch(a,[e,e],[n-e,1]),l=kp(t),u=ch(a,[e,e],[1,1]),c=ip(ep(u,0),Mh([[-1]]),Mh([[1]])),h=sp(u,Iu(c,l)),p=np(t,h);o=1===p.shape[0]?Wo(i):oh([i,ch(p,[1,0],[p.shape[0]-1,p.shape[1]])],0);const d=Cp(np(Ah(c,h),l)),f=ch(a,[e,0],[n-e,s]),m=Iu(d,o),g=$p(o);if(0===e)a=sp(f,Ah(m,Ah(g,f)));else{const t=sp(f,Ah(m,Ah(g,f)));a=oh([ch(a,[0,0],[e,s]),t],0)}const y=$p(m),b=ch(r,[0,e],[n,r.shape[1]-e]);if(0===e)r=sp(b,Ah(Ah(b,o),y));else{const t=sp(b,Ah(Ah(b,o),y));r=oh([ch(r,[0,0],[n,e]),t],1)}return[o,a,r]})),nh([t,l,u])}return!t&&n>s&&(r=ch(r,[0,0],[n,s]),a=ch(a,[0,0],[s,s])),[r,a]}))}const Ap=Aa({qr_:function(e,t=!1){if(x(e.rank>=2,(()=>`qr() requires input tensor to have a rank >= 2, but got rank ${e.rank}`)),2===e.rank)return Ep(e,t);{const n=e.shape.slice(0,e.shape.length-2).reduce(((e,t)=>e*t)),s=dp(Cu(e,[n,e.shape[e.shape.length-2],e.shape[e.shape.length-1]]),0),r=[],a=[];s.forEach((e=>{const[n,s]=Ep(e,t);r.push(n),a.push(s)}));return[Cu(pp(r,0),e.shape),Cu(pp(a,0),e.shape)]}}});var Rp;!function(e){e[e.NONE=0]="NONE",e[e.MEAN=1]="MEAN",e[e.SUM=2]="SUM",e[e.SUM_BY_NONZERO_WEIGHTS=3]="SUM_BY_NONZERO_WEIGHTS"}(Rp||(Rp={}));const Fp=Aa({mean_:function(e,t=null,n=!1){const s={x:$a(e,"x","mean")},r={axis:t,keepDims:n};return ya.runKernel(hn,s,r)}});const Dp=Aa({notEqual_:function(e,t){let n=$a(e,"a","notEqual","string_or_numeric"),s=$a(t,"b","notEqual","string_or_numeric");[n,s]=la(n,s),ul(n.shape,s.shape);const r={a:n,b:s};return ya.runKernel(xn,r)}});function _p(e,t="float32"){if("complex64"===t){const t=_p(e,"float32"),n=ph(e,"float32");return Ra(t,n)}const n=J(I(e),t);return ya.makeTensor(n,e,t)}const Op=Aa({computeWeightedLoss_:function(e,t,n=Rp.SUM_BY_NONZERO_WEIGHTS){const s=$a(e,"losses","computeWeightedLoss");let r=null;null!=t&&(r=$a(t,"weights","computeWeightedLoss"));const a=null==r?s:Iu(s,r);if(n===Rp.NONE)return a;if(n===Rp.SUM)return Au(a);if(n===Rp.MEAN){if(null==r)return Fp(a);{const e=s.size/r.size,t=np(Au(a),Au(r));return e>1?np(t,bh(e)):t}}if(n===Rp.SUM_BY_NONZERO_WEIGHTS){if(null==r)return np(Au(a),bh(s.size));{const e=Iu(r,_p(s.shape)),t=Po(Au(Dp(e,bh(0))),"float32");return np(Au(a),t)}}throw Error(`Unknown reduction: ${n}`)}});Aa({absoluteDifference_:function(e,t,n,s=Rp.SUM_BY_NONZERO_WEIGHTS){const r=$a(e,"labels","absoluteDifference"),a=$a(t,"predictions","absoluteDifference");let i=null;null!=n&&(i=$a(n,"weights","absoluteDifference")),w(r.shape,a.shape,"Error in absoluteDifference: ");const o=mp(sp(r,a));return Op(o,i,s)}});Aa({cosineDistance_:function(e,t,n,s,r=Rp.SUM_BY_NONZERO_WEIGHTS){const a=$a(e,"labels","cosineDistance"),i=$a(t,"predictions","cosineDistance");let o=null;null!=s&&(o=$a(s,"weights","cosineDistance")),w(a.shape,i.shape,"Error in cosineDistance: ");const l=bh(1),u=sp(l,Au(Iu(a,i),n,!0));return Op(u,o,r)}});Aa({hingeLoss_:function(e,t,n,s=Rp.SUM_BY_NONZERO_WEIGHTS){let r=$a(e,"labels","hingeLoss");const a=$a(t,"predictions","hingeLoss");let i=null;null!=n&&(i=$a(n,"weights","hingeLoss")),w(r.shape,a.shape,"Error in hingeLoss: ");const o=bh(1);r=sp(Iu(bh(2),r),o);const l=Nu(sp(o,Iu(r,a)));return Op(l,i,s)}});const Mp=Aa({minimum_:function(e,t){let n=$a(e,"a","minimum"),s=$a(t,"b","minimum");[n,s]=la(n,s),"bool"===n.dtype&&(n=Po(n,"int32"),s=Po(s,"int32")),ul(n.shape,s.shape);const r={a:n,b:s};return ya.runKernel(dn,r)}});Aa({huberLoss_:function(e,t,n,s=1,r=Rp.SUM_BY_NONZERO_WEIGHTS){const a=$a(e,"labels","huberLoss"),i=$a(t,"predictions","huberLoss");let o=null;null!=n&&(o=$a(n,"weights","huberLoss")),w(a.shape,i.shape,"Error in huberLoss: ");const l=bh(s),u=mp(sp(i,a)),c=Mp(u,l),h=sp(u,c),p=vh(Iu(bh(.5),wp(c)),Iu(l,h));return Op(p,o,r)}});const Lp=Aa({log_:function(e){const t={x:$a(e,"x","log","float32")};return ya.runKernel(Yt,t)}});Aa({logLoss_:function(e,t,n,s=1e-7,r=Rp.SUM_BY_NONZERO_WEIGHTS){const a=$a(e,"labels","logLoss"),i=$a(t,"predictions","logLoss");let o=null;null!=n&&(o=$a(n,"weights","logLoss")),w(a.shape,i.shape,"Error in logLoss: ");const l=bh(1),u=bh(s),c=Cp(Iu(a,Lp(vh(i,u)))),h=Iu(sp(l,a),Lp(vh(sp(l,i),u))),p=sp(c,h);return Op(p,o,r)}});const zp=Aa({squaredDifference_:function(e,t){let n=$a(e,"a","squaredDifference"),s=$a(t,"b","squaredDifference");[n,s]=la(n,s),ul(n.shape,s.shape);const r={a:n,b:s};return ya.runKernel(ls,r,{})}});Aa({meanSquaredError_:function(e,t,n,s=Rp.SUM_BY_NONZERO_WEIGHTS){const r=$a(e,"labels","meanSquaredError"),a=$a(t,"predictions","meanSquaredError");let i=null;null!=n&&(i=$a(n,"weights","meanSquaredError")),w(r.shape,a.shape,"Error in meanSquaredError: ");const o=zp(r,a);return Op(o,i,s)}});const Bp=Aa({exp_:function(e){const t={x:$a(e,"x","exp")};return ya.runKernel(Ct,t)}});const Pp=Aa({log1p_:function(e){const t={x:$a(e,"x","log1p")};return ya.runKernel(Zt,t)}});Aa({sigmoidCrossEntropy_:function(e,t,n,s=0,r=Rp.SUM_BY_NONZERO_WEIGHTS){let a=$a(e,"multiClassLabels","sigmoidCrossEntropy");const i=$a(t,"logits","sigmoidCrossEntropy");let o=null;if(null!=n&&(o=$a(n,"weights","sigmoidCrossEntropy")),w(a.shape,i.shape,"Error in sigmoidCrossEntropy: "),s>0){const e=bh(s),t=bh(1),n=bh(.5);a=vh(Iu(a,sp(t,e)),Iu(n,e))}const l=function(e,t){const n=$a(e,"labels","sigmoidCrossEntropyWithLogits"),s=$a(t,"logits","sigmoidCrossEntropyWithLogits");w(n.shape,s.shape,"Error in sigmoidCrossEntropyWithLogits: ");const r=Nu(s),a=Iu(s,n),i=Pp(Bp(Cp(mp(s))));return vh(sp(r,a),i)}(a,i);return Op(l,o,r)}});const Wp=Aa({logSumExp_:function(e,t=null,n=!1){const s=$a(e,"x","logSumExp"),r=D(t,s.shape),a=gp(s,r,!0),i=sp(s,a),o=Bp(i),l=Au(o,r),u=Lp(l),c=vh(Cu(a,u.shape),u);if(n){const e=Zl(c.shape,r);return Cu(c,e)}return c}});Aa({softmaxCrossEntropy_:function(e,t,n,s=0,r=Rp.SUM_BY_NONZERO_WEIGHTS){let a=$a(e,"onehotLabels","softmaxCrossEntropy");const i=$a(t,"logits","softmaxCrossEntropy");let o=null;if(null!=n&&(o=$a(n,"weights","softmaxCrossEntropy")),w(a.shape,i.shape,"Error in softmaxCrossEntropy: "),s>0){const e=bh(s),t=bh(1),n=bh(a.shape[1]);a=vh(Iu(a,sp(t,e)),np(e,n))}const l=function(e,t,n=-1){if(-1===n&&(n=t.rank-1),n!==t.rank-1)throw Error(`Softmax cross entropy along a non-last dimension is not yet supported. Labels / logits was rank ${t.rank} and dim was ${n}`);return ih(((e,t,s)=>{const r=Wp(t,[n],!0),a=sp(Po(t,"float32"),r);s([e,a]);const i=Cp(Iu(a,e));return{value:Au(i,[n]),gradFunc:(e,t)=>{const[s,r]=t,a=Zl(e.shape,[n]);return[Iu(Cu(e,a),sp(Po(s,"float32"),Bp(r))),Iu(Cu(e,a),sp(Bp(r),Po(s,"float32")))]}}}))(e,t)}(a,i);return Op(l,o,r)}});const Up=Aa({sparseFillEmptyRows_:function(e,t,n,s){const r=$a(e,"indices","sparseFillEmptyRows","int32"),a=$a(t,"values","sparseFillEmptyRows"),i=$a(n,"denseShape","sparseFillEmptyRows","int32"),o=$a(s,"defaultValue","sparseFillEmptyRows",a.dtype);if(2!==r.rank)throw new Error(`Indices should be Tensor2D but received shape\n        ${r.shape}`);if(1!==a.rank)throw new Error(`Values should be Tensor1D but received shape ${a.shape}`);if(1!==i.rank)throw new Error(`Dense shape should be Tensor1D but received shape ${i.shape}`);if(0!==o.rank)throw new Error(`Default value should be a scalar but received shape ${o.shape}`);const l={indices:r,values:a,denseShape:i,defaultValue:o},u=ya.runKernel(ss,l);return{outputIndices:u[0],outputValues:u[1],emptyRowIndicator:u[2],reverseIndexMap:u[3]}}});const Vp=Aa({sparseReshape_:function(e,t,n){const s=$a(e,"inputIndices","sparseReshape","int32"),r=$a(t,"inputShape","sparseReshape","int32"),a=$a(n,"newShape","sparseReshape","int32");if(2!==s.rank)throw new Error(`Input indices should be Tensor2D but received shape\n        ${s.shape}`);if(1!==r.rank)throw new Error(`Input shape should be Tensor1D but received shape ${r.shape}`);if(1!==a.rank)throw new Error(`New shape should be Tensor1D but received shape ${a.shape}`);const i={inputIndices:s,inputShape:r,newShape:a},o=ya.runKernel(rs,i);return{outputIndices:o[0],outputShape:o[1]}}});const Gp=Aa({sparseSegmentMean_:function(e,t,n){const s=$a(e,"data","sparseSegmentMean"),r=$a(t,"indices","sparseSegmentMean","int32"),a=$a(n,"segmentIds","sparseSegmentMean","int32");if(s.rank<1)throw new Error("Data should be at least 1 dimensional but received scalar");if(1!==r.rank)throw new Error(`Indices should be Tensor1D but received shape\n          ${r.shape}`);if(1!==a.rank)throw new Error(`Segment ids should be Tensor1D but received shape\n          ${a.shape}`);const i={data:s,indices:r,segmentIds:a};return ya.runKernel(as,i)}});const Hp=Aa({sparseSegmentSum_:function(e,t,n){const s=$a(e,"data","sparseSegmentSum"),r=$a(t,"indices","sparseSegmentSum","int32"),a=$a(n,"segmentIds","sparseSegmentSum","int32");if(s.rank<1)throw new Error("Data should be at least 1 dimensional but received scalar");if(1!==r.rank)throw new Error(`Indices should be Tensor1D but received shape\n         ${r.shape}`);if(1!==a.rank)throw new Error(`Segment ids should be Tensor1D but received shape\n         ${a.shape}`);const i={data:s,indices:r,segmentIds:a};return ya.runKernel(is,i)}});const jp=Aa({stringNGrams_:function(e,t,n,s,r,a,i,o){const l=$a(e,"data","stringNGrams","string");if("string"!==l.dtype)throw new Error("Data must be of datatype string");if(1!==l.shape.length)throw new Error(`Data must be a vector, saw: ${l.shape}`);const u=$a(t,"dataSplits","stringNGrams");if("int32"!==u.dtype)throw new Error("Data splits must be of datatype int32");const c={separator:n,nGramWidths:s,leftPad:r,rightPad:a,padWidth:i,preserveShortSequences:o},h={data:l,dataSplits:u},p=ya.runKernel(hs,h,c);return{nGrams:p[0],nGramsSplits:p[1]}}});const qp=Aa({stringSplit_:function(e,t,n=!0){const s=$a(e,"input","stringSplit","string"),r=$a(t,"delimiter","stringSplit","string");if(1!==s.rank)throw new Error(`Input should be Tensor1D but received shape ${s.shape}`);if(0!==r.rank)throw new Error(`Delimiter should be a scalar but received shape ${r.shape}`);const a={skipEmpty:n},i={input:s,delimiter:r},o=ya.runKernel(ps,i,a);return{indices:o[0],values:o[1],shape:o[2]}}});const Kp=Aa({stringToHashBucketFast_:function(e,t){const n=$a(e,"input","stringToHashBucketFast","string"),s={numBuckets:t};if(t<=0)throw new Error("Number of buckets must be at least 1");const r={input:n};return ya.runKernel(ds,r,s)}});const Xp=Aa({acos_:function(e){const t={x:$a(e,"x","acos")};return ya.runKernel(Ee,t)}});const Yp=Aa({acosh_:function(e){const t={x:$a(e,"x","acosh")};return ya.runKernel(Ae,t)}});const Zp=Aa({addN_:function(e){x(Array.isArray(e),(()=>"The argument passed to tf.addN() must be a list of tensors")),x(e.length>=1,(()=>`Must pass at least one tensor to tf.addN(), but got ${e.length}`));const t=e.map(((e,t)=>$a(e,`tensors${t}`,"addN"))),n=t[0];t.forEach((e=>{if(e.dtype!==n.dtype)throw new Error("All tensors passed to tf.addN() must have the same dtype")})),t.forEach((e=>{if(!N(e.shape,n.shape))throw new Error("All tensors passed to tf.addN() must have the same shape")}));const s=t;return ya.runKernel(Fe,s)}});const Jp=Aa({all_:function(e,t=null,n=!1){const s={x:$a(e,"x","all","bool")},r={axis:t,keepDims:n};return ya.runKernel(De,s,r)}});const Qp=Aa({any_:function(e,t=null,n=!1){const s={x:$a(e,"x","any","bool")},r={axis:t,keepDims:n};return ya.runKernel(_e,s,r)}});const ed=Aa({argMax_:function(e,t=0){const n={x:$a(e,"x","argMax")},s={axis:t};return ya.runKernel(Oe,n,s)}});const td=Aa({argMin_:function(e,t=0){const n={x:$a(e,"x","argMin")},s={axis:t};return ya.runKernel(Me,n,s)}});const nd=Aa({asin_:function(e){const t={x:$a(e,"x","asin")};return ya.runKernel(Le,t)}});const sd=Aa({asinh_:function(e){const t={x:$a(e,"x","asinh")};return ya.runKernel(ze,t)}});const rd=Aa({atan_:function(e){const t={x:$a(e,"x","atan")};return ya.runKernel(Be,t)}});const ad=Aa({atan2_:function(e,t){let n=$a(e,"a","atan2"),s=$a(t,"b","atan2");[n,s]=la(n,s);const r={a:n,b:s};return ya.runKernel(We,r)}});const id=Aa({atanh_:function(e){const t={x:$a(e,"x","atanh")};return ya.runKernel(Pe,t)}});const od=Aa({avgPool_:function(e,t,n,s,r){const a=$a(e,"x","avgPool","float32");x(yu(n,1),(()=>`Error in avgPool: Either strides or dilations must be 1. Got strides ${n} and dilations '1'`));let i=a,o=!1;3===a.rank&&(o=!0,i=Cu(a,[1,a.shape[0],a.shape[1],a.shape[2]])),x(4===i.rank,(()=>`Error in avgPool: x must be rank 4 but got rank ${i.rank}.`)),xu("avgPool",s,r);const l={x:i},u={filterSize:t,strides:n,pad:s,dimRoundingMode:r};let c=ya.runKernel(Ue,l,u);return c=Po(c,a.dtype),o?Cu(c,[c.shape[1],c.shape[2],c.shape[3]]):c}});const ld=Aa({avgPool3d_:function(e,t,n,s,r,a="NDHWC"){const i=$a(e,"x","avgPool3d","float32");let o=i,l=!1;4===i.rank&&(l=!0,o=Cu(i,[1,i.shape[0],i.shape[1],i.shape[2],i.shape[3]])),x(5===o.rank,(()=>`Error in avgPool3d: x must be rank 5 but got rank ${o.rank}.`)),x("NDHWC"===a,(()=>`Error in avgPool3d: Only NDHWC is currently supported, but got dataFormat of ${a}`)),xu("avgPool3d",s,r);const u={x:o},c={filterSize:t,strides:n,pad:s,dimRoundingMode:r,dataFormat:a};let h=ya.runKernel(Ge,u,c);return h=Po(h,o.dtype),l?Cu(h,[h.shape[1],h.shape[2],h.shape[3],h.shape[4]]):h}});const ud=Aa({batchToSpaceND_:function(e,t,n){const s=$a(e,"x","batchToSpaceND"),r=t.reduce(((e,t)=>e*t));x(s.rank>=1+t.length,(()=>`input rank is ${s.rank} but should be > than blockShape.length ${t.length}`)),x(n.length===t.length,(()=>`crops.length is ${n.length} but should be equal to blockShape.length  ${t.length}`)),x(s.shape[0]%r==0,(()=>`input tensor batch is ${s.shape[0]} but is not divisible by the product of the elements of blockShape ${t.join(" * ")} === ${r}`));const a={x:s},i={blockShape:t,crops:n};return ya.runKernel(qe,a,i)}});const cd=Aa({batchNorm_:function(e,t,n,s,r,a){null==a&&(a=.001);const i=$a(e,"x","batchNorm"),o=$a(t,"mean","batchNorm"),l=$a(n,"variance","batchNorm");let u,c;null!=r&&(u=$a(r,"scale","batchNorm")),null!=s&&(c=$a(s,"offset","batchNorm")),x(o.rank===l.rank,(()=>"Batch normalization gradient requires mean and variance to have equal ranks.")),x(null==c||o.rank===c.rank,(()=>"Batch normalization gradient requires mean and offset to have equal ranks.")),x(null==u||o.rank===u.rank,(()=>"Batch normalization gradient requires mean and scale to have equal ranks."));const h=function(e){let t;return t=0===e.rank||1===e.rank?Cu(e,[1,1,1,e.size]):2===e.rank?Cu(e,[1,1,e.shape[0],e.shape[1]]):3===e.rank?Cu(e,[1,e.shape[0],e.shape[1],e.shape[2]]):e,t}(i),p={x:h,scale:u,offset:c,mean:o,variance:l},d={varianceEpsilon:a},f=ya.runKernel(Ot,p,d);return Cu(f,i.shape)}});const hd=Aa({batchNorm2d_:function(e,t,n,s,r,a){const i=$a(e,"x","batchNorm"),o=$a(t,"mean","batchNorm"),l=$a(n,"variance","batchNorm");let u,c;return null!=r&&(u=$a(r,"scale","batchNorm")),null!=s&&(c=$a(s,"offset","batchNorm")),x(2===i.rank,(()=>`Error in batchNorm2D: x must be rank 2 but got rank ${i.rank}.`)),x(2===o.rank||1===o.rank,(()=>`Error in batchNorm2D: mean must be rank 2 or rank 1 but got rank ${o.rank}.`)),x(2===l.rank||1===l.rank,(()=>`Error in batchNorm2D: variance must be rank 2 or rank 1 but got rank ${l.rank}.`)),null!=u&&x(2===u.rank||1===u.rank,(()=>`Error in batchNorm2D: scale must be rank 2 or rank 1 but got rank ${u.rank}.`)),null!=c&&x(2===c.rank||1===c.rank,(()=>`Error in batchNorm2D: offset must be rank 2 or rank 1 but got rank ${c.rank}.`)),cd(i,o,l,c,u,a)}});const pd=Aa({batchNorm3d_:function(e,t,n,s,r,a){const i=$a(e,"x","batchNorm"),o=$a(t,"mean","batchNorm"),l=$a(n,"variance","batchNorm");let u,c;return null!=r&&(u=$a(r,"scale","batchNorm")),null!=s&&(c=$a(s,"offset","batchNorm")),x(3===i.rank,(()=>`Error in batchNorm3D: x must be rank 3 but got rank ${i.rank}.`)),x(3===o.rank||1===o.rank,(()=>`Error in batchNorm3D: mean must be rank 3 or rank 1 but got rank ${o.rank}.`)),x(3===l.rank||1===l.rank,(()=>`Error in batchNorm3D: variance must be rank 3 or rank 1 but got rank ${l.rank}.`)),null!=u&&x(3===u.rank||1===u.rank,(()=>`Error in batchNorm3D: scale must be rank 3 or rank 1 but got rank ${u.rank}.`)),null!=c&&x(3===c.rank||1===c.rank,(()=>`Error in batchNorm3D: offset must be rank 3 or rank 1 but got rank ${c.rank}.`)),cd(i,o,l,c,u,a)}});const dd=Aa({batchNorm4d_:function(e,t,n,s,r,a){const i=$a(e,"x","batchNorm"),o=$a(t,"mean","batchNorm"),l=$a(n,"variance","batchNorm");let u,c;return null!=r&&(u=$a(r,"scale","batchNorm")),null!=s&&(c=$a(s,"offset","batchNorm")),x(4===i.rank,(()=>`Error in batchNorm4D: x must be rank 4 but got rank ${i.rank}.`)),x(4===o.rank||1===o.rank,(()=>`Error in batchNorm4D: mean must be rank 4 or rank 1 but got rank ${o.rank}.`)),x(4===l.rank||1===l.rank,(()=>`Error in batchNorm4D: variance must be rank 4 or rank 1 but got rank ${l.rank}.`)),null!=u&&x(4===u.rank||1===u.rank,(()=>`Error in batchNorm4D: scale must be rank 4 or rank 1 but got rank ${u.rank}.`)),null!=c&&x(4===c.rank||1===c.rank,(()=>`Error in batchNorm4D: offset must be rank 4 or rank 1 but got rank ${c.rank}.`)),cd(i,o,l,c,u,a)}});const fd=Aa({broadcastArgs_:function(e,t){const n=$a(e,"s0","broadcastArgs","int32"),s=$a(t,"s1","broadcastArgs","int32");if(1!==n.rank)throw new Error(`broadcastArgs(): first input must be a vector (rank=1). Has rank ${n.rank}`);if(1!==s.rank)throw new Error(`broadcastArgs(): second input must be a vector (rank=1). Has rank ${s.rank}`);const r={s0:n,s1:s};return ya.runKernel(Xe,r)}});const md=Aa({ceil_:function(e){const t={x:$a(e,"x","ceil","float32")};return ya.runKernel(Ze,t)}});const gd=Aa({clipByValue_:function(e,t,n){const s=$a(e,"x","clipByValue");x(t<=n,(()=>`Error in clip: min (${t}) must be less than or equal to max (${n}).`));const r={x:s},a={clipValueMin:t,clipValueMax:n};return ya.runKernel(Je,r,a)}});const yd=Aa({concat1d_:function(e){return oh(e,0)}});const bd=Aa({concat2d_:function(e,t){return oh(e,t)}});const xd=Aa({concat3d_:function(e,t){return oh(e,t)}});const wd=Aa({concat4d_:function(e,t){return oh(e,t)}});const vd=Aa({conv1d_:function(e,t,n,s,r="NWC",a=1,i){const o=$a(e,"x","conv1d"),l=$a(t,"filter","conv1d");let u=o,c=!1;2===o.rank&&(c=!0,u=Cu(o,[1,o.shape[0],o.shape[1]])),x(3===u.rank,(()=>`Error in conv1d: input must be rank 3, but got rank ${u.rank}.`)),x(3===l.rank,(()=>`Error in conv1d: filter must be rank 3, but got rank ${l.rank}.`)),xu("conv1d",s,i),x(u.shape[2]===l.shape[1],(()=>`Error in conv1d: depth of input (${u.shape[2]}) must match input depth for filter ${l.shape[1]}.`)),x(yu(n,a),(()=>`Error in conv1D: Either stride or dilation must be 1. Got stride ${n} and dilation '${a}'`)),x("NWC"===r,(()=>`Error in conv1d: got dataFormat of ${r} but only NWC is currently supported.`));const h=Cu(l,[1,l.shape[0],l.shape[1],l.shape[2]]),p=Cu(u,[u.shape[0],1,u.shape[1],u.shape[2]]),d=kh(p,h,[1,n],s,"NHWC",[1,a],i);return Cu(d,c?[d.shape[2],d.shape[3]]:[d.shape[0],d.shape[2],d.shape[3]])}});const kd=Aa({conv2dTranspose_:function(e,t,n,s,r,a){const i=$a(e,"x","conv2dTranspose"),o=$a(t,"filter","conv2dTranspose");return Sh(n,i,o,s,r,"NHWC",a)}});const Id=Aa({conv3d_:function(e,t,n,s,r="NDHWC",a=[1,1,1]){const i=$a(e,"x","conv3d"),o=$a(t,"filter","conv3d");let l=i,u=!1;4===i.rank&&(u=!0,l=Cu(i,[1,i.shape[0],i.shape[1],i.shape[2],i.shape[3]])),x(5===l.rank,(()=>`Error in conv3d: input must be rank 5, but got rank ${l.rank}.`)),x(5===o.rank,(()=>`Error in conv3d: filter must be rank 5, but got rank ${o.rank}.`)),x(l.shape[4]===o.shape[3],(()=>`Error in conv3d: depth of input (${l.shape[4]}) must match input depth for filter ${o.shape[3]}.`)),x(yu(n,a),(()=>`Error in conv3D: Either strides or dilations must be 1. Got strides ${n} and dilations '${a}'`)),x("NDHWC"===r,(()=>`Error in conv3d: got dataFormat of ${r} but only NDHWC is currently supported.`));const c={x:l,filter:o},h={strides:n,pad:s,dataFormat:r,dilations:a},p=ya.runKernel(at,c,h);return u?Cu(p,[p.shape[1],p.shape[2],p.shape[3],p.shape[4]]):p}});const Sd=Aa({conv3DBackpropInput_:function(e,t,n,s,r){x(e.length===t.rank,(()=>`Length of inShape (${e.length}) and rank of dy (${t.rank}) must match`));let a=e,i=t,o=!1;4===t.rank&&(o=!0,i=Cu(t,[1,t.shape[0],t.shape[1],t.shape[2],t.shape[3]]),a=[1,e[0],e[1],e[2],e[3]]);const l=a[4],u=i.shape[4];x(5===a.length,(()=>`Error in conv3dDerInput: inShape must be length 5, but got length ${a.length}.`)),x(5===i.rank,(()=>`Error in conv3dDerInput: dy must be rank 5, but got rank ${i.rank}`)),x(5===n.rank,(()=>`Error in conv3dDerInput: filter must be rank 5, but got rank ${n.rank}`)),x(l===n.shape[3],(()=>`Error in conv3dDerInput: depth of input (${l}) must match input depth for filter ${n.shape[3]}.`)),x(u===n.shape[4],(()=>`Error in conv3dDerInput: depth of output (${u}) must match output depth for filter ${n.shape[4]}.`));const c={dy:i,filter:n},h={pad:r,strides:s,inputShape:a},p=ya.runKernel(ot,c,h);return o?Cu(p,[p.shape[1],p.shape[2],p.shape[3],p.shape[4]]):p}});const Nd=Aa({conv3dTranspose_:function(e,t,n,s,r){const a=$a(e,"x","conv3dTranspose"),i=$a(t,"filter","conv3dTranspose");return Sd(n,a,i,s,r)}});const Td=Aa({cos_:function(e){const t={x:$a(e,"x","cos","float32")};return ya.runKernel(lt,t)}});const Cd=Aa({cosh_:function(e){const t={x:$a(e,"x","cosh","float32")};return ya.runKernel(ut,t)}});const $d=Aa({cumsum_:function(e,t=0,n=!1,s=!1){const r={x:$a(e,"x","cumsum")},a={axis:t,exclusive:n,reverse:s};return ya.runKernel(ct,r,a)}});const Ed=Aa({denseBincount_:function(e,t,n,s=!1){const r=$a(e,"x","denseBincount"),a=$a(t,"weights","denseBincount");x("int32"===r.dtype,(()=>`Error in denseBincount: input dtype must be int32, but got ${r.dtype}`)),x(r.rank<=2,(()=>`Error in denseBincount: input must be at most rank 2, but got rank ${r.rank}.`)),x(n>=0,(()=>`size must be non-negative, but got ${n}.`)),x(a.size===r.size||0===a.size,(()=>`Error in denseBincount: weights must have the same shape as x or 0-length, but got x shape: ${r.shape}, weights shape: ${a.shape}.`));const i={x:r,weights:a},o={size:n,binaryOutput:s};return ya.runKernel(pt,i,o)}});const Ad=Aa({depthToSpace_:function(e,t,n="NHWC"){const s=$a(e,"x","depthToSpace","float32"),r="NHWC"===n?s.shape[1]:s.shape[2],a="NHWC"===n?s.shape[2]:s.shape[3],i="NHWC"===n?s.shape[3]:s.shape[1];x(t>1,(()=>`blockSize should be > 1 for depthToSpace, but was: ${t}`)),x(r*t>=0,(()=>`Negative dimension size caused by overflow when multiplying\n    ${r} and ${t}  for depthToSpace with input shape\n    ${s.shape}`)),x(a*t>=0,(()=>`Negative dimension size caused by overflow when multiplying\n    ${a} and ${t} for depthToSpace with input shape\n        ${s.shape}`)),x(i%(t*t)==0,(()=>`Dimension size must be evenly divisible by ${t*t} but is ${i} for depthToSpace with input shape ${s.shape}`));const o={x:s},l={blockSize:t,dataFormat:n};return ya.runKernel(dt,o,l)}});const Rd=Aa({dilation2d_:function(e,t,n,s,r=[1,1],a="NHWC"){const i=$a(e,"x","dilation2d"),o=$a(t,"filter","dilation2d");x(3===i.rank||4===i.rank,(()=>`Error in dilation2d: input must be rank 3 or 4, but got rank ${i.rank}.`)),x(3===o.rank,(()=>`Error in dilation2d: filter must be rank 3, but got rank ${o.rank}.`)),x("NHWC"===a,(()=>`Error in dilation2d: Only NHWC is currently supported, but got dataFormat of ${a}`));let l=i,u=!1;3===i.rank&&(l=Cu(i,[1,i.shape[0],i.shape[1],i.shape[2]]),u=!0);const c={x:l,filter:o},h={strides:n,pad:s,dilations:r},p=ya.runKernel(bt,c,h);return u?Cu(p,[p.shape[1],p.shape[2],p.shape[3]]):p}});const Fd=Aa({equal_:function(e,t){let n=$a(e,"a","equal","string_or_numeric"),s=$a(t,"b","equal","string_or_numeric");[n,s]=la(n,s),ul(n.shape,s.shape);const r={a:n,b:s};return ya.runKernel(Tt,r)}});const Dd=Aa({divNoNan_:function(e,t){let n=$a(e,"a","div"),s=$a(t,"b","div");[n,s]=la(n,s);const r=np(n,s),a=dh(r),i=Fd(s,a);return ip(i,a,r)}});const _d=Aa({einsum_:function(e,...t){const n=t.map(((e,t)=>$a(e,`tensors${t}`,"einsum"))),s={equation:e};return ya.runKernel(kt,n,s)}});const Od=Aa({erf_:function(e){let t=$a(e,"x","erf");x("int32"===t.dtype||"float32"===t.dtype,(()=>"Input dtype must be `int32` or `float32`.")),"int32"===t.dtype&&(t=Po(t,"float32"));const n={x:t};return ya.runKernel(Nt,n)}});const Md=Aa({expm1_:function(e){const t={x:$a(e,"x","expm1")};return ya.runKernel(Et,t)}});const Ld=Aa({floor_:function(e){const t={x:$a(e,"x","floor","float32")};return ya.runKernel(Dt,t)}});const zd=Aa({gather_:function(e,t,n=0,s=0){const r={x:$a(e,"x","gather"),indices:$a(t,"indices","gather","int32")},a={axis:n,batchDims:s};return ya.runKernel(Mt,r,a)}});const Bd=Aa({isFinite_:function(e){const t={x:$a(e,"x","isFinite")};return ya.runKernel(Vt,t)}});const Pd=Aa({isInf_:function(e){const t={x:$a(e,"x","isInf")};return ya.runKernel(Gt,t)}});const Wd=Aa({isNaN_:function(e){const t={x:$a(e,"x","isNaN")};return ya.runKernel(Ht,t)}});const Ud=Aa({less_:function(e,t){let n=$a(e,"a","less","string_or_numeric"),s=$a(t,"b","less","string_or_numeric");[n,s]=la(n,s),ul(n.shape,s.shape);const r={a:n,b:s};return ya.runKernel(qt,r)}});function Vd(e,t,n){if(n<=0)throw new Error("The number of values should be positive.");const s={start:e,stop:t,num:n};return ya.runKernel(Xt,{},s)}const Gd=Aa({localResponseNormalization_:function(e,t=5,n=1,s=1,r=.5){const a=$a(e,"x","localResponseNormalization");x(4===a.rank||3===a.rank,(()=>`Error in localResponseNormalization: x must be rank 3 or 4 but got\n               rank ${a.rank}.`)),x(T(t),(()=>`Error in localResponseNormalization: depthRadius must be an integer but got depthRadius ${t}.`));let i=a,o=!1;3===a.rank&&(o=!0,i=Cu(a,[1,a.shape[0],a.shape[1],a.shape[2]]));const l={x:i},u={depthRadius:t,bias:n,alpha:s,beta:r},c=ya.runKernel(tn,l,u);return o?Cu(c,[c.shape[1],c.shape[2],c.shape[3]]):c}});const Hd=Aa({softplus_:function(e){const t={x:$a(e,"x","softplus")};return ya.runKernel(Zn,t)}});const jd=Aa({logSigmoid_:function(e){const t=$a(e,"x","logSigmoid");return ih((e=>({value:Cp(Hd(Cp(e))),gradFunc:t=>Iu(t,$u(Cp(e)))})))(t)}});const qd=Aa({logSoftmax_:function(e,t=-1){const n=$a(e,"logits","logSoftmax");if(-1===t&&(t=n.rank-1),t!==n.rank-1)throw Error(`Log Softmax along a non-last dimension is not yet supported. Logits was rank ${n.rank} and axis was ${t}`);return ih(((e,n)=>{const s=gp(e,t,!0),r=sp(e,s),a=sp(Po(r,"float32"),Lp(Au(Bp(r),t,!0)));n([a]);return{value:a,gradFunc:(e,n)=>{const[s]=n,r=Bp(s);return sp(e,Iu(Au(e,t,!0),r))}}}))(n)}});const Kd=Aa({logicalNot_:function(e){const t={x:$a(e,"x","logicalNot","bool")};return ya.runKernel(Qt,t)}});const Xd=Aa({logicalOr_:function(e,t){const n=$a(e,"a","logicalOr","bool"),s=$a(t,"b","logicalOr","bool");ul(n.shape,s.shape);const r={a:n,b:s};return ya.runKernel(en,r)}});const Yd=Aa({maxPool_:function(e,t,n,s,r){const a=$a(e,"x","maxPool");let i=a,o=!1;3===a.rank&&(o=!0,i=Cu(a,[1,a.shape[0],a.shape[1],a.shape[2]])),x(4===i.rank,(()=>`Error in maxPool: input must be rank 4 but got rank ${i.rank}.`)),x(yu(n,1),(()=>`Error in maxPool: Either strides or dilations must be 1. Got strides ${n} and dilations '1'`)),xu("maxPool",s,r);const l={x:i},u={filterSize:t,strides:n,pad:s,dimRoundingMode:r},c=ya.runKernel(an,l,u);return o?Cu(c,[c.shape[1],c.shape[2],c.shape[3]]):c}});const Zd=Aa({maxPool3d_:function(e,t=[1,1,1],n,s,r,a="NDHWC"){const i=$a(e,"x","maxPool3d");let o=i,l=!1;4===i.rank&&(l=!0,o=Cu(i,[1,i.shape[0],i.shape[1],i.shape[2],i.shape[3]])),x(5===o.rank,(()=>`Error in maxPool3d: x must be rank 5 but got rank ${o.rank}.`)),x("NDHWC"===a,(()=>`Error in maxPool3d: Only NDHWC is currently supported, but got dataFormat of ${a}`)),xu("maxPool3d",s,r);const u={x:o},c={filterSize:t,strides:n,pad:s,dimRoundingMode:r,dataFormat:a},h=ya.runKernel(ln,u,c);return l?Cu(h,[h.shape[1],h.shape[2],h.shape[3],h.shape[4]]):h}});const Jd=Aa({maxPoolWithArgmax_:function(e,t,n,s,r=!1){const a={x:$a(e,"x","maxPoolWithArgmax")},i={filterSize:t,strides:n,pad:s,includeBatchInIndex:r},o=ya.runKernel(cn,a,i);return{result:o[0],indexes:o[1]}}});const Qd=Aa({maximum_:function(e,t){let n=$a(e,"a","maximum"),s=$a(t,"b","maximum");[n,s]=la(n,s),"bool"===n.dtype&&(n=Po(n,"int32"),s=Po(s,"int32")),ul(n.shape,s.shape);const r={a:n,b:s};return ya.runKernel(rn,r)}});const ef=Aa({mirrorPad_:function(e,t,n){x("reflect"===n||"symmetric"===n,(()=>`Invalid mode. Mode must be either reflect or symmetric. Got ${n}.`));const s=$a(e,"x","mirrorPad");if(0===s.rank)throw new Error("mirrorPad(scalar) is not defined. Pass non-scalar to mirrorPad");x(t.length===s.rank,(()=>`Padding doesn't match input. Must be ${s.rank}. Got ${t.length}.`));const r="reflect"===n?1:0;for(let e=0;e<s.rank;e++)x(2===t[e].length,(()=>"Invalid number of paddings. Must be length of 2 each.")),x(t[e][0]>=0&&t[e][0]<=s.shape[e]-r&&t[e][1]>=0&&t[e][1]<=s.shape[e]-r,(()=>`Padding in dimension ${e} cannot be greater than or equal to ${s.shape[e]-r} or less than 0 for input of shape ${s.shape}`));const a={paddings:t,mode:n},i={x:s};return ya.runKernel(fn,i,a)}});const tf=Aa({mod_:function(e,t){let n=$a(e,"a","mod"),s=$a(t,"b","mod");[n,s]=la(n,s);const r={a:n,b:s};return ya.runKernel(mn,r)}});const nf=Aa({moments_:function(e,t=null,n=!1){const s=D(t,(e=$a(e,"x","moments")).shape),r=Fp(e,s,n);let a=r.shape;n||(a=Zl(r.shape,s));const i=wp(sp(Po(e,"float32"),Cu(r,a)));return{mean:r,variance:Fp(i,s,n)}}});const sf=Aa({multinomial_:function(e,t,n,s=!1){const r=$a(e,"logits","multinomial"),a=r.size,i=r.rank;if(a<2)throw new Error(`Error in multinomial: you need at least 2 outcomes, but got ${a}.`);if(i>2)throw new Error(`Rank of probabilities must be 1 or 2, but is ${i}`);n=n||Math.random();const o={logits:1===i?Cu(r,[1,-1]):r},l={numSamples:t,seed:n,normalized:s},u=ya.runKernel(gn,o,l);return 1===i?Cu(u,[u.size]):u}});const rf=Aa({oneHot_:function(e,t,n=1,s=0){if(t<2)throw new Error(`Error in oneHot: depth must be >=2, but it is ${t}`);const r={indices:$a(e,"indices","oneHot","int32")},a={depth:t,onValue:n,offValue:s};return ya.runKernel(Sn,r,a)}});const af=Aa({onesLike_:function(e){const t={x:$a(e,"x","onesLike")};return ya.runKernel(In,t)}});const of=Aa({pad_:function(e,t,n=0){const s=$a(e,"x","pad");if(0===s.rank)throw new Error("pad(scalar) is not defined. Pass non-scalar to pad");const r={paddings:t,constantValue:n},a={x:s};return ya.runKernel(Tn,a,r)}});const lf=Aa({prod_:function(e,t=null,n=!1){let s=$a(e,"x","prod");"bool"===s.dtype&&(s=Po(s,"int32"));const r={x:s},a={axis:t,keepDims:n};return ya.runKernel(En,r,a)}});var uf={},cf=a("gj6Et"),hf=a("4gDjz"),pf=a("HLBv4"),df=a("ktaoY"),ff=a("gBs5C"),mf=a("ktLSh"),gf={};!function(e,t){var n,s=this,r=256,i=t.pow(r,6),o=t.pow(2,52),l=2*o,u=255;function c(a,u,c){var g=[],y=f(d((u=1==u?{entropy:!0}:u||{}).entropy?[a,m(e)]:null==a?function(){try{var t;return n&&(t=n.randomBytes)?t=t(r):(t=new Uint8Array(r),(s.crypto||s.msCrypto).getRandomValues(t)),m(t)}catch(t){var a=s.navigator,i=a&&a.plugins;return[+new Date,s,i,s.screen,m(e)]}}():a,3),g),b=new h(g),x=function(){for(var e=b.g(6),t=i,n=0;e<o;)e=(e+n)*r,t*=r,n=b.g(1);for(;e>=l;)e/=2,t/=2,n>>>=1;return(e+n)/t};return x.int32=function(){return 0|b.g(4)},x.quick=function(){return b.g(4)/4294967296},x.double=x,f(m(b.S),e),(u.pass||c||function(e,n,s,r){return r&&(r.S&&p(r,b),e.state=function(){return p(b,{})}),s?(t.random=e,n):e})(x,y,"global"in u?u.global:this==t,u.state)}function h(e){var t,n=e.length,s=this,a=0,i=s.i=s.j=0,o=s.S=[];for(n||(e=[n++]);a<r;)o[a]=a++;for(a=0;a<r;a++)o[a]=o[i=u&i+e[a%n]+(t=o[a])],o[i]=t;(s.g=function(e){for(var t,n=0,a=s.i,i=s.j,o=s.S;e--;)t=o[a=u&a+1],n=n*r+o[u&(o[a]=o[i=u&i+t])+(o[i]=t)];return s.i=a,s.j=i,n})(r)}function p(e,t){return t.i=e.i,t.j=e.j,t.S=e.S.slice(),t}function d(e,t){var n,s=[],r=typeof e;if(t&&"object"==r)for(n in e)try{s.push(d(e[n],t-1))}catch(e){}return s.length?s:"string"==r?e:e+"\0"}function f(e,t){for(var n,s=e+"",r=0;r<s.length;)t[u&r]=u&(n^=19*t[u&r])+s.charCodeAt(r++);return m(t)}function m(e){return String.fromCharCode.apply(0,e)}if(t.seedrandom=c,f(t.random(),e),gf){gf=c;try{n=a("foUwZ")}catch(e){}}else"function"==typeof define&&define.amd&&define((function(){return c}))}([],Math),gf.alea=cf,gf.xor128=hf,gf.xorwow=pf,gf.xorshift7=df,gf.xor4096=ff,gf.tychei=mf,uf=gf;class yf{constructor(e,t,n,s,r){this.mean=e,this.stdDev=t,this.dtype=n,this.nextVal=NaN,this.truncated=s,this.truncated&&(this.upper=this.mean+2*this.stdDev,this.lower=this.mean-2*this.stdDev);const a=r||Math.random();this.random=uf.alea(a.toString())}nextValue(){if(!isNaN(this.nextVal)){const e=this.nextVal;return this.nextVal=NaN,e}let e,t,n=!1;for(;!n;){let s,r,a;do{s=2*this.random()-1,r=2*this.random()-1,a=s*s+r*r}while(a>=1||0===a);const i=Math.sqrt(-2*Math.log(a)/a);e=this.mean+this.stdDev*s*i,t=this.mean+this.stdDev*r*i,this.truncated&&!this.isValidTruncated(e)||(n=!0)}return this.truncated&&!this.isValidTruncated(t)||(this.nextVal=this.convertValue(t)),this.convertValue(e)}convertValue(e){return null==this.dtype||"float32"===this.dtype?e:Math.round(e)}isValidTruncated(e){return e<=this.upper&&e>=this.lower}}class bf{constructor(e=0,t=1,n,s){if(this.canReturnFloat=()=>null==this.dtype||"float32"===this.dtype,this.min=e,this.range=t-e,this.dtype=n,null==s&&(s=Math.random()),"number"==typeof s&&(s=s.toString()),!this.canReturnFloat()&&this.range<=1)throw new Error(`The difference between ${e} - ${t} <= 1 and dtype is not float`);this.random=uf.alea(s)}convertValue(e){return this.canReturnFloat()?e:Math.round(e)}nextValue(){return this.convertValue(this.min+this.range*this.random())}}const xf=Aa({randomNormal_:function(e,t=0,n=1,s,r){if(null!=s&&"bool"===s)throw new Error(`Unsupported data type ${s}`);const a=new yf(t,n,s,!1,r),i=Bo(e,s);for(let e=0;e<i.values.length;e++)i.values[e]=a.nextValue();return i.toTensor()}});const wf=Aa({randomUniform_:function(e,t=0,n=1,s="float32",r){const a=Bo(e,s),i=new bf(t,n,null,r);for(let e=0;e<a.values.length;e++)a.values[e]=i.nextValue();return a.toTensor()}});const vf=Aa({reciprocal_:function(e){const t={x:$a(e,"x","reciprocal")};return ya.runKernel(Fn,t)}});const kf=Aa({rsqrt_:function(e){const t={x:$a(e,"x","rsqrt","float32")};return ya.runKernel(Un,t)}});const If=Aa({selu_:function(e){const t={x:$a(e,"x","selu")};return ya.runKernel(Hn,t)}});const Sf=Aa({separableConv2d_:function(e,t,n,s,r,a=[1,1],i="NHWC"){const o=$a(e,"x","separableConv2d"),l=$a(t,"depthwiseFilter","separableConv2d"),u=$a(n,"pointwiseFilter","separableConv2d");let c=o,h=!1;if(3===o.rank&&(h=!0,c=Cu(o,[1,o.shape[0],o.shape[1],o.shape[2]])),"NCHW"===i)throw new Error("separableConv2d currently does not support dataFormat NCHW; only NHWC is supported");x(4===c.rank,(()=>`Error in separableConv2d: input must be rank 4, but got rank ${c.rank}.`)),x(4===l.rank,(()=>`Error in separableConv2d: depthwise filter must be rank 4, but got rank ${l.rank}.`)),x(4===u.rank,(()=>`Error in separableConv2d: pointwise filter must be rank 4, but got rank ${l.rank}.`)),x(1===u.shape[0],(()=>`Error in separableConv2d: the first dimension of pointwise filter  must be 1, but got ${u.shape[0]}.`)),x(1===u.shape[1],(()=>`Error in separableConv2d: the second dimension of pointwise filter must be 1, but got ${u.shape[1]}.`));const p=l.shape[2],d=l.shape[3];x(u.shape[2]===p*d,(()=>`Error in separableConv2d: the third dimension of pointwise filter must be ${p*d}, but got ${u.shape[2]}.`));const f=Th(c,l,s,r,i,a),m=kh(f,u,1,"valid",i);return h?Cu(m,[m.shape[1],m.shape[2],m.shape[3]]):m}});const Nf=async function(e,t){const n=$a(e,"x","setdiff1d"),s=$a(t,"y","setdiff1d");x(n.dtype===s.dtype,(()=>`x and y should have the same dtype, but got x (${n.dtype}) and y (${s.dtype}).`)),x(1===n.rank,(()=>`x should be 1D tensor, but got x (${n.shape}).`)),x(1===s.rank,(()=>`y should be 1D tensor, but got y (${s.shape}).`));const r=await n.data(),a=await s.data(),i=new Set(a);let o=0;for(let e=0;e<r.length;e++)i.has(r[e])||o++;const l=new Ur([o],n.dtype),u=new Ur([o],"int32");for(let e=0,t=0;e<r.length;e++)i.has(r[e])||(l.values[t]=r[e],u.values[t]=e,t++);return[l.toTensor(),u.toTensor()]};const Tf=Aa({sign_:function(e){const t={x:$a(e,"x","sign")};return ya.runKernel(Xn,t)}});const Cf=Aa({sin_:function(e){const t={x:$a(e,"x","sin","float32")};return ya.runKernel(qn,t)}});const $f=Aa({sinh_:function(e){const t={x:$a(e,"x","sinh")};return ya.runKernel(Kn,t)}});const Ef=Aa({slice1d_:function(e,t,n){const s=$a(e,"x","slice1d");return x(1===s.rank,(()=>`slice1d expects a rank-1 tensor, but got a rank-${s.rank} tensor`)),ch(s,[t],[n])}});const Af=Aa({slice2d_:function(e,t,n){const s=$a(e,"x","slice2d");return x(2===s.rank,(()=>`slice2d expects a rank-2 tensor, but got a rank-${s.rank} tensor`)),ch(s,t,n)}});const Rf=Aa({slice3d_:function(e,t,n){const s=$a(e,"x","slice3d");return x(3===s.rank,(()=>`slice3d expects a rank-3 tensor, but got a rank-${s.rank} tensor`)),ch(s,t,n)}});const Ff=Aa({slice4d_:function(e,t,n){const s=$a(e,"x","slice4d");return x(4===s.rank,(()=>`slice4d expects a rank-4 tensor, but got a rank-${s.rank} tensor`)),ch(s,t,n)}});const Df=Aa({softmax_:function(e,t=-1){const n=$a(e,"logits","softmax","float32");if(-1===t&&(t=n.rank-1),t!==n.rank-1)throw Error(`Softmax along a non-last dimension is not yet supported. Logits was rank ${n.rank} and dim was ${t}`);const s={logits:n},r={dim:t};return ya.runKernel(ns,s,r)}});const _f=Aa({spaceToBatchND_:function(e,t,n){const s=$a(e,"x","spaceToBatchND");x(s.rank>=1+t.length,(()=>`input rank ${s.rank} should be > than [blockShape] ${t.length}`)),x(n.length===t.length,(()=>`paddings.shape[0] ${n.length} must be equal to [blockShape] ${t.length}`)),x(s.shape.reduce(((e,s,r)=>r>0&&r<=t.length?e&&(s+n[r-1][0]+n[r-1][1])%t[r-1]==0:e),!0),(()=>`input spatial dimensions ${s.shape.slice(1)} with paddings ${n.toString()} must be divisible by blockShapes ${t.toString()}`));const r={x:s},a={blockShape:t,paddings:n};return ya.runKernel(es,r,a)}});const Of=Aa({stridedSlice_:function(e,t,n,s,r=0,a=0,i=0,o=0,l=0){const u={x:$a(e,"x","stridedSlice","string_or_numeric")},c={begin:t,end:n,strides:s,beginMask:r,endMask:a,ellipsisMask:i,newAxisMask:o,shrinkAxisMask:l};return ya.runKernel(cs,u,c)}});const Mf=Aa({tan_:function(e){const t={x:$a(e,"x","tan","float32")};return ya.runKernel(ms,t)}});const Lf=Aa({tanh_:function(e){const t={x:$a(e,"x","tanh","float32")};return ya.runKernel(gs,t)}});const zf=Aa({topk_:function(e,t=1,n=!0){const s=$a(e,"x","topk");if(0===s.rank)throw new Error("topk() expects the input to be of rank 1 or higher");const r=s.shape[s.shape.length-1];if(t<0)throw new Error(`'k' passed to topk() must be >= 0 but got ${t}`);if(t>r)throw new Error(`'k' passed to topk() must be <= the last dimension (${r}) but got ${t}`);const a={x:s},i={k:t,sorted:n},[o,l]=ya.runKernel(bs,a,i);return{values:o,indices:l}}});const Bf=Aa({truncatedNormal_:function(e,t=0,n=1,s,r){if(null!=s&&"bool"===s)throw new Error("Unsupported data type $ { dtype }");const a=new yf(t,n,s,!0,r),i=Bo(e,s);for(let e=0;e<i.values.length;e++)i.values[e]=a.nextValue();return i.toTensor()}});const Pf=Aa({unique_:function(e,t=0){const n=$a(e,"x","unique","string_or_numeric");x(n.rank>0,(()=>"The input tensor must be at least 1D"));const s={x:n},r={axis:t},[a,i]=ya.runKernel(vs,s,r);return{values:a,indices:i}}});const Wf=async function(e){const t=$a(e,"condition","whereAsync","bool"),n=await t.data(),s=Jc(t.shape,n);return e!==t&&t.dispose(),s};const Uf=Aa({scatterND_:function(e,t,n){const s=$a(e,"indices","scatterND","int32"),r=$a(t,"updates","scatterND");qu(r,s,n);const a={indices:s,updates:r},i={shape:n};return ya.runKernel(Vn,a,i)}});const Vf=Aa({sparseToDense_:function(e,t,n,s=0){const r=$a(e,"sparseIndices","sparseToDense","int32"),a=$a(t,"sparseValues","sparseToDense"),i=$a(s,"defaultValue","sparseToDense",a.dtype);!function(e,t,n,s){if("int32"!==e.dtype)throw new Error(`tf.sparseToDense() expects the indices to be int32 type, but the dtype was ${e.dtype}.`);if(e.rank>2)throw new Error(`sparseIndices should be a scalar, vector, or matrix, but got shape ${e.shape}.`);const r=e.rank>0?e.shape[0]:1,a=e.rank>1?e.shape[1]:1;if(n.length!==a)throw new Error(`outputShape has incorrect number of elements:, ${n.length}, should be: ${a}.`);const i=t.size;if(0!==t.rank&&(1!==t.rank||i!==r))throw new Error(`sparseValues has incorrect shape ${t.shape}, should be [] or [${r}]`);if(t.dtype!==s.dtype)throw new Error("sparseValues.dtype must match defaultValues.dtype")}(r,a,n,i);const o={sparseIndices:r,sparseValues:a,defaultValue:i},l={outputShape:n};return ya.runKernel(os,o,l)}});const Gf=Aa({gatherND_:function(e,t){const n=$a(t,"indices","gatherND","int32"),s={params:$a(e,"x","gatherND","string_or_numeric"),indices:n};return ya.runKernel(Lt,s)}});const Hf=Aa({dropout_:function(e,t,n,s){const r=$a(e,"x","dropout");if(x("float32"===r.dtype,(()=>`x has to be a floating point tensor since it's going to be scaled, but got a ${r.dtype} tensor instead.`)),x(t>=0&&t<1,(()=>`rate must be a float in the range [0, 1), but got ${t}.`)),0===t)return e instanceof jr?r.clone():r;const a=function(e,t){if(null==t)return e.shape.slice();if(N(e.shape,t))return t;if(e.shape.length===t.length){const n=[];for(let s=0;s<e.shape.length;s++)null==t[s]&&null!=e.shape[s]?n.push(e.shape[s]):n.push(t[s]);return n}return t}(r,n),i=1-t,o=np(Ld(vh(wf(a,0,1,"float32",s),i)),i);return Iu(r,o)}}),jf={flipLeftRight:Bh,grayscaleToRGB:Wh,resizeNearestNeighbor:Zh,resizeBilinear:Yh,rotateWithOffset:Uh,cropAndResize:zh,nonMaxSuppression:Gh,nonMaxSuppressionAsync:Hh,nonMaxSuppressionWithScore:jh,nonMaxSuppressionWithScoreAsync:qh,nonMaxSuppressionPadded:Kh,nonMaxSuppressionPaddedAsync:Xh,threshold:lp,transform:up},qf={bandPart:fp,gramSchmidt:Sp,qr:Ap},Kf={sparseFillEmptyRows:Up,sparseReshape:Vp,sparseSegmentMean:Gp,sparseSegmentSum:Hp},Xf={stringNGrams:jp,stringSplit:qp,stringToHashBucketFast:Kp};class Yf extends Ml{minimize(e,t=!1,n){const{value:s,grads:r}=this.computeGradients(e,n);if(null!=n){const e=n.map((e=>({name:e.name,tensor:r[e.name]})));this.applyGradients(e)}else this.applyGradients(r);return nh(r),t?s:(s.dispose(),null)}get iterations(){return null==this.iterations_&&(this.iterations_=0),this.iterations_}incrementIterations(){this.iterations_=this.iterations+1}computeGradients(e,t){return ah(e,t)}dispose(){null!=this.iterations_&&nh(this.iterations_)}async saveIterations(){return null==this.iterations_&&(this.iterations_=0),{name:"iter",tensor:bh(this.iterations_,"int32")}}async getWeights(){throw new Error("getWeights() is not implemented for this optimizer yet.")}async setWeights(e){throw new Error(`setWeights() is not implemented for this optimizer class ${this.getClassName()}`)}async extractIterations(e){return this.iterations_=(await e[0].tensor.data())[0],e.slice(1)}}Object.defineProperty(Yf,Symbol.hasInstance,{value:e=>null!=e.minimize&&null!=e.computeGradients&&null!=e.applyGradients});class Zf extends Yf{constructor(e,t,n=null){super(),this.learningRate=e,this.rho=t,this.epsilon=n,this.accumulatedGrads=[],this.accumulatedUpdates=[],null==n&&(this.epsilon=ya.backend.epsilon())}applyGradients(e){(Array.isArray(e)?e.map((e=>e.name)):Object.keys(e)).forEach(((t,n)=>{const s=ya.registeredVariables[t];null==this.accumulatedGrads[n]&&(this.accumulatedGrads[n]={originalName:`${t}/accum_grad`,variable:th((()=>dh(s).variable(false)))}),null==this.accumulatedUpdates[n]&&(this.accumulatedUpdates[n]={originalName:`${t}/accum_var`,variable:th((()=>dh(s).variable(false)))});const r=Array.isArray(e)?e[n].tensor:e[t];if(null==r)return;const a=this.accumulatedGrads[n].variable,i=this.accumulatedUpdates[n].variable;th((()=>{const e=vh(Iu(a,this.rho),Iu(wp(r),1-this.rho)),t=Iu(np(xp(vh(i,this.epsilon)),xp(vh(a,this.epsilon))),r),n=vh(Iu(i,this.rho),Iu(wp(t),1-this.rho));a.assign(e),i.assign(n);const o=vh(Iu(t,-this.learningRate),s);s.assign(o)}))})),this.incrementIterations()}dispose(){null!=this.accumulatedUpdates&&(nh(this.accumulatedGrads.map((e=>e.variable))),nh(this.accumulatedUpdates.map((e=>e.variable))))}async getWeights(){const e=[...this.accumulatedGrads,...this.accumulatedUpdates];return[await this.saveIterations()].concat(e.map((e=>({name:e.originalName,tensor:e.variable}))))}async setWeights(e){const t=(e=await this.extractIterations(e)).length/2;this.accumulatedGrads=e.slice(0,t).map((e=>({originalName:e.name,variable:e.tensor.variable(false)}))),this.accumulatedUpdates=e.slice(t,2*t).map((e=>({originalName:e.name,variable:e.tensor.variable(false)})))}getConfig(){return{learningRate:this.learningRate,rho:this.rho,epsilon:this.epsilon}}static fromConfig(e,t){return new e(t.learningRate,t.rho,t.epsilon)}}Zf.className="Adadelta",zl(Zf);class Jf extends Yf{constructor(e,t=.1){super(),this.learningRate=e,this.initialAccumulatorValue=t,this.accumulatedGrads=[]}applyGradients(e){(Array.isArray(e)?e.map((e=>e.name)):Object.keys(e)).forEach(((t,n)=>{const s=ya.registeredVariables[t];if(null==this.accumulatedGrads[n]){const e=!1;this.accumulatedGrads[n]={originalName:`${t}/accumulator`,variable:th((()=>Oh(s.shape,this.initialAccumulatorValue).variable(e)))}}const r=Array.isArray(e)?e[n].tensor:e[t];if(null==r)return;const a=this.accumulatedGrads[n].variable;th((()=>{const e=vh(a,wp(r));a.assign(e);const t=vh(Iu(np(r,xp(vh(e,ya.backend.epsilon()))),-this.learningRate),s);s.assign(t)}))})),this.incrementIterations()}dispose(){null!=this.accumulatedGrads&&nh(this.accumulatedGrads.map((e=>e.variable)))}async getWeights(){return[await this.saveIterations()].concat(this.accumulatedGrads.map((e=>({name:e.originalName,tensor:e.variable}))))}async setWeights(e){e=await this.extractIterations(e);this.accumulatedGrads=e.map((e=>({originalName:e.name,variable:e.tensor.variable(false)})))}getConfig(){return{learningRate:this.learningRate,initialAccumulatorValue:this.initialAccumulatorValue}}static fromConfig(e,t){return new e(t.learningRate,t.initialAccumulatorValue)}}Jf.className="Adagrad",zl(Jf);class Qf extends Yf{constructor(e,t,n,s=null){super(),this.learningRate=e,this.beta1=t,this.beta2=n,this.epsilon=s,this.accumulatedFirstMoment=[],this.accumulatedSecondMoment=[],th((()=>{this.accBeta1=bh(t).variable(),this.accBeta2=bh(n).variable()})),null==s&&(this.epsilon=ya.backend.epsilon())}applyGradients(e){const t=Array.isArray(e)?e.map((e=>e.name)):Object.keys(e);th((()=>{const n=sp(1,this.accBeta1),s=sp(1,this.accBeta2);t.forEach(((t,r)=>{const a=ya.registeredVariables[t];null==this.accumulatedFirstMoment[r]&&(this.accumulatedFirstMoment[r]={originalName:`${t}/m`,variable:th((()=>dh(a).variable(false)))}),null==this.accumulatedSecondMoment[r]&&(this.accumulatedSecondMoment[r]={originalName:`${t}/v`,variable:th((()=>dh(a).variable(false)))});const i=Array.isArray(e)?e[r].tensor:e[t];if(null==i)return;const o=this.accumulatedFirstMoment[r].variable,l=this.accumulatedSecondMoment[r].variable,u=vh(Iu(o,this.beta1),Iu(i,1-this.beta1)),c=vh(Iu(l,this.beta2),Iu(wp(i),1-this.beta2)),h=np(u,n),p=np(c,s);o.assign(u),l.assign(c);const d=vh(Iu(np(h,vh(xp(p),this.epsilon)),-this.learningRate),a);a.assign(d)})),this.accBeta1.assign(Iu(this.accBeta1,this.beta1)),this.accBeta2.assign(Iu(this.accBeta2,this.beta2))})),this.incrementIterations()}dispose(){this.accBeta1.dispose(),this.accBeta2.dispose(),null!=this.accumulatedFirstMoment&&nh(this.accumulatedFirstMoment.map((e=>e.variable))),null!=this.accumulatedSecondMoment&&nh(this.accumulatedSecondMoment.map((e=>e.variable)))}async getWeights(){const e=[...this.accumulatedFirstMoment,...this.accumulatedSecondMoment];return[await this.saveIterations()].concat(e.map((e=>({name:e.originalName,tensor:e.variable}))))}async setWeights(e){e=await this.extractIterations(e),th((()=>{this.accBeta1.assign(bp(this.beta1,this.iterations_+1)),this.accBeta2.assign(bp(this.beta2,this.iterations_+1))}));const t=e.length/2;this.accumulatedFirstMoment=e.slice(0,t).map((e=>({originalName:e.name,variable:e.tensor.variable(false)}))),this.accumulatedSecondMoment=e.slice(t,2*t).map((e=>({originalName:e.name,variable:e.tensor.variable(false)})))}getConfig(){return{learningRate:this.learningRate,beta1:this.beta1,beta2:this.beta2,epsilon:this.epsilon}}static fromConfig(e,t){return new e(t.learningRate,t.beta1,t.beta2,t.epsilon)}}Qf.className="Adam",zl(Qf);class em extends Yf{constructor(e,t,n,s=null,r=0){super(),this.learningRate=e,this.beta1=t,this.beta2=n,this.epsilon=s,this.decay=r,this.accumulatedFirstMoment=[],this.accumulatedWeightedInfNorm=[],th((()=>{this.iteration=bh(0).variable(),this.accBeta1=bh(t).variable()})),null==s&&(this.epsilon=ya.backend.epsilon())}applyGradients(e){const t=Array.isArray(e)?e.map((e=>e.name)):Object.keys(e);th((()=>{const n=sp(1,this.accBeta1),s=np(-this.learningRate,vh(Iu(this.iteration,this.decay),1));t.forEach(((t,r)=>{const a=ya.registeredVariables[t];null==this.accumulatedFirstMoment[r]&&(this.accumulatedFirstMoment[r]={originalName:`${t}/m`,variable:dh(a).variable(false)}),null==this.accumulatedWeightedInfNorm[r]&&(this.accumulatedWeightedInfNorm[r]={originalName:`${t}/v`,variable:dh(a).variable(false)});const i=Array.isArray(e)?e[r].tensor:e[t];if(null==i)return;const o=this.accumulatedFirstMoment[r].variable,l=this.accumulatedWeightedInfNorm[r].variable,u=vh(Iu(o,this.beta1),Iu(i,1-this.beta1)),c=Iu(l,this.beta2),h=mp(i),p=Qd(c,h);o.assign(u),l.assign(p);const d=vh(Iu(np(s,n),np(u,vh(p,this.epsilon))),a);a.assign(d)})),this.iteration.assign(vh(this.iteration,1)),this.accBeta1.assign(Iu(this.accBeta1,this.beta1))})),this.incrementIterations()}dispose(){this.accBeta1.dispose(),this.iteration.dispose(),null!=this.accumulatedFirstMoment&&nh(this.accumulatedFirstMoment.map((e=>e.variable))),null!=this.accumulatedWeightedInfNorm&&nh(this.accumulatedWeightedInfNorm.map((e=>e.variable)))}async getWeights(){throw new Error("getWeights() is not implemented for Adamax yet.")}async setWeights(e){throw new Error("setWeights() is not implemented for Adamax yet.")}getConfig(){return{learningRate:this.learningRate,beta1:this.beta1,beta2:this.beta2,epsilon:this.epsilon,decay:this.decay}}static fromConfig(e,t){return new e(t.learningRate,t.beta1,t.beta2,t.epsilon,t.decay)}}em.className="Adamax",zl(em);class tm extends Yf{constructor(e){super(),this.learningRate=e,this.setLearningRate(e)}applyGradients(e){(Array.isArray(e)?e.map((e=>e.name)):Object.keys(e)).forEach(((t,n)=>{const s=Array.isArray(e)?e[n].tensor:e[t];if(null==s)return;const r=ya.registeredVariables[t];th((()=>{const e=vh(Iu(this.c,s),r);r.assign(e)}))})),this.incrementIterations()}setLearningRate(e){this.learningRate=e,null!=this.c&&this.c.dispose(),this.c=sh(bh(-e))}dispose(){this.c.dispose()}async getWeights(){return[await this.saveIterations()]}async setWeights(e){if(0!==(e=await this.extractIterations(e)).length)throw new Error("SGD optimizer does not have settable weights.")}getConfig(){return{learningRate:this.learningRate}}static fromConfig(e,t){return new e(t.learningRate)}}tm.className="SGD",zl(tm);class nm extends tm{constructor(e,t,n=!1){super(e),this.learningRate=e,this.momentum=t,this.useNesterov=n,this.accumulations=[],this.m=bh(this.momentum)}applyGradients(e){(Array.isArray(e)?e.map((e=>e.name)):Object.keys(e)).forEach(((t,n)=>{const s=ya.registeredVariables[t];if(null==this.accumulations[n]){const e=!1;this.accumulations[n]={originalName:`${t}/momentum`,variable:th((()=>dh(s).variable(e)))}}const r=this.accumulations[n].variable,a=Array.isArray(e)?e[n].tensor:e[t];null!=a&&th((()=>{let e;const t=vh(Iu(this.m,r),a);e=this.useNesterov?vh(Iu(this.c,vh(a,Iu(t,this.m))),s):vh(Iu(this.c,t),s),r.assign(t),s.assign(e)}))})),this.incrementIterations()}dispose(){this.m.dispose(),null!=this.accumulations&&nh(this.accumulations.map((e=>e.variable)))}setMomentum(e){this.momentum=e}async getWeights(){return[await this.saveIterations()].concat(this.accumulations.map((e=>({name:e.originalName,tensor:e.variable}))))}async setWeights(e){e=await this.extractIterations(e);this.accumulations=e.map((e=>({originalName:e.name,variable:e.tensor.variable(false)})))}getConfig(){return{learningRate:this.learningRate,momentum:this.momentum,useNesterov:this.useNesterov}}static fromConfig(e,t){return new e(t.learningRate,t.momentum,t.useNesterov)}}nm.className="Momentum",zl(nm);class sm extends Yf{constructor(e,t=.9,n=0,s=null,r=!1){if(super(),this.learningRate=e,this.decay=t,this.momentum=n,this.epsilon=s,this.accumulatedMeanSquares=[],this.accumulatedMoments=[],this.accumulatedMeanGrads=[],this.centered=r,null==s&&(this.epsilon=ya.backend.epsilon()),null==e)throw new Error("learningRate for RMSPropOptimizer must be defined.")}applyGradients(e){(Array.isArray(e)?e.map((e=>e.name)):Object.keys(e)).forEach(((t,n)=>{const s=ya.registeredVariables[t],r=!1;null==this.accumulatedMeanSquares[n]&&(this.accumulatedMeanSquares[n]={originalName:`${t}/rms`,variable:th((()=>dh(s).variable(r)))}),null==this.accumulatedMoments[n]&&(this.accumulatedMoments[n]={originalName:`${t}/momentum`,variable:th((()=>dh(s).variable(r)))}),null==this.accumulatedMeanGrads[n]&&this.centered&&(this.accumulatedMeanGrads[n]={originalName:`${t}/mg`,variable:th((()=>dh(s).variable(r)))});const a=Array.isArray(e)?e[n].tensor:e[t];if(null==a)return;const i=this.accumulatedMeanSquares[n].variable,o=this.accumulatedMoments[n].variable;th((()=>{const e=vh(Iu(i,this.decay),Iu(wp(a),1-this.decay));if(this.centered){const t=this.accumulatedMeanGrads[n].variable,r=vh(Iu(t,this.decay),Iu(a,1-this.decay)),l=np(Iu(a,this.learningRate),xp(sp(e,vh(wp(r),this.epsilon)))),u=vh(Iu(o,this.momentum),l);i.assign(e),t.assign(r),o.assign(u);const c=sp(s,u);s.assign(c)}else{const e=vh(Iu(i,this.decay),Iu(wp(a),1-this.decay)),t=vh(Iu(o,this.momentum),np(Iu(a,this.learningRate),xp(vh(e,this.epsilon))));i.assign(e),o.assign(t);const n=sp(s,t);s.assign(n)}}))})),this.incrementIterations()}dispose(){null!=this.accumulatedMeanSquares&&nh(this.accumulatedMeanSquares.map((e=>e.variable))),null!=this.accumulatedMeanGrads&&this.centered&&nh(this.accumulatedMeanGrads.map((e=>e.variable))),null!=this.accumulatedMoments&&nh(this.accumulatedMoments.map((e=>e.variable)))}async getWeights(){const e=[...this.accumulatedMeanSquares,...this.accumulatedMoments];return this.centered&&e.push(...this.accumulatedMeanGrads),[await this.saveIterations()].concat(e.map((e=>({name:e.originalName,tensor:e.variable}))))}async setWeights(e){e=await this.extractIterations(e);const t=this.centered?e.length/3:e.length/2,n=!1;this.accumulatedMeanSquares=e.slice(0,t).map((e=>({originalName:e.name,variable:e.tensor.variable(n)}))),this.accumulatedMoments=e.slice(t,2*t).map((e=>({originalName:e.name,variable:e.tensor.variable(n)}))),this.centered&&(this.accumulatedMeanGrads=e.slice(2*t,3*t).map((e=>({originalName:e.name,variable:e.tensor.variable(n)}))))}getConfig(){return{learningRate:this.learningRate,decay:this.decay,momentum:this.momentum,epsilon:this.epsilon,centered:this.centered}}static fromConfig(e,t){return new e(t.learningRate,t.decay,t.momentum,t.epsilon,t.centered)}}sm.className="RMSProp",zl(sm);class rm{static sgd(e){return new tm(e)}static momentum(e,t,n=!1){return new nm(e,t,n)}static rmsprop(e,t=.9,n=0,s=null,r=!1){return new sm(e,t,n,s,r)}static adam(e=.001,t=.9,n=.999,s=null){return new Qf(e,t,n,s)}static adadelta(e=.001,t=.95,n=null){return new Zf(e,t,n)}static adamax(e=.002,t=.9,n=.999,s=null,r=0){return new em(e,t,n,s,r)}static adagrad(e,t=.1){return new Jf(e,t)}}const am={sgd:rm.sgd,momentum:rm.momentum,adadelta:rm.adadelta,adagrad:rm.adagrad,rmsprop:rm.rmsprop,adamax:rm.adamax,adam:rm.adam},im="undefined"!=typeof requestAnimationFrame?requestAnimationFrame:"undefined"!=typeof setImmediate?setImmediate:e=>e();
/**
 * @license
 * Copyright 2017 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */function om(){return new Promise((e=>im((()=>e()))))}const lm={kernelName:$e,inputsToSave:["x"],gradFunc:(e,t)=>{const[n]=t;return{x:()=>Iu(e,Eu(Po(n,"float32"),-1))}}},um={kernelName:Ee,inputsToSave:["x"],gradFunc:(e,t)=>{const[n]=t;return{x:()=>{const t=wp(Po(n,"float32")),s=xp(sp(bh(1),t));return Cp(np(e,s))}}}},cm={kernelName:Ae,inputsToSave:["x"],gradFunc:(e,t)=>{const[n]=t;return{x:()=>{const t=xp(sp(wp(Po(n,"float32")),1));return np(e,t)}}}},hm={kernelName:Re,inputsToSave:["a","b"],gradFunc:(e,t)=>{const[n,s]=t,r=ul(n.shape,s.shape);return{a:()=>{let t=e;const s=ll(n.shape,r);return s.length>0&&(t=Au(t,s)),Cu(t,n.shape)},b:()=>{let t=e;const n=ll(s.shape,r);return n.length>0&&(t=Au(t,n)),Cu(t,s.shape)}}}},pm={kernelName:Fe,saveAllInputs:!0,gradFunc:(e,t)=>{const n={};return t.forEach(((t,s)=>{n[s]=()=>e.clone()})),n}},dm={kernelName:Oe,inputsToSave:["x"],gradFunc:(e,t)=>{const[n]=t;return{x:()=>dh(n)}}},fm={kernelName:Me,inputsToSave:["x"],gradFunc:(e,t)=>{const[n]=t;return{x:()=>dh(n)}}},mm={kernelName:Le,inputsToSave:["x"],gradFunc:(e,t)=>{const[n]=t;return{x:()=>np(e,xp(sp(bh(1),wp(Po(n,"float32")))))}}},gm={kernelName:ze,inputsToSave:["x"],gradFunc:(e,t)=>{const[n]=t;return{x:()=>{const t=xp(vh(bh(1),wp(Po(n,"float32"))));return np(e,t)}}}},ym={kernelName:We,inputsToSave:["a","b"],gradFunc:(e,t)=>{const[n,s]=t,r=ul(n.shape,s.shape);return{a:()=>{const t=vh(wp(n),wp(s));let a=Iu(e,np(s,t));const i=ll(n.shape,r);return i.length>0&&(a=Au(a,i)),Cu(a,n.shape)},b:()=>{const t=vh(wp(n),wp(s));let a=Cp(Iu(e,np(n,t)));const i=ll(s.shape,r);return i.length>0&&(a=Au(a,i)),Cu(a,s.shape)}}}},bm={kernelName:Be,inputsToSave:["x"],gradFunc:(e,t)=>{const[n]=t;return{x:()=>np(e,vh(wp(Po(n,"float32")),1))}}},xm={kernelName:Pe,inputsToSave:["x"],gradFunc:(e,t)=>{const[n]=t;return{x:()=>np(e,sp(bh(1),wp(Po(n,"float32"))))}}};const wm=Aa({avgPool3dGrad_:function(e,t,n,s,r,a){const i=$a(e,"dy","avgPool3dGrad"),o=$a(t,"input","avgPool3dGrad");let l=i,u=o,c=!1;4===o.rank&&(c=!0,l=Cu(i,[1,i.shape[0],i.shape[1],i.shape[2],i.shape[3]]),u=Cu(o,[1,o.shape[0],o.shape[1],o.shape[2],o.shape[3]])),x(5===l.rank,(()=>`Error in avgPool3dGrad: dy must be rank 5 but got rank ${l.rank}.`)),x(5===u.rank,(()=>`Error in avgPool3dGrad: input must be rank 5 but got rank ${u.rank}.`)),xu("avgPool3dGrad",r,a);const h={dy:l,input:u},p={filterSize:n,strides:s,pad:r,dimRoundingMode:a},d=ya.runKernel(He,h,p);return c?Cu(d,[d.shape[1],d.shape[2],d.shape[3],d.shape[4]]):d}}),vm={kernelName:Ge,inputsToSave:["x"],gradFunc:(e,t,n)=>{const[s]=t,{filterSize:r,strides:a,pad:i,dimRoundingMode:o}=n;return{x:()=>wm(e,s,r,a,i,o)}}};const km=Aa({avgPoolGrad_:function(e,t,n,s,r){const a=$a(e,"dy","avgPoolGrad"),i=$a(t,"input","avgPoolGrad");x(i.rank===a.rank,(()=>`Rank of input (${i.rank}) does not match rank of dy (${a.rank})`));let o=i,l=a,u=!1;3===i.rank&&(u=!0,o=Cu(i,[1,i.shape[0],i.shape[1],i.shape[2]]),l=Cu(a,[1,a.shape[0],a.shape[1],a.shape[2]])),x(4===l.rank,(()=>`Error in avgPoolGrad: dy must be rank 4 but got rank ${l.rank}.`)),x(4===o.rank,(()=>`Error in avgPoolGrad: input must be rank 4 but got rank ${o.rank}.`));const c={dy:l,input:o},h={filterSize:n,strides:s,pad:r},p=ya.runKernel(Ve,c,h);return u?Cu(p,[p.shape[1],p.shape[2],p.shape[3]]):p}}),Im={kernelName:Ue,inputsToSave:["x"],gradFunc:(e,t,n)=>{const[s]=t,{filterSize:r,strides:a,pad:i}=n;return{x:()=>km(e,s,r,a,i)}}},Sm={kernelName:je,inputsToSave:["a","b"],gradFunc:(e,t,n)=>{const[s,r]=t,{transposeA:a,transposeB:i}=n;return a||i?!a&&i?{a:()=>Ah(e,r,!1,!1),b:()=>Ah(e,s,!0,!1)}:a&&!i?{a:()=>Ah(r,e,!1,!0),b:()=>Ah(s,e,!1,!1)}:{a:()=>Ah(r,e,!0,!0),b:()=>Ah(e,s,!0,!0)}:{a:()=>Ah(e,r,!1,!0),b:()=>Ah(s,e,!0,!1)}}},Nm={kernelName:qe,gradFunc:(e,t,n)=>{const{blockShape:s,crops:r}=n;return{x:()=>_f(e,s,r)}}},Tm={kernelName:"BroadcastTo",gradFunc:(e,t,n)=>{const s=n,r=s.inputShape,a=s.shape,i=Array.from(a);for(let e=r.length-1;e>=0;e--)if(r[e]===a[e])i[e]=1;else if(1!==r[e])throw new Error(`broadcastTo(): [${r}] cannot be broadcast to [${a}].`);const o=[];for(let e=0;e<i.length;e++)i[e]>1&&o.push(e);return{x:()=>Au(e,o,!0)}}},Cm={kernelName:Ye,gradFunc:e=>({x:()=>e.clone()})},$m={kernelName:Ze,gradFunc:e=>({x:()=>dh(e)})},Em={kernelName:Je,inputsToSave:["x"],gradFunc:(e,t,n)=>{const[s]=t,{clipValueMin:r,clipValueMax:a}=n;return{x:()=>ip(hp(cp(s,r),Qh(s,a)),e,dh(e))}}},Am={kernelName:et,inputsToSave:["x"],gradFunc:lm.gradFunc},Rm={kernelName:tt,saveAllInputs:!0,gradFunc:(e,t,n)=>{const s=t.map((e=>e.shape)),{axis:r}=n,a=D(r,t[0].shape)[0],i=s.map((e=>e[a]));return hh(e,i,a).map((e=>()=>e))}},Fm={kernelName:nt,inputsToSave:["x","filter"],gradFunc:(e,t,n)=>{const[s,r]=t,{dilations:a,strides:i,pad:o,dataFormat:l}=n;return x(gu(a),(()=>`Error in gradient of conv2D: dilation rates greater than 1 are not yet supported in gradients. Got dilations '${a}'`)),{x:()=>Sh(s.shape,e,r,i,o,l),filter:()=>Ih(s,e,r.shape,i,o,l)}}},Dm={kernelName:rt,inputsToSave:["dy","filter"],gradFunc:(e,t,n)=>{const[s,r]=t,{strides:a,pad:i,dataFormat:o,dimRoundingMode:l}=n;return{dy:()=>kh(e,r,a,i,o,1,l),filter:()=>Ih(e,s,r.shape,a,i,o,l)}}};const _m=Aa({conv3DBackpropFilter_:function(e,t,n,s,r){let a=e;4===e.rank&&(a=Cu(e,[1,e.shape[0],e.shape[1],e.shape[2],e.shape[3]]));let i=t;4===i.rank&&(i=Cu(t,[1,t.shape[0],t.shape[1],t.shape[2],t.shape[3]])),x(5===a.rank,(()=>`Error in conv3dDerFilter: input must be rank 5, but got shape ${a.shape}.`)),x(5===i.rank,(()=>`Error in conv3dDerFilter: dy must be rank 5, but got shape ${i.shape}.`)),x(5===n.length,(()=>`Error in conv3dDerFilter: filterShape must be length 5, but got ${n}.`)),x(a.shape[4]===n[3],(()=>`Error in conv3dDerFilter: depth of input ${a.shape[4]}) must match input depth in filter (${n[3]}.`)),x(i.shape[4]===n[4],(()=>`Error in conv3dDerFilter: depth of dy (${i.shape[4]}) must match output depth for filter (${n[4]}).`));const o={x:a,dy:i},l={strides:s,pad:r,filterShape:n};return ya.runKernel(it,o,l)}}),Om={kernelName:at,inputsToSave:["x","filter"],gradFunc:(e,t,n)=>{const{dilations:s,strides:r,pad:a}=n;x(gu(s),(()=>`Error in gradient of conv3D: dilation rates greater than 1 are not yet supported in gradients. Got dilations '${s}'`));const[i,o]=t;return{x:()=>Sd(i.shape,e,o,r,a),filter:()=>_m(i,e,o.shape,r,a)}}},Mm={kernelName:lt,inputsToSave:["x"],gradFunc:(e,t)=>{const[n]=t;return{x:()=>Iu(Cp(Cf(Po(n,"float32"))),e)}}},Lm={kernelName:ut,inputsToSave:["x"],gradFunc:(e,t)=>{const[n]=t;return{x:()=>Iu($f(Po(n,"float32")),e)}}},zm={kernelName:ct,inputsToSave:["x"],gradFunc:(e,t,n)=>{const[s]=t,{axis:r,exclusive:a,reverse:i}=n;return{x:()=>{const t=Ql([r],s.rank);let n=$d(e,r,a,!i);return null!=t&&(n=$p(n,t)),n}}}},Bm={kernelName:ft,inputsToSave:["x","filter"],gradFunc:(e,t,n)=>{const{dilations:s,strides:r,pad:a,dimRoundingMode:i}=n,o=null==s?[1,1]:s;x(gu(o),(()=>`Error in gradient of depthwiseConv2dNative: dilation rates greater than 1 are not yet supported. Got dilations '${o}'`));const[l,u]=t;return x(4===l.rank,(()=>`Error in gradient of depthwiseConv2dNative: input must be rank 4, but got rank ${l.rank}.`)),x(4===u.rank,(()=>`Error in gradient of depthwiseConv2dNative: filter must be rank 4, but got rank ${u.rank}.`)),x(l.shape[3]===u.shape[2],(()=>`Error in gradient of depthwiseConv2d: number of input channels (${l.shape[3]}) must match the inChannels dimension in filter ${u.shape[2]}.`)),x(yu(r,o),(()=>`Error in gradient of depthwiseConv2d: Either strides or dilations must be  1. Got strides ${r} and dilations '${o}'.`)),xu("depthwiseConv2d",a,i),{x:()=>$h(l.shape,e,u,r,a,o,i),filter:()=>Ch(l,e,u.shape,r,a,o,i)}}},Pm={kernelName:bt,inputsToSave:["x","filter"],gradFunc:(e,t,n)=>{const[s,r]=t,a={x:s,filter:r,dy:e},i={x:s,filter:r,dy:e};return{x:()=>ya.runKernel(xt,a,n),filter:()=>ya.runKernel(wt,i,n)}}},Wm={kernelName:It,outputsToSave:[!0],gradFunc:(e,t)=>{const[n]=t,s={dy:e,y:n};return{x:()=>ya.runKernel(St,s)}}},Um={kernelName:Nt,inputsToSave:["x"],gradFunc:(e,t)=>{const[n]=t,s=Iu(Bp(Cp(wp(n))),2/Math.sqrt(Math.PI));return{x:()=>Iu(e,s)}}},Vm={kernelName:Ct,outputsToSave:[!0],gradFunc:(e,t)=>{const[n]=t;return{x:()=>Iu(e,n)}}},Gm={kernelName:$t,inputsToSave:["input"],gradFunc:(e,t)=>{const[n]=t;return{input:()=>Cu(e,n.shape)}}},Hm={kernelName:Et,inputsToSave:["x"],gradFunc:(e,t)=>{const[n]=t;return{x:()=>Iu(e,Bp(n))}}},jm={kernelName:Dt,gradFunc:e=>({x:()=>dh(e)})},qm={kernelName:_t,inputsToSave:["a","b"],gradFunc:(e,t)=>{const[n,s]=t,r=ul(n.shape,s.shape);return{a:()=>{const t=np(e,Po(s,"float32")),a=ll(n.shape,r);return a.length>0?Cu(Au(t,a),n.shape):t},b:()=>{let t=Iu(e,Po(n,"float32"));const a=ll(s.shape,r);a.length>0&&(t=Cu(Au(t,a),s.shape));const i=wp(s);return Cp(np(t,Po(i,"float32")))}}}},Km={kernelName:Ot,inputsToSave:["x","mean","variance","scale"],gradFunc:(e,t,n)=>{const{varianceEpsilon:s}=n,[r,a,i,o]=t,l=null==o?bh(1):o,u=ll(a.shape,r.shape),c=[];if(1===a.rank){for(let e=0;e<r.shape.length-1;++e)c.push(r.shape[e]);c.push(1)}const h=sp(r,a),p=Iu(e,l),d=kf(vh(i,bh(s))),f=Iu(Iu(Iu(d,d),d),bh(-.5));return{x:()=>1===a.rank?Cu(Iu(Iu(e,Ph(Cu(d,[1,1,1,a.shape[0]]),c)),l),r.shape):Cu(Iu(Iu(e,d),l),r.shape),mean:()=>{let e=Iu(Iu(d,bh(-1)),p);return 1===a.rank&&(e=Au(e,u)),Cu(e,a.shape)},variance:()=>{let e=Iu(Iu(f,h),p);return 1===a.rank&&(e=Au(e,u)),Cu(e,a.shape)},scale:()=>{const t=Iu(h,d);let n=Iu(e,t);return 1===a.rank&&(n=Au(n,u)),Cu(n,a.shape)},offset:()=>{let t=e;return 1===a.rank&&(t=Au(t,u)),Cu(t,a.shape)}}}};const Xm=Aa({unsortedSegmentSum_:function(e,t,n){const s=$a(e,"x","unsortedSegmentSum"),r=$a(t,"segmentIds","unsortedSegmentSum","int32");x(T(n),(()=>"numSegments must be of dtype int"));const a={x:s,segmentIds:r},i={numSegments:n};return ya.runKernel(Is,a,i)}}),Ym={kernelName:Mt,inputsToSave:["x","indices"],gradFunc:(e,t,n)=>{const[s,r]=t,{axis:a}=n,i=D(a,s.shape)[0];return{x:()=>{const t=s.shape,n=r.size,o=t.slice(0,i),l=o.length,u=t.slice(a,t.length).slice(1),c=u.length,h=Zm(0,l),p=Zm(l+1,l+1+c),d=Jm([o,[n],u]),f=Cu(e,d),m=Cu(r,[n]),g=Jm([[l],h,p]),y=$p(f,g);let b=Xm(y,m,s.shape[i]);const x=eu(g);return b=$p(b,x),b},indices:()=>r}}};function Zm(e,t){const n=[];for(let s=e;s<t;++s)n.push(s);return n}function Jm(e){const t=[];for(let n=0;n<e.length;++n)for(let s=0;s<e[n].length;++s)t.push(e[n][s]);return t}const Qm={kernelName:Bt,inputsToSave:["a","b"],gradFunc:(e,t)=>{const[n,s]=t;return{a:()=>dh(n),b:()=>dh(s)}}},eg={kernelName:Pt,gradFunc:e=>({x:()=>Po(e,"float32")})},tg={kernelName:Vt,gradFunc:e=>({x:()=>dh(e)})},ng={kernelName:Gt,gradFunc:e=>({x:()=>dh(e)})},sg={kernelName:Ht,gradFunc:e=>({x:()=>dh(e)})},rg={kernelName:jt,inputsToSave:["x"],gradFunc:(e,t,n)=>{const[s]=t,{alpha:r}=n,a=ep(s,0);return{x:()=>ip(a,e,Iu(e,r))}}},ag={kernelName:Zt,inputsToSave:["x"],gradFunc:(e,t)=>{const[n]=t;return{x:()=>np(e,vh(n,1))}}},ig={kernelName:Yt,inputsToSave:["x"],gradFunc:(e,t)=>{const[n]=t;return{x:()=>np(e,Po(n,"float32"))}}},og={kernelName:"LogSoftmax",inputsToSave:[],outputsToSave:[!0],gradFunc:(e,t,n)=>{const[s]=t,{axis:r}=n;return{logits:()=>{const t=Bp(s);return sp(e,Iu(Au(e,r,!0),t))}}}};const lg=Aa({localResponseNormalizationBackprop_:function(e,t,n,s=5,r=1,a=1,i=.5){const o={x:e,y:t,dy:n},l={depthRadius:s,bias:r,alpha:a,beta:i};return ya.runKernel(nn,o,l)}}),ug={kernelName:tn,inputsToSave:["x"],outputsToSave:[!0],gradFunc:(e,t,n)=>{const[s,r]=t,{depthRadius:a,bias:i,alpha:o,beta:l}=n;return{x:()=>lg(s,r,e,a,i,o,l)}}};function cg(e,t,n,s){return t.rank<n.rank&&(t=Cu(t,Zl(t.shape,s))),e.rank<n.rank&&(e=Cu(e,Zl(e.shape,s))),{x:()=>Iu(e,Po(Fd(n,t),e.dtype))}}const hg={kernelName:sn,inputsToSave:["x"],outputsToSave:[!0],gradFunc:(e,t,n)=>{const s=n,{reductionIndices:r}=s,a=t[0],i=cg(e,t[1],a,D(r,a.shape));return{x:()=>i.x()}}},pg={kernelName:rn,inputsToSave:["a","b"],gradFunc:(e,t)=>{const[n,s]=t;return{a:()=>Iu(e,Po(cp(n,s),"float32")),b:()=>Iu(e,Po(Ud(n,s),"float32"))}}};const dg=Aa({maxPool3dGrad_:function(e,t,n,s,r,a,i){const o=$a(e,"dy","maxPool3dGrad"),l=$a(t,"input","maxPool3dGrad"),u=$a(n,"output","maxPool3dGrad");let c=o,h=l,p=u,d=!1;4===l.rank&&(d=!0,c=Cu(o,[1,o.shape[0],o.shape[1],o.shape[2],o.shape[3]]),h=Cu(l,[1,l.shape[0],l.shape[1],l.shape[2],l.shape[3]]),p=Cu(u,[1,u.shape[0],u.shape[1],u.shape[2],u.shape[3]])),x(5===c.rank,(()=>`Error in maxPool3dGrad: dy must be rank 5 but got rank ${c.rank}.`)),x(5===h.rank,(()=>`Error in maxPool3dGrad: input must be rank 5 but got rank ${h.rank}.`)),x(5===p.rank,(()=>`Error in maxPool3dGrad: output must be rank 5 but got rank ${p.rank}.`)),xu("maxPool3dGrad",a,i);const f={dy:c,input:h,output:p},m={filterSize:s,strides:r,pad:a,dimRoundingMode:i},g=ya.runKernel(un,f,m);return d?Cu(g,[g.shape[1],g.shape[2],g.shape[3],g.shape[4]]):g}}),fg={kernelName:ln,inputsToSave:["x"],outputsToSave:[!0],gradFunc:(e,t,n)=>{const[s,r]=t,{filterSize:a,strides:i,pad:o,dimRoundingMode:l}=n;return{x:()=>dg(e,s,r,a,i,o,l)}}};const mg=Aa({maxPoolGrad_:function(e,t,n,s,r,a,i){const o=$a(e,"dy","maxPoolGrad"),l=$a(t,"input","maxPoolGrad"),u=$a(n,"output","maxPoolGrad");x(l.rank===o.rank,(()=>`Rank of input (${l.rank}) does not match rank of dy (${o.rank})`)),x(4===o.rank,(()=>`Error in maxPoolGrad: dy must be rank 4 but got rank ${o.rank}.`)),x(4===l.rank,(()=>`Error in maxPoolGrad: input must be rank 4 but got rank ${l.rank}.`)),xu("maxPoolGrad",a,i);const c={dy:o,input:l,output:u},h={filterSize:s,strides:r,pad:a,dimRoundingMode:i};return ya.runKernel(on,c,h)}}),gg={kernelName:Tn,inputsToSave:["x"],gradFunc:(e,t,n)=>{const s=t[0],{paddings:r}=n,a=r.map((e=>e[0]));return{x:()=>ch(e,a,s.shape)}}},yg={kernelName:es,gradFunc:(e,t,n)=>{const{blockShape:s,paddings:r}=n;return{x:()=>ud(e,s,r)}}},bg={kernelName:ts,gradFunc:(e,t,n)=>{const{axis:s}=n;return{x:()=>oh(e,s)}}};const xg=[lm,um,cm,hm,pm,dm,fm,mm,gm,ym,bm,xm,vm,Im,Sm,Nm,Tm,Cm,$m,Em,Am,Rm,Dm,Fm,Om,Mm,Lm,zm,Bm,Pm,{kernelName:vt,inputsToSave:["a","b"],gradFunc:(e,t)=>{const[n,s]=t,r=ul(n.shape,s.shape);return{a:()=>{const t=np(e,Po(s,"float32")),a=ll(n.shape,r);return a.length>0?Cu(Au(t,a),n.shape):t},b:()=>{let t=Iu(e,Po(n,"float32"));const a=ll(s.shape,r);a.length>0&&(t=Cu(Au(t,a),s.shape));const i=wp(s);return Cp(np(t,Po(i,"float32")))}}}},Wm,Um,Vm,Gm,Hm,qm,jm,Km,Ym,Qm,eg,tg,ng,sg,rg,ag,ig,og,ug,hg,hg,pg,fg,{kernelName:an,inputsToSave:["x"],outputsToSave:[!0],gradFunc:(e,t,n)=>{const[s,r]=t,{filterSize:a,strides:i,pad:o}=n;return{x:()=>mg(e,s,r,a,i,o)}}},{kernelName:hn,inputsToSave:["x"],gradFunc:(e,t,n)=>{const[s]=t,{axis:r}=n,a=D(r,s.shape),i=I(Yl(s.shape,a)[1]);return{x:()=>{const t=s.shape.slice();a.forEach((e=>{t[e]=1}));const n=Cu(e,t);return np(Iu(n,_p(s.shape,"float32")),i)}}}},{kernelName:pn,inputsToSave:["x"],outputsToSave:[!0],gradFunc:(e,t,n)=>{const s=n,{axis:r}=s,[a,i]=t,o=cg(e,i,a,D(r,a.shape));return{x:()=>o.x()}}},{kernelName:dn,inputsToSave:["a","b"],gradFunc:(e,t)=>{const[n,s]=t;return{a:()=>Iu(e,Po(Qh(n,s),"float32")),b:()=>Iu(e,Po(ep(n,s),"float32"))}}},{kernelName:fn,inputsToSave:["x"],gradFunc:(e,t,n)=>{const s=t[0],{paddings:r}=n,a=r.map((e=>e[0]));return{x:()=>ch(e,a,s.shape)}}},{kernelName:mn,inputsToSave:["a","b"],gradFunc:(e,t)=>{const[n,s]=t,r=ul(n.shape,s.shape);return{a:()=>{const t=ll(n.shape,r);return t.length>0?Cu(Au(e,t),n.shape):e},b:()=>{const t=Iu(e,Cp(Ld(np(n,s)))),a=ll(s.shape,r);return a.length>0?Cu(Au(t,a),s.shape):t}}}},{kernelName:yn,inputsToSave:["a","b"],gradFunc:(e,t)=>{const[n,s]=t,r=ul(n.shape,s.shape);return{a:()=>{const t=Iu(e,Po(s,"float32")),a=ll(n.shape,r);return a.length>0?Cu(Au(t,a),n.shape):t},b:()=>{const t=Iu(e,Po(n,"float32")),a=ll(s.shape,r);return a.length>0?Cu(Au(t,a),s.shape):t}}}},{kernelName:bn,gradFunc:e=>({x:()=>Cp(e)})},{kernelName:Sn,inputsToSave:["indices"],gradFunc:(e,t)=>{const n=t[0];return{indices:()=>ph(n.shape,"float32")}}},{kernelName:In,gradFunc:e=>({x:()=>dh(e)})},{kernelName:Nn,saveAllInputs:!0,gradFunc:(e,t,n)=>{const{axis:s}=n;return dp(e,s).map((e=>()=>e))}},gg,gg,{kernelName:Cn,inputsToSave:["a","b"],outputsToSave:[!0],gradFunc:(e,t)=>{const[n,s,r]=t,a=n,i=s,o=ul(a.shape,i.shape);return{a:()=>{const t=Po(i,"float32");let n=Iu(e,Iu(t,bp(a,sp(t,bh(1)))));const s=ll(a.shape,o);return s.length>0&&(n=Au(n,s)),Cu(n,a.shape)},b:()=>{const t=ep(a,0),n=ip(t,Lp(a),dh(a));let s=Iu(e,Iu(r,n));const l=ll(i.shape,o);return l.length>0&&(s=Au(s,l)),Cu(s,i.shape)}}}},{kernelName:$n,inputsToSave:["x","alpha"],gradFunc:(e,t)=>{const[n,s]=t,r=ep(n,0);return{x:()=>ip(r,e,Iu(e,s)),alpha:()=>{let t=ip(r,dh(e),Iu(e,n));const a=ll(s.shape,e.shape);return a.length>0&&(t=Au(t,a)),Cu(t,s.shape)}}}},{kernelName:Fn,inputsToSave:["x"],gradFunc:(e,t)=>{const[n]=t;return{x:()=>np(e,Cp(wp(n)))}}},{kernelName:Bn,inputsToSave:["x"],gradFunc:(e,t)=>{const[n]=t,s=Iu(Qh(n,6),Eu(n));return{x:()=>Iu(e,Po(s,"float32"))}}},{kernelName:Dn,inputsToSave:["x"],gradFunc:(e,t)=>{const[n]=t;return{x:()=>Iu(e,Po(Eu(n),"float32"))}}},{kernelName:_n,inputsToSave:["x"],gradFunc:(e,t)=>{const[n]=t;return{x:()=>Cu(e,n.shape)}}},{kernelName:Ln,inputsToSave:["images"],gradFunc:(e,t,n)=>{const[s]=t,r={dy:e,images:s};return{images:()=>ya.runKernel(zn,r,n)}}},{kernelName:On,inputsToSave:["images"],gradFunc:(e,t,n)=>{const[s]=t,r={dy:e,images:s};return{images:()=>ya.runKernel(Mn,r,n)}}},{kernelName:Pn,gradFunc:(e,t,n)=>{const{dims:s}=n,r=D(s,e.shape);return{x:()=>yh(e,r)}}},{kernelName:Wn,gradFunc:e=>({x:()=>dh(e)})},{kernelName:Un,inputsToSave:["x"],gradFunc:(e,t)=>{const[n]=t;return{x:()=>Cp(np(e,Iu(bp(n,1.5),2)))}}},{kernelName:Gn,inputsToSave:["condition"],gradFunc:(e,t)=>{const[n]=t;return{condition:()=>Po(dh(n),"float32"),t:()=>Iu(e,Po(n,e.dtype)),e:()=>Iu(e,Po(Kd(n),e.dtype))}}},{kernelName:Hn,inputsToSave:["x"],gradFunc:(e,t)=>{const[n]=t;return{x:()=>{const t=ep(n,bh(0)),s=bh(Yu),r=bh(Zu),a=Iu(e,r),i=Iu(Iu(e,s),Bp(Po(n,"float32")));return ip(t,a,i)}}}},{kernelName:Yn,outputsToSave:[!0],gradFunc:(e,t)=>{const[n]=t;return{x:()=>Iu(e,Iu(n,sp(bh(1),n)))}}},{kernelName:Xn,gradFunc:e=>({x:()=>dh(e)})},{kernelName:qn,inputsToSave:["x"],gradFunc:(e,t)=>{const[n]=t;return{x:()=>Iu(Td(Po(n,"float32")),e)}}},{kernelName:Kn,inputsToSave:["x"],gradFunc:(e,t)=>{const[n]=t;return{x:()=>Iu(Cd(Po(n,"float32")),e)}}},{kernelName:jn,inputsToSave:["x"],gradFunc:(e,t,n)=>{const[s]=t,{begin:r,size:a}=n,i=s.shape,[o,l]=Fl(s,r,a),u=[];for(let t=0;t<e.rank;t++)u.push([o[t],i[t]-o[t]-l[t]]);return{x:()=>of(e,u)}}},{kernelName:ns,outputsToSave:[!0],gradFunc:(e,t,n)=>{const[s]=t,{dim:r}=n,a=Iu(e,s);return{logits:()=>sp(a,Iu(Au(a,[r],true),s))}}},{kernelName:Zn,inputsToSave:["x"],gradFunc:(e,t)=>{const[n]=t;return{x:()=>Iu(e,$u(n))}}},yg,yg,bg,bg,{kernelName:Jn,inputsToSave:["x"],gradFunc:(e,t)=>{const[n]=t;return{x:()=>np(e,Iu(xp(Po(n,"float32")),2))}}},{kernelName:ls,inputsToSave:["a","b"],gradFunc:(e,t)=>{const[n,s]=t,r=bh(2);return{a:()=>Iu(e,Iu(r,sp(n,s))),b:()=>Iu(e,Iu(r,sp(s,n)))}}},{kernelName:us,inputsToSave:["x"],gradFunc:(e,t)=>{const[n]=t;return{x:()=>Iu(e,Iu(Po(n,"float32"),2))}}},{kernelName:Ns,gradFunc:e=>({x:()=>dh(e)})},{kernelName:fs,inputsToSave:["a","b"],gradFunc:(e,t)=>{const[n,s]=t,r=ul(n.shape,s.shape);return{a:()=>{let t=e;const s=ll(n.shape,r);return s.length>0&&(t=Au(t,s)),Cu(t,n.shape)},b:()=>{let t=e;const n=ll(s.shape,r);return n.length>0&&(t=Au(t,n)),Cu(Cp(t),s.shape)}}}},{kernelName:Qn,inputsToSave:["x"],gradFunc:(e,t,n)=>{const[s]=t,r=s.shape.slice(),{axis:a}=n;D(a,s.shape).forEach((e=>{r[e]=1}));const i=Cu(e,r),o=Iu(i,_p(s.shape,"float32"));return{x:()=>o}}},{kernelName:ms,inputsToSave:["x"],gradFunc:(e,t)=>{const[n]=t;return{x:()=>np(e,wp(Td(n)))}}},{kernelName:gs,outputsToSave:[!0],gradFunc:(e,t)=>{const[n]=t;return{x:()=>Iu(sp(bh(1),wp(n)),e)}}},{kernelName:ys,inputsToSave:["x"],gradFunc:(e,t,n)=>{const[s]=t,{reps:r}=n;return{x:()=>{let t=dh(s);if(1===s.rank)for(let n=0;n<r[0];++n)t=vh(t,ch(e,[n*s.shape[0]],[s.shape[0]]));else if(2===s.rank)for(let n=0;n<r[0];++n)for(let a=0;a<r[1];++a)t=vh(t,ch(e,[n*s.shape[0],a*s.shape[1]],[s.shape[0],s.shape[1]]));else if(3===s.rank)for(let n=0;n<r[0];++n)for(let a=0;a<r[1];++a)for(let i=0;i<r[2];++i)t=vh(t,ch(e,[n*s.shape[0],a*s.shape[1],i*s.shape[2]],[s.shape[0],s.shape[1],s.shape[2]]));else{if(4!==s.rank)throw new Error(`Gradient for tile operation is not implemented for rank-${s.rank} tensors yet.`);for(let n=0;n<r[0];++n)for(let a=0;a<r[1];++a)for(let i=0;i<r[2];++i)for(let o=0;o<r[3];++o)t=vh(t,ch(e,[n*s.shape[0],a*s.shape[1],i*s.shape[2],o*s.shape[3]],[s.shape[0],s.shape[1],s.shape[2],s.shape[3]]))}return t}}}},{kernelName:ws,gradFunc:(e,t,n)=>{const s=n,{perm:r}=s,a=eu(r);return{x:()=>$p(e,a)}}},{kernelName:ks,gradFunc:(e,t,n)=>{const s=n,{axis:r}=s;return{value:()=>pp(e,r)}}},{kernelName:Is,inputsToSave:["segmentIds"],gradFunc:(e,t)=>{const[n]=t;return{x:()=>function(e,t){const n=Qd(t,dh(t)),s=zd(e,n);let r=cp(t,bh(0,"int32"));const a=s.rank-r.rank;for(let e=0;e<a;++e)r=Np(r,e+1);r=hp(r,_p(s.shape,"bool"));const i=dh(s);return ip(r,s,i)}(e,n)}}},{kernelName:Ss,gradFunc:e=>({x:()=>dh(e)})}];for(const e of xg)Ps(e);qr().prototype.abs=function(){return this.throwIfDisposed(),mp(this)},qr().prototype.acos=function(){return this.throwIfDisposed(),Xp(this)},qr().prototype.acosh=function(){return this.throwIfDisposed(),Yp(this)},qr().prototype.add=function(e){return this.throwIfDisposed(),vh(this,e)},qr().prototype.all=function(e,t){return this.throwIfDisposed(),Jp(this,e,t)},qr().prototype.any=function(e,t){return this.throwIfDisposed(),Qp(this,e,t)},qr().prototype.argMax=function(e){return this.throwIfDisposed(),ed(this,e)},qr().prototype.argMin=function(e){return this.throwIfDisposed(),td(this,e)},qr().prototype.asScalar=function(){return this.throwIfDisposed(),x(1===this.size,(()=>"The array must have only 1 element.")),Cu(this,[])},qr().prototype.asType=function(e){return this.throwIfDisposed(),Po(this,e)},qr().prototype.as1D=function(){return this.throwIfDisposed(),Cu(this,[this.size])},qr().prototype.as2D=function(e,t){return this.throwIfDisposed(),Cu(this,[e,t])},qr().prototype.as3D=function(e,t,n){return this.throwIfDisposed(),Cu(this,[e,t,n])},qr().prototype.as4D=function(e,t,n,s){return this.throwIfDisposed(),Cu(this,[e,t,n,s])},qr().prototype.as5D=function(e,t,n,s,r){return this.throwIfDisposed(),Cu(this,[e,t,n,s,r])},qr().prototype.asin=function(){return this.throwIfDisposed(),nd(this)},qr().prototype.asinh=function(){return this.throwIfDisposed(),sd(this)},qr().prototype.atan=function(){return this.throwIfDisposed(),rd(this)},qr().prototype.atan2=function(e){return this.throwIfDisposed(),ad(this,e)},qr().prototype.atanh=function(){return this.throwIfDisposed(),id(this)},qr().prototype.avgPool=function(e,t,n,s){return this.throwIfDisposed(),od(this,e,t,n,s)},qr().prototype.batchToSpaceND=function(e,t){return this.throwIfDisposed(),ud(this,e,t)},qr().prototype.batchNorm=function(e,t,n,s,r){return this.throwIfDisposed(),cd(this,e,t,n,s,r)},qr().prototype.broadcastTo=function(e){return this.throwIfDisposed(),ap(this,e)},qr().prototype.cast=function(e){return this.throwIfDisposed(),Po(this,e)},qr().prototype.ceil=function(){return this.throwIfDisposed(),md(this)},qr().prototype.clipByValue=function(e,t){return this.throwIfDisposed(),gd(this,e,t)},qr().prototype.concat=function(e,t){return this.throwIfDisposed(),e instanceof jr&&(e=[e]),oh([this,...e],t)},qr().prototype.conv1d=function(e,t,n,s,r,a){return this.throwIfDisposed(),vd(this,e,t,n,s,r,a)},qr().prototype.conv2dTranspose=function(e,t,n,s,r){return this.throwIfDisposed(),kd(this,e,t,n,s,r)},qr().prototype.conv2d=function(e,t,n,s,r,a){return this.throwIfDisposed(),kh(this,e,t,n,s,r,a)},qr().prototype.cos=function(){return this.throwIfDisposed(),Td(this)},qr().prototype.cosh=function(){return this.throwIfDisposed(),Cd(this)},qr().prototype.cumsum=function(e,t,n){return this.throwIfDisposed(),$d(this,e,t,n)},qr().prototype.depthToSpace=function(e,t){return this.throwIfDisposed(),Ad(this,e,t)},qr().prototype.depthwiseConv2d=function(e,t,n,s,r,a){return this.throwIfDisposed(),Th(this,e,t,n,s,r,a)},qr().prototype.dilation2d=function(e,t,n,s,r){return this.throwIfDisposed(),Rd(this,e,t,n,s,r)},qr().prototype.divNoNan=function(e){return this.throwIfDisposed(),Dd(this,e)},qr().prototype.div=function(e){return this.throwIfDisposed(),np(this,e)};const wg=Aa({dot_:function(e,t){const n=$a(e,"t1","dot"),s=$a(t,"t2","dot");x(!(1!==n.rank&&2!==n.rank||1!==s.rank&&2!==s.rank),(()=>`Error in dot: inputs must all be rank 1 or 2, but got ranks ${n.rank} and ${s.rank}.`));const r=1===n.rank?n.size:n.shape[1],a=1===s.rank?s.size:s.shape[0];if(x(r===a,(()=>`Error in dot: inner dimensions of inputs must match, but got ${r} and ${a}.`)),1===n.rank&&1===s.rank){const e=Cu(n,[1,-1]),t=Cu(s,[-1,1]),r=Ah(e,t);return Cu(r,[])}if(1===n.rank&&2===s.rank){const e=Cu(n,[1,-1]),t=Cu(s,[s.shape[0],s.shape[1]]),r=Ah(e,t);return Cu(r,[r.size])}if(2===n.rank&&1===s.rank){const e=Cu(s,[-1,1]),t=Ah(n,e);return Cu(t,[t.size])}{const e=Cu(s,[s.shape[0],s.shape[1]]);return Ah(n,e)}}});qr().prototype.dot=function(e){return this.throwIfDisposed(),wg(this,e)},qr().prototype.elu=function(){return this.throwIfDisposed(),vu(this)},qr().prototype.equal=function(e){return this.throwIfDisposed(),Fd(this,e)},qr().prototype.erf=function(){return this.throwIfDisposed(),Od(this)},qr().prototype.exp=function(){return this.throwIfDisposed(),Bp(this)},qr().prototype.expandDims=function(e){return this.throwIfDisposed(),Np(this,e)},qr().prototype.expm1=function(){return this.throwIfDisposed(),Md(this)},qr().prototype.fft=function(){return this.throwIfDisposed(),fh(this)},qr().prototype.flatten=function(){return this.throwIfDisposed(),Cu(this,[this.size])},qr().prototype.floor=function(){return this.throwIfDisposed(),Ld(this)},qr().prototype.floorDiv=function(e){return this.throwIfDisposed(),tp(this,e)},qr().prototype.gather=function(e,t){return this.throwIfDisposed(),zd(this,e,t)},qr().prototype.greaterEqual=function(e){return this.throwIfDisposed(),cp(this,e)},qr().prototype.greater=function(e){return this.throwIfDisposed(),ep(this,e)},qr().prototype.ifft=function(){return this.throwIfDisposed(),gh(this)},qr().prototype.irfft=function(){return this.throwIfDisposed(),xh(this)},qr().prototype.isFinite=function(){return this.throwIfDisposed(),Bd(this)},qr().prototype.isInf=function(){return this.throwIfDisposed(),Pd(this)},qr().prototype.isNaN=function(){return this.throwIfDisposed(),Wd(this)},qr().prototype.leakyRelu=function(e){return this.throwIfDisposed(),ku(this,e)},qr().prototype.lessEqual=function(e){return this.throwIfDisposed(),Qh(this,e)},qr().prototype.less=function(e){return this.throwIfDisposed(),Ud(this,e)},qr().prototype.localResponseNormalization=function(e,t,n,s){return this.throwIfDisposed(),Gd(this,e,t,n,s)},qr().prototype.logSigmoid=function(){return this.throwIfDisposed(),jd(this)},qr().prototype.logSoftmax=function(e){return this.throwIfDisposed(),qd(this,e)},qr().prototype.logSumExp=function(e,t){return this.throwIfDisposed(),Wp(this,e,t)},qr().prototype.log=function(){return this.throwIfDisposed(),Lp(this)},qr().prototype.log1p=function(){return this.throwIfDisposed(),Pp(this)},qr().prototype.logicalAnd=function(e){return this.throwIfDisposed(),hp(this,e)},qr().prototype.logicalNot=function(){return this.throwIfDisposed(),Kd(this)},qr().prototype.logicalOr=function(e){return this.throwIfDisposed(),Xd(this,e)};const vg=Aa({logicalXor_:function(e,t){const n=$a(e,"a","logicalXor","bool"),s=$a(t,"b","logicalXor","bool");return ul(n.shape,s.shape),hp(Xd(e,t),Kd(hp(e,t)))}});qr().prototype.logicalXor=function(e){return this.throwIfDisposed(),vg(this,e)},qr().prototype.matMul=function(e,t,n){return this.throwIfDisposed(),Ah(this,e,t,n)},qr().prototype.maxPool=function(e,t,n,s){return this.throwIfDisposed(),Yd(this,e,t,n,s)},qr().prototype.max=function(e,t){return this.throwIfDisposed(),gp(this,e,t)},qr().prototype.maximum=function(e){return this.throwIfDisposed(),Qd(this,e)},qr().prototype.mean=function(e,t){return this.throwIfDisposed(),Fp(this,e,t)},qr().prototype.min=function(e,t){return this.throwIfDisposed(),yp(this,e,t)},qr().prototype.minimum=function(e){return this.throwIfDisposed(),Mp(this,e)},qr().prototype.mirrorPad=function(e,t){return this.throwIfDisposed(),ef(this,e,t)},qr().prototype.mod=function(e){return this.throwIfDisposed(),tf(this,e)},qr().prototype.mul=function(e){return this.throwIfDisposed(),Iu(this,e)},qr().prototype.neg=function(){return this.throwIfDisposed(),Cp(this)},qr().prototype.norm=function(e,t,n){return this.throwIfDisposed(),kp(this,e,t,n)},qr().prototype.notEqual=function(e){return this.throwIfDisposed(),Dp(this,e)},qr().prototype.oneHot=function(e,t=1,n=0){return this.throwIfDisposed(),rf(this,e,t,n)},qr().prototype.onesLike=function(){return this.throwIfDisposed(),af(this)},qr().prototype.pad=function(e,t){return this.throwIfDisposed(),of(this,e,t)};const kg=Aa({pool_:function(e,t,n,s,r,a,i){null==r&&(r=[1,1]),null==a&&(a=1),0===s&&(s="valid");const o=$a(e,"x","maxPool");let l=o,u=!1;3===o.rank&&(u=!0,l=Cu(o,[1,o.shape[0],o.shape[1],o.shape[2]])),x(yu(a,r),(()=>`Error in pool: Either strides or dilations must be 1. Got strides ${a} and dilations '${r}'`));const c=ou(l.shape,t,a,r,s),h=[c.dilationHeight,c.dilationWidth];let p;p="same"===s?function(e,t){const n=e.map(((e,n)=>e+(e-1)*(t[n]-1))).map((e=>e-1)),s=n.map((e=>Math.floor(e/2))),r=n.map(((e,t)=>e-s[t]));return n.map(((e,t)=>[s[t],r[t]]))}([c.filterHeight,c.filterWidth],h):[[0,0],[0,0]];const d=1===h[0]&&1===h[1],[f,m]=function(e,t,n){const s=n.map((e=>e[0])),r=n.map((e=>e[1])),a=e.concat(s,r),i=t.map(((e,t)=>(e-a[t]%e)%e)),o=r.map(((e,t)=>e+i[t])),l=t.map(((e,t)=>[s[t],o[t]])),u=t.map(((e,t)=>[0,i[t]]));return[l,u]}([c.inHeight,c.inWidth],h,p),g=d?s:"valid",y=d?l:_f(l,h,f),b=("avg"===n?()=>od(y,t,a,g,i):()=>Yd(y,t,a,g,i))(),w=d?b:ud(b,h,m);return u?Cu(w,[w.shape[1],w.shape[2],w.shape[3]]):w}});function Ig(e,t,n=new Map,s=new Set){if(null==e)return null;if("function"==typeof Blob&&e instanceof Blob)return e.slice();if(s.has(e))throw new Error("Circular references are not supported.");if(n.has(e))return n.get(e);const r=t(e);if(r.recurse&&null!==r.value)throw new Error("A deep map function may not return both a value and recurse=true.");if(r.recurse){if(Cg(e)){const r=Array.isArray(e)?[]:{};s.add(e);for(const a in e){const i=Ig(e[a],t,n,s);r[a]=i}return s.delete(e),e.__proto__&&(r.__proto__=e.__proto__),r}throw new Error(`Can't recurse into non-iterable type: ${e}`)}return n.set(e,r.value),r.value}function Sg(e,t=Tg){return Ng(e,t)}function Ng(e,t,n=new Set){const s=e[0];if(n.has(s))throw new Error("Circular references are not supported.");const r=t(e);if(r.recurse&&null!==r.value)throw new Error("A deep zip function may not return both a value and recurse=true.");if(r.recurse){if(Cg(s)){const r=Array.isArray(s)?[]:{};n.add(s);for(const a in s){const s=Ng(e.map((e=>e[a])),t,n);r[a]=s}return n.delete(s),r}throw new Error(`Can't recurse into non-iterable type: ${s}`)}return r.value}function Tg(e){return null===e?null:Cg(e[0])?{value:null,recurse:!0}:{value:e,recurse:!1}}function Cg(e){let t=!1;if(le().get("IS_BROWSER"))t=e instanceof TextDecoder;else{const{StringDecoder:n}=a("foUwZ");t=e instanceof n}return null!=e&&!ArrayBuffer.isView(e)&&(Array.isArray(e)||"object"==typeof e&&!(e instanceof jr)&&!(e instanceof Promise)&&!t)}function $g(e){return Ig(e,Eg)}function Eg(e){return e instanceof jr?{value:e.clone(),recurse:!1}:Cg(e)?{value:null,recurse:!0}:{value:e,recurse:!1}}qr().prototype.pool=function(e,t,n,s,r,a){return this.throwIfDisposed(),kg(this,e,t,n,s,r,a)},qr().prototype.pow=function(e){return this.throwIfDisposed(),bp(this,e)},qr().prototype.prelu=function(e){return this.throwIfDisposed(),Su(this,e)},qr().prototype.prod=function(e,t){return this.throwIfDisposed(),lf(this,e,t)},qr().prototype.reciprocal=function(){return this.throwIfDisposed(),vf(this)},qr().prototype.relu=function(){return this.throwIfDisposed(),Nu(this)},qr().prototype.relu6=function(){return this.throwIfDisposed(),Tu(this)},qr().prototype.reshapeAs=function(e){return this.throwIfDisposed(),Cu(this,e.shape)},qr().prototype.reshape=function(e){return this.throwIfDisposed(),Cu(this,e)},qr().prototype.resizeBilinear=function(e,t,n){return this.throwIfDisposed(),Yh(this,e,t,n)},qr().prototype.resizeNearestNeighbor=function(e,t,n){return this.throwIfDisposed(),Zh(this,e,t,n)},qr().prototype.reverse=function(e){return this.throwIfDisposed(),yh(this,e)},qr().prototype.rfft=function(){return this.throwIfDisposed(),mh(this)},qr().prototype.round=function(){return this.throwIfDisposed(),rp(this)},qr().prototype.rsqrt=function(){return this.throwIfDisposed(),kf(this)},qr().prototype.selu=function(){return this.throwIfDisposed(),If(this)},qr().prototype.separableConv2d=function(e,t,n,s,r,a){return this.throwIfDisposed(),Sf(this,e,t,n,s,r,a)},qr().prototype.sigmoid=function(){return this.throwIfDisposed(),$u(this)},qr().prototype.sign=function(){return this.throwIfDisposed(),Tf(this)},qr().prototype.sin=function(){return this.throwIfDisposed(),Cf(this)},qr().prototype.sinh=function(){return this.throwIfDisposed(),$f(this)},qr().prototype.slice=function(e,t){return this.throwIfDisposed(),ch(this,e,t)},qr().prototype.softmax=function(e){return this.throwIfDisposed(),Df(this,e)},qr().prototype.softplus=function(){return this.throwIfDisposed(),Hd(this)},qr().prototype.spaceToBatchND=function(e,t){return this.throwIfDisposed(),_f(this,e,t)},qr().prototype.split=function(e,t){return this.throwIfDisposed(),hh(this,e,t)},qr().prototype.sqrt=function(){return this.throwIfDisposed(),xp(this)},qr().prototype.square=function(){return this.throwIfDisposed(),wp(this)},qr().prototype.squaredDifference=function(e){return this.throwIfDisposed(),zp(this,e)},qr().prototype.squeeze=function(e){return this.throwIfDisposed(),Ip(this,e)},qr().prototype.stack=function(e,t){this.throwIfDisposed();const n=e instanceof jr?[this,e]:[this,...e];return pp(n,t)},qr().prototype.step=function(e){return this.throwIfDisposed(),Eu(this,e)},qr().prototype.stridedSlice=function(e,t,n,s,r,a,i,o){return this.throwIfDisposed(),Of(this,e,t,n,s,r,a,i,o)},qr().prototype.sub=function(e){return this.throwIfDisposed(),sp(this,e)},qr().prototype.sum=function(e,t){return this.throwIfDisposed(),Au(this,e,t)},qr().prototype.tan=function(){return this.throwIfDisposed(),Mf(this)},qr().prototype.tanh=function(){return this.throwIfDisposed(),Lf(this)},qr().prototype.tile=function(e){return this.throwIfDisposed(),Ph(this,e)},qr().prototype.toBool=function(){return this.throwIfDisposed(),Po(this,"bool")},qr().prototype.toFloat=function(){return this.throwIfDisposed(),Po(this,"float32")},qr().prototype.toInt=function(){return this.throwIfDisposed(),Po(this,"int32")},qr().prototype.topk=function(e,t){return this.throwIfDisposed(),zf(this,e,t)},qr().prototype.transpose=function(e){return this.throwIfDisposed(),$p(this,e)},qr().prototype.unique=function(e){return this.throwIfDisposed(),Pf(this,e)},qr().prototype.unsortedSegmentSum=function(e,t){return this.throwIfDisposed(),Xm(this,e,t)},qr().prototype.unstack=function(e){return this.throwIfDisposed(),dp(this,e)},qr().prototype.where=function(e,t){return this.throwIfDisposed(),ip(e,this,t)},qr().prototype.zerosLike=function(){return this.throwIfDisposed(),dh(this)};class Ag{constructor(e){if(this.capacity=e,this.begin=0,this.end=0,null==e)throw new RangeError("Can't create a ring buffer of unknown capacity.");if(e<1)throw new RangeError("Can't create ring buffer of capacity < 1.");this.data=new Array(e),this.doubledCapacity=2*e}wrap(e){for(;e<0;)e+=this.doubledCapacity;return e%this.doubledCapacity}get(e){if(e<0)throw new RangeError("Can't get item at a negative index.");return this.data[e%this.capacity]}set(e,t){if(e<0)throw new RangeError("Can't set item at a negative index.");this.data[e%this.capacity]=t}length(){let e=this.end-this.begin;return e<0&&(e=this.doubledCapacity+e),e}isFull(){return this.length()===this.capacity}isEmpty(){return 0===this.length()}push(e){if(this.isFull())throw new RangeError("Ring buffer is full.");this.set(this.end,e),this.end=this.wrap(this.end+1)}pushAll(e){for(const t of e)this.push(t)}pop(){if(this.isEmpty())throw new RangeError("Ring buffer is empty.");this.end=this.wrap(this.end-1);const e=this.get(this.end);return this.set(this.end,void 0),e}unshift(e){if(this.isFull())throw new RangeError("Ring buffer is full.");this.begin=this.wrap(this.begin-1),this.set(this.begin,e)}shift(){if(this.isEmpty())throw new RangeError("Ring buffer is empty.");const e=this.get(this.begin);return this.set(this.begin,void 0),this.begin=this.wrap(this.begin+1),e}shuffleExcise(e){if(this.isEmpty())throw new RangeError("Ring buffer is empty.");const t=this.wrap(this.begin+e),n=this.get(t);return this.set(t,this.pop()),n}}class Rg extends Ag{constructor(){super(Rg.INITIAL_CAPACITY)}isFull(){return!1}push(e){super.isFull()&&this.expand(),super.push(e)}unshift(e){super.isFull()&&this.expand(),super.unshift(e)}expand(){const e=2*this.capacity,t=new Array(e),n=this.length();for(let e=0;e<n;e++)t[e]=this.get(this.wrap(this.begin+e));this.data=t,this.capacity=e,this.doubledCapacity=2*this.capacity,this.begin=0,this.end=n}}function Fg(e){return new Mg(e)}function Dg(e){return new Lg(e)}function _g(e,t){return new Kg(e,t)}Rg.INITIAL_CAPACITY=32;class Og{async toArray(){const e=[];let t=await this.next();for(;!t.done;)e.push(t.value),t=await this.next();return e}async toArrayForTest(){const e=this.prefetch(100),t=[];let n=await e.next();for(;!n.done;)t.push(n.value),n=await e.next();return t}async resolveFully(){let e=await this.next();for(;!e.done;)e=await this.next()}async resolveWhile(e){let t=await this.next(),n=e(t.value);for(;!t.done&&n;)t=await this.next(),n=e(t.value)}handleErrors(e){return new Gg(this,e)}filter(e){return new Ug(this,e)}map(e){return new Vg(this,e)}mapAsync(e){return new Hg(this,e)}serialMapAsync(e){return new Hg(this,e).serial()}flatmap(e){return new qg(this,e)}async forEachAsync(e){return this.map(e).resolveFully()}async serialForEach(e){return this.serialMapAsync(e).resolveWhile((e=>!0===e))}rowMajorBatch(e,t=!0){return new Wg(this,e,t)}columnMajorBatch(e,t=!0,n=Tg){return this.rowMajorBatch(e,t).map((e=>Sg(e,n)))}concatenate(e,t){return new Kg(Fg([this,e]),t)}take(e){return e<0||null==e?this:new Pg(this,e)}skip(e){return e<0||null==e?this:new Bg(this,e)}prefetch(e){return new Yg(this,e)}shuffle(e,t){return new Zg(this,e,t)}serial(){return new zg(this)}}class Mg extends Og{constructor(e){super(),this.items=e,this.trav=0}summary(){return`Array of ${this.items.length} items`}async next(){if(this.trav>=this.items.length)return{value:null,done:!0};const e=this.items[this.trav];return this.trav++,{value:$g(e),done:!1}}}class Lg extends Og{constructor(e){super(),this.nextFn=e}summary(){return"Function call"}async next(){try{return this.nextFn()}catch(e){throw e.message=`Error thrown while iterating through a dataset: ${e.message}`,e}}}class zg extends Og{constructor(e){super(),this.upstream=e,this.lastRead=Promise.resolve({value:null,done:!1})}summary(){return`${this.upstream.summary()} -> Serial`}async next(){return this.lastRead=this.lastRead.then((()=>this.serialNext())),this.lastRead}async serialNext(){return this.upstream.next()}}class Bg extends Og{constructor(e,t){super(),this.upstream=e,this.maxCount=t,this.count=0,this.lastRead=Promise.resolve({value:null,done:!1})}summary(){return`${this.upstream.summary()} -> Skip`}async next(){return this.lastRead=this.lastRead.then((()=>this.serialNext())),this.lastRead}async serialNext(){for(;this.count++<this.maxCount;){const e=await this.upstream.next();if(e.done)return e;nh(e.value)}return this.upstream.next()}}class Pg extends Og{constructor(e,t){super(),this.upstream=e,this.maxCount=t,this.count=0}summary(){return`${this.upstream.summary()} -> Take`}async next(){return this.count++>=this.maxCount?{value:null,done:!0}:this.upstream.next()}}class Wg extends Og{constructor(e,t,n=!0){super(),this.upstream=e,this.batchSize=t,this.enableSmallLastBatch=n,this.lastRead=Promise.resolve({value:null,done:!1})}summary(){return`${this.upstream.summary()} -> RowMajorBatch`}async next(){return this.lastRead=this.lastRead.then((()=>this.serialNext())),this.lastRead}async serialNext(){const e=[];for(;e.length<this.batchSize;){const t=await this.upstream.next();if(t.done)return this.enableSmallLastBatch&&e.length>0?{value:e,done:!1}:{value:null,done:!0};e.push(t.value)}return{value:e,done:!1}}}class Ug extends Og{constructor(e,t){super(),this.upstream=e,this.predicate=t,this.lastRead=Promise.resolve({value:null,done:!1})}summary(){return`${this.upstream.summary()} -> Filter`}async next(){return this.lastRead=this.lastRead.then((()=>this.serialNext())),this.lastRead}async serialNext(){for(;;){const e=await this.upstream.next();if(e.done||this.predicate(e.value))return e;nh(e.value)}}}class Vg extends Og{constructor(e,t){super(),this.upstream=e,this.transform=t}summary(){return`${this.upstream.summary()} -> Map`}async next(){const e=await this.upstream.next();if(e.done)return{value:null,done:!0};const t=ra.getTensorsInContainer(e.value),n=this.transform(e.value),s=ra.getTensorsInContainer(n);for(const e of t)ra.isTensorInList(e,s)||e.dispose();return{value:n,done:!1}}}class Gg extends Og{constructor(e,t){super(),this.upstream=e,this.handler=t,this.count=0,this.lastRead=Promise.resolve({value:null,done:!1})}summary(){return`${this.upstream.summary()} -> handleErrors`}async next(){return this.lastRead=this.lastRead.then((()=>this.serialNext())),this.lastRead}async serialNext(){for(;;)try{return await this.upstream.next()}catch(e){if(!this.handler(e))return{value:null,done:!0}}}}class Hg extends Og{constructor(e,t){super(),this.upstream=e,this.transform=t}summary(){return`${this.upstream.summary()} -> AsyncMap`}async next(){const e=await this.upstream.next();if(e.done)return{value:null,done:!0};const t=ra.getTensorsInContainer(e.value),n=await this.transform(e.value),s=ra.getTensorsInContainer(n);for(const e of t)ra.isTensorInList(e,s)||e.dispose();return{value:n,done:!1}}}class jg extends Og{constructor(){super(),this.outputQueue=new Rg,this.lastRead=Promise.resolve({value:null,done:!1})}async next(){return this.lastRead=this.lastRead.then((()=>this.serialNext())),this.lastRead}async serialNext(){for(;0===this.outputQueue.length();)if(!await this.pump())return{value:null,done:!0};return{value:this.outputQueue.shift(),done:!1}}}class qg extends jg{constructor(e,t){super(),this.upstream=e,this.transform=t}summary(){return`${this.upstream.summary()} -> Flatmap`}async pump(){const e=await this.upstream.next();if(e.done)return!1;const t=ra.getTensorsInContainer(e.value),n=this.transform(e.value),s=ra.getTensorsInContainer(n);this.outputQueue.pushAll(n);for(const e of t)ra.isTensorInList(e,s)||e.dispose();return!0}}class Kg extends Og{constructor(e,t){super(),this.baseErrorHandler=t,this.lastRead=null,this.iterator=null,this.moreIterators=e}summary(){return"TODO: fill in upstream of chained summaries -> Chained"}async next(){return this.lastRead=this.readFromChain(this.lastRead),this.lastRead}async readFromChain(e){if(await e,null==this.iterator){const e=await this.moreIterators.next();if(e.done)return{value:null,done:!0};this.iterator=e.value,null!=this.baseErrorHandler&&(this.iterator=this.iterator.handleErrors(this.baseErrorHandler))}const t=await this.iterator.next();return t.done?(this.iterator=null,this.readFromChain(e)):t}}var Xg;!function(e){e[e.FAIL=0]="FAIL",e[e.SHORTEST=1]="SHORTEST",e[e.LONGEST=2]="LONGEST"}(Xg||(Xg={}));class Yg extends Og{constructor(e,t){super(),this.upstream=e,this.bufferSize=t,this.buffer=new Ag(t)}summary(){return`${this.upstream.summary()} -> Prefetch`}refill(){for(;!this.buffer.isFull();){const e=this.upstream.next();this.buffer.push(e)}}next(){return this.refill(),this.buffer.shift()}}class Zg extends Yg{constructor(e,t,n){super(e,t),this.upstream=e,this.windowSize=t,this.upstreamExhausted=!1,this.random=uf.alea(n||Us.now().toString()),this.lastRead=Promise.resolve({value:null,done:!1})}async next(){return this.lastRead=this.lastRead.then((()=>this.serialNext())),this.lastRead}randomInt(e){return Math.floor(this.random()*e)}chooseIndex(){return this.randomInt(this.buffer.length())}async serialNext(){for(this.upstreamExhausted||this.refill();!this.buffer.isEmpty();){const e=this.chooseIndex(),t=await this.buffer.shuffleExcise(e);if(!t.done)return this.refill(),t;this.upstreamExhausted=!0}return{value:null,done:!0}}}class Jg{constructor(){this.size=null}batch(e,t=!0){const n=this;let s;return Us.assert(e>0,(()=>`batchSize needs to be positive, but it is\n      ${e}`)),s=this.size===1/0||null==this.size?this.size:t?Math.ceil(this.size/e):Math.floor(this.size/e),Qg((async()=>(await n.iterator()).columnMajorBatch(e,t,ey)),s)}concatenate(e){const t=this;let n;return n=this.size===1/0||e.size===1/0?1/0:null!=this.size&&null!=e.size?this.size+e.size:null,Qg((async()=>(await t.iterator()).concatenate(await e.iterator())),n)}filter(e){const t=this;let n;return n=this.size===1/0?1/0:null,Qg((async()=>(await t.iterator()).filter((t=>th((()=>e(t)))))),n)}async forEachAsync(e){return(await this.iterator()).forEachAsync(e)}map(e){const t=this;return Qg((async()=>(await t.iterator()).map((t=>th((()=>e(t)))))),this.size)}mapAsync(e){const t=this;return Qg((async()=>(await t.iterator()).mapAsync(e)),this.size)}prefetch(e){if(null==e)throw new RangeError("`Dataset.prefetch()` requires bufferSize to be specified.");const t=this;return Qg((async()=>(await t.iterator()).prefetch(e)),this.size)}repeat(e){const t=this;let n;return n=null!=this.size&&e>0?this.size*e:0===e?0:null!=this.size&&(void 0===e||e<0)?1/0:null,Qg((async()=>_g(Dg((async()=>({value:await t.iterator(),done:!1}))).take(e))),n)}skip(e){const t=this;let n;return n=null!=this.size&&e>=0&&this.size>=e?this.size-e:null!=this.size&&(this.size<e||void 0===e||e<0)?0:null,Qg((async()=>(await t.iterator()).skip(e)),n)}shuffle(e,t,n=!0){if(null==e||e<0)throw null==this.size?new RangeError("`Dataset.shuffle()` requires bufferSize to be specified."):new RangeError(`\`Dataset.shuffle()\` requires bufferSize to be specified.  If your data fits in main memory (for regular JS objects), and/or GPU memory (for \`tf.Tensor\`s), consider setting bufferSize to the dataset size (${this.size} elements)`);const s=this,r=uf.alea(t||Us.now().toString());return Qg((async()=>{let t=r.int32();return n&&(t+=r.int32()),(await s.iterator()).shuffle(e,t.toString())}),this.size)}take(e){const t=this;let n;return n=null!=this.size&&this.size>e?e:null!=this.size&&this.size<=e?this.size:null,Qg((async()=>(await t.iterator()).take(e)),n)}async toArray(){if(this.size===1/0)throw new Error("Can not convert infinite data stream to array.");return(await this.iterator()).toArray()}async toArrayForTest(){if(this.size===1/0)throw new Error("Can not convert infinite data stream to array.");return(await this.iterator()).toArrayForTest()}}function Qg(e,t=null){return new class extends Jg{constructor(){super(...arguments),this.size=t}async iterator(){return e()}}}function ey(e){if(null===e)return null;const t=e[0];if(null==(n=t)||null===(s=n)||"object"!=typeof s&&"function"!=typeof s||Array.isArray(n)||"object"==typeof n&&n instanceof jr||Us.isTypedArray(n)){return{value:function(e){if(0===e.length)throw new Error("Can't make a batch of zero elements.");return e[0]instanceof jr?pp(e):Da(e)}(e),recurse:!1}}var n,s;return{value:null,recurse:!0}}Jg.MAX_BUFFER_SIZE=1e4;Symbol("out"),Symbol("field"),Symbol("quote"),Symbol("quoteafterquote"),Symbol("quoteinquote");function ty(e,t){Array.isArray(e)||(e=[e]),e.forEach((e=>{null!=e&&Us.assert("complex64"!==e.dtype,(()=>`${t} does not support complex64 tensors in the CPU backend.`))}))}function ny(e,t,n){return({inputs:s,attrs:r,backend:a})=>{const{x:i}=s;if(ty(i,e),"string"===i.dtype||"string"===n)throw new Error("unaryKernelFunc does not support string input/output");const o=a,l=o.data.get(i.dataId).values,u=Us.sizeFromShape(i.shape),c=n||i.dtype,h=Us.getArrayFromDType(c,u);for(let e=0;e<u;++e)h[e]=t(l[e],r);return o.makeTensorInfo(i.shape,c,h)}}function sy(e,t,n){return({inputs:s,attrs:r,backend:a})=>{const{x:i}=s;if(ty(i,e),"string"===i.dtype||"string"===n)throw new Error("unaryKernelFunc does not support string input/output");const o=a,l=o.data.get(i.dataId).values,u=n||i.dtype,c=t(l,u,r);return o.makeTensorInfo(i.shape,u,c)}}const ry=ny(It,(e=>e>=0?e:Math.exp(e)-1)),ay={kernelName:It,backendName:"cpu",kernelFunc:ry};function iy(e){const{inputs:t,backend:n}=e,{x:s}=t;return n.incRef(s.dataId),{dataId:s.dataId,shape:s.shape,dtype:s.dtype}}const oy={kernelName:Pt,backendName:"cpu",kernelFunc:iy};function ly(e){const{inputs:t,backend:n,attrs:s}=e,{x:r}=t,{alpha:a}=s;ty([r],"leakyRelu");const i=Us.sizeFromShape(r.shape),o=n.data.get(r.dataId).values,l=Us.getTypedArrayFromDType("float32",i);for(let e=0;e<o.length;e++)l[e]=o[e]<0?a*o[e]:o[e];return n.makeTensorInfo(r.shape,"float32",l)}const uy={kernelName:jt,backendName:"cpu",kernelFunc:ly};function cy(e){return(t,n,s,r,a)=>{const i=Bl.assertAndGetBroadcastShape(t,n),o=i.length,l=Us.computeStrides(i),u=Us.sizeFromShape(i),c=Us.getTypedArrayFromDType(a,u),h=t.length,p=n.length,d=Us.computeStrides(t),f=Us.computeStrides(n),m=Bl.getBroadcastDims(t,i),g=Bl.getBroadcastDims(n,i);if(m.length+g.length===0)for(let t=0;t<c.length;++t)c[t]=e(s[t%s.length],r[t%r.length]);else for(let t=0;t<c.length;++t){const n=Us.indexToLoc(t,o,l),a=n.slice(-h);m.forEach((e=>a[e]=0));const i=Us.locToIndex(a,h,d),u=n.slice(-p);g.forEach((e=>u[e]=0));const y=Us.locToIndex(u,p,f);c[t]=e(s[i],r[y])}return[c,i]}}const hy=cy(((e,t)=>e<0?t*e:e));function py(e){const{inputs:t,backend:n}=e,{x:s,alpha:r}=t;ty([s,r],"prelu");const a=n.data.get(s.dataId).values,i=n.data.get(r.dataId).values,[o,l]=hy(s.shape,r.shape,a,i,"float32");return n.makeTensorInfo(l,"float32",o)}const dy={kernelName:$n,backendName:"cpu",kernelFunc:py},fy=ny(Dn,(e=>Math.max(0,e))),my={kernelName:Dn,backendName:"cpu",kernelFunc:fy},gy=ny(Bn,(e=>Math.min(Math.max(0,e),6))),yy={kernelName:Bn,backendName:"cpu",kernelFunc:gy};function by(e){return(t,n,s)=>{const r=Us.getTypedArrayFromDType(n,t.length);for(let n=0;n<t.length;++n)r[n]=e(t[n],s);return r}}const xy=by((e=>1/(1+Math.exp(-e)))),wy=ny(Yn,(e=>1/(1+Math.exp(-e)))),vy={kernelName:Yn,backendName:"cpu",kernelFunc:wy};function ky(e,t,n,s,r){if("linear"===n)return iy({inputs:{x:t},backend:e});if("relu"===n)return fy({inputs:{x:t},backend:e});if("elu"===n)return ry({inputs:{x:t},backend:e});if("relu6"===n)return gy({inputs:{x:t},backend:e});if("prelu"===n)return py({inputs:{x:t,alpha:s},backend:e});if("leakyrelu"===n)return ly({inputs:{x:t},backend:e,attrs:{alpha:r}});if("sigmoid"===n)return wy({inputs:{x:t},backend:e});throw new Error(`Activation ${n} has not been implemented for the CPU backend.`)}function Iy(e){const{inputs:t,backend:n}=e,{real:s,imag:r}=t,a=n.data.get(s.dataId).values,i=n.data.get(r.dataId).values,o=n.makeTensorInfo(s.shape,"complex64");return n.data.get(o.dataId).complexTensorInfos={real:n.makeTensorInfo(s.shape,"float32",a),imag:n.makeTensorInfo(r.shape,"float32",i)},o}const Sy={kernelName:Qe,backendName:"cpu",kernelFunc:Iy};function Ny(e,t,n="float32"){if("complex64"===n){return Iy({inputs:{real:Ny(e,t,"float32"),imag:Ny(e,t,"float32")},backend:e})}const s=Us.makeZerosTypedArray(Us.sizeFromShape(t),n);return e.makeTensorInfo(t,n,s)}function Ty(e){const{inputs:t,backend:n}=e,{input:s}=t,r=n.data.get(s.dataId).complexTensorInfos.real,a=n.data.get(r.dataId).values;return n.makeTensorInfo(r.shape,r.dtype,a)}const Cy={kernelName:Rn,backendName:"cpu",kernelFunc:Ty};function $y(e){const{inputs:t,backend:n,attrs:s}=e,{x:r}=t,{dtype:a}=s;if("complex64"===a){if("complex64"===r.dtype)return iy({inputs:{x:r},backend:n});const e=Ny(n,r.shape,r.dtype),t=$y({inputs:{x:r},backend:n,attrs:{dtype:"float32"}}),s=Iy({inputs:{real:t,imag:e},backend:n});return n.disposeIntermediateTensorInfo(e),n.disposeIntermediateTensorInfo(t),s}if("complex64"===r.dtype){const e=Ty({inputs:{input:r},backend:n}),t=$y({inputs:{x:e},backend:n,attrs:{dtype:a}});return n.disposeIntermediateTensorInfo(e),t}if(!Us.hasEncodingLoss(r.dtype,a)){const e=iy({inputs:{x:r},backend:n});return{dataId:e.dataId,shape:e.shape,dtype:a}}if("int32"===a){const e=n.data.get(r.dataId).values,t=Int32Array.from(e);return n.makeTensorInfo(r.shape,"int32",t)}if("bool"===a){const e=n.data.get(r.dataId).values,t=Us.toTypedArray([0],r.dtype),[s,a]=cy(((e,t)=>e!==t?1:0))(r.shape,[],e,t,"bool");return n.makeTensorInfo(a,"bool",s)}throw new Error(`Error in Cast: failed to cast ${r.dtype} to ${a}`)}const Ey={kernelName:Ye,backendName:"cpu",kernelFunc:$y};function Ay(e,t,n,s){return null==n?({inputs:n,backend:r})=>{const{a:a,b:i}=n,o=r;ty([a,i],e);const l=o.data.get(a.dataId).values,u=o.data.get(i.dataId).values,c="string"===a.dtype?Bl.fromUint8ToStringArray(l):l,h="string"===a.dtype?Bl.fromUint8ToStringArray(u):u,p=s||a.dtype,[d,f]=t(a.shape,i.shape,c,h,p);return o.makeTensorInfo(f,p,d)}:({inputs:e,backend:r})=>{const{a:a,b:i}=e,o=r;if("complex64"===a.dtype||"complex64"===i.dtype){const e=$y({inputs:{x:a},backend:o,attrs:{dtype:"complex64"}}),t=o.data.get(e.dataId),s=t.complexTensorInfos.real,r=t.complexTensorInfos.imag,l=o.data.get(s.dataId).values,u=o.data.get(r.dataId).values,c=$y({inputs:{x:i},backend:o,attrs:{dtype:"complex64"}}),h=o.data.get(c.dataId),p=h.complexTensorInfos.real,d=h.complexTensorInfos.imag,f=o.data.get(p.dataId).values,m=o.data.get(d.dataId).values,[g,y,b]=n(a.shape,i.shape,l,u,f,m),x=o.makeTensorInfo(b,"float32",g),w=o.makeTensorInfo(b,"float32",y),v=Iy({inputs:{real:x,imag:w},backend:o});return o.disposeIntermediateTensorInfo(e),o.disposeIntermediateTensorInfo(c),o.disposeIntermediateTensorInfo(x),o.disposeIntermediateTensorInfo(w),v}{const e=o.data.get(a.dataId).values,n=o.data.get(i.dataId).values,r=s||a.dtype,[l,u]=t(a.shape,i.shape,e,n,r);return o.makeTensorInfo(u,r,l)}}}function Ry(e){return(t,n,s,r,a,i)=>{const o=Bl.assertAndGetBroadcastShape(t,n),l=Us.sizeFromShape(o),u=o.length,c=Us.computeStrides(o),h=Us.getTypedArrayFromDType("float32",l),p=Us.getTypedArrayFromDType("float32",l),d=Bl.getBroadcastDims(t,o),f=Bl.getBroadcastDims(n,o),m=Bl.mergeRealAndImagArrays(s,r),g=Bl.mergeRealAndImagArrays(a,i),y=t.length,b=Us.computeStrides(t),x=n.length,w=Us.computeStrides(n);if(d.length+f.length===0)for(let t=0;t<h.length;t++){const n=t%m.length,s=t%g.length,r=e(m[2*n],m[2*n+1],g[2*s],g[2*s+1]);h[t]=r.real,p[t]=r.imag}else for(let t=0;t<h.length;t++){const n=Us.indexToLoc(t,u,c),s=n.slice(-y);d.forEach((e=>s[e]=0));const r=Us.locToIndex(s,y,b),a=n.slice(-x);f.forEach((e=>a[e]=0));const i=Us.locToIndex(a,x,w),o=e(m[2*r],m[2*r+1],g[2*i],g[2*i+1]);h[t]=o.real,p[t]=o.imag}return[h,p,o]}}const Fy=cy(((e,t)=>e+t)),Dy=Ry(((e,t,n,s)=>({real:e+n,imag:t+s}))),_y=Ay(Re,Fy,Dy),Oy={kernelName:Re,backendName:"cpu",kernelFunc:_y};function My(e){const{inputs:t,backend:n,attrs:s}=e,{x:r}=t,{shape:a}=s,i=Us.sizeFromShape(r.shape),o=Us.inferFromImplicitShape(a,i),l=Us.sizeFromShape(o);Us.assert(i===l,(()=>`The new shape (${o}) has ${l} elements and the old shape (${r.shape}) has ${i} elements. The new shape and old shape must have the same number of elements.`)),n.incRef(r.dataId);const u=n.data.get(r.dataId);if(null!=u.complexTensorInfos){const e=u.complexTensorInfos.real,t=u.complexTensorInfos.imag;e.shape=o,t.shape=o}return{dataId:r.dataId,shape:o,dtype:r.dtype}}const Ly={kernelName:_n,backendName:"cpu",kernelFunc:My};function zy(e){const{inputs:t,backend:n,attrs:s}=e,{a:r,b:a}=t,{transposeA:i,transposeB:o}=s;ty([r,a],"matMul");const l=r.shape.length,u=a.shape.length,c=i?r.shape[l-2]:r.shape[l-1],h=o?a.shape[u-1]:a.shape[u-2],p=i?r.shape[l-1]:r.shape[l-2],d=o?a.shape[u-2]:a.shape[u-1],f=r.shape.slice(0,-2),m=a.shape.slice(0,-2),g=Us.sizeFromShape(f),y=Us.sizeFromShape(m),b=il.assertAndGetBroadcastShape(r.shape.slice(0,-2),a.shape.slice(0,-2)).concat([p,d]);Us.assert(c===h,(()=>`Error in matMul: inner shapes (${c}) and (${h}) of Tensors with shapes ${r.shape} and ${a.shape} and transposeA=${i} and transposeB=${o} must match.`));const x=o?[y,d,h]:[y,h,d],w=My({inputs:{x:r},backend:n,attrs:{shape:i?[g,c,p]:[g,p,c]}}),v=My({inputs:{x:a},backend:n,attrs:{shape:x}}),k=i?w.shape[1]:w.shape[2],I=i?w.shape[2]:w.shape[1],S=o?v.shape[1]:v.shape[2],N=Math.max(g,y),T=n.data.get(w.dataId).values,C=n.data.get(v.dataId).values,$=Us.computeStrides(w.shape),E=Us.computeStrides(v.shape),[A,R,F]=i?[$[0],1,$[1]]:[$[0],$[1],1],[D,_,O]=o?[1,E[1],E[0]]:[E[1],1,E[0]],M=I*S,L=Bo([N,I,S],w.dtype),z=L.values,B=n.blockSize;for(let e=0;e<N;e++)for(let t=0;t<I;t+=B)for(let n=0;n<S;n+=B)for(let s=0;s<k;s+=B){const r=Math.min(t+B,I),a=Math.min(n+B,S),i=Math.min(s+B,k);for(let o=t;o<r;o++)for(let t=n;t<a;t++){let n=0;for(let r=s;r<i;r++){const s=Math.min(e,g-1)*A,a=Math.min(e,y-1)*O;n+=T[s+o*R+r*F]*C[r*D+t*_+a]}z[e*M+(o*S+t)]+=n}}return n.disposeIntermediateTensorInfo(w),n.disposeIntermediateTensorInfo(v),n.makeTensorInfo(b,L.dtype,L.values)}const By={kernelName:je,backendName:"cpu",kernelFunc:zy};const Py={kernelName:$s,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{a:r,b:a,bias:i,preluActivationWeights:o}=t,{transposeA:l,transposeB:u,activation:c,leakyreluAlpha:h}=s;let p,d,f;const m=[];p=zy({inputs:{a:r,b:a},attrs:{transposeA:l,transposeB:u},backend:n}),i&&(d=_y({inputs:{a:p,b:i},backend:n}),m.push(p),p=d),c&&(f=ky(n,p,c,o,h),m.push(p),p=f);for(const e of m)n.disposeIntermediateTensorInfo(e);return p}};function Wy(e){const t=new Float32Array(e.length);for(let n=0;n<e.length;++n)t[n]=Math.abs(e[n]);return t}const Uy={kernelName:$e,backendName:"cpu",kernelFunc:e=>{const{x:t}=e.inputs,n=e.backend;ty(t,"abs");let s=new Float32Array(Us.sizeFromShape(t.shape));return s=Wy(n.data.get(t.dataId).values),n.makeOutput(s,t.shape,t.dtype)}},Vy=ny(Ee,(e=>Math.acos(e))),Gy={kernelName:Ee,backendName:"cpu",kernelFunc:Vy},Hy=ny(Ae,(e=>Math.acosh(e))),jy={kernelName:Ae,backendName:"cpu",kernelFunc:Hy};const qy={kernelName:Fe,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n}=e,s=t;ty(t,"addN");const r=s.map((e=>n.data.get(e.dataId).values)),a=Bo(s[0].shape,s[0].dtype),i=a.values;for(let e=0;e<s.length;e++){const t=r[e];for(let e=0;e<i.length;e++)i[e]+=t[e]}return n.makeTensorInfo(a.shape,a.dtype,a.values)}};function Ky(e,t,n,s,r){const a=t.length,i=Us.sizeFromShape(t),o=Us.computeStrides(t),l=Us.computeStrides(r),u=Us.getTypedArrayFromDType(n,Us.sizeFromShape(r));for(let t=0;t<i;++t){const n=Us.indexToLoc(t,a,o),r=new Array(n.length);for(let e=0;e<r.length;e++)r[e]=n[s[e]];u[Us.locToIndex(r,a,l)]=e[t]}return u}function Xy(e){const{inputs:t,attrs:n,backend:s}=e,{x:r}=t,{perm:a}=n;ty(r,"transpose");const i=r.shape.length,o=new Array(i);for(let e=0;e<o.length;e++)o[e]=r.shape[a[e]];const l=Ky(s.data.get(r.dataId).values,r.shape,r.dtype,a,o);return{dataId:s.write(l,o,r.dtype),shape:o,dtype:r.dtype}}const Yy={kernelName:ws,backendName:"cpu",kernelFunc:Xy};const Zy={kernelName:De,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{x:r}=t,{axis:a,keepDims:i}=s;ty(r,"all");const o=Us.parseAxisParam(a,r.shape);let l=o;const u=Bl.getAxesPermutation(l,r.shape.length);let c=r;null!=u&&(c=Xy({inputs:{x:r},backend:n,attrs:{perm:u}}),l=Bl.getInnerMostAxes(l.length,r.shape.length)),Bl.assertAxesAreInnerMostDims("all",l,c.shape.length);const[h,p]=Bl.computeOutAndReduceShapes(c.shape,l),d=Us.sizeFromShape(p),f=Us.makeZerosTypedArray(Us.sizeFromShape(h),c.dtype),m=n.data.get(c.dataId).values;for(let e=0;e<f.length;++e){const t=e*d;let n=m[t];for(let e=0;e<d;++e){const s=m[t+e];n=n&&s}f[e]=n}null!=u&&n.disposeIntermediateTensorInfo(c);const g=n.makeTensorInfo(h,c.dtype,f);if(i){const e=My({inputs:{x:g},backend:n,attrs:{shape:Bl.expandShapeToKeepDim(h,o)}});return n.disposeIntermediateTensorInfo(g),e}return g}};const Jy={kernelName:_e,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{x:r}=t,{axis:a,keepDims:i}=s;ty(r,"any");const o=Us.parseAxisParam(a,r.shape);let l=o;const u=Bl.getAxesPermutation(l,r.shape.length);let c=r;null!=u&&(c=Xy({inputs:{x:r},backend:n,attrs:{perm:u}}),l=Bl.getInnerMostAxes(l.length,r.shape.length)),Bl.assertAxesAreInnerMostDims("any",l,c.shape.length);const[h,p]=Bl.computeOutAndReduceShapes(c.shape,l),d=Us.sizeFromShape(p),f=Us.makeZerosTypedArray(Us.sizeFromShape(h),c.dtype),m=n.data.get(c.dataId).values;for(let e=0;e<f.length;++e){const t=e*d;let n=m[t];for(let e=0;e<d;++e){const s=m[t+e];n=n||s}f[e]=n}null!=u&&n.disposeIntermediateTensorInfo(c);const g=n.makeTensorInfo(h,c.dtype,f);if(i){const e=My({inputs:{x:g},backend:n,attrs:{shape:Bl.expandShapeToKeepDim(h,o)}});return n.disposeIntermediateTensorInfo(g),e}return g}};const Qy={kernelName:Oe,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{x:r}=t,{axis:a}=s;ty(r,"argMax");let i=Us.parseAxisParam(a,r.shape);const o=Bl.getAxesPermutation(i,r.shape.length);let l=r;const u=[];null!=o&&(l=Xy({inputs:{x:r},backend:n,attrs:{perm:o}}),u.push(l),i=Bl.getInnerMostAxes(i.length,l.shape.length)),i=[i[0]],Bl.assertAxesAreInnerMostDims("argMax",i,l.shape.length);const[c,h]=Bl.computeOutAndReduceShapes(l.shape,i),p=Us.sizeFromShape(c),d=Us.makeZerosTypedArray(p,"int32"),f=Us.sizeFromShape(h),m=n.data.get(l.dataId).values;for(let e=0;e<d.length;++e){const t=e*f;let n=m[t],s=0;for(let e=0;e<f;++e){const r=m[t+e];r>n&&(n=r,s=e)}d[e]=s}return u.forEach((e=>n.disposeIntermediateTensorInfo(e))),n.makeTensorInfo(c,"int32",d)}};const eb={kernelName:Me,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{x:r}=t,{axis:a}=s;ty(r,"argMin");let i=Us.parseAxisParam(a,r.shape);const o=Bl.getAxesPermutation(i,r.shape.length);let l=r;const u=[];null!=o&&(l=Xy({inputs:{x:r},backend:n,attrs:{perm:o}}),u.push(l),i=Bl.getInnerMostAxes(i.length,l.shape.length)),i=[i[0]],Bl.assertAxesAreInnerMostDims("argMin",i,l.shape.length);const[c,h]=Bl.computeOutAndReduceShapes(l.shape,i),p=Us.sizeFromShape(c),d=Us.makeZerosTypedArray(p,"int32"),f=Us.sizeFromShape(h),m=n.data.get(l.dataId).values;for(let e=0;e<d.length;++e){const t=e*f;let n=m[t],s=0;for(let e=0;e<f;++e){const r=m[t+e];r<n&&(n=r,s=e)}d[e]=s}return u.forEach((e=>n.disposeIntermediateTensorInfo(e))),n.makeTensorInfo(c,"int32",d)}},tb=ny(Le,(e=>Math.asin(e))),nb={kernelName:Le,backendName:"cpu",kernelFunc:tb},sb=ny(ze,(e=>Math.asinh(e))),rb={kernelName:ze,backendName:"cpu",kernelFunc:sb},ab=ny(Be,(e=>Math.atan(e))),ib={kernelName:Be,backendName:"cpu",kernelFunc:ab},ob=cy(((e,t)=>Math.atan2(e,t))),lb=Ay(We,ob),ub={kernelName:We,backendName:"cpu",kernelFunc:lb},cb=ny(Pe,(e=>Math.atanh(e))),hb={kernelName:Pe,backendName:"cpu",kernelFunc:cb};function pb(e,t,n,s,r,a){const i=r.strideHeight,o=r.strideWidth,l=r.dilationHeight,u=r.dilationWidth,c=r.effectiveFilterHeight,h=r.effectiveFilterWidth,p=r.padInfo.top,d=r.padInfo.left,f="max"===a?Number.NEGATIVE_INFINITY:Number.POSITIVE_INFINITY,m=Bo(r.outShape,n),g=m.values,y=r.outShape[1]*r.outShape[2]*r.outShape[3],b=r.outShape[2]*r.outShape[3],x=r.outShape[3];for(let t=0;t<r.batchSize;++t){const n=t*y,m=t*s[0];for(let t=0;t<r.inChannels;++t)for(let y=0;y<r.outHeight;++y){const w=y*i-p,v=Math.max(0,w),k=Math.min(r.inHeight,c+w),I=n+y*b;for(let n=0;n<r.outWidth;++n){const i=n*o-d,c=Math.max(0,i),p=Math.min(r.inWidth,h+i);let y=f,b=0,w=0;for(let n=v;n<k;n+=l){const r=m+n*s[1];for(let n=c;n<p;n+=u){const i=e[r+n*s[2]+t];"max"===a&&i>y?y=i:"avg"===a&&(b+=i,w++)}if(isNaN(y))break}g[I+n*x+t]="avg"===a?b/w:y}}}return m}function db(e,t,n,s,r=!1,a=!1){const i=Bo(s.outShape,"int32"),o=s.strideHeight,l=s.strideWidth,u=s.dilationHeight,c=s.dilationWidth,h=s.effectiveFilterHeight,p=s.effectiveFilterWidth,d=s.padInfo.top,f=s.padInfo.left,m=Bo(t,n,e);for(let e=0;e<s.batchSize;++e)for(let t=0;t<s.inChannels;++t)for(let n=0;n<s.outHeight;++n){const g=n*o-d;let y=g;for(;y<0;)y+=u;const b=Math.min(s.inHeight,h+g);for(let o=0;o<s.outWidth;++o){const h=o*l-f;let d=h;for(;d<0;)d+=c;const x=Math.min(s.inWidth,p+h);let w=Number.NEGATIVE_INFINITY,v=-1;for(let n=y;n<b;n+=u){const i=n-g;for(let o=d;o<x;o+=c){const l=o-h,u=m.get(e,n,o,t);u>w&&(w=u,v=r?a?((e*s.inHeight+n)*s.inWidth+o)*s.inChannels+t:(n*s.inWidth+o)*s.inChannels+t:i*p+l)}}i.set(v,e,n,o,t)}}return i}function fb(e,t,n,s,r,a){const i=r.strideDepth,o=r.strideHeight,l=r.strideWidth,u=r.dilationDepth,c=r.dilationHeight,h=r.dilationWidth,p=r.effectiveFilterDepth,d=r.effectiveFilterHeight,f=r.effectiveFilterWidth,m=r.padInfo.front,g=r.padInfo.top,y=r.padInfo.left,b="max"===a?Number.NEGATIVE_INFINITY:Number.POSITIVE_INFINITY,x=Bo(r.outShape,n),w=x.values,v=r.outShape[1]*r.outShape[2]*r.outShape[3]*r.outShape[4],k=r.outShape[2]*r.outShape[3]*r.outShape[4],I=r.outShape[3]*r.outShape[4],S=r.outShape[4];for(let t=0;t<r.batchSize;++t){const n=t*v,x=t*s[0];for(let t=0;t<r.inChannels;++t)for(let v=0;v<r.outDepth;++v){const N=v*i-m;let T=N;for(;T<0;)T+=u;const C=Math.min(r.inDepth,p+N),$=n+v*k;for(let n=0;n<r.outHeight;++n){const i=n*o-g;let p=i;for(;p<0;)p+=c;const m=Math.min(r.inHeight,d+i),v=$+n*I;for(let n=0;n<r.outWidth;++n){const i=n*l-y;let o=i;for(;o<0;)o+=h;const d=Math.min(r.inWidth,f+i),g=v+n*S;let k=b,I=0,N=0;for(let n=T;n<C;n+=u){const r=x+n*s[1];for(let n=p;n<m;n+=c){const i=r+n*s[2];for(let n=o;n<d;n+=h){const r=e[i+n*s[3]+t];if("max"===a&&r>k?k=r:"avg"===a&&(I+=r,N++),isNaN(k))break}if(isNaN(k))break}if(isNaN(k))break}w[g+t]="avg"===a?I/N:k}}}}return x}const mb={kernelName:Ue,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{x:r}=t;ty(r,"avgPool");const{filterSize:a,strides:i,pad:o,dimRoundingMode:l}=s;Us.assert(Bl.eitherStridesOrDilationsAreOne(i,1),(()=>`Error in avgPool: Either strides or dilations must be 1. Got strides ${i} and dilations '1'`));const u=Bl.computePool2DInfo(r.shape,a,i,1,o,l);let c;if(1===u.filterWidth&&1===u.filterHeight&&Us.arraysEqual(u.inShape,u.outShape))c=iy({inputs:{x:r},backend:n});else{const e=n.data.get(r.dataId).values,t=Us.computeStrides(r.shape),s=pb(e,r.shape,r.dtype,t,u,"avg");c=n.makeTensorInfo(u.outShape,r.dtype,s.values)}return c}};const gb={kernelName:Ge,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{x:r}=t,{filterSize:a,strides:i,pad:o,dimRoundingMode:l,dataFormat:u}=s;ty(r,"avgPool3d");const c=Bl.computePool3DInfo(r.shape,a,i,1,o,l,u),h=fb(n.data.get(r.dataId).values,r.shape,r.dtype,Us.computeStrides(r.shape),c,"avg");return n.makeTensorInfo(h.shape,"float32",h.values)}};const yb={kernelName:He,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{dy:r,input:a}=t,{filterSize:i,strides:o,pad:l,dimRoundingMode:u}=s;ty([r,a],"avgPool3DGrad");const c=Bl.computePool3DInfo(a.shape,i,o,1,l,u),h=c.strideDepth,p=c.strideHeight,d=c.strideWidth,f=c.filterDepth,m=c.filterHeight,g=c.filterWidth,y=c.dilationDepth,b=c.dilationHeight,x=c.dilationWidth,w=c.effectiveFilterDepth,v=c.effectiveFilterHeight,k=c.effectiveFilterWidth,I=w-1-c.padInfo.front,S=k-1-c.padInfo.left,N=v-1-c.padInfo.top,T=Bo(a.shape,"float32"),C=1/(f*m*g),$=n.bufferSync(r);for(let e=0;e<c.batchSize;++e)for(let t=0;t<c.inChannels;++t)for(let n=0;n<c.inDepth;++n)for(let s=0;s<c.inHeight;++s)for(let r=0;r<c.inWidth;++r){const a=n-I,i=s-N,o=r-S;let l=0;for(let n=0;n<w;n+=y){const s=(a+n)/h;if(!(s<0||s>=c.outDepth||Math.floor(s)!==s))for(let n=0;n<v;n+=b){const r=(i+n)/p;if(!(r<0||r>=c.outHeight||Math.floor(r)!==r))for(let n=0;n<k;n+=x){const a=(o+n)/d;if(a<0||a>=c.outWidth||Math.floor(a)!==a)continue;l+=$.get(e,s,r,a,t)}}}T.set(l*C,e,n,s,r,t)}return n.makeTensorInfo(T.shape,T.dtype,T.values)}};const bb={kernelName:Ve,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{dy:r,input:a}=t,i=a;ty([r,a],"avgPoolGrad");const{filterSize:o,strides:l,pad:u}=s,c=Bl.computePool2DInfo(i.shape,o,l,1,u),h=c.strideHeight,p=c.strideWidth,d=c.filterHeight,f=c.filterWidth,m=c.dilationHeight,g=c.dilationWidth,y=c.effectiveFilterHeight,b=c.effectiveFilterWidth,x=b-1-c.padInfo.left,w=y-1-c.padInfo.top,v=Bo(i.shape,"float32"),k=1/(d*f),I=n.data.get(r.dataId).values,S=Bo(r.shape,"float32",I);for(let e=0;e<c.batchSize;++e)for(let t=0;t<c.inChannels;++t)for(let n=0;n<c.inHeight;++n)for(let s=0;s<c.inWidth;++s){const r=n-w,a=s-x;let i=0;for(let n=0;n<y;n+=m){const s=(r+n)/h;if(!(s<0||s>=c.outHeight||Math.floor(s)!==s))for(let n=0;n<b;n+=g){const r=(a+n)/p;if(r<0||r>=c.outWidth||Math.floor(r)!==r)continue;i+=S.get(e,s,r,t)}}v.set(i*k,e,n,s,t)}return n.makeTensorInfo(v.shape,v.dtype,v.values)}};const xb={kernelName:Ot,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{x:r,scale:a,offset:i,mean:o,variance:l}=t;Us.assert(o.shape.length===l.shape.length,(()=>"Batch normalization gradient requires mean and variance to have equal ranks.")),Us.assert(null==i||o.shape.length===i.shape.length,(()=>"Batch normalization gradient requires mean and offset to have equal ranks.")),Us.assert(null==a||o.shape.length===a.shape.length,(()=>"Batch normalization gradient requires mean and scale to have equal ranks.")),ty([r,o,l,a,i],"batchNorm");let{varianceEpsilon:u}=s;null==u&&(u=.001);const c=n.data.get(r.dataId).values,h=n.data.get(o.dataId).values,p=n.data.get(l.dataId).values,d=a?n.data.get(a.dataId).values:new Float32Array([1]),f=i?n.data.get(i.dataId).values:new Float32Array([0]),m=new Float32Array(c.length),g=f.length,y=d.length,b=p.length,x=h.length;let w=0,v=0,k=0,I=0;for(let e=0;e<c.length;++e)m[e]=f[w++]+(c[e]-h[v++])*d[k++]/Math.sqrt(p[I++]+u),w>=g&&(w=0),v>=x&&(v=0),k>=y&&(k=0),I>=b&&(I=0);return n.makeTensorInfo(r.shape,r.dtype,m)}};function wb(e,t,n,s,r){const a=yl.isSliceContinous(s,t,n),i=Us.sizeFromShape(n),o=Us.computeStrides(s);if(a){const n=yl.computeFlatOffset(t,o);return"string"===r?e.slice(n,n+i):e.subarray(n,n+i)}const l=Bo(s,r,"string"===r?Bl.fromUint8ToStringArray(e):e),u=Bo(n,r);for(let e=0;e<u.size;++e){const n=u.indexToLoc(e),s=n.map(((e,n)=>e+t[n]));u.set(l.get(...s),...n)}return"string"===r?Bl.fromStringArrayToUint8(u.values):u.values}function vb(e){const{inputs:t,backend:n,attrs:s}=e,{x:r}=t,{begin:a,size:i}=s;ty(r,"slice");const[o,l]=yl.parseSliceParams(r,a,i);yl.assertParamsValid(r,o,l);const u=wb(n.data.get(r.dataId).values,o,l,r.shape,r.dtype);return n.makeTensorInfo(l,r.dtype,u)}const kb={kernelName:jn,backendName:"cpu",kernelFunc:vb};const Ib={kernelName:qe,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{x:r}=t,{blockShape:a,crops:i}=s;ty([r],"batchToSpaceND");const o=a.reduce(((e,t)=>e*t)),l=Bl.getReshaped(r.shape,a,o),u=Bl.getPermuted(l.length,a.length),c=Bl.getReshapedPermuted(r.shape,a,o),h=Bl.getSliceBeginCoords(i,a.length),p=Bl.getSliceSize(c,i,a.length),d=My({inputs:{x:r},backend:n,attrs:{shape:l}}),f=Xy({inputs:{x:d},backend:n,attrs:{perm:u}}),m=My({inputs:{x:f},backend:n,attrs:{shape:c}}),g=vb({inputs:{x:m},backend:n,attrs:{begin:h,size:p}});return n.disposeIntermediateTensorInfo(d),n.disposeIntermediateTensorInfo(f),n.disposeIntermediateTensorInfo(m),g}};function Sb(e,t,n,s,r){const a=Us.sizeFromShape(s),i=Us.makeZerosTypedArray(r,n);for(let n=0;n<e.length;n++){const s=e[n];if(s<0)throw new Error("Input x must be non-negative!");s>=r||(i[s]+=a>0?t[n]:1)}return i}function Nb(e,t,n,s=!1){const r=e.shape[0],a=e.shape[1],i=Bo([r,n],t.dtype);for(let o=0;o<r;o++)for(let r=0;r<a;r++){const a=e.get(o,r);if(a<0)throw new Error("Input x must be non-negative!");a>=n||(s?i.set(1,o,a):t.size>0?i.set(i.get(o,a)+t.get(o,r),o,a):i.set(i.get(o,a)+1,o,a))}return i}const Tb={kernelName:Ke,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{x:r,weights:a}=t,{size:i}=s,o=Sb(n.data.get(r.dataId).values,n.data.get(a.dataId).values,a.dtype,a.shape,i);return n.makeTensorInfo([i],a.dtype,o)}};const Cb={kernelName:Xe,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n}=e,{s0:s,s1:r}=t,a=n.data.get(s.dataId).values,i=n.data.get(r.dataId).values,o=Bl.assertAndGetBroadcastShape(Array.from(a),Array.from(i));return n.makeTensorInfo([o.length],"int32",Int32Array.from(o))}},$b=by((e=>Math.ceil(e))),Eb=sy(Ze,$b),Ab={kernelName:Ze,backendName:"cpu",kernelFunc:Eb},Rb=ny(Je,((e,t)=>{const n=t;return e>n.clipValueMax?n.clipValueMax:e<n.clipValueMin?n.clipValueMin:e})),Fb={kernelName:Je,backendName:"cpu",kernelFunc:Rb},Db={kernelName:et,backendName:"cpu",kernelFunc:e=>{const{x:t}=e.inputs,n=e.backend,s=new Float32Array(Us.sizeFromShape(t.shape)),r=n.data.get(t.dataId),a=r.complexTensorInfos.real,i=r.complexTensorInfos.imag,o=n.data.get(a.dataId).values,l=n.data.get(i.dataId).values;for(let e=0;e<o.length;e++){const t=o[e],n=l[e];s[e]=Math.hypot(t,n)}return n.makeOutput(s,t.shape,"float32")}};function _b(e,t,n,s){const r=Us.getArrayFromDType(n,Us.sizeFromShape(t));if(s&&"string"!==n){let t=0;e.forEach((e=>{const n=Us.sizeFromShape(e.shape);r.set(e.vals,t),t+=n}))}else{let s=0;e.forEach((e=>{const a="string"===n?Bl.fromUint8ToStringArray(e.vals):e.vals;let i=0;for(let n=0;n<e.shape[0];++n){const o=n*t[1]+s;for(let t=0;t<e.shape[1];++t)r[o+t]=a[i++]}s+=e.shape[1]}))}return r}function Ob(e){const{inputs:t,backend:n}=e,{input:s}=t,r=n.data.get(s.dataId).complexTensorInfos.imag,a=n.data.get(r.dataId).values;return n.makeTensorInfo(r.shape,r.dtype,a)}const Mb={kernelName:Ut,backendName:"cpu",kernelFunc:Ob};function Lb(e){const{inputs:t,backend:n,attrs:s}=e,{axis:r}=s,a=Us.parseAxisParam(r,t[0].shape)[0];let i=Bl.computeOutShape(t.map((e=>e.shape)),a);if(0===Us.sizeFromShape(i))return n.makeTensorInfo(i,t[0].dtype,[]);const o=t.filter((e=>Us.sizeFromShape(e.shape)>0));if(1===o.length)return iy({inputs:{x:o[0]},backend:n});const l=o.map((e=>e.shape));if(Bl.assertParamsConsistent(l,a),"complex64"===o[0].dtype){const e=o.map((e=>Ty({inputs:{input:e},backend:n}))),t=o.map((e=>Ob({inputs:{input:e},backend:n}))),s=Lb({inputs:e,backend:n,attrs:{axis:a}}),r=Lb({inputs:t,backend:n,attrs:{axis:a}}),i=Iy({inputs:{real:s,imag:r},backend:n});return e.forEach((e=>n.disposeIntermediateTensorInfo(e))),t.forEach((e=>n.disposeIntermediateTensorInfo(e))),n.disposeIntermediateTensorInfo(s),n.disposeIntermediateTensorInfo(r),i}const u=o.map((e=>{const t=Us.sizeFromShape(e.shape.slice(a));return My({inputs:{x:e},backend:n,attrs:{shape:[-1,t]}})})),c=u.map((e=>({vals:n.data.get(e.dataId).values,shape:e.shape})));i=Bl.computeOutShape(u.map((e=>e.shape)),1);const h=1===u[0].shape[0],p=_b(c,i,t[0].dtype,h),d=Bl.computeOutShape(o.map((e=>e.shape)),a),f=n.makeTensorInfo(d,t[0].dtype,p);return u.forEach((e=>n.disposeIntermediateTensorInfo(e))),f}const zb={kernelName:tt,backendName:"cpu",kernelFunc:Lb};function Bb(e){const{inputs:t,backend:n,attrs:s}=e,{x:r,filter:a}=t,{strides:i,pad:o,dataFormat:l,dilations:u,dimRoundingMode:c}=s;ty([r,a],"conv2d");const h=Bl.convertConv2DDataFormat(l),p=Bl.computeConv2DInfo(r.shape,a.shape,i,u,o,c,!1,h),d=p.filterHeight,f=p.filterWidth,m=p.dilationHeight,g=p.dilationWidth,y=p.padInfo.left,b=p.padInfo.top,x="channelsLast"===p.dataFormat,w=new Ur(p.outShape,r.dtype),v=Us.computeStrides(r.shape),k=Us.computeStrides(a.shape),I=v[0],S=x?v[1]:v[2],N=x?v[2]:1,T=x?1:v[1],C=w.strides[0],$=x?w.strides[1]:w.strides[2],E=x?w.strides[2]:1,A=x?1:w.strides[1],R=n.data.get(r.dataId).values,F=n.data.get(a.dataId).values,D=w.values;for(let e=0;e<p.batchSize;++e){const t=e*I,n=e*C;for(let e=0;e<p.outHeight;++e){const s=n+e*$,r=e*p.strideHeight-b;for(let e=0;e<d;++e){const n=r+e*m;if(n<0||n>=p.inHeight)continue;const a=e*k[0],i=t+n*S;for(let e=0;e<p.outWidth;++e){const t=s+e*E,n=e*p.strideWidth-y;for(let e=0;e<f;++e){const s=n+e*g;if(s<0||s>=p.inWidth)continue;const r=i+s*N;let o=a+e*k[1];for(let e=0;e<p.inChannels;++e){const n=R[r+e*T];for(let e=0;e<p.outChannels;++e)D[t+e*A]+=n*F[o+e];o+=p.outChannels}}}}}}return n.makeTensorInfo(w.shape,w.dtype,D)}const Pb={kernelName:nt,backendName:"cpu",kernelFunc:Bb};const Wb={kernelName:st,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{x:r,dy:a}=t,{strides:i,pad:o,dataFormat:l,dimRoundingMode:u,filterShape:c}=s;ty([r,a],"conv2dBackpropFilter");const h=Bl.convertConv2DDataFormat(l),p=Bl.computeConv2DInfo(r.shape,c,i,1,o,u,!1,h),{strideHeight:d,strideWidth:f,filterHeight:m,filterWidth:g}=p,y="channelsLast"===p.dataFormat,b=new Ur(p.filterShape,"float32"),x=p.padInfo.left,w=p.padInfo.top,v=n.data.get(r.dataId).values,k=n.data.get(a.dataId).values,I=new Ur(r.shape,r.dtype,v),S=new Ur(a.shape,a.dtype,k);for(let e=0;e<m;++e){const t=Math.max(0,Math.ceil((w-e)/d)),n=Math.min(p.outHeight,(p.inHeight+w-e)/d);for(let s=0;s<g;++s){const r=Math.max(0,Math.ceil((x-s)/f)),a=Math.min(p.outWidth,(p.inWidth+x-s)/f);for(let i=0;i<p.inChannels;++i)for(let o=0;o<p.outChannels;++o){let l=0;for(let u=0;u<p.batchSize;++u)for(let c=t;c<n;++c){const t=e+c*d-w;for(let e=r;e<a;++e){const n=s+e*f-x;l+=y?I.get(u,t,n,i)*S.get(u,c,e,o):I.get(u,i,t,n)*S.get(u,o,c,e)}}b.set(l,e,s,i,o)}}}return n.makeTensorInfo(b.shape,b.dtype,b.values)}};const Ub={kernelName:rt,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{dy:r,filter:a}=t,{inputShape:i,strides:o,pad:l,dataFormat:u,dimRoundingMode:c}=s;ty([r,a],"conv2dBackpropInput");const h=Us.computeStrides(a.shape),p=Us.computeStrides(r.shape);let d=Bl.convertConv2DDataFormat(u);const f=Bl.computeConv2DInfo(i,a.shape,o,1,l,c,!1,d),m=new Ur(f.inShape,"float32"),g=m.values,y=n.data.get(r.dataId).values,b=n.data.get(a.dataId).values,[x,w,v]=h,{batchSize:k,filterHeight:I,filterWidth:S,inChannels:N,inHeight:T,inWidth:C,outChannels:$,outHeight:E,outWidth:A,strideHeight:R,strideWidth:F}=f;d=f.dataFormat;const D=I-1-f.padInfo.top,_=S-1-f.padInfo.left,O="channelsLast"===d,M=m.strides[0],L=O?m.strides[1]:m.strides[2],z=O?m.strides[2]:1,B=O?1:m.strides[1],P=p[0],W=O?p[1]:p[2],U=O?p[2]:1,V=O?1:p[1];for(let e=0;e<k;++e)for(let t=0;t<N;++t)for(let n=0;n<T;++n){const s=n-D,r=Math.max(0,Math.ceil(s/R)),a=Math.min(E,(I+s)/R);for(let i=0;i<C;++i){const o=i-_,l=Math.max(0,Math.ceil(o/F)),u=Math.min(A,(S+o)/F);let c=0;for(let n=r;n<a;++n){const r=n*R-s;for(let s=l;s<u;++s){const a=P*e+W*n+U*s,i=x*(I-1-r)+w*(S-1-(s*F-o))+v*t;for(let e=0;e<$;++e){c+=y[a+V*e]*b[i+e]}}}g[M*e+L*n+z*i+B*t]=c}}return n.makeTensorInfo(m.shape,m.dtype,m.values)}};const Vb={kernelName:at,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{x:r,filter:a}=t,{strides:i,pad:o,dilations:l}=s;ty([r,a],"conv3d");const u=Bl.computeConv3DInfo(r.shape,a.shape,i,l,o),{filterDepth:c,filterHeight:h,filterWidth:p,dilationDepth:d,dilationHeight:f,dilationWidth:m,padInfo:g}=u,y=g.front,b=g.left,x=g.top,w=new Ur(u.outShape,r.dtype),v=n.data.get(r.dataId).values,k=n.data.get(a.dataId).values,I=w.values,S=Us.computeStrides(r.shape),N=Us.computeStrides(a.shape);for(let e=0;e<u.batchSize;++e){const t=e*S[0],n=e*w.strides[0];for(let e=0;e<u.outDepth;++e){const s=n+e*w.strides[1],r=e*u.strideDepth-y;for(let e=0;e<c;++e){const n=r+e*d;if(n<0||n>=u.inDepth)continue;const a=e*N[0],i=t+n*S[1];for(let e=0;e<u.outHeight;++e){const t=s+e*w.strides[2],n=e*u.strideHeight-x;for(let e=0;e<h;++e){const s=n+e*f;if(s<0||s>=u.inHeight)continue;const r=a+e*N[1],o=i+s*S[2];for(let e=0;e<u.outWidth;++e){const n=t+e*u.outChannels,s=e*u.strideWidth-b;for(let e=0;e<p;++e){const t=s+e*m;if(t<0||t>=u.inWidth)continue;const a=r+e*N[2],i=o+t*u.inChannels;let l=a;for(let e=0;e<u.inChannels;++e){const t=v[i+e];for(let e=0;e<u.outChannels;++e)I[n+e]+=t*k[l+e];l+=u.outChannels}}}}}}}}return n.makeTensorInfo(w.shape,w.dtype,w.values)}};const Gb={kernelName:it,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{x:r,dy:a}=t,{strides:i,pad:o,filterShape:l}=s;ty([r,a],"conv3dBackpropFilterV2");const u=Us.computeStrides(r.shape),c=Us.computeStrides(a.shape),h=Bl.computeConv3DInfo(r.shape,l,i,1,o),p=h.strideDepth,d=h.strideHeight,f=h.strideWidth,m=h.filterDepth,g=h.filterHeight,y=h.filterWidth,b=new Ur(h.filterShape,"float32"),x=b.values,[w,v,k,I]=b.strides,S=n.data.get(a.dataId).values,[N,T,C,$]=c,E=n.data.get(r.dataId).values,[A,R,F,D]=u,_=h.padInfo.front,O=h.padInfo.left,M=h.padInfo.top;for(let e=0;e<m;++e){const t=Math.max(0,Math.ceil((_-e)/p)),n=Math.min(h.outDepth,(h.inDepth+_-e)/p),s=e*w;for(let r=0;r<g;++r){const a=Math.max(0,Math.ceil((M-r)/d)),i=Math.min(h.outHeight,(h.inHeight+M-r)/d),o=r*v+s;for(let s=0;s<y;++s){const l=Math.max(0,Math.ceil((O-s)/f)),u=Math.min(h.outWidth,(h.inWidth+O-s)/f),c=s*k+o;for(let o=0;o<h.inChannels;++o){const m=o*I+c;for(let c=0;c<h.outChannels;++c){let g=0;for(let m=0;m<h.batchSize;++m){const h=m*A,y=m*N;for(let m=t;m<n;++m){const t=(e+m*p-_)*R+h,n=m*T+y;for(let e=a;e<i;++e){const a=(r+e*d-M)*F+t,i=e*C+n;for(let e=l;e<u;++e){const t=e*$+i;g+=E[(s+e*f-O)*D+a+o]*S[t+c]}}}}x[m+c]=g}}}}}return n.makeTensorInfo(b.shape,b.dtype,b.values)}};const Hb={kernelName:ot,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{dy:r,filter:a}=t,{pad:i,strides:o,inputShape:l}=s;ty([r],"conv3dBackpropInputV2");const u=Us.computeStrides(r.shape),c=Us.computeStrides(a.shape),h=Bl.computeConv3DInfo(l,a.shape,o,1,i),p=new Ur(h.inShape,"float32"),d=p.values,[f,m,g,y]=p.strides,b=n.data.get(r.dataId).values,[x,w,v,k]=u,I=n.data.get(a.dataId).values,[S,N,T,C]=c,{batchSize:$,filterDepth:E,filterHeight:A,filterWidth:R,inChannels:F,inDepth:D,inHeight:_,inWidth:O,outChannels:M,outDepth:L,outHeight:z,outWidth:B,strideDepth:P,strideHeight:W,strideWidth:U}=h,V=E-1-h.padInfo.front,G=A-1-h.padInfo.top,H=R-1-h.padInfo.left;for(let e=0;e<$;++e)for(let t=0;t<F;++t)for(let n=0;n<D;++n){const s=n-V,r=Math.max(0,Math.ceil(s/P)),a=Math.min(L,(E+s)/P);for(let i=0;i<_;++i){const o=i-G,l=Math.max(0,Math.ceil(o/W)),u=Math.min(z,(A+o)/W);for(let c=0;c<O;++c){const h=c-H,p=Math.max(0,Math.ceil(h/U)),$=Math.min(B,(R+h)/U);let F=0;for(let n=r;n<a;++n){const r=n*P-s;for(let s=l;s<u;++s){const a=s*W-o;for(let i=p;i<$;++i){const o=x*e+w*n+v*s+k*i,l=S*(E-1-r)+N*(A-1-a)+T*(R-1-(i*U-h))+C*t;for(let e=0;e<M;++e){F+=b[o+e]*I[l+e]}}}}d[f*e+m*n+g*i+y*c+t]=F}}}return n.makeTensorInfo(p.shape,p.dtype,p.values)}},jb=ny(lt,(e=>Math.cos(e))),qb={kernelName:lt,backendName:"cpu",kernelFunc:jb},Kb=ny(ut,(e=>Math.cosh(e))),Xb={kernelName:ut,backendName:"cpu",kernelFunc:Kb};const Yb={kernelName:ht,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{image:r,boxes:a,boxInd:i}=t,{cropSize:o,method:l,extrapolationValue:u}=s,[c,h,p,d]=r.shape,f=a.shape[0],[m,g]=o,y=Bo([f,m,g,d],"float32"),b=n.data.get(a.dataId).values,x=n.data.get(i.dataId).values,w=n.data.get(r.dataId).values,v=Us.computeStrides(r.shape),k=Us.computeStrides(y.shape);for(let e=0;e<f;e++){const t=4*e,n=b[t],s=b[t+1],r=b[t+2],a=b[t+3],i=x[e];if(i>=c)continue;const o=m>1?(r-n)*(h-1)/(m-1):0,f=g>1?(a-s)*(p-1)/(g-1):0;for(let t=0;t<m;t++){const c=m>1?n*(h-1)+t*o:.5*(n+r)*(h-1);if(c<0||c>h-1)for(let n=0;n<g;n++)for(let s=0;s<d;s++){const r=s+n*k[2]+t*k[1]+e*k[0];y.values[r]=u}else if("bilinear"===l){const n=Math.floor(c),r=Math.ceil(c),o=c-n;for(let l=0;l<g;l++){const c=g>1?s*(p-1)+l*f:.5*(s+a)*(p-1);if(c<0||c>p-1){for(let n=0;n<d;n++){const s=n+l*k[2]+t*k[1]+e*k[0];y.values[s]=u}continue}const h=Math.floor(c),m=Math.ceil(c),b=c-h;for(let s=0;s<d;s++){let a=s+h*v[2]+n*v[1]+i*v[0];const u=w[a];a=s+m*v[2]+n*v[1]+i*v[0];const c=w[a];a=s+h*v[2]+r*v[1]+i*v[0];const p=w[a];a=s+m*v[2]+r*v[1]+i*v[0];const d=u+(c-u)*b,f=p+(w[a]-p)*b;a=s+l*k[2]+t*k[1]+e*k[0],y.values[a]=d+(f-d)*o}}}else for(let n=0;n<g;++n){const r=g>1?s*(p-1)+n*f:.5*(s+a)*(p-1);if(r<0||r>p-1){for(let s=0;s<d;s++){const r=s+n*k[2]+t*k[1]+e*k[0];y.values[r]=u}continue}const o=Math.round(r),l=Math.round(c);for(let s=0;s<d;s++){const r=s+o*v[2]+l*v[1]+i*v[0],a=s+n*k[2]+t*k[1]+e*k[0];y.values[a]=w[r]}}}}return n.makeTensorInfo(y.shape,y.dtype,y.values)}};const Zb={kernelName:ct,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{x:r}=t,{axis:a,exclusive:i,reverse:o}=s;ty(r,"cumsum");const l=Bl.getAxesPermutation([a],r.shape.length);let u=r;null!=l&&(u=Xy({inputs:{x:r},backend:n,attrs:{perm:l}}));const c=Bl.getInnerMostAxes(1,r.shape.length)[0];if(c!==u.shape.length-1)throw new Error(`backend.cumsum in CPU expects an inner-most axis=${u.shape.length-1} but got axis=${c}`);const h=ia(u.dtype,"int32"),p=Us.makeZerosTypedArray(Us.sizeFromShape(u.shape),h),d=n.data.get(u.dataId).values,f=u.shape[u.shape.length-1],m=o?(e,t)=>e+f-t-1:(e,t)=>e+t;for(let e=0;e<d.length;e+=f)for(let t=0;t<f;t++){const n=m(e,t);if(0===t)p[n]=i?0:d[n];else{const s=m(e,t-1);p[n]=i?d[s]+p[s]:d[n]+p[s]}}const g=n.makeTensorInfo(u.shape,h,p);if(null!=l){const e=Xy({inputs:{x:g},backend:n,attrs:{perm:Bl.getUndoAxesPermutation(l)}});return n.disposeIntermediateTensorInfo(g),n.disposeIntermediateTensorInfo(u),e}return g}};const Jb={kernelName:pt,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{x:r,weights:a}=t,{size:i,binaryOutput:o}=s;if(1===r.shape.length){const e=Sb(n.data.get(r.dataId).values,n.data.get(a.dataId).values,a.dtype,a.shape,i);return n.makeTensorInfo([i],a.dtype,e)}if(2===r.shape.length){const e=Nb(n.bufferSync(r),n.bufferSync(a),i,o);return n.makeTensorInfo(e.shape,a.dtype,e.values)}throw new Error(`Error in denseBincount: input must be at most rank 2, but got rank${r.shape.length}.`)}};const Qb={kernelName:dt,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{x:r}=t,{blockSize:a,dataFormat:i}=s;Us.assert("NHWC"===i,(()=>`Only NHWC dataFormat supported on CPU for depthToSpace. Got ${i}`));const o=r.shape[0],l=r.shape[1],u=r.shape[2],c=r.shape[3],h=l*a,p=u*a,d=c/(a*a),f=n.data.get(r.dataId).values,m=new Float32Array(o*h*p*d);let g=0;for(let e=0;e<o;++e)for(let t=0;t<h;++t){const n=Math.floor(t/a),s=t%a;for(let t=0;t<p;++t){const r=Math.floor(t/a),i=(s*a+t%a)*d;for(let t=0;t<d;++t){const s=t+i+c*(r+u*(n+l*e));m[g++]=f[s]}}}return n.makeTensorInfo([o,h,p,d],r.dtype,m)}};function ex(e){const{inputs:t,backend:n,attrs:s}=e,{x:r,filter:a}=t,{strides:i,pad:o,dilations:l,dimRoundingMode:u}=s;ty([r,a],"depthwiseConv2DNative");const c=Us.computeStrides(r.shape),h=Us.computeStrides(a.shape);let p=l;null==p&&(p=[1,1]),Us.assert(Bl.eitherStridesOrDilationsAreOne(i,p),(()=>`Error in depthwiseConv2d: Either strides or dilations must be 1. Got strides ${i} and dilations '${p}'`));const d=Bl.computeConv2DInfo(r.shape,a.shape,i,p,o,u,!0),{filterHeight:f,filterWidth:m,dilationHeight:g,dilationWidth:y,padInfo:b}=d,x=b.left,w=b.top,v=d.outChannels/d.inChannels,k=new Ur(d.outShape,r.dtype),I=n.data.get(r.dataId).values,S=n.data.get(a.dataId).values,N=k.values;for(let e=0;e<d.batchSize;++e){const t=e*c[0],n=e*k.strides[0];for(let e=0;e<d.outHeight;++e){const s=n+e*k.strides[1],r=e*d.strideHeight-w;for(let e=0;e<f;++e){const n=r+e*g;if(n<0||n>=d.inHeight)continue;const a=e*h[0],i=t+n*c[1];for(let e=0;e<d.outWidth;++e){const t=s+e*k.strides[2],n=e*d.strideWidth-x;for(let e=0;e<m;++e){const s=n+e*y;if(s<0||s>=d.inWidth)continue;const r=a+e*h[1],o=i+s*d.inChannels;let l=t,u=r;for(let e=0;e<d.inChannels;++e){const t=I[o+e];for(let e=0;e<v;++e)N[l+e]+=t*S[u+e];l+=v,u+=v}}}}}}return n.makeTensorInfo(k.shape,k.dtype,k.values)}const tx={kernelName:ft,backendName:"cpu",kernelFunc:ex};const nx={kernelName:mt,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{x:r,dy:a}=t,{strides:i,dilations:o,pad:l,dimRoundingMode:u,filterShape:c}=s;ty([r,a],"depthwiseConv2dNativeBackpropFilter");const h=Bl.computeConv2DInfo(r.shape,c,i,o,l,u,!0),{strideHeight:p,strideWidth:d,filterHeight:f,filterWidth:m}=h,g=new Ur(h.filterShape,"float32"),y=h.padInfo.left,b=h.padInfo.top,x=h.outChannels/h.inChannels,w=n.data.get(r.dataId).values,v=new Ur(r.shape,r.dtype,w),k=n.data.get(a.dataId).values,I=new Ur(a.shape,a.dtype,k);for(let e=0;e<f;++e){const t=Math.max(0,Math.ceil((b-e)/p)),n=Math.min(h.outHeight,(h.inHeight+b-e)/p);for(let s=0;s<m;++s){const r=Math.max(0,Math.ceil((y-s)/d)),a=Math.min(h.outWidth,(h.inWidth+y-s)/d);for(let i=0;i<h.outChannels;++i){const o=Math.trunc(i/x),l=i%x;let u=0;for(let l=0;l<h.batchSize;++l)for(let c=t;c<n;++c){const t=e+c*p-b;for(let e=r;e<a;++e){const n=s+e*d-y;u+=v.get(l,t,n,o)*I.get(l,c,e,i)}}g.set(u,e,s,o,l)}}}return n.makeTensorInfo(g.shape,g.dtype,g.values)}};const sx={kernelName:gt,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{dy:r,filter:a}=t,{strides:i,dilations:o,pad:l,dimRoundingMode:u,inputShape:c}=s;ty([r,a],"depthwiseConv2DNativeBackpropInput");const h=Us.computeStrides(r.shape),p=Us.computeStrides(a.shape),d=Bl.computeConv2DInfo(c,a.shape,i,o,l,u,!0),f=new Ur(d.inShape,"float32"),m=f.values,[g,y,b]=f.strides,x=n.data.get(r.dataId).values,[w,v,k]=h,I=n.data.get(a.dataId).values,[S,N,T]=p,{batchSize:C,filterHeight:$,filterWidth:E,inChannels:A,inHeight:R,inWidth:F,outChannels:D,outHeight:_,outWidth:O,strideHeight:M,strideWidth:L}=d,z=$-1-d.padInfo.top,B=E-1-d.padInfo.left,P=D/A;for(let e=0;e<C;++e)for(let t=0;t<A;++t)for(let n=0;n<R;++n){const s=n-z,r=Math.max(0,Math.ceil(s/M)),a=Math.min(_,($+s)/M);for(let i=0;i<F;++i){const o=i-B,l=Math.max(0,Math.ceil(o/L)),u=Math.min(O,(E+o)/L);let c=0;for(let n=r;n<a;++n){const r=n*M-s;for(let s=l;s<u;++s){const a=w*e+v*n+k*s,i=S*($-1-r)+N*(E-1-(s*L-o))+T*t;for(let e=0;e<P;++e){c+=x[a+(t*P+e)]*I[i+e]}}}m[g*e+y*n+b*i+t]=c}}return n.makeTensorInfo(f.shape,f.dtype,f.values)}};const rx={kernelName:yt,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n}=e,{x:s}=t,r=Us.sizeFromShape(s.shape),a=n.data.get(s.dataId).values,i=Bo([r,r],s.dtype),o=i.values;for(let e=0;e<a.length;e++)o[e*r+e]=a[e];const l=[...s.shape,...s.shape];return n.makeTensorInfo(l,i.dtype,i.values)}},ax={kernelName:bt,backendName:"cpu",kernelFunc:({inputs:e,backend:t,attrs:n})=>{const{x:s,filter:r}=e,{strides:a,pad:i,dilations:o}=n,l=t,u=l.data.get(s.dataId).values,c=s.shape.length,h=l.data.get(r.dataId).values,p=r.shape.length,{batchSize:d,inHeight:f,inWidth:m,inChannels:g,outHeight:y,outWidth:b,padInfo:x,strideHeight:w,strideWidth:v,filterHeight:k,filterWidth:I,dilationHeight:S,dilationWidth:N,outShape:T}=Bl.computeDilation2DInfo(s.shape,r.shape,a,i,"NHWC",o),C=Us.sizeFromShape(T),$=T.length,E=Us.getArrayFromDType(s.dtype,C);for(let e=0;e<d;++e)for(let t=0;t<y;++t){const n=t*w-x.top;for(let a=0;a<b;++a){const i=a*v-x.left;for(let o=0;o<g;++o){let l=Number.MIN_SAFE_INTEGER;for(let t=0;t<k;++t){const a=n+t*S;if(a>=0&&a<f)for(let n=0;n<I;++n){const d=i+n*N;if(d>=0&&d<m){const i=Us.locToIndex([e,a,d,o],c,Us.computeStrides(s.shape)),f=Us.locToIndex([t,n,o],p,Us.computeStrides(r.shape)),m=u[i]+h[f];m>l&&(l=m)}}}E[Us.locToIndex([e,t,a,o],$,Us.computeStrides(T))]=l}}}return{dataId:l.write(Us.toTypedArray(E,s.dtype),T,s.dtype),shape:T,dtype:s.dtype}}},ix={kernelName:wt,backendName:"cpu",kernelFunc:({inputs:e,backend:t,attrs:n})=>{const{x:s,filter:r,dy:a}=e,{strides:i,pad:o,dilations:l}=n,u=t,c=Us.toNestedArray(s.shape,u.data.get(s.dataId).values),h=Us.toNestedArray(r.shape,u.data.get(r.dataId).values),{batchSize:p,inHeight:d,inWidth:f,inChannels:m,outHeight:g,outWidth:y,padInfo:b,strideHeight:x,strideWidth:w,filterHeight:v,filterWidth:k,dilationHeight:I,dilationWidth:S,outShape:N}=Bl.computeDilation2DInfo(s.shape,r.shape,i,o,"NHWC",l);Us.assert(a.rank===N.length,(()=>`Error in Dilation2DBackpropFilter, dy must have the same rank as output ${N.length}, but got ${a.rank}`));const T=Us.toNestedArray(N,u.data.get(a.dataId).values),C=Us.makeZerosNestedTypedArray(r.shape,r.dtype);for(let e=0;e<p;++e)for(let t=0;t<g;++t){const n=t*x-b.top;for(let s=0;s<y;++s){const r=s*w-b.left;for(let a=0;a<m;++a){let i=Number.MIN_SAFE_INTEGER,o=0,l=0;for(let t=0;t<v;++t){const s=n+t*I;if(s>=0&&s<d)for(let n=0;n<k;++n){const u=r+n*S;if(u>=0&&u<f){const r=c[e][s][u][a]+h[t][n][a];r>i&&(i=r,o=t,l=n)}}}C[o][l][a]+=T[e][t][s][a]}}}return{dataId:u.write(Us.toTypedArray(C,s.dtype),r.shape,r.dtype),shape:r.shape,dtype:r.dtype}}},ox={kernelName:xt,backendName:"cpu",kernelFunc:({inputs:e,backend:t,attrs:n})=>{const{x:s,filter:r,dy:a}=e,{strides:i,pad:o,dilations:l}=n,u=t,c=Us.toNestedArray(s.shape,u.data.get(s.dataId).values),h=Us.toNestedArray(r.shape,u.data.get(r.dataId).values),{batchSize:p,inHeight:d,inWidth:f,inChannels:m,outHeight:g,outWidth:y,padInfo:b,strideHeight:x,strideWidth:w,filterHeight:v,filterWidth:k,dilationHeight:I,dilationWidth:S,outShape:N}=Bl.computeDilation2DInfo(s.shape,r.shape,i,o,"NHWC",l);Us.assert(a.rank===N.length,(()=>`Error in Dilation2DBackpropInput, dy must have the same rank as output ${N.length}, but got ${a.rank}`));const T=Us.toNestedArray(N,u.data.get(a.dataId).values),C=Us.makeZerosNestedTypedArray(s.shape,s.dtype);for(let e=0;e<p;++e)for(let t=0;t<g;++t){const n=t*x-b.top;for(let s=0;s<y;++s){const r=s*w-b.left;for(let a=0;a<m;++a){let i=Number.MIN_SAFE_INTEGER,o=n<0?0:n,l=r<0?0:r;for(let t=0;t<v;++t){const s=n+t*I;if(s>=0&&s<d)for(let n=0;n<k;++n){const u=r+n*S;if(u>=0&&u<f){const r=c[e][s][u][a]+h[t][n][a];r>i&&(i=r,o=s,l=u)}}}C[e][o][l][a]+=T[e][t][s][a]}}}return{dataId:u.write(Us.toTypedArray(C,s.dtype),s.shape,s.dtype),shape:s.shape,dtype:s.dtype}}},lx=cy(((e,t)=>e*t)),ux=Ry(((e,t,n,s)=>({real:e*n-t*s,imag:e*s+t*n}))),cx=Ay(yn,lx,ux),hx={kernelName:yn,backendName:"cpu",kernelFunc:cx};function px(e){const{inputs:t,backend:n,attrs:s}=e,{x:r}=t,{axis:a,keepDims:i}=s;let o;ty(r,"sum"),o="bool"===r.dtype?$y({inputs:{x:r},backend:n,attrs:{dtype:"int32"}}):iy({inputs:{x:r},backend:n});const l=o.shape.length,u=Us.parseAxisParam(a,o.shape),c=Bl.getAxesPermutation(u,l);let h=u,p=o;null!=c&&(p=Xy({inputs:{x:o},backend:n,attrs:{perm:c}}),h=Bl.getInnerMostAxes(h.length,l)),Bl.assertAxesAreInnerMostDims("sum",h,p.shape.length);const[d,f]=Bl.computeOutAndReduceShapes(p.shape,h);let m=Ny(n,d,Bl.upcastType(p.dtype,"int32"));const g=Us.sizeFromShape(f),y=n.data.get(m.dataId).values,b=n.data.get(p.dataId).values;for(let e=0;e<y.length;++e){const t=e*g;let n=0;for(let e=0;e<g;++e)n+=b[t+e];y[e]=n}if(i){const e=m;m=My({inputs:{x:m},backend:n,attrs:{shape:Bl.expandShapeToKeepDim(m.shape,u)}}),n.disposeIntermediateTensorInfo(e)}return n.disposeIntermediateTensorInfo(o),null!=c&&n.disposeIntermediateTensorInfo(p),m}const dx={kernelName:Qn,backendName:"cpu",kernelFunc:px};const fx={kernelName:kt,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{equation:r}=s,a=t,{allDims:i,summedDims:o,idDims:l}=Bl.decodeEinsumEquation(r,a.length);Bl.checkEinsumDimSizes(i.length,l,a);const{path:u,steps:c}=Bl.getEinsumComputePath(o,l),h=c.length;let p=null,d=i.length;const f=[];for(let e=0;e<h;++e){for(const t of c[e]){const{permutationIndices:e,expandDims:s}=Bl.getEinsumPermutation(d,l[t]);let r;Bl.isIdentityPermutation(e)?r=a[t]:(r=Xy({inputs:{x:a[t]},backend:n,attrs:{perm:e}}),f.push(r));const i=r.shape.slice();for(let e=0;e<s.length;++e)i.splice(s[e],0,1);Us.arraysEqual(r.shape,i)||(r=My({inputs:{x:r},backend:n,attrs:{shape:i}}),f.push(r)),null===p?p=r:(p=cx({inputs:{a:r,b:p},backend:n}),f.push(p))}e<h-1&&(u[e]>=0&&(p=px({inputs:{x:p},backend:n,attrs:{axis:u[e]-(i.length-d),keepDims:!1}}),f.push(p)),d--)}for(const e of f)e!==p&&n.disposeIntermediateTensorInfo(e);return p}};const mx={kernelName:St,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n}=e,{dy:s,y:r}=t;ty([s,r],"eluGrad");const a=new Float32Array(Us.sizeFromShape(r.shape)),i=n.data.get(r.dataId).values,o=n.data.get(s.dataId).values;for(let e=0;e<i.length;++e){const t=i[e];a[e]=t>=1?o[e]:o[e]*(t+1)}return n.makeTensorInfo(r.shape,"float32",a)}},gx=cy(((e,t)=>e===t?1:0)),yx=Ay(Tt,gx,null,"bool"),bx={kernelName:Tt,backendName:"cpu",kernelFunc:yx},xx=Bl.ERF_P,wx=Bl.ERF_A1,vx=Bl.ERF_A2,kx=Bl.ERF_A3,Ix=Bl.ERF_A4,Sx=Bl.ERF_A5,Nx=ny(Nt,(e=>{const t=Math.sign(e),n=Math.abs(e),s=1/(1+xx*n);return t*(1-((((Sx*s+Ix)*s+kx)*s+vx)*s+wx)*s*Math.exp(-n*n))})),Tx={kernelName:Nt,backendName:"cpu",kernelFunc:Nx},Cx=by((e=>Math.exp(e))),$x=sy(Ct,Cx,"float32"),Ex={kernelName:Ct,backendName:"cpu",kernelFunc:$x};function Ax(e){const{inputs:t,backend:n,attrs:s}=e,{input:r}=t,{dim:a}=s,i=r.shape.length,o=r.shape.slice();let l=a;return a<0&&(Us.assert(-(i+1)<=a,(()=>`Axis must be in the interval [${-(i+1)}, ${i}]`)),l=i+a+1),o.splice(l,0,1),My({inputs:{x:r},backend:n,attrs:{shape:o}})}const Rx={kernelName:$t,backendName:"cpu",kernelFunc:Ax},Fx=by((e=>Math.expm1(e))),Dx=sy(Et,Fx),_x={kernelName:Et,backendName:"cpu",kernelFunc:Dx},Ox=cy(((e,t)=>e/t)),Mx=Ay(vt,Ox),Lx={kernelName:vt,backendName:"cpu",kernelFunc:Mx},zx=cy(((e,t)=>e-t)),Bx=Ry(((e,t,n,s)=>({real:e-n,imag:t-s}))),Px=Ay(fs,zx,Bx),Wx={kernelName:fs,backendName:"cpu",kernelFunc:Px};function Ux(e,t,n){const s=e.shape,r=s[0],a=s[1],i=n.data.get(e.dataId),o=i.complexTensorInfos.real,l=i.complexTensorInfos.imag,u=[r,a],c=Us.sizeFromShape(u),h=Us.getTypedArrayFromDType("float32",c),p=Us.getTypedArrayFromDType("float32",c);for(let e=0;e<r;e++){const s=vb({inputs:{x:o},backend:n,attrs:{begin:[e,0],size:[1,a]}}),r=vb({inputs:{x:l},backend:n,attrs:{begin:[e,0],size:[1,a]}}),i=Iy({inputs:{real:s,imag:r},backend:n}),{real:u,imag:c}=Vx(i,t,n),d=Bl.mergeRealAndImagArrays(u,c);for(let t=0;t<a;t++){const n=Bl.getComplexWithIndex(d,t);h[e*a+t]=n.real,p[e*a+t]=n.imag}n.disposeIntermediateTensorInfo(s),n.disposeIntermediateTensorInfo(r),n.disposeIntermediateTensorInfo(i)}const d=n.makeTensorInfo(u,"float32",h),f=n.makeTensorInfo(u,"float32",p),m=Iy({inputs:{real:d,imag:f},backend:n});return n.disposeIntermediateTensorInfo(d),n.disposeIntermediateTensorInfo(f),m}function Vx(e,t,n){const s=Us.sizeFromShape(e.shape),r=n.data.get(e.dataId),a=n.data.get(r.complexTensorInfos.real.dataId).values,i=n.data.get(r.complexTensorInfos.imag.dataId).values;if(0==((o=s)&o-1)){const r=Gx(a,i,s,t,n),o=[e.shape[0],e.shape[1]];if(t){const e=n.makeTensorInfo(o,"float32",r.real),t=n.makeTensorInfo(o,"float32",r.imag),a=n.makeTensorInfo([],"float32",Us.createScalarValue(s,"float32")),i=iy({inputs:{x:a},backend:n}),l=Lx.kernelFunc({inputs:{a:e,b:a},backend:n}),u=Lx.kernelFunc({inputs:{a:t,b:i},backend:n}),c=n.data.get(l.dataId).values,h=n.data.get(u.dataId).values;return n.disposeIntermediateTensorInfo(e),n.disposeIntermediateTensorInfo(t),n.disposeIntermediateTensorInfo(a),n.disposeIntermediateTensorInfo(i),n.disposeIntermediateTensorInfo(l),n.disposeIntermediateTensorInfo(u),{real:c,imag:h}}return r}{const e=function(e,t,n){const s=new Float32Array(2*t);for(let r=0;r<t;r++){let a=0,i=0;for(let s=0;s<t;s++){const o=Bl.exponent(r*s,t,n),l=Bl.getComplexWithIndex(e,s);a+=l.real*o.real-l.imag*o.imag,i+=l.real*o.imag+l.imag*o.real}n&&(a/=t,i/=t),Bl.assignToTypedArray(s,a,i,r)}return s}(Bl.mergeRealAndImagArrays(a,i),s,t);return Bl.splitRealAndImagArrays(e)}var o}function Gx(e,t,n,s,r){if(1===n)return{real:e,imag:t};const a=Bl.mergeRealAndImagArrays(e,t),i=n/2,o=Bl.complexWithEvenIndex(a),l=o.real,u=o.imag,c=[l.length],h=r.makeTensorInfo(c,"float32",l),p=r.makeTensorInfo(c,"float32",u),d=Iy({inputs:{real:h,imag:p},backend:r}),f=Bl.complexWithOddIndex(a),m=f.real,g=f.imag,y=[m.length],b=r.makeTensorInfo(y,"float32",m),x=r.makeTensorInfo(y,"float32",g),w=Iy({inputs:{real:b,imag:x},backend:r}),v=Gx(l,u,i,s,r),k=v.real,I=v.imag,S=[k.length],N=r.makeTensorInfo(S,"float32",k),T=r.makeTensorInfo(S,"float32",I),C=Iy({inputs:{real:N,imag:T},backend:r}),$=Gx(m,g,i,s,r),E=$.real,A=$.imag,R=[E.length],F=r.makeTensorInfo(R,"float32",E),D=r.makeTensorInfo(R,"float32",A),_=Iy({inputs:{real:F,imag:D},backend:r}),O=Bl.exponents(n,s),M=[O.real.length],L=r.makeTensorInfo(M,"float32",O.real),z=r.makeTensorInfo(M,"float32",O.imag),B=Iy({inputs:{real:L,imag:z},backend:r}),P=cx({inputs:{a:B,b:_},backend:r}),W=_y({inputs:{a:C,b:P},backend:r}),U=Px({inputs:{a:C,b:P},backend:r}),V=Ty({inputs:{input:W},backend:r}),G=Ty({inputs:{input:U},backend:r}),H=Ob({inputs:{input:W},backend:r}),j=Ob({inputs:{input:U},backend:r}),q=Lb({inputs:[V,G],backend:r,attrs:{axis:0}}),K=Lb({inputs:[H,j],backend:r,attrs:{axis:0}}),X=r.data.get(q.dataId).values,Y=r.data.get(K.dataId).values;return r.disposeIntermediateTensorInfo(h),r.disposeIntermediateTensorInfo(p),r.disposeIntermediateTensorInfo(d),r.disposeIntermediateTensorInfo(b),r.disposeIntermediateTensorInfo(x),r.disposeIntermediateTensorInfo(w),r.disposeIntermediateTensorInfo(N),r.disposeIntermediateTensorInfo(T),r.disposeIntermediateTensorInfo(C),r.disposeIntermediateTensorInfo(F),r.disposeIntermediateTensorInfo(D),r.disposeIntermediateTensorInfo(_),r.disposeIntermediateTensorInfo(L),r.disposeIntermediateTensorInfo(z),r.disposeIntermediateTensorInfo(B),r.disposeIntermediateTensorInfo(P),r.disposeIntermediateTensorInfo(W),r.disposeIntermediateTensorInfo(U),r.disposeIntermediateTensorInfo(V),r.disposeIntermediateTensorInfo(H),r.disposeIntermediateTensorInfo(G),r.disposeIntermediateTensorInfo(j),r.disposeIntermediateTensorInfo(q),r.disposeIntermediateTensorInfo(K),{real:X,imag:Y}}const Hx={kernelName:At,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n}=e,{input:s}=t,r=Us.sizeFromShape(s.shape),a=s.shape[s.shape.length-1],i=My({inputs:{x:s},backend:n,attrs:{shape:[r/a,a]}}),o=Ux(i,!1,n),l=My({inputs:{x:o},backend:n,attrs:{shape:s.shape}});return n.disposeIntermediateTensorInfo(i),n.disposeIntermediateTensorInfo(o),l}};function jx(e){const{backend:t,attrs:n}=e,{shape:s,value:r,dtype:a}=n,i=a||Us.inferDtype(r),o=Us.getArrayFromDType(i,Us.sizeFromShape(s));return function(e,t,n){e.fill(t)}(o,r),t.makeTensorInfo(s,i,o)}const qx={kernelName:Rt,backendName:"cpu",kernelFunc:jx};const Kx={kernelName:Ft,backendName:"cpu",kernelFunc:({inputs:e,attrs:t,backend:n})=>{const{image:s}=e,r=n,a=Us.getTypedArrayFromDType(s.dtype,Us.sizeFromShape(s.shape)),[i,o,l,u]=s.shape,c=r.data.get(s.dataId).values;for(let e=0;e<i;e++){const t=e*l*o*u;for(let e=0;e<o;e++){const n=e*(l*u);for(let e=0;e<l;e++){const s=e*u;for(let r=0;r<u;r++){const i=Math.round(l-e-1),o=t+n+s+r;let h=c[o];if(i>=0&&i<l){h=c[t+n+i*u+r]}a[o]=h}}}}return{dataId:r.write(a,s.shape,s.dtype),shape:s.shape,dtype:s.dtype}}},Xx=by((e=>Math.floor(e))),Yx=sy(Dt,Xx),Zx={kernelName:Dt,backendName:"cpu",kernelFunc:Yx},Jx=cy(((e,t)=>Math.floor(e/t))),Qx=Ay(_t,Jx,null,"int32"),ew={kernelName:_t,backendName:"cpu",kernelFunc:Qx};const tw={kernelName:Es,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{x:r,filter:a,bias:i,preluActivationWeights:o}=t,{strides:l,pad:u,dataFormat:c,dilations:h,dimRoundingMode:p,activation:d,leakyreluAlpha:f}=s;let m=Bb({inputs:{x:r,filter:a},backend:n,attrs:{strides:l,pad:u,dataFormat:c,dilations:h,dimRoundingMode:p}});if(i){const e=m;m=_y({inputs:{a:m,b:i},backend:n}),n.disposeIntermediateTensorInfo(e)}if(d){const e=m;m=ky(n,m,d,o,f),n.disposeIntermediateTensorInfo(e)}return m}};const nw={kernelName:As,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{x:r,filter:a,bias:i,preluActivationWeights:o}=t,{strides:l,pad:u,dataFormat:c,dilations:h,dimRoundingMode:p,activation:d,leakyreluAlpha:f}=s;let m=ex({inputs:{x:r,filter:a},backend:n,attrs:{strides:l,pad:u,dataFormat:c,dilations:h,dimRoundingMode:p}});if(i){const e=m;m=_y({inputs:{a:m,b:i},backend:n}),n.disposeIntermediateTensorInfo(e)}if(d){const e=m;m=ky(n,m,d,o,f),n.disposeIntermediateTensorInfo(e)}return m}};function sw(e,t,n,s,r,a,i,o,l){const u=Bo([s,a],n);for(let n=0;n<s;n++){const s=[];let c=0;for(let t=0;t<r;t++){const a=e[n*r+t];c+=a*i[t],s.push(a)}if(c<0||c>=l/a)throw new Error(`Invalid indices: ${s} does not index into ${o}`);for(let e=0;e<a;e++)u.values[n*a+e]=t.get(...t.indexToLoc(c*a+e))}return u}const rw={kernelName:Lt,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n}=e,{params:s,indices:r}=t,a=Us.sizeFromShape(s.shape),i=r.shape,o=i[i.length-1],[l,u,c,h]=Bl.prepareAndValidate(s,r);if(0===u)return n.makeTensorInfo(l,s.dtype,[]);const p=sw(n.data.get(r.dataId).values,n.bufferSync(s),s.dtype,u,o,c,h,s.shape,a);return n.makeTensorInfo(l,s.dtype,p.values)}};function aw(e,t,n){const s=Bo(n,e.dtype);for(let n=0;n<s.size;++n){const r=s.indexToLoc(n).slice(),a=r[0],i=r[2],o=t.locToIndex([a,i]);r[2]=t.values[o];const l=e.locToIndex(r);0<=l&&l<e.values.length&&(s.values[n]=e.values[l])}return s}const iw={kernelName:Mt,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{x:r,indices:a}=t,{axis:i,batchDims:o}=s;ty([r,a],"gatherV2");const l=Us.parseAxisParam(i,r.shape)[0],u=n.data.get(a.dataId).values,c=r.shape[l];for(let e=0;e<u.length;++e){const t=u[e];Us.assert(t<=c-1&&t>=0,(()=>`GatherV2: the index value ${t} is not in [0, ${c-1}]`))}let h=o;null==o&&(h=0);const p=Us.sizeFromShape(a.shape),d=Bl.segment_util.collectGatherOpShapeInfo(r,a,l,h),f=My({inputs:{x:r},backend:n,attrs:{shape:[d.batchSize,d.outerSize,d.dimSize,d.sliceSize]}}),m=My({inputs:{x:a},backend:n,attrs:{shape:[d.batchSize,p/d.batchSize]}}),g=[d.batchSize,d.outerSize,p/d.batchSize,d.sliceSize],y=n.bufferSync(m),b=aw(n.bufferSync(f),y,g);return n.disposeIntermediateTensorInfo(f),n.disposeIntermediateTensorInfo(m),n.makeTensorInfo(d.outputShape,b.dtype,b.values)}},ow=cy(((e,t)=>e>t?1:0)),lw=Ay(zt,ow,null,"bool"),uw={kernelName:zt,backendName:"cpu",kernelFunc:lw},cw=cy(((e,t)=>e>=t?1:0)),hw=Ay(Bt,cw,null,"bool"),pw={kernelName:Bt,backendName:"cpu",kernelFunc:hw};const dw={kernelName:Wt,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n}=e,{input:s}=t,r=Us.sizeFromShape(s.shape),a=s.shape[s.shape.length-1],i=My({inputs:{x:s},backend:n,attrs:{shape:[r/a,a]}}),o=Ux(i,!0,n),l=My({inputs:{x:o},backend:n,attrs:{shape:s.shape}});return n.disposeIntermediateTensorInfo(i),n.disposeIntermediateTensorInfo(o),l}},fw=ny(Vt,(e=>Number.isFinite(e)?1:0),"bool"),mw={kernelName:Vt,backendName:"cpu",kernelFunc:fw},gw=ny(Gt,(e=>Math.abs(e)===1/0?1:0),"bool"),yw={kernelName:Gt,backendName:"cpu",kernelFunc:gw},bw=ny(Ht,(e=>Number.isNaN(e)?1:0),"bool"),xw={kernelName:Ht,backendName:"cpu",kernelFunc:bw},ww=cy(((e,t)=>e<t?1:0)),vw=Ay(qt,ww,null,"bool"),kw={kernelName:qt,backendName:"cpu",kernelFunc:vw},Iw=cy(((e,t)=>e<=t?1:0)),Sw=Ay(Kt,Iw,null,"bool"),Nw={kernelName:Kt,backendName:"cpu",kernelFunc:Sw};function Tw(e,t,n){const s=(t-e)/(n-1),r=Us.makeZerosTypedArray(n,"float32");r[0]=e;for(let e=1;e<r.length;e++)r[e]=r[e-1]+s;return r}const Cw={kernelName:Xt,backendName:"cpu",kernelFunc:function(e){const{backend:t,attrs:n}=e,{start:s,stop:r,num:a}=n,i=Tw(s,r,a);return t.makeTensorInfo([i.length],"float32",i)}},$w=by((e=>Math.log(e))),Ew=sy(Yt,$w),Aw={kernelName:Yt,backendName:"cpu",kernelFunc:Ew},Rw=ny(Zt,(e=>Math.log1p(e))),Fw={kernelName:Zt,backendName:"cpu",kernelFunc:Rw},Dw=cy(((e,t)=>e&&t)),_w=Ay(Jt,Dw,null,"bool"),Ow={kernelName:Jt,backendName:"cpu",kernelFunc:_w},Mw=ny(Qt,(e=>e?0:1),"bool"),Lw={kernelName:Qt,backendName:"cpu",kernelFunc:Mw},zw=cy(((e,t)=>e||t)),Bw=Ay(en,zw,null,"bool"),Pw={kernelName:en,backendName:"cpu",kernelFunc:Bw};const Ww={kernelName:tn,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{x:r}=t,{depthRadius:a,bias:i,alpha:o,beta:l}=s;ty(r,"LRN");const u=r.shape[3],c=u-1,h=n.data.get(r.dataId).values,p=Us.sizeFromShape(r.shape),d=new Float32Array(p);function f(e){const t=e%u;let n=e-t+Math.max(0,t-a);const s=e-t+Math.min(t+a,c);let r=0;for(;n<=s;n++){const e=h[n];r+=e*e}return r}for(let e=0;e<p;e++){const t=f(e),n=h[e]*Math.pow(i+o*t,-l);d[e]=n}return n.makeTensorInfo(r.shape,r.dtype,d)}};const Uw={kernelName:nn,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{x:r,y:a,dy:i}=t,{depthRadius:o,bias:l,alpha:u,beta:c}=s;ty(i,"LRNGrad");const h=Us.sizeFromShape(i.shape),p=i.shape[3],d=n.data.get(i.dataId).values,f=n.data.get(r.dataId).values,m=n.data.get(a.dataId).values,g=new Float32Array(h),y=h;for(let e=0;e<y;e++){const t=e%p,n=e-t+Math.max(0,t-o),s=e-t+Math.min(p,t+o+1);let r=0;for(let e=n;e<s;e++)r+=Math.pow(f[e],2);r=u*r+l;for(let t=n;t<s;t++){let n=-2*u*c*f[t]*m[e]/r;e===t&&(n+=Math.pow(r,-c)),n*=d[e],g[t]+=n}}return n.makeTensorInfo(i.shape,r.dtype,g)}};function Vw(e,t,n,s){const r=Us.getTypedArrayFromDType(s,Us.sizeFromShape(n));for(let n=0;n<r.length;++n){const s=n*t;let a=e[s];for(let n=0;n<t;++n){const t=e[s+n];(Number.isNaN(t)||t>a)&&(a=t)}r[n]=a}return r}function Gw(e){const{inputs:t,backend:n,attrs:s}=e,{x:r}=t,{reductionIndices:a,keepDims:i}=s,o=n;let l=r.shape;const u=l.length,c=Us.parseAxisParam(a,l);let h=c;const p=Bl.getAxesPermutation(h,u);let d=o.data.get(r.dataId).values;if(null!=p){const e=new Array(u);for(let t=0;t<e.length;t++)e[t]=l[p[t]];d=Ky(d,l,r.dtype,p,e),h=Bl.getInnerMostAxes(h.length,u),l=e}ty(r,"max"),Bl.assertAxesAreInnerMostDims("max",h,u);const[f,m]=Bl.computeOutAndReduceShapes(l,h),g=Vw(d,Us.sizeFromShape(m),f,r.dtype),y=o.write(g,f,r.dtype);let b=f;if(i){b=Bl.expandShapeToKeepDim(f,c)}return{dataId:y,shape:b,dtype:r.dtype}}const Hw={kernelName:sn,backendName:"cpu",kernelFunc:Gw},jw=cy(((e,t)=>Math.max(e,t))),qw=Ay(rn,jw),Kw={kernelName:rn,backendName:"cpu",kernelFunc:qw};const Xw={kernelName:an,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{x:r}=t;ty(r,"maxPool");const{filterSize:a,strides:i,pad:o,dimRoundingMode:l}=s;Us.assert(Bl.eitherStridesOrDilationsAreOne(i,1),(()=>`Error in maxPool: Either strides or dilations must be 1. Got strides ${i} and dilations '1'`));const u=Bl.computePool2DInfo(r.shape,a,i,1,o,l);let c;if(1===u.filterWidth&&1===u.filterHeight&&Us.arraysEqual(u.inShape,u.outShape))c=iy({inputs:{x:r},backend:n});else{const e=n.data.get(r.dataId).values,t=Us.computeStrides(r.shape),s=pb(e,r.shape,r.dtype,t,u,"max");c=n.makeTensorInfo(u.outShape,r.dtype,s.values)}return c}};const Yw={kernelName:ln,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{x:r}=t,{filterSize:a,strides:i,pad:o,dimRoundingMode:l,dataFormat:u}=s;ty(r,"maxPool3d");const c=Bl.computePool3DInfo(r.shape,a,i,1,o,l,u),h=fb(n.data.get(r.dataId).values,r.shape,r.dtype,Us.computeStrides(r.shape),c,"max");return n.makeTensorInfo(h.shape,"float32",h.values)}};const Zw={kernelName:un,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{dy:r,input:a}=t,{filterSize:i,strides:o,pad:l,dimRoundingMode:u}=s;ty([r,a],"maxPool3DGrad");const c=Bl.computePool3DInfo(a.shape,i,o,1,l,u),h=function(e,t){const n=Bo(t.outShape,"int32"),s=t.strideDepth,r=t.strideHeight,a=t.strideWidth,i=t.dilationDepth,o=t.dilationHeight,l=t.dilationWidth,u=t.effectiveFilterDepth,c=t.effectiveFilterHeight,h=t.effectiveFilterWidth,p=t.padInfo.front,d=t.padInfo.top,f=t.padInfo.left;for(let m=0;m<t.batchSize;++m)for(let g=0;g<t.inChannels;++g)for(let y=0;y<t.outDepth;++y){const b=y*s-p;let x=b;for(;x<0;)x+=i;const w=Math.min(t.inDepth,u+b);for(let s=0;s<t.outHeight;++s){const u=s*r-d;let p=u;for(;p<0;)p+=o;const v=Math.min(t.inHeight,c+u);for(let r=0;r<t.outWidth;++r){const d=r*a-f;let k=d;for(;k<0;)k+=l;const I=Math.min(t.inWidth,h+d);let S=Number.NEGATIVE_INFINITY,N=-1;for(let t=x;t<w;t+=i){const n=t-b;for(let s=p;s<v;s+=o){const r=s-u;for(let a=k;a<I;a+=l){const i=a-d,o=e.get(m,t,s,a,g);o>=S&&(S=o,N=n*c*h+r*c+i)}}}n.set(N,m,y,s,r,g)}}}return n}(n.bufferSync(a),c),p=c.strideDepth,d=c.strideHeight,f=c.strideWidth,m=c.dilationDepth,g=c.dilationHeight,y=c.dilationWidth,b=c.effectiveFilterDepth,x=c.effectiveFilterHeight,w=c.effectiveFilterWidth,v=b-1-c.padInfo.front,k=w-1-c.padInfo.left,I=x-1-c.padInfo.top,S=Bo(a.shape,"float32"),N=n.bufferSync(r);for(let e=0;e<c.batchSize;++e)for(let t=0;t<c.inChannels;++t)for(let n=0;n<c.inDepth;++n)for(let s=0;s<c.inHeight;++s)for(let r=0;r<c.inWidth;++r){const a=n-v,i=s-I,o=r-k;let l=0;for(let n=0;n<b;n+=m){const s=(a+n)/p;if(!(s<0||s>=c.outDepth||Math.floor(s)!==s))for(let r=0;r<x;r+=g){const a=(i+r)/d;if(!(a<0||a>=c.outHeight||Math.floor(a)!==a))for(let i=0;i<w;i+=y){const u=(o+i)/f;if(u<0||u>=c.outWidth||Math.floor(u)!==u)continue;const p=b*x*w-1-h.get(e,s,a,u,t)===n*x*w+r*w+i?1:0;if(0===p)continue;l+=N.get(e,s,a,u,t)*p}}}S.set(l,e,n,s,r,t)}return n.makeTensorInfo(S.shape,S.dtype,S.values)}};const Jw={kernelName:on,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{dy:r,input:a,output:i}=t,o=a;ty([a,i],"maxPoolGrad");const{filterSize:l,strides:u,pad:c,dimRoundingMode:h}=s,p=Bl.computePool2DInfo(o.shape,l,u,1,c,h),d=n.data.get(o.dataId).values,f=Bo(p.outShape,o.dtype,db(d,o.shape,o.dtype,p).values),m=p.strideHeight,g=p.strideWidth,y=p.dilationHeight,b=p.dilationWidth,x=p.effectiveFilterHeight,w=p.effectiveFilterWidth,v=w-1-p.padInfo.left,k=x-1-p.padInfo.top,I=Bo(o.shape,"float32"),S=n.data.get(r.dataId).values,N=Bo(r.shape,"float32",S);for(let e=0;e<p.batchSize;++e)for(let t=0;t<p.inChannels;++t)for(let n=0;n<p.inHeight;++n)for(let s=0;s<p.inWidth;++s){const r=n-k,a=s-v;let i=0;for(let n=0;n<x;n+=y){const s=(r+n)/m;if(!(s<0||s>=p.outHeight||Math.floor(s)!==s))for(let r=0;r<w;r+=b){const o=(a+r)/g;if(o<0||o>=p.outWidth||Math.floor(o)!==o)continue;const l=x*w-1-f.get(e,s,o,t)===n*w+r?1:0;if(0===l)continue;i+=N.get(e,s,o,t)*l}}I.set(i,e,n,s,t)}return n.makeTensorInfo(I.shape,I.dtype,I.values)}};const Qw={kernelName:cn,backendName:"cpu",kernelFunc:({inputs:e,attrs:t,backend:n})=>{const{x:s}=e,{filterSize:r,strides:a,pad:i,includeBatchInIndex:o}=t,l=n;ty(s,"MaxPoolWithArgmax");const u=l.data.get(s.dataId).values,c=Bl.computePool2DInfo(s.shape,r,a,[1,1],i),[h,p]=function(e,t,n,s,r){const a=pb(e,0,n,Us.computeStrides(t),r,"max"),i=db(e,t,n,r,!0,s);return[a.values,i.values]}(u,s.shape,s.dtype,o,c),d=l.write(h,c.outShape,s.dtype),f=l.write(p,c.outShape,s.dtype);return[{dataId:d,shape:c.outShape,dtype:s.dtype},{dataId:f,shape:c.outShape,dtype:"int32"}]}};const ev={kernelName:hn,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{x:r}=t,{axis:a,keepDims:i}=s,o=Us.parseAxisParam(a,r.shape),l=Bl.computeOutAndReduceShapes(r.shape,o)[1],u=Us.sizeFromShape(l),c=[],h=n.makeTensorInfo([],"float32",new Float32Array([u]));c.push(h);const p=$y({inputs:{x:r},backend:n,attrs:{dtype:"float32"}});c.push(p);const d=Mx({inputs:{a:p,b:h},backend:n});c.push(d);const f=px({inputs:{x:d},backend:n,attrs:{axis:a,keepDims:i}});return c.forEach((e=>n.disposeIntermediateTensorInfo(e))),f}};const tv={kernelName:pn,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{x:r}=t,{axis:a,keepDims:i}=s;ty(r,"min");const o=Us.parseAxisParam(a,r.shape);let l=o;const u=Bl.getAxesPermutation(l,r.shape.length);let c=r;null!=u&&(c=Xy({inputs:{x:r},backend:n,attrs:{perm:u}}),l=Bl.getInnerMostAxes(l.length,r.shape.length)),Bl.assertAxesAreInnerMostDims("min",l,c.shape.length);const[h,p]=Bl.computeOutAndReduceShapes(c.shape,l),d=Us.sizeFromShape(p),f=Us.makeZerosTypedArray(Us.sizeFromShape(h),c.dtype),m=n.data.get(c.dataId).values;for(let e=0;e<f.length;++e){const t=e*d;let n=m[t];for(let e=0;e<d;++e){const s=m[t+e];(Number.isNaN(s)||s<n)&&(n=s)}f[e]=n}null!=u&&n.disposeIntermediateTensorInfo(c);const g=n.makeTensorInfo(h,c.dtype,f);if(i){const e=My({inputs:{x:g},backend:n,attrs:{shape:Bl.expandShapeToKeepDim(h,o)}});return n.disposeIntermediateTensorInfo(g),e}return g}},nv=cy(((e,t)=>Math.min(e,t))),sv=Ay(dn,nv),rv={kernelName:dn,backendName:"cpu",kernelFunc:sv};const av={kernelName:fn,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{x:r}=t,{paddings:a,mode:i}=s;ty(r,"mirrorPad");const o=a.map(((e,t)=>e[0]+r.shape[t]+e[1])),l=a.map((e=>e[0])),u=a.map(((e,t)=>e[0]+r.shape[t])),c="reflect"===i?0:1,h=n.data.get(r.dataId).values,p=r.shape.length,d=Us.computeStrides(r.shape),f=Us.sizeFromShape(o),m=o.length,g=Us.computeStrides(o),y=Us.getTypedArrayFromDType(r.dtype,f);for(let e=0;e<f;e++){let t=Us.indexToLoc(e,m,g);for(let e=0;e<m;e++)t[e]<l[e]?t[e]=2*l[e]-t[e]-c:t[e]>=u[e]&&(t[e]=2*(u[e]-1)-t[e]+c);t=t.map(((e,t)=>e-l[t]));const n=Us.locToIndex(t,p,d);y[e]=h[n]}return{dataId:n.write(y,o,r.dtype),shape:o,dtype:r.dtype}}},iv=cy(((e,t)=>{const n=e%t;return e<0&&t<0||e>=0&&t>=0?n:(n+t)%t})),ov=Ay(mn,iv),lv={kernelName:mn,backendName:"cpu",kernelFunc:ov};function uv(e){const{inputs:t,backend:n,attrs:s}=e,{logits:r}=t,{dim:a}=s,i=r.shape.length;let o=a;if(-1===o&&(o=i-1),o!==i-1)throw Error(`Softmax along a non-last dimension is not yet supported. Logits was rank ${i} and dim was ${o}`);const l=Us.parseAxisParam([o],r.shape),u=Gw({inputs:{x:r},backend:n,attrs:{reductionIndices:l,keepDims:!1}}),c=Bl.expandShapeToKeepDim(u.shape,l),h=My({inputs:{x:u},backend:n,attrs:{shape:c}}),p=Px({inputs:{a:r,b:h},backend:n}),d=$x({inputs:{x:p},backend:n}),f=px({inputs:{x:d},backend:n,attrs:{axis:l,keepDims:!1}}),m=My({inputs:{x:f},backend:n,attrs:{shape:c}}),g=Mx({inputs:{a:d,b:m},backend:n});return n.disposeIntermediateTensorInfo(u),n.disposeIntermediateTensorInfo(h),n.disposeIntermediateTensorInfo(p),n.disposeIntermediateTensorInfo(d),n.disposeIntermediateTensorInfo(f),n.disposeIntermediateTensorInfo(m),g}const cv={kernelName:ns,backendName:"cpu",kernelFunc:uv};const hv={kernelName:gn,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{logits:r}=t,{numSamples:a,seed:i,normalized:o}=s;ty(r,"multinomial");const l=o?r:uv({inputs:{logits:r},backend:n,attrs:{dim:-1}}),u=l.shape[0],c=l.shape[1],h=n.data.get(l.dataId).values,p=[u,a],d=Us.makeZerosTypedArray(Us.sizeFromShape(p),"int32");for(let e=0;e<u;++e){const t=e*c,n=new Float32Array(c-1);n[0]=h[t];for(let e=1;e<n.length;++e)n[e]=n[e-1]+h[t+e];const s=uf.alea(i.toString()),r=e*a;for(let e=0;e<a;++e){const t=s();d[r+e]=n.length;for(let s=0;s<n.length;s++)if(t<n[s]){d[r+e]=s;break}}}return o||n.disposeIntermediateTensorInfo(l),n.makeTensorInfo(p,"int32",d)}};function pv(e,t,n){const s=Us.createScalarValue(-1,n);return lx([],t,s,e,n)}const dv={kernelName:bn,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n}=e,{x:s}=t;ty(s,"neg");const r=n.data.get(s.dataId).values,[a,i]=pv(r,s.shape,s.dtype);return n.makeTensorInfo(i,s.dtype,a)}},fv=Uc.nonMaxSuppressionV3Impl;const mv={kernelName:wn,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{boxes:r,scores:a}=t,{maxOutputSize:i,iouThreshold:o,scoreThreshold:l}=s;ty(r,"NonMaxSuppression");const u=n.data.get(r.dataId).values,c=n.data.get(a.dataId).values,{selectedIndices:h}=fv(u,c,i,o,l);return n.makeTensorInfo([h.length],"int32",new Int32Array(h))}},gv=Uc.nonMaxSuppressionV4Impl;const yv={kernelName:vn,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{boxes:r,scores:a}=t,{maxOutputSize:i,iouThreshold:o,scoreThreshold:l,padToMaxOutputSize:u}=s;ty(r,"NonMaxSuppressionPadded");const c=n.data.get(r.dataId).values,h=n.data.get(a.dataId).values,{selectedIndices:p,validOutputs:d}=gv(c,h,i,o,l,u);return[n.makeTensorInfo([p.length],"int32",new Int32Array(p)),n.makeTensorInfo([],"int32",new Int32Array([d]))]}},bv=Uc.nonMaxSuppressionV5Impl;const xv={kernelName:kn,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{boxes:r,scores:a}=t,{maxOutputSize:i,iouThreshold:o,scoreThreshold:l,softNmsSigma:u}=s;ty(r,"NonMaxSuppressionWithScore");const c=n.data.get(r.dataId).values,h=n.data.get(a.dataId).values,p=i,d=o,f=l,m=u,{selectedIndices:g,selectedScores:y}=bv(c,h,p,d,f,m);return[n.makeTensorInfo([g.length],"int32",new Int32Array(g)),n.makeTensorInfo([y.length],"float32",new Float32Array(y))]}},wv=cy(((e,t)=>e!==t?1:0)),vv=Ay(xn,wv,null,"bool"),kv={kernelName:xn,backendName:"cpu",kernelFunc:vv};const Iv={kernelName:Sn,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{indices:r}=t,{depth:a,onValue:i,offValue:o}=s;ty(r,"oneHot");const l=Us.sizeFromShape(r.shape),u=new Float32Array(l*a);u.fill(o);const c=n.data.get(r.dataId).values;for(let e=0;e<l;++e)c[e]>=0&&c[e]<a&&(u[e*a+c[e]]=i);return n.makeTensorInfo([...r.shape,a],"int32",u)}};function Sv(e){const{inputs:t,backend:n}=e,{x:s}=t;if("string"===s.dtype)throw new Error("zerosLike is not supported for string tensors");if("complex64"===s.dtype){const e=Ty({inputs:{input:s},backend:n}),t=Sv({inputs:{x:e},backend:n}),r=Ob({inputs:{input:s},backend:n}),a=Sv({inputs:{x:r},backend:n}),i=Iy({inputs:{real:t,imag:a},backend:n});return n.disposeIntermediateTensorInfo(e),n.disposeIntermediateTensorInfo(t),n.disposeIntermediateTensorInfo(r),n.disposeIntermediateTensorInfo(a),i}return jx({backend:n,attrs:{shape:s.shape,value:0,dtype:s.dtype}})}const Nv={kernelName:Ss,backendName:"cpu",kernelFunc:Sv};const Tv={kernelName:In,backendName:"cpu",kernelFunc:function e(t){const{inputs:n,backend:s}=t,{x:r}=n;if("string"===r.dtype)throw new Error("onesLike is not supported for string tensors");if("complex64"===r.dtype){const t=Ty({inputs:{input:r},backend:s}),n=e({inputs:{x:t},backend:s}),a=Ob({inputs:{input:r},backend:s}),i=Sv({inputs:{x:a},backend:s}),o=Iy({inputs:{real:n,imag:i},backend:s});return s.disposeIntermediateTensorInfo(t),s.disposeIntermediateTensorInfo(n),s.disposeIntermediateTensorInfo(a),s.disposeIntermediateTensorInfo(i),o}return jx({backend:s,attrs:{shape:r.shape,value:1,dtype:r.dtype}})}};function Cv(e){const{inputs:t,backend:n,attrs:s}=e,{axis:r}=s;if(1===t.length)return Ax({inputs:{input:t[0]},backend:n,attrs:{dim:r}});const a=t[0].shape,i=t[0].dtype;t.forEach((e=>{Us.assertShapesMatch(a,e.shape,"All tensors passed to stack must have matching shapes"),Us.assert(i===e.dtype,(()=>"All tensors passed to stack must have matching dtypes"))}));const o=[],l=Lb({inputs:t.map((e=>{const t=Ax({inputs:{input:e},backend:n,attrs:{dim:r}});return o.push(t),t})),backend:n,attrs:{axis:r}});return o.forEach((e=>n.disposeIntermediateTensorInfo(e))),l}const $v={kernelName:Nn,backendName:"cpu",kernelFunc:Cv};const Ev={kernelName:Tn,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{x:r}=t,{paddings:a,constantValue:i}=s;ty(r,"pad");const o=a.map(((e,t)=>e[0]+r.shape[t]+e[1])),l=a.map((e=>e[0])),u=n.data.get(r.dataId).values,c=Us.sizeFromShape(r.shape),h=r.shape.length,p=Us.computeStrides(r.shape),d=Us.sizeFromShape(o),f=o.length,m=Us.computeStrides(o),g=Us.getTypedArrayFromDType(r.dtype,d);0!==i&&g.fill(i);for(let e=0;e<c;e++){const t=Us.indexToLoc(e,h,p).map(((e,t)=>e+l[t]));g[Us.locToIndex(t,f,m)]=u[e]}return{dataId:n.write(g,o,r.dtype),shape:o,dtype:r.dtype}}},Av=cy(((e,t)=>Math.pow(e,t))),Rv=Ay(Cn,Av),Fv={kernelName:Cn,backendName:"cpu",kernelFunc:Rv};function Dv(e,t,n,s){const[r,a]=Bl.computeOutAndReduceShapes(e,s),i=ia(t,"int32"),o=Us.makeZerosTypedArray(Us.sizeFromShape(r),i),l=Us.sizeFromShape(a);for(let e=0;e<o.length;++e){const t=e*l;let s=1;for(let e=0;e<l;++e)s*=n[t+e];o[e]=s}return{outVals:o,outShape:r,outDtype:i}}const _v={kernelName:En,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{x:r}=t,{axis:a,keepDims:i}=s;ty(r,"prod");const o=r.shape.length,l=Us.parseAxisParam(a,r.shape),u=Bl.getAxesPermutation(l,o);let c=l,h=r;const p=[];null!=u&&(h=Xy({inputs:{x:r},backend:n,attrs:{perm:u}}),p.push(h),c=Bl.getInnerMostAxes(c.length,o));const d=n.data.get(h.dataId).values,{outVals:f,outShape:m,outDtype:g}=Dv(h.shape,h.dtype,d,c);let y=m;return i&&(y=Bl.expandShapeToKeepDim(m,l)),p.forEach((e=>n.disposeIntermediateTensorInfo(e))),n.makeTensorInfo(y,g,f)}};function Ov(e,t,n,s){if(e===t||e<t&&n<0||t<e&&n>1)return Us.makeZerosTypedArray(0,s);const r=Math.abs(Math.ceil((t-e)/n)),a=Us.makeZerosTypedArray(r,s);t<e&&1===n&&(n=-1),a[0]=e;for(let e=1;e<a.length;e++)a[e]=a[e-1]+n;return a}const Mv={kernelName:An,backendName:"cpu",kernelFunc:function(e){const{backend:t,attrs:n}=e,{start:s,stop:r,dtype:a,step:i}=n,o=Ov(s,r,i,a);return t.makeTensorInfo([o.length],a,o)}},Lv=ny(Fn,(e=>1/e)),zv={kernelName:Fn,backendName:"cpu",kernelFunc:Lv};const Bv={kernelName:Ln,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{images:r}=t,{alignCorners:a,halfPixelCenters:i,size:o}=s;ty(r,"resizeBilinear");const l=Us.computeStrides(r.shape),[u,c]=o,[h,p,d,f]=r.shape,m=n.data.get(r.dataId).values,g=new Float32Array(Us.sizeFromShape([h,u,c,f])),y=[a&&u>1?p-1:p,a&&c>1?d-1:d],b=[a&&u>1?u-1:u,a&&c>1?c-1:c];let x=0;const w=y[0]/b[0],v=y[1]/b[1];for(let e=0;e<h;e++)for(let t=0;t<u;t++){let n;n=i?w*(t+.5)-.5:w*t;const s=Math.max(0,Math.floor(n)),r=n-s,a=Math.min(p-1,Math.ceil(n)),o=e*l[0]+s*l[1],u=e*l[0]+a*l[1];for(let e=0;e<c;e++){let t;t=i?v*(e+.5)-.5:v*e;const n=Math.max(0,Math.floor(t)),s=t-n,a=Math.min(d-1,Math.ceil(t)),c=o+n*l[2],h=u+n*l[2],p=o+a*l[2],y=u+a*l[2];for(let e=0;e<f;e++){const t=m[c+e],n=m[h+e],a=t+(m[p+e]-t)*s,i=a+(n+(m[y+e]-n)*s-a)*r;g[x++]=i}}}return n.makeTensorInfo([h,u,c,f],"float32",g)}};const Pv={kernelName:zn,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{images:r,dy:a}=t,{alignCorners:i}=s;ty([a,r],"resizeBilinearGrad");const o=Us.computeStrides(r.shape),[l,u,c,h]=r.shape,[,p,d]=a.shape,f=new Float32Array(l*u*c*h),m=[i&&p>1?u-1:u,i&&d>1?c-1:c],g=[i&&p>1?p-1:p,i&&d>1?d-1:d],y=m[0]/g[0],b=m[1]/g[1],x=n.data.get(a.dataId).values;let w=0;for(let e=0;e<l;e++){const t=e*o[0];for(let e=0;e<p;e++){const n=e*y,s=Math.floor(n),r=Math.min(Math.ceil(n),u-1),a=t+s*o[1],i=t+r*o[1],l=n-s,p=1-l;for(let e=0;e<d;e++){const t=e*b,n=Math.floor(t),s=Math.min(Math.ceil(t),c-1),r=t-n,u=1-r,d=a+n*o[2],m=a+s*o[2],g=i+n*o[2],y=i+s*o[2],v=p*u,k=p*r,I=l*u,S=l*r;for(let e=0;e<h;e++){const t=x[w++];f[d+e]+=t*v,f[m+e]+=t*k,f[g+e]+=t*I,f[y+e]+=t*S}}}}return n.makeTensorInfo([l,c,u,h],"float32",f)}};const Wv={kernelName:On,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{images:r}=t,{alignCorners:a,halfPixelCenters:i,size:o}=s;ty(r,"resizeNearestNeighbor");const l=Us.computeStrides(r.shape),[u,c]=o,[h,p,d,f]=r.shape,m=n.data.get(r.dataId).values,g=new Float32Array(h*u*c*f),y=[a&&u>1?p-1:p,a&&c>1?d-1:d],b=[a&&u>1?u-1:u,a&&c>1?c-1:c],x=y[0]/b[0],w=y[1]/b[1];let v=0;for(let e=0;e<h;e++){const t=e*l[0];for(let e=0;e<u;e++){const n=i?x*(e+.5):x*e;let s=Math.min(p-1,a?Math.round(n):Math.floor(n));i&&(s=Math.max(0,s));const r=t+s*l[1];for(let e=0;e<c;e++){const t=i?w*(e+.5):w*e;let n=Math.min(d-1,a?Math.round(t):Math.floor(t));i&&(n=Math.max(0,n));const s=r+n*l[2];for(let e=0;e<f;e++){const t=m[s+e];g[v++]=t}}}}return n.makeTensorInfo([h,u,c,f],r.dtype,g)}};const Uv={kernelName:Mn,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{images:r,dy:a}=t,{alignCorners:i}=s;ty([a,r],"resizeNearestNeighborGrad");const o=Us.computeStrides(r.shape),l=Us.computeStrides(a.shape),[u,c,h,p]=r.shape,[,d,f]=a.shape,m=new Float32Array(u*c*h*p),g=n.data.get(a.dataId).values,y=[i&&d>1?c-1:c,i&&f>1?h-1:h],b=[i&&d>1?d-1:d,i&&f>1?f-1:f],x=y[0]/b[0],w=y[1]/b[1],v=1/x,k=1/w,I=2*Math.ceil(v)+2,S=2*Math.ceil(k)+2;for(let e=0;e<u;e++){const t=e*o[0];for(let e=0;e<c;e++){const n=t+e*o[1],s=Math.floor(e*v),r=Math.floor(s-I/2);for(let s=0;s<h;s++){const a=n+s*o[2],u=Math.floor(s*k),y=Math.floor(u-S/2);for(let n=0;n<p;n++){let o=0;for(let a=0;a<I;a++){const u=a+r;if(u<0||u>=d)continue;const p=t+u*l[1],m=u*x;if(e===Math.min(c-1,i?Math.round(m):Math.floor(m)))for(let e=0;e<S;e++){const t=e+y;if(t<0||t>=f)continue;const r=p+t*l[2],a=t*w;s===Math.min(h-1,i?Math.round(a):Math.floor(a))&&(o+=g[r+n])}}m[a+n]=o}}}}return n.makeTensorInfo(r.shape,r.dtype,m)}};const Vv={kernelName:Pn,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{x:r}=t,{dims:a}=s;ty(r,"reverse");const i=r.shape.length,o=Us.parseAxisParam(a,r.shape);if(0===i)return iy({inputs:{x:r},backend:n});const l=new Ur(r.shape,r.dtype),u=n.bufferSync(r);for(let e=0;e<l.size;e++){const t=l.indexToLoc(e),n=t.slice();o.forEach((e=>n[e]=r.shape[e]-1-n[e])),l.set(u.get(...n),...t)}return n.makeTensorInfo(l.shape,l.dtype,l.values)}},Gv={kernelName:Cs,backendName:"cpu",kernelFunc:({inputs:e,attrs:t,backend:n})=>{const{image:s}=e,{radians:r,fillValue:a,center:i}=t,o=n,l=Us.getTypedArrayFromDType(s.dtype,Us.sizeFromShape(s.shape)),[u,c,h,p]=s.shape,[d,f]=Bl.getImageCenter(i,c,h),m=Math.sin(r),g=Math.cos(r),y=o.data.get(s.dataId).values;for(let e=0;e<u;e++){const t=e*h*c*p;for(let e=0;e<c;e++){const n=e*(h*p);for(let s=0;s<h;s++){const r=s*p;for(let i=0;i<p;i++){const o=[u,e,s,i],b=o[2],x=o[1];let w=(b-d)*g-(x-f)*m,v=(b-d)*m+(x-f)*g;w=Math.round(w+d),v=Math.round(v+f);let k=a;if("number"!=typeof a&&(k=3===i?255:a[i]),w>=0&&w<h&&v>=0&&v<c){k=y[t+v*(h*p)+w*p+i]}l[t+n+r+i]=k}}}}return{dataId:o.write(l,s.shape,s.dtype),shape:s.shape,dtype:s.dtype}}},Hv=ny(Wn,(e=>{const t=Math.floor(e);return e-t<.5?Math.floor(e):e-t>.5?Math.ceil(e):t%2==0?t:t+1})),jv={kernelName:Wn,backendName:"cpu",kernelFunc:Hv},qv=by((e=>1/Math.sqrt(e))),Kv=sy(Un,qv),Xv={kernelName:Un,backendName:"cpu",kernelFunc:Kv};function Yv(e,t,n,s,r,a,i,o,l,u){const c=[s/r,r],h=e.values,p=t.values;if(0===s)return Bo(n,t.dtype);const d=Bo(c,t.dtype);d.values.fill(l);for(let e=0;e<a;e++){const a=[];let l=0;for(let t=0;t<i;t++){const n=h[e*i+t];a.push(n),l+=n*o[t]}if(l<0||l>=s/r)throw new Error(`Invalid indices: ${a} does not index into ${n}`);for(let n=0;n<r;n++)u?d.values[l*r+n]+=p[e*r+n]:d.values[l*r+n]=0===t.rank?p[0]:p[e*r+n]}return d}const Zv={kernelName:Vn,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{indices:r,updates:a}=t,{shape:i}=s,{sliceRank:o,numUpdates:l,sliceSize:u,strides:c,outputSize:h}=Bl.calculateShapes(a,r,i),p=Yv(n.bufferSync(r),n.bufferSync(a),i,h,u,l,o,c,0,!0);return n.makeTensorInfo(i,p.dtype,p.values)}};const Jv={kernelName:Gn,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n}=e,{condition:s,t:r,e:a}=t;ty([s,r,a],"select");const i=s.shape.length,o=n.data.get(s.dataId).values,l=n.data.get(r.dataId).values,u=n.data.get(a.dataId).values,c=ia(r.dtype,a.dtype),h=Us.makeZerosTypedArray(Us.sizeFromShape(r.shape),c);let p=0;const d=0===i||i>1||1===r.shape.length?1:Us.sizeFromShape(r.shape.slice(1));for(let e=0;e<o.length;e++)for(let t=0;t<d;t++)1===o[e]?h[p++]=l[e]:h[p++]=u[e];return n.makeTensorInfo(r.shape,c,h)}},Qv=Bl.SELU_SCALEALPHA,ek=Bl.SELU_SCALE,tk=ny(Hn,(e=>e>=0?ek*e:Qv*(Math.exp(e)-1))),nk={kernelName:Hn,backendName:"cpu",kernelFunc:tk},sk=ny(Xn,(e=>e<0?-1:e>0?1:0)),rk={kernelName:Xn,backendName:"cpu",kernelFunc:sk},ak=ny(qn,(e=>Math.sin(e))),ik={kernelName:qn,backendName:"cpu",kernelFunc:ak},ok=ny(Kn,(e=>Math.sinh(e))),lk={kernelName:Kn,backendName:"cpu",kernelFunc:ok},uk=Math.log(1.1920928955078125e-7)+2,ck=ny(Zn,(e=>{const t=e>-uk,n=e<uk,s=Math.exp(e);let r;return r=n?s:t?e:Math.log(1+s),r})),hk={kernelName:Zn,backendName:"cpu",kernelFunc:ck};const pk={kernelName:es,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{x:r}=t,{blockShape:a,paddings:i}=s;ty([r],"spaceToBatchND");const o=Us.sizeFromShape(a),l=[[0,0]];l.push(...i);for(let e=1+a.length;e<r.shape.length;++e)l.push([0,0]);const u=Ev.kernelFunc({inputs:{x:r},backend:n,attrs:{paddings:l,constantValue:0}}),c=Bl.getReshaped(u.shape,a,o,!1),h=Bl.getPermuted(c.length,a.length,!1),p=Bl.getReshapedPermuted(u.shape,a,o,!1),d=My({inputs:{x:u},backend:n,attrs:{shape:c}}),f=Xy({inputs:{x:d},backend:n,attrs:{perm:h}}),m=My({inputs:{x:f},backend:n,attrs:{shape:p}});return n.disposeIntermediateTensorInfo(u),n.disposeIntermediateTensorInfo(d),n.disposeIntermediateTensorInfo(f),m}};function dk(e,t,n,s,r,a,i){const o=t[0],l=a[0],u=new Array(l),c=new Array(o),h=t[1];if(0===l){if(0!==o)throw new Error(Bl.getSparseFillEmptyRowsIndicesDenseShapeMismatch(o));return[Us.getArrayFromDType(n,0),[0,h],Us.getArrayFromDType(r,0),u,c]}let p=!0,d=0;const f=new Array(l).fill(0);for(let t=0;t<o;++t){const n=e[t*h];if(n<0)throw new Error(Bl.getSparseFillEmptyRowsNegativeIndexErrorMessage(t,n));if(n>=l)throw new Error(Bl.getSparseFillEmptyRowsOutOfRangeIndexErrorMessage(t,n,l));++f[n],p=p&&n>=d,d=n}let m=!0;for(let e=0;e<l;++e){const t=0===f[e];u[e]=t,m=m&&!t,f[e]=Math.max(f[e],1),e>0&&(f[e]+=f[e-1])}if(m&&p){const t=e,n=s;for(let e=0;e<o;++e)c[e]=e;return[t,[o,h],n,u,c]}{const t=f[l-1],a=Us.getArrayFromDType(n,t*h),p=Us.getArrayFromDType(r,t),d=new Array(l).fill(0);for(let t=0;t<o;++t){const n=e[t*h],r=d[n],i=(0===n?0:f[n-1])+r;d[n]++;for(let n=0;n<h;++n)a[i*h+n]=e[t*h+n];p[i]=s[t],c[t]=i}for(let e=0;e<l;++e){if(0===d[e]){const t=0===e?0:f[e-1];a[t*h+0]=e;for(let e=1;e<h;++e)a[t*h+e]=0;p[t]=i}}return[a,[t,h],p,u,c]}}const fk={kernelName:ss,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n}=e,{indices:s,values:r,denseShape:a,defaultValue:i}=t;if(1!==a.shape.length)throw new Error(`Dense shape must be a vector, saw:\n        ${a.shape}`);if(2!==s.shape.length)throw new Error(`Indices must be a matrix, saw:\n        ${s.shape}`);if(1!==r.shape.length)throw new Error(`Values must be a vector, saw:\n        ${r.shape}`);if(0!==i.shape.length)throw new Error(`Default value must be a scalar, saw:\n        ${i.shape}`);const o=n.data.get(s.dataId).values,l=n.data.get(r.dataId).values,u=n.data.get(a.dataId).values,c=n.data.get(i.dataId).values[0],[h,p,d,f,m]=dk(o,s.shape,s.dtype,l,r.dtype,u,c);return[n.makeTensorInfo(p,s.dtype,h),n.makeTensorInfo([p[0]],r.dtype,d),n.makeTensorInfo([f.length],"bool",new Uint8Array(f.map((e=>Number(e))))),n.makeTensorInfo([m.length],s.dtype,new Int32Array(m))]}};function mk(e,t,n,s,r){const a=Us.sizeFromShape(s),i=t[0],o=r.length,l=[];let u=1,c=-1;for(let e=0;e<o;++e){const t=r[e];if(-1===t){if(-1!==c)throw new Error(Bl.getSparseReshapeMultipleNegativeOneOutputDimErrorMessage(c,e));c=e,l.push(1)}else{if(t<0)throw new Error(Bl.getSparseReshapeNegativeOutputDimErrorMessage(e,t));u*=t,l.push(t)}}if(-1!==c){if(u<=0)throw new Error(Bl.getSparseReshapeEmptyTensorZeroOutputDimErrorMessage());const e=Math.trunc(a/u);if(u*e!==a)throw new Error(Bl.getSparseReshapeInputOutputMultipleErrorMessage(s,l));l[c]=e}if(Us.sizeFromShape(l)!==a)throw new Error(Bl.getSparseReshapeInputOutputMismatchErrorMessage(s,l));const h=s.length,p=[];if(h>0){p[h-1]=1;for(let e=h-2;e>=0;--e)p[e]=p[e+1]*s[e+1]}const d=[];if(o>0){d[o-1]=1;for(let e=o-2;e>=0;--e)d[e]=d[e+1]*l[e+1]}const f=Us.getArrayFromDType(n,i*o);for(let t=0;t<i;++t){let n=0;for(let s=0;s<h;++s)n+=e[t*h+s]*p[s];for(let e=0;e<o;++e)f[t*o+e]=Math.trunc(n/d[e]),n%=d[e]}return[f,[i,o],l]}const gk={kernelName:rs,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n}=e,{inputIndices:s,inputShape:r,newShape:a}=t;if(2!==s.shape.length)throw new Error(`Input indices should be a matrix but received shape\n        ${s.shape}`);if(1!==r.shape.length)throw new Error(`Input shape should be a vector but received shape\n        ${r.shape}`);if(1!==a.shape.length)throw new Error(`Target shape should be a vector but received shape ${a.shape}`);const i=Array.from(n.data.get(r.dataId).values),o=n.data.get(s.dataId).values,l=Array.from(n.data.get(a.dataId).values),[u,c,h]=mk(o,s.shape,s.dtype,i,l);return[n.makeTensorInfo(c,s.dtype,u),n.makeTensorInfo([h.length],a.dtype,new Int32Array(h))]}};function yk(e,t,n,s,r,a=!1,i=0){const o=s.length,l=[t[0],e.length/t[0]],u=l[1],c=o>0?r[o-1]+1:0;if(c<0)throw new Error(Bl.getSparseSegmentReductionNegativeSegmentIdsErrorMessage());const h=t.slice();h[0]=c;const p=h.reduce(((e,t)=>e*t),1),d=Us.getArrayFromDType(n,p);if(0===o)return c>0&&d.fill(i),[d,h];if(c<=0)throw new Error(Bl.getSparseSegmentReductionNegativeSegmentIdsErrorMessage());let f=0,m=1,g=0,y=r[f];for(;;){let t=0;if(m<o){if(t=r[m],y===t){++m;continue}if(y>=t)throw new Error(Bl.getSparseSegmentReductionNonIncreasingSegmentIdsErrorMessage())}if(y<0||y>=c)throw new Error(Bl.getSparseSegmentReductionSegmentIdOutOfRangeErrorMessage(y,c));y>g&&d.fill(i,g*u,y*u);for(let t=f;t<m;++t){const n=s[t];if(n<0||n>=l[0])throw new Error(Bl.getSparseSegmentReductionIndicesOutOfRangeErrorMessage(t,s[t],l[0]));for(let t=0;t<u;t++)d[y*u+t]+=e[n*u+t]}if(a)for(let e=0;e<u;e++)d[y*u+e]/=m-f;if(f=m,++m,g=y+1,y=t,m>o)break}return g<c&&d.fill(i,g*u,c*u),[d,h]}const bk={kernelName:as,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n}=e,{data:s,indices:r,segmentIds:a}=t;if(s.shape.length<1)throw new Error("Data should be at least 1 dimensional but received scalar");if(1!==r.shape.length)throw new Error(`Indices should be a vector but received shape\n          ${r.shape}`);if(1!==a.shape.length)throw new Error(`Segment ids should be a vector but received shape\n          ${a.shape}`);if(r.shape[0]!==a.shape[0])throw new Error("segmentIds and indices should have same size.");const i=n.data.get(s.dataId).values,o=n.data.get(r.dataId).values,l=n.data.get(a.dataId).values,[u,c]=yk(i,s.shape,s.dtype,o,l,!0);return n.makeTensorInfo(c,s.dtype,u)}};const xk={kernelName:is,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n}=e,{data:s,indices:r,segmentIds:a}=t;if(s.shape.length<1)throw new Error("Data should be at least 1 dimensional but received scalar");if(1!==r.shape.length)throw new Error(`Indices should be a vector but received shape\n         ${r.shape}`);if(1!==a.shape.length)throw new Error(`Segment ids should be a vector but received shape\n         ${a.shape}`);if(r.shape[0]!==a.shape[0])throw new Error("segmentIds and indices should have same size.");const i=n.data.get(s.dataId).values,o=n.data.get(r.dataId).values,l=n.data.get(a.dataId).values,[u,c]=yk(i,s.shape,s.dtype,o,l);return n.makeTensorInfo(c,s.dtype,u)}};const wk={kernelName:os,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{sparseIndices:r,sparseValues:a,defaultValue:i}=t,{outputShape:o}=s,{sliceRank:l,numUpdates:u,sliceSize:c,strides:h,outputSize:p}=Bl.calculateShapes(a,r,o),d=Yv(n.bufferSync(r),n.bufferSync(a),o,p,c,u,l,h,n.data.get(i.dataId).values[0],!1);return n.makeTensorInfo(o,d.dtype,d.values)}};const vk={kernelName:ts,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{x:r}=t,{numOrSizeSplits:a,axis:i}=s,o=Us.parseAxisParam(i,r.shape)[0],l=Bl.prepareSplitSize(r,a,o),u=new Array(r.shape.length).fill(0),c=r.shape.slice();return l.map((e=>{const t=[...c];t[o]=e;const s=vb({inputs:{x:r},backend:n,attrs:{begin:u,size:t}});return u[o]+=e,s}))}},kk=by((e=>Math.sqrt(e))),Ik=ny(Jn,(e=>Math.sqrt(e))),Sk={kernelName:Jn,backendName:"cpu",kernelFunc:Ik},Nk={kernelName:us,backendName:"cpu",kernelFunc:({inputs:e,backend:t})=>{const{x:n}=e,s=t;ty(n,"square");const r=s.data.get(n.dataId).values,a=new Float32Array(r.length);for(let e=0;e<r.length;++e){const t=r[e];a[e]=t*t}return{dataId:s.write(a,n.shape,n.dtype),shape:n.shape,dtype:n.dtype}}},Tk=cy(((e,t)=>{const n=e-t;return n*n})),Ck=Ay(ls,Tk),$k={kernelName:ls,backendName:"cpu",kernelFunc:Ck},Ek=ny(Ns,((e,t)=>{const n=t;return isNaN(e)?NaN:e>0?1:n.alpha})),Ak={kernelName:Ns,backendName:"cpu",kernelFunc:Ek};function Rk(e,t,n,s){const r=Bo(e,t.dtype);for(let e=0;e<r.size;e++){const a=r.indexToLoc(e),i=new Array(a.length);for(let e=0;e<i.length;e++)i[e]=a[e]*n[e]+s[e];r.set(t.get(...i),...a)}return r}const Fk={kernelName:cs,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{x:r}=t,{begin:a,end:i,strides:o,beginMask:l,endMask:u,ellipsisMask:c,newAxisMask:h,shrinkAxisMask:p}=s;ty(r,"stridedSlice");const{finalShapeSparse:d,finalShape:f,isIdentity:m,sliceDim0:g,isSimpleSlice:y,begin:b,end:x,strides:w}=yl.sliceInfo(r.shape,a,i,o,l,u,c,h,p);let v;if(m)v=My({inputs:{x:r},backend:n,attrs:{shape:f}});else if(g||y){Us.assert(r.shape.length>=1,(()=>`Input must have rank at least 1, got: ${r.shape.length}`));const e=yl.computeOutShape(b,x,w),t=vb({inputs:{x:r},backend:n,attrs:{begin:b,size:e}});v=My({inputs:{x:t},backend:n,attrs:{shape:f}}),n.disposeIntermediateTensorInfo(t)}else{const e=Rk(d,n.bufferSync(r),w,b);v=n.makeTensorInfo(f,e.dtype,e.values)}return v}};class Dk{constructor(e,t,n,s,r,a){this.separator=Us.encodeString(e),this.nGramWidths=t,this.leftPad=Us.encodeString(n),this.rightPad=Us.encodeString(s),this.padWidth=r,this.preserveShort=a}getPadWidth(e){return Math.min(this.padWidth<0?e-1:this.padWidth,e-1)}getNumNGrams(e,t){const n=this.getPadWidth(t);return Math.max(0,e+2*n-t+1)}createNGrams(e,t,n,s,r,a){for(let i=0;i<r;++i){const o=this.getPadWidth(a),l=Math.max(0,o-i),u=Math.max(0,o-(r-(i+1))),c=a-(l+u),h=t+(l>0?0:i-o);let p=0;p+=l*this.leftPad.length;for(let t=0;t<c;++t)p+=e[h+t].length;p+=u*this.rightPad.length;p+=(l+u+c-1)*this.separator.length,n[s+i]=new Uint8Array(p);const d=n[s+i];let f=0;const m=e=>e.forEach((e=>d[f++]=e));for(let e=0;e<l;++e)m(this.leftPad),m(this.separator);for(let t=0;t<c-1;++t)m(e[h+t]),m(this.separator);if(c>0){m(e[h+c-1]);for(let e=0;e<u;++e)m(this.separator),m(this.rightPad)}else{for(let e=0;e<u-1;++e)m(this.rightPad),m(this.separator);m(this.rightPad)}}}compute(e,t){const n=e.length,s=t.length;if(s>0){let e=t[0];if(0!==e)throw new Error(`First split value must be 0, got ${e}`);for(let r=1;r<s;++r){let s=t[r]>=e;if(s=s&&t[r]<=n,!s)throw new Error(`Invalid split value ${t[r]}, must be in [${e}, ${n}]`);e=t[r]}if(e!==n)throw new Error(`Last split value must be data size. Expected ${n}, got ${e}`)}const r=s-1,a=Us.getArrayFromDType("int32",s);if(0===n||0===s){const e=new Array(n);for(let e=0;e<=r;++e)a[e]=0;return[e,a]}a[0]=0;for(let e=1;e<=r;++e){const n=t[e]-t[e-1];let s=0;this.nGramWidths.forEach((e=>{s+=this.getNumNGrams(n,e)})),this.preserveShort&&n>0&&0===s&&(s=1),a[e]=a[e-1]+s}const i=new Array(a[r]);for(let n=0;n<r;++n){const s=t[n];let r=a[n];if(this.nGramWidths.forEach((a=>{const o=t[n+1]-t[n],l=this.getNumNGrams(o,a);this.createNGrams(e,s,i,r,l,a),r+=l})),this.preserveShort&&r===a[n]){const a=t[n+1]-t[n];if(0===a)continue;const o=a+2*this.padWidth,l=1;this.createNGrams(e,s,i,r,l,o)}}return[i,a]}}function _k(e,t,n,s,r,a,i,o){return new Dk(n,s,r,a,i,o).compute(e,t)}const Ok={kernelName:hs,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{separator:r,nGramWidths:a,leftPad:i,rightPad:o,padWidth:l,preserveShortSequences:u}=s,{data:c,dataSplits:h}=t,p=n.data.get(c.dataId).values,d=n.data.get(h.dataId).values,[f,m]=_k(p,d,r,a,i,o,l,u);return[n.makeTensorInfo([f.length],"string",f),n.makeTensorInfo(h.shape,"int32",m)]}};function Mk(e,t,n,s){if(!e.length)return;if(0===t.length){for(let t=0;t<e.length;++t)s.push(e.subarray(t,t+1));return}if(1===t.length){const r=t[0];let a=e.indexOf(r);for(;-1!==a;){const t=e.subarray(0,a);n&&0===t.length||s.push(t),a=(e=e.subarray(a+1)).indexOf(r)}return void(n&&0===e.length||s.push(e))}let r=0;for(let a=0;a<e.length+1;a++)if(a===e.length||-1!==t.indexOf(e[a])){const t=e.subarray(r,a);n&&0===t.length||s.push(t),r=a+1}}function Lk(e,t,n){const s=e.length,r=[];let a=0,i=0;const o=new Array(s);for(let l=0;l<s;++l){const s=r.length;Mk(e[l],t,n,r);const u=r.length-s;o[l]=u,a+=u,i=Math.max(i,u)}const l=Us.getArrayFromDType("int32",2*a),u=new Array(a),c=[s,i];let h=0;for(let e=0;e<s;++e)for(let t=0;t<o[e];++t)l[2*h]=e,l[2*h+1]=t,u[h]=r[h],++h;return[l,u,c]}const zk={kernelName:ps,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{skipEmpty:r}=s,{input:a,delimiter:i}=t;if("string"!==a.dtype)throw new Error("Input must be of datatype string");if(1!==a.shape.length)throw new Error(`Input must be a vector, got shape: ${a.shape}`);if(0!==i.shape.length)throw new Error(`Delimiter must be a scalar, got shape: ${i.shape}`);const o=n.data.get(a.dataId).values,l=n.data.get(i.dataId).values[0],[u,c,h]=Lk(o,l,r),p=c.length;return[n.makeTensorInfo([p,2],"int32",u),n.makeTensorInfo([p],"string",c),n.makeTensorInfo([2],"int32",new Int32Array(h))]}};function Bk(e,t){const n=Us.getArrayFromDType("int32",e.length);for(let s=0;s<e.length;++s)n[s]=Us.fingerPrint64(e[s]).modulo(t).getLowBitsUnsigned();return n}const Pk={kernelName:ds,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{numBuckets:r}=s,{input:a}=t;if("string"!==a.dtype)throw new Error("Input must be of datatype string");if(r<=0)throw new Error("Number of buckets must be at least 1");const i=Bk(n.data.get(a.dataId).values,r);return n.makeTensorInfo(a.shape,"int32",i)}},Wk=ny(ms,(e=>Math.tan(e))),Uk={kernelName:ms,backendName:"cpu",kernelFunc:Wk},Vk=ny(gs,(e=>Math.tanh(e)));function Gk(e,t){const n=new Array(e.rank);for(let s=0;s<n.length;s++)n[s]=e.shape[s]*t[s];const s=Bo(n,e.dtype);for(let t=0;t<s.values.length;++t){const n=s.indexToLoc(t),r=new Array(e.rank);for(let t=0;t<r.length;t++)r[t]=n[t]%e.shape[t];const a=e.locToIndex(r);s.values[t]=e.values[a]}return s}const Hk=(e,t)=>{const n=t.value-e.value;return 0===n?e.index-t.index:n};function jk(e,t,n=0,s=e.length-1){for(;s>n;){if(s-n>600){const r=s-n+1,a=t-n+1,i=Math.log(r),o=.5*Math.exp(2*i/3),l=.5*Math.sqrt(i*o*(r-o)/r)*Math.sign(a-r/2);jk(e,t,Math.max(n,Math.floor(t-a*o/r+l)),Math.min(s,Math.floor(t+(r-a)*o/r+l)))}const r=e[t];let a=n,i=s;for(Us.swap(e,n,t),Hk(e[s],r)>0&&Us.swap(e,n,s);a<i;){for(Us.swap(e,a,i),a++,i--;Hk(e[a],r)<0;)a+=1;for(;Hk(e[i],r)>0;)i-=1}0===Hk(e[n],r)?Us.swap(e,n,i):(i+=1,Us.swap(e,i,s)),i<=t&&(n=i+1),t<=i&&(s=i-1)}}function qk(e,t,n,s,r){const a=t[t.length-1],[i,o]=[e.length/a,a],l=Us.getTypedArrayFromDType(n,i*s),u=Us.getTypedArrayFromDType("int32",i*s);for(let t=0;t<i;t++){const n=t*o,a=e.subarray(n,n+o);let i=new Array(a.length);a.forEach(((e,t)=>i[t]={value:e,index:t})),s<i.length&&(jk(i,s),i=i.slice(0,s)),r&&i.sort(Hk);const c=t*s,h=l.subarray(c,c+s),p=u.subarray(c,c+s);for(let e=0;e<s;e++)h[e]=i[e].value,p[e]=i[e].index}const c=t.slice();return c[c.length-1]=s,[Bo(c,n,l),Bo(c,"int32",u)]}const Kk={kernelName:xs,backendName:"cpu",kernelFunc:function(e){const{inputs:t,attrs:n,backend:s}=e,{image:r,transforms:a}=t,{interpolation:i,fillMode:o,fillValue:l,outputShape:u}=n,[c,h,p,d]=r.shape,[f,m]=null!=u?u:[h,p],g=[c,f,m,d],y=Us.computeStrides(r.shape),b=y[0],x=y[1],w=y[2],v=Us.getTypedArrayFromDType(r.dtype,Us.sizeFromShape(g));v.fill(l);const k=s.data.get(r.dataId).values,I=s.data.get(a.dataId).values;for(let e=0;e<c;++e){const t=1===a.shape[0]?I:I.subarray(8*e,8*e+8);for(let n=0;n<f;++n)for(let s=0;s<m;++s)for(let r=0;r<d;++r){let a;const u=t[6]*s+t[7]*n+1;if(0===u)continue;const c=(t[0]*s+t[1]*n+t[2])/u,d=(t[3]*s+t[4]*n+t[5])/u,f=Xk(c,p,o),m=Xk(d,h,o);switch(i){case"nearest":a=Zk(k,h,p,b,x,w,e,m,f,r,l);break;case"bilinear":a=Jk(k,h,p,b,x,w,e,m,f,r,l);break;default:throw new Error(`Error in Transform: Expect 'nearest' or 'bilinear', but got ${i}`)}v[e*b+n*x+s*w+r]=a}return s.makeTensorInfo(g,r.dtype,v)}return{dataId:s.write(v,g,r.dtype),shape:r.shape,dtype:r.dtype}}};function Xk(e,t,n){switch(n){case"reflect":return function(e,t){let n=e;if(n<0)if(t<=1)n=0;else{const e=2*t;n<e&&(n=e*Math.trunc(-n/e)+n),n=n<-t?n+e:-n-1}else if(n>t-1)if(t<=1)n=0;else{const e=2*t;n-=e*Math.trunc(n/e),n>=t&&(n=e-n-1)}return Us.clamp(0,n,t-1)}(e,t);case"wrap":return function(e,t){let n=e;if(n<0)if(t<=1)n=0;else{const e=t-1;n+=t*(Math.trunc(-n/e)+1)}else if(n>t-1)if(t<=1)n=0;else{const e=t-1;n-=t*Math.trunc(n/e)}return Us.clamp(0,n,t-1)}(e,t);case"nearest":return function(e,t){return Us.clamp(0,e,t-1)}(e,t);default:return function(e,t){return e}(e)}}function Yk(e,t,n,s,r,a,i,o,l,u,c){return 0<=o&&o<t&&0<=l&&l<n?e[i*s+o*r+l*a+u]:c}function Zk(e,t,n,s,r,a,i,o,l,u,c){return Yk(e,t,n,s,r,a,i,Math.round(o),Math.round(l),u,c)}function Jk(e,t,n,s,r,a,i,o,l,u,c){const h=Math.floor(o),p=Math.floor(l),d=h+1,f=p+1;return(d-o)*((f-l)*Yk(e,t,n,s,r,a,i,h,p,u,c)+(l-p)*Yk(e,t,n,s,r,a,i,h,f,u,c))+(o-h)*((f-l)*Yk(e,t,n,s,r,a,i,d,p,u,c)+(l-p)*Yk(e,t,n,s,r,a,i,d,f,u,c))}function Qk(e,t,n,s){const r=Us.parseAxisParam(t,n)[0],a=[1,n[0],1];for(let e=0;e<r;e++)a[0]*=n[e];a[1]=n[r];for(let e=r+1;e<n.length;e++)a[2]*=n[e];const i={},o=new Int32Array(n[r]),l=new Ur(a,s,e),u=[],c=1===a[0]&&1===a[2];for(let t=0;t<n[r];t++){let n;if(c)n=e[t].toString();else{const e=[];for(let n=0;n<a[0];n++)for(let s=0;s<a[2];s++)e.push(l.get(n,t,s));n=e.join(",")}if(void 0!==i[n])o[t]=i[n];else{const e=Object.keys(i).length;i[n]=e,o[t]=e,u.push(t)}}const h=a.slice();h[1]=Object.keys(i).length;const p=new Ur(h,s);u.forEach(((e,t)=>{for(let n=0;n<a[0];n++)for(let s=0;s<a[2];s++)p.set(l.get(n,e,s),n,t,s)}));const d=n.slice();return d[r]=h[1],{outputValues:p.values,outputShape:d,indices:o}}const eI=[Py,Uy,Gy,jy,Oy,qy,Zy,Jy,Qy,eb,nb,rb,ib,ub,hb,mb,gb,yb,bb,By,xb,Ib,Tb,Cb,Ey,Ab,Fb,Sy,Db,zb,Pb,Wb,Ub,Vb,Gb,Hb,qb,Xb,Yb,Zb,Jb,Qb,tx,nx,sx,rx,ax,ix,ox,fx,ay,mx,bx,Tx,Ex,Rx,_x,Hx,qx,Kx,Zx,ew,tw,nw,rw,iw,uw,pw,oy,dw,Mb,mw,yw,xw,uy,kw,Nw,Cw,Aw,Fw,Ow,Lw,Pw,Ww,Uw,Hw,Kw,Xw,Yw,Zw,Jw,Qw,ev,tv,rv,av,lv,hv,hx,dv,mv,yv,xv,kv,Iv,Tv,$v,Ev,Fv,dy,_v,Mv,Cy,Lx,zv,my,yy,Ly,Bv,Pv,Wv,Uv,Vv,Gv,jv,Xv,Zv,Jv,nk,vy,rk,ik,lk,kb,cv,hk,pk,fk,gk,bk,xk,wk,vk,Sk,Nk,$k,Ak,Fk,Ok,zk,Pk,Wx,dx,Uk,{kernelName:gs,backendName:"cpu",kernelFunc:Vk},{kernelName:ys,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{x:r}=t,{reps:a}=s;ty(r,"tile");const i=Gk(n.bufferSync(r),a);return n.makeTensorInfo(i.shape,i.dtype,i.values)}},{kernelName:bs,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{x:r}=t,{k:a,sorted:i}=s;ty(r,"topk");const o=n.data.get(r.dataId).values,[l,u]=qk(o,r.shape,r.dtype,a,i);return[n.makeTensorInfo(l.shape,l.dtype,l.values),n.makeTensorInfo(u.shape,u.dtype,u.values)]}},Kk,Yy,{kernelName:vs,backendName:"cpu",kernelFunc:function(e){const{inputs:t,attrs:n,backend:s}=e,{axis:r}=n,{x:a}=t;ty(a,"unique");const i=s.data.get(a.dataId).values,{outputValues:o,outputShape:l,indices:u}=Qk(i,r,a.shape,a.dtype);return[s.makeTensorInfo(l,a.dtype,o),s.makeTensorInfo([u.length],"int32",u)]}},{kernelName:ks,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{value:r}=t;let{axis:a}=s;a<0&&(a+=r.shape.length);const i=r.shape.length,o=r.shape[a],l=new Array(i-1);let u=0;for(let e=0;e<i;e++)e!==a&&(l[u++]=r.shape[e]);const c=new Array(i).fill(0),h=r.shape.slice();h[a]=1;const p=new Array(o);for(let e=0;e<p.length;e++){c[a]=e;const t=vb({inputs:{x:r},backend:n,attrs:{begin:c,size:h}});p[e]=My({inputs:{x:t},backend:n,attrs:{shape:l}}),n.disposeIntermediateTensorInfo(t)}return p}},{kernelName:Is,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{x:r,segmentIds:a}=t,{numSegments:i}=s;ty(r,"unsortedSegmentSum");const o=[],l=[],u=r.shape.length-a.shape.length;let c=a;for(let e=0;e<u;++e){const t=Ax({inputs:{input:c},backend:n,attrs:{dim:e+1}});c=t,l.push(t)}for(let e=0;e<i;++e){const t=Us.createScalarValue(e,"int32"),s=n.makeTensorInfo([],"int32",t),a=yx({inputs:{a:s,b:c},backend:n}),i=$y({inputs:{x:a},backend:n,attrs:{dtype:"float32"}}),u=cx({inputs:{a:i,b:r},backend:n}),h=px({inputs:{x:u},backend:n,attrs:{axis:0,keepDims:!1}});o.push(h),l.push(s),l.push(a),l.push(i),l.push(u),l.push(h)}const h=Cv({inputs:o,backend:n,attrs:{axis:0}});return l.forEach((e=>n.disposeIntermediateTensorInfo(e))),h}},Nv];for(const e of eI)Bs(e);const tI=Uc.whereImpl;class nI extends l{constructor(){super(),this.blockSize=48,this.firstUse=!0,this.data=new o(this,Qc())}nextDataId(){return nI.nextDataId++}write(e,t,n){this.firstUse&&(this.firstUse=!1,le().get("IS_NODE")&&Bl.warn("\n============================\nHi there 👋. Looks like you are running TensorFlow.js in Node.js. To speed things up dramatically, install our node backend, which binds to TensorFlow C++, by running npm i @tensorflow/tfjs-node, or npm i @tensorflow/tfjs-node-gpu if you have CUDA. Then call require('@tensorflow/tfjs-node'); (-gpu suffix for CUDA) at the start of your program. Visit https://github.com/tensorflow/tfjs-node for more details.\n============================"));const s={id:this.nextDataId()};return this.data.set(s,{values:e,dtype:n,refCount:1}),s}makeTensorInfo(e,t,n){let s;if("string"===t&&null!=n&&n.length>0&&Us.isString(n[0])){const r=n.map((e=>Us.encodeString(e)));s=this.write(r,e,t)}else s=this.write(n,e,t);return{dataId:s,shape:e,dtype:t}}refCount(e){if(this.data.has(e)){return this.data.get(e).refCount}return 0}incRef(e){this.data.get(e).refCount++}decRef(e){if(this.data.has(e)){this.data.get(e).refCount--}}move(e,t,n,s,r){this.data.set(e,{values:t,dtype:s,refCount:r})}numDataIds(){return this.data.numDataIds()}async read(e){return this.readSync(e)}readSync(e){const{dtype:t,complexTensorInfos:n}=this.data.get(e);if("complex64"===t){const e=this.readSync(n.real.dataId),t=this.readSync(n.imag.dataId);return Bl.mergeRealAndImagArrays(e,t)}return this.data.get(e).values}bufferSync(e){const t=this.readSync(e.dataId);let n=t;if("string"===e.dtype)try{n=t.map((e=>Us.decodeString(e)))}catch(e){throw new Error("Failed to decode encoded string bytes into utf-8")}return Bo(e.shape,e.dtype,n)}makeOutput(e,t,n){const s=this.write(e,t,n);return Qc().makeTensorFromDataId(s,t,n,this)}disposeData(e,t=!1){if(this.data.has(e)){if(this.data.get(e).refCount--,!t&&this.data.get(e).refCount>0)return!1;const{complexTensorInfos:n}=this.data.get(e);null!=n&&(this.disposeData(n.real.dataId,!0),this.disposeData(n.imag.dataId,!0)),this.data.delete(e)}return!0}disposeIntermediateTensorInfo(e){this.disposeData(e.dataId)}async time(e){const t=Us.now();e();return{kernelMs:Us.now()-t}}memory(){return{unreliable:!0,reasons:["The reported memory is an upper bound. Due to automatic garbage collection, the true allocated memory may be less."]}}where(e){ty([e],"where");const t=this.readSync(e.dataId);return tI(e.shape,t)}dispose(){}floatPrecision(){return 32}epsilon(){return super.epsilon()}}nI.nextDataId=0;function sI(){let e,t,n,s,r,a,i,o,l,u;return 2===le().getNumber("WEBGL_VERSION")?(e="#version 300 es",t="in",n="out",s="in",r="texture",a="outputColor",i="out vec4 outputColor;",o="\n      bool isnan_custom(float val) {\n        return (val > 0.0 || val < 0.0) ? false : val != 0.0;\n      }\n\n      bvec4 isnan_custom(vec4 val) {\n        return bvec4(isnan_custom(val.x),\n          isnan_custom(val.y), isnan_custom(val.z), isnan_custom(val.w));\n      }\n\n      #define isnan(value) isnan_custom(value)\n    ",l="",u="\n      #define round(value) newRound(value)\n      int newRound(float value) {\n        return int(floor(value + 0.5));\n      }\n\n      ivec4 newRound(vec4 value) {\n        return ivec4(floor(value + vec4(0.5)));\n      }\n    "):(e="",t="attribute",n="varying",s="varying",r="texture2D",a="gl_FragColor",i="",o="\n      #define isnan(value) isnan_custom(value)\n      bool isnan_custom(float val) {\n        return (val > 0. || val < 1. || val == 0.) ? false : true;\n      }\n      bvec4 isnan_custom(vec4 val) {\n        return bvec4(isnan(val.x), isnan(val.y), isnan(val.z), isnan(val.w));\n      }\n    ",l="\n      uniform float INFINITY;\n\n      bool isinf(float val) {\n        return abs(val) == INFINITY;\n      }\n      bvec4 isinf(vec4 val) {\n        return equal(abs(val), vec4(INFINITY));\n      }\n    ",u="\n      int round(float value) {\n        return int(floor(value + 0.5));\n      }\n\n      ivec4 round(vec4 value) {\n        return ivec4(floor(value + vec4(0.5)));\n      }\n    "),{version:e,attribute:t,varyingVs:n,varyingFs:s,texture2D:r,output:a,defineOutput:i,defineSpecialNaN:o,defineSpecialInf:l,defineRound:u}}function rI(e,t,n="index"){const s=Us.computeStrides(t);return s.map(((t,r)=>`${`int ${e[r]} = ${n} / ${t}`}; ${r===s.length-1?`int ${e[r+1]} = ${n} - ${e[r]} * ${t}`:`index -= ${e[r]} * ${t}`};`)).join("")}function aI(e,t,n="index"){const s=Us.computeStrides(t);return s.map(((t,r)=>`${`int ${e[r]} = ${n} / outShapeStrides[${r}]`}; ${r===s.length-1?`int ${e[r+1]} = ${n} - ${e[r]} * outShapeStrides[${r}]`:`index -= ${e[r]} * outShapeStrides[${r}]`};`)).join("")}function iI(e,t,n="index"){const s=function(e,t){const n=e.length,s=e.map((e=>`${t}[${e}]`)),r=new Array(n-1);r[n-2]=s[n-1];for(let e=n-3;e>=0;--e)r[e]=`(${r[e+1]} * ${s[e+1]})`;return r}(e.map(((e,t)=>t)),t);return s.map(((t,r)=>`${`int ${e[r]} = ${n} / ${s[r]}`}; ${r===s.length-1?`int ${e[r+1]} = ${n} - ${e[r]} * ${s[r]}`:`index -= ${e[r]} * ${s[r]}`};`)).join("")}function oI(e){const t=Us.computeStrides(e).map((e=>e.toString()));return`\n  int getFlatIndex(ivec3 coords) {\n    return coords.x * ${t[0]} + coords.y * ${t[1]} + coords.z;\n  }\n`}rh("cpu",(()=>new nI),1);const lI="\n  const float FLOAT_MAX = 1.70141184e38;\n  const float FLOAT_MIN = 1.17549435e-38;\n\n  lowp vec4 encode_float(highp float v) {\n    if (isnan(v)) {\n      return vec4(255, 255, 255, 255);\n    }\n\n    highp float av = abs(v);\n\n    if(av < FLOAT_MIN) {\n      return vec4(0.0, 0.0, 0.0, 0.0);\n    } else if(v > FLOAT_MAX) {\n      return vec4(0.0, 0.0, 128.0, 127.0) / 255.0;\n    } else if(v < -FLOAT_MAX) {\n      return vec4(0.0, 0.0,  128.0, 255.0) / 255.0;\n    }\n\n    highp vec4 c = vec4(0,0,0,0);\n\n    highp float e = floor(log2(av));\n    highp float m = exp2(fract(log2(av))) - 1.0;\n\n    c[2] = floor(128.0 * m);\n    m -= c[2] / 128.0;\n    c[1] = floor(32768.0 * m);\n    m -= c[1] / 32768.0;\n    c[0] = floor(8388608.0 * m);\n\n    highp float ebias = e + 127.0;\n    c[3] = floor(ebias / 2.0);\n    ebias -= c[3] * 2.0;\n    c[2] += floor(ebias) * 128.0;\n\n    c[3] += 128.0 * step(0.0, -v);\n\n    return c / 255.0;\n  }\n",{getBroadcastDims:uI}=Bl;function cI(e,t,n){const s=[];if(e.forEach((e=>{const t=Us.sizeFromShape(e.shapeInfo.logicalShape);if(e.shapeInfo.isUniform?s.push(`uniform float ${e.name}${t>1?`[${t}]`:""};`):(s.push(`uniform sampler2D ${e.name};`),s.push(`uniform int offset${e.name};`)),n.enableShapeUniforms){const{uniformShape:t}=vI(n.packedInputs,e.shapeInfo.logicalShape,e.shapeInfo.texShape);switch(t.length){case 1:s.push(`uniform int ${e.name}Shape;`);break;case 2:s.push(`uniform ivec2 ${e.name}Shape;`);break;case 3:s.push(`uniform ivec3 ${e.name}Shape;`);break;case 4:s.push(`uniform ivec4 ${e.name}Shape;`)}s.push(`uniform ivec2 ${e.name}TexShape;`)}})),n.enableShapeUniforms){switch(t.logicalShape.length){case 1:s.push("uniform int outShape;");break;case 2:s.push("uniform ivec2 outShape;"),s.push("uniform int outShapeStrides;");break;case 3:s.push("uniform ivec3 outShape;"),s.push("uniform ivec2 outShapeStrides;");break;case 4:s.push("uniform ivec4 outShape;"),s.push("uniform ivec3 outShapeStrides;")}s.push("uniform ivec2 outTexShape;")}n.customUniforms&&n.customUniforms.forEach((e=>{s.push(`uniform ${e.type} ${e.name}${e.arrayIndex?`[${e.arrayIndex}]`:""};`)}));const r=s.join("\n"),a=e.map((e=>function(e,t,n=!1,s){let r="";r+=n?pI(e,s):hI(e,s);const a=e.shapeInfo.logicalShape,i=t.logicalShape;a.length<=i.length&&(r+=n?function(e,t){const n=e.name,s=n.charAt(0).toUpperCase()+n.slice(1),r="get"+s+"AtOutCoords",a=e.shapeInfo.logicalShape.length,i=t.logicalShape.length,o=uI(e.shapeInfo.logicalShape,t.logicalShape),l=wI(i),u=i-a;let c;const h=["x","y","z","w","u","v"];c=0===a?"":i<2&&o.length>=1?"coords = 0;":o.map((e=>`coords.${h[e+u]} = 0;`)).join("\n");let p="";p=i<2&&a>0?"coords":e.shapeInfo.logicalShape.map(((e,t)=>`coords.${h[t+u]}`)).join(", ");let d="return outputValue;";const f=1===Us.sizeFromShape(e.shapeInfo.logicalShape),m=1===Us.sizeFromShape(t.logicalShape);if(1!==a||f||m){if(f&&!m)d=1===i?"\n        return vec4(outputValue.x, outputValue.x, 0., 0.);\n      ":"\n        return vec4(outputValue.x);\n      ";else if(o.length){const e=a-2,t=a-1;o.indexOf(e)>-1&&o.indexOf(t)>-1?d="return vec4(outputValue.x);":o.indexOf(e)>-1?d="return vec4(outputValue.x, outputValue.y, outputValue.x, outputValue.y);":o.indexOf(t)>-1&&(d="return vec4(outputValue.xx, outputValue.zz);")}}else d="\n      return vec4(outputValue.xy, outputValue.xy);\n    ";return`\n    vec4 ${r}() {\n      ${l} coords = getOutputCoords();\n      ${c}\n      vec4 outputValue = get${s}(${p});\n      ${d}\n    }\n  `}(e,t):function(e,t){const n=e.name,s=n.charAt(0).toUpperCase()+n.slice(1),r="get"+s+"AtOutCoords",a=t.texShape,i=e.shapeInfo.texShape,o=e.shapeInfo.logicalShape.length,l=t.logicalShape.length;if(!e.shapeInfo.isUniform&&o===l&&null==e.shapeInfo.flatOffset&&Us.arraysEqual(i,a))return`\n      float ${r}() {\n        return sampleTexture(${n}, resultUV);\n      }\n    `;const u=wI(l),c=uI(e.shapeInfo.logicalShape,t.logicalShape),h=l-o;let p;const d=["x","y","z","w","u","v"];p=0===o?"":l<2&&c.length>=1?"coords = 0;":c.map((e=>`coords.${d[e+h]} = 0;`)).join("\n");let f="";f=l<2&&o>0?"coords":e.shapeInfo.logicalShape.map(((e,t)=>`coords.${d[t+h]}`)).join(", ");return`\n    float ${r}() {\n      ${u} coords = getOutputCoords();\n      ${p}\n      return get${s}(${f});\n    }\n  `}(e,t));return r}(e,t,n.packedInputs,n.enableShapeUniforms))).join("\n"),i=t.texShape,o=sI(),l=function(e){return`\n    float sampleTexture(sampler2D textureSampler, vec2 uv) {\n      return ${e.texture2D}(textureSampler, uv).r;\n    }\n  `}(o);let u,c,h=function(e){return`${e.version}\n    precision highp float;\n    precision highp int;\n    precision highp sampler2D;\n    ${e.varyingFs} vec2 resultUV;\n    ${e.defineOutput}\n    const vec2 halfCR = vec2(0.5, 0.5);\n\n    struct ivec5\n    {\n      int x;\n      int y;\n      int z;\n      int w;\n      int u;\n    };\n\n    struct ivec6\n    {\n      int x;\n      int y;\n      int z;\n      int w;\n      int u;\n      int v;\n    };\n\n    uniform float NAN;\n    ${e.defineSpecialNaN}\n    ${e.defineSpecialInf}\n    ${e.defineRound}\n\n    int imod(int x, int y) {\n      return x - y * (x / y);\n    }\n\n    int idiv(int a, int b, float sign) {\n      int res = a / b;\n      int mod = imod(a, b);\n      if (sign < 0. && mod != 0) {\n        res -= 1;\n      }\n      return res;\n    }\n\n    //Based on the work of Dave Hoskins\n    //https://www.shadertoy.com/view/4djSRW\n    #define HASHSCALE1 443.8975\n    float random(float seed){\n      vec2 p = resultUV * seed;\n      vec3 p3  = fract(vec3(p.xyx) * HASHSCALE1);\n      p3 += dot(p3, p3.yzx + 19.19);\n      return fract((p3.x + p3.y) * p3.z);\n    }\n\n    ${dI}\n    ${fI}\n    ${mI}\n  `}(o);t.isPacked?(u=function(e,t,n){switch(e.length){case 0:return yI();case 1:return function(e,t,n){const s=[Math.ceil(t[0]/2),Math.ceil(t[1]/2)];if(1===s[0])return n?"\n      int getOutputCoords() {\n        return 2 * int(resultUV.x * ceil(float(outTexShape[1]) / 2.0));\n      }\n    ":`\n      int getOutputCoords() {\n        return 2 * int(resultUV.x * ${s[1]}.0);\n      }\n    `;if(1===s[1])return n?"\n      int getOutputCoords() {\n        return 2 * int(resultUV.y * ceil(float(outTexShape[0]) / 2.0));\n      }\n    ":`\n      int getOutputCoords() {\n        return 2 * int(resultUV.y * ${s[0]}.0);\n      }\n    `;return n?"\n    int getOutputCoords() {\n      ivec2 packedTexShape = ivec2(ceil(float(outTexShape[0]) / 2.0), ceil(float(outTexShape[1]) / 2.0));\n      ivec2 resTexRC = ivec2(resultUV.yx *\n                             vec2(packedTexShape[0], packedTexShape[1]));\n      return 2 * (resTexRC.x * packedTexShape[1] + resTexRC.y);\n    }\n  ":`\n    int getOutputCoords() {\n      ivec2 resTexRC = ivec2(resultUV.yx *\n                             vec2(${s[0]}, ${s[1]}));\n      return 2 * (resTexRC.x * ${s[1]} + resTexRC.y);\n    }\n  `}(0,t,n);case 2:return function(e,t,n){const s=[Math.ceil(t[0]/2),Math.ceil(t[1]/2)];if(Us.arraysEqual(e,t))return n?"\n      ivec2 getOutputCoords() {\n        ivec2 packedTexShape = ivec2(ceil(float(outTexShape[0]) / 2.0), ceil(float(outTexShape[1]) / 2.0));\n        return 2 * ivec2(resultUV.yx * vec2(packedTexShape[0], packedTexShape[1]));\n      }\n    ":`\n      ivec2 getOutputCoords() {\n        return 2 * ivec2(resultUV.yx * vec2(${s[0]}, ${s[1]}));\n      }\n    `;const r=Math.ceil(e[1]/2);return n?"\n    ivec2 getOutputCoords() {\n      ivec2 packedTexShape = ivec2(ceil(float(outTexShape[0]) / 2.0), ceil(float(outTexShape[1]) / 2.0));\n      int texelsInLogicalRow = int(ceil(float(outShape[1]) / 2.0));\n      ivec2 resTexRC = ivec2(resultUV.yx *\n                             vec2(packedTexShape[0], packedTexShape[1]));\n\n      int index = resTexRC.x * packedTexShape[1] + resTexRC.y;\n      int r = 2 * (index / texelsInLogicalRow);\n      int c = imod(index, texelsInLogicalRow) * 2;\n\n      return ivec2(r, c);\n    }\n  ":`\n    ivec2 getOutputCoords() {\n      ivec2 resTexRC = ivec2(resultUV.yx *\n                             vec2(${s[0]}, ${s[1]}));\n\n      int index = resTexRC.x * ${s[1]} + resTexRC.y;\n      int r = 2 * (index / ${r});\n      int c = imod(index, ${r}) * 2;\n\n      return ivec2(r, c);\n    }\n  `}(e,t,n);case 3:return function(e,t,n){if(n)return"\n    ivec3 getOutputCoords() {\n      ivec2 packedTexShape = ivec2(ceil(float(outTexShape[0]) / 2.0), ceil(float(outTexShape[1]) / 2.0));\n      int texelsInLogicalRow = int(ceil(float(outShape[2]) / 2.0));\n      int texelsInBatch = texelsInLogicalRow * int(ceil(float(outShape[1]) / 2.0));\n      ivec2 resTexRC = ivec2(resultUV.yx *\n                             vec2(packedTexShape[0], packedTexShape[1]));\n      int index = resTexRC.x * packedTexShape[1] + resTexRC.y;\n\n      int b = index / texelsInBatch;\n      index -= b * texelsInBatch;\n\n      int r = 2 * (index / texelsInLogicalRow);\n      int c = imod(index, texelsInLogicalRow) * 2;\n\n      return ivec3(b, r, c);\n    }\n  ";const s=[Math.ceil(t[0]/2),Math.ceil(t[1]/2)],r=Math.ceil(e[2]/2),a=r*Math.ceil(e[1]/2);return`\n    ivec3 getOutputCoords() {\n      ivec2 resTexRC = ivec2(resultUV.yx *\n                             vec2(${s[0]}, ${s[1]}));\n      int index = resTexRC.x * ${s[1]} + resTexRC.y;\n\n      int b = index / ${a};\n      index -= b * ${a};\n\n      int r = 2 * (index / ${r});\n      int c = imod(index, ${r}) * 2;\n\n      return ivec3(b, r, c);\n    }\n  `}(e,t,n);default:return function(e,t,n){if(n)return"\n    ivec4 getOutputCoords() {\n      ivec2 packedTexShape = ivec2(ceil(float(outTexShape[0]) / 2.0), ceil(float(outTexShape[1]) / 2.0));\n      ivec2 resTexRC = ivec2(resultUV.yx *\n                             vec2(packedTexShape[0], packedTexShape[1]));\n      int index = resTexRC.x * packedTexShape[1] + resTexRC.y;\n\n      int texelsInLogicalRow = int(ceil(float(outShape[3]) / 2.0));\n      int texelsInBatch = texelsInLogicalRow * int(ceil(float(outShape[2]) / 2.0));\n      int texelsInBatchN = texelsInBatch * outShape[1];\n\n      int b2 = index / texelsInBatchN;\n      index -= b2 * texelsInBatchN;\n\n      int b = index / texelsInBatch;\n      index -= b * texelsInBatch;\n\n      int r = 2 * (index / texelsInLogicalRow);\n      int c = imod(index, texelsInLogicalRow) * 2;\n\n      return ivec4(b2, b, r, c);\n    }\n  ";const s=[Math.ceil(t[0]/2),Math.ceil(t[1]/2)],r=Math.ceil(e[e.length-1]/2),a=r*Math.ceil(e[e.length-2]/2);let i=a,o="",l="b, r, c";for(let t=2;t<e.length-1;t++)i*=e[e.length-t-1],o=`\n      int b${t} = index / ${i};\n      index -= b${t} * ${i};\n    `+o,l=`b${t}, `+l;return`\n    ivec${e.length} getOutputCoords() {\n      ivec2 resTexRC = ivec2(resultUV.yx *\n                             vec2(${s[0]}, ${s[1]}));\n      int index = resTexRC.x * ${s[1]} + resTexRC.y;\n\n      ${o}\n\n      int b = index / ${a};\n      index -= b * ${a};\n\n      int r = 2 * (index / ${r});\n      int c = imod(index, ${r}) * 2;\n\n      return ivec${e.length}(${l});\n    }\n  `}(e,t,n)}}(t.logicalShape,i,n.enableShapeUniforms),c=function(e){return`\n    void setOutput(vec4 val) {\n      ${e.output} = val;\n    }\n  `}(o)):(u=function(e,t,n){switch(e.length){case 0:return yI();case 1:return function(e,t,n){if(1===t[0])return n?"\n      int getOutputCoords() {\n        return int(resultUV.x * float(outTexShape[1]));\n      }\n    ":`\n      int getOutputCoords() {\n        return int(resultUV.x * ${t[1]}.0);\n      }\n    `;if(1===t[1])return n?"\n      int getOutputCoords() {\n        return int(resultUV.y * float(outTexShape[0]));\n      }\n    ":`\n      int getOutputCoords() {\n        return int(resultUV.y * ${t[0]}.0);\n      }\n    `;return n?"\n    int getOutputCoords() {\n      ivec2 resTexRC = ivec2(resultUV.yx *\n                             vec2(outTexShape[0], outTexShape[1]));\n      return resTexRC.x * outTexShape[1] + resTexRC.y;\n    }\n  ":`\n    int getOutputCoords() {\n      ivec2 resTexRC = ivec2(resultUV.yx *\n                             vec2(${t[0]}, ${t[1]}));\n      return resTexRC.x * ${t[1]} + resTexRC.y;\n    }\n  `}(0,t,n);case 2:return function(e,t,n){if(Us.arraysEqual(e,t))return n?"\n      ivec2 getOutputCoords() {\n        return ivec2(resultUV.yx * vec2(outTexShape[0], outTexShape[1]));\n      }\n    ":`\n      ivec2 getOutputCoords() {\n        return ivec2(resultUV.yx * vec2(${t[0]}, ${t[1]}));\n      }\n    `;if(1===e[1])return n?"\n      ivec2 getOutputCoords() {\n        ivec2 resTexRC = ivec2(resultUV.yx *\n                               vec2(outTexShape[0], outTexShape[1]));\n        int index = resTexRC.x * outTexShape[1] + resTexRC.y;\n        return ivec2(index, 0);\n      }\n    ":`\n      ivec2 getOutputCoords() {\n        ivec2 resTexRC = ivec2(resultUV.yx *\n                               vec2(${t[0]}, ${t[1]}));\n        int index = resTexRC.x * ${t[1]} + resTexRC.y;\n        return ivec2(index, 0);\n      }\n    `;if(1===e[0])return n?"\n      ivec2 getOutputCoords() {\n        ivec2 resTexRC = ivec2(resultUV.yx *\n                               vec2(outTexShape[0], outTexShape[1]));\n        int index = resTexRC.x * outTexShape[1] + resTexRC.y;\n        return ivec2(0, index);\n      }\n    ":`\n      ivec2 getOutputCoords() {\n        ivec2 resTexRC = ivec2(resultUV.yx *\n                               vec2(${t[0]}, ${t[1]}));\n        int index = resTexRC.x * ${t[1]} + resTexRC.y;\n        return ivec2(0, index);\n      }\n    `;return n?"\n    ivec2 getOutputCoords() {\n      ivec2 resTexRC = ivec2(resultUV.yx *\n                             vec2(outTexShape[0], outTexShape[1]));\n      int index = resTexRC.x * outTexShape[1] + resTexRC.y;\n      int r = index / outShape[1];\n      int c = index - r * outShape[1];\n      return ivec2(r, c);\n    }\n  ":`\n    ivec2 getOutputCoords() {\n      ivec2 resTexRC = ivec2(resultUV.yx *\n                             vec2(${t[0]}, ${t[1]}));\n      int index = resTexRC.x * ${t[1]} + resTexRC.y;\n      int r = index / ${e[1]};\n      int c = index - r * ${e[1]};\n      return ivec2(r, c);\n    }\n  `}(e,t,n);case 3:return function(e,t,n){if(n){return`\n  ivec3 getOutputCoords() {\n    ivec2 resTexRC = ivec2(resultUV.yx *\n                           vec2(outTexShape[0], outTexShape[1]));\n    int index = resTexRC.x * outTexShape[1] + resTexRC.y;\n    ${aI(["r","c","d"],e)}\n    return ivec3(r, c, d);\n  }\n`}const s=rI(["r","c","d"],e);return`\n    ivec3 getOutputCoords() {\n      ivec2 resTexRC = ivec2(resultUV.yx *\n                             vec2(${t[0]}, ${t[1]}));\n      int index = resTexRC.x * ${t[1]} + resTexRC.y;\n      ${s}\n      return ivec3(r, c, d);\n    }\n  `}(e,t,n);case 4:return function(e,t,n){if(n){return`\n    ivec4 getOutputCoords() {\n      ivec2 resTexRC = ivec2(resultUV.yx *\n        vec2(outTexShape[0], outTexShape[1]));\n      int index = resTexRC.x * outTexShape[1] + resTexRC.y;\n      ${aI(["r","c","d","d2"],e)}\n      return ivec4(r, c, d, d2);\n    }\n  `}const s=rI(["r","c","d","d2"],e);return`\n    ivec4 getOutputCoords() {\n      ivec2 resTexRC = ivec2(resultUV.yx *\n        vec2(${t[0]}, ${t[1]}));\n      int index = resTexRC.x * ${t[1]} + resTexRC.y;\n      ${s}\n      return ivec4(r, c, d, d2);\n    }\n  `}(e,t,n);case 5:return function(e,t){const n=rI(["r","c","d","d2","d3"],e);return`\n    ivec5 getOutputCoords() {\n      ivec2 resTexRC = ivec2(resultUV.yx * vec2(${t[0]},\n                             ${t[1]}));\n\n      int index = resTexRC.x * ${t[1]} + resTexRC.y;\n\n      ${n}\n\n      ivec5 outShape = ivec5(r, c, d, d2, d3);\n      return outShape;\n    }\n  `}(e,t);case 6:return function(e,t){const n=rI(["r","c","d","d2","d3","d4"],e);return`\n    ivec6 getOutputCoords() {\n      ivec2 resTexRC = ivec2(resultUV.yx *\n        vec2(${t[0]}, ${t[1]}));\n      int index = resTexRC.x * ${t[1]} + resTexRC.y;\n\n      ${n}\n\n      ivec6 result = ivec6(r, c, d, d2, d3, d4);\n      return result;\n    }\n  `}(e,t);default:throw new Error(`${e.length}-D output sampling is not yet supported`)}}(t.logicalShape,i,n.enableShapeUniforms),c=function(e){return`\n    void setOutput(float val) {\n      ${e.output} = vec4(val, 0, 0, 0);\n    }\n  `}(o)),n.packedInputs&&(h+=gI);return[h,l,c,r,u,a,n.userCode].join("\n")}function hI(e,t=!1){const n=e.shapeInfo.logicalShape;switch(n.length){case 0:return function(e,t){const n=e.name,s="get"+n.charAt(0).toUpperCase()+n.slice(1);if(e.shapeInfo.isUniform)return`float ${s}() {return ${n};}`;const[r,a]=e.shapeInfo.texShape;if(1===r&&1===a)return`\n      float ${s}() {\n        return sampleTexture(${n}, halfCR);\n      }\n    `;const i=bI(n);if(t)return`\n    float ${s}() {\n      vec2 uv = uvFromFlat(${n}TexShape[0], ${n}TexShape[1], ${i});\n      return sampleTexture(${n}, uv);\n    }\n  `;const[o,l]=e.shapeInfo.texShape;return`\n    float ${s}() {\n      vec2 uv = uvFromFlat(${o}, ${l}, ${i});\n      return sampleTexture(${n}, uv);\n    }\n  `}(e,t);case 1:return function(e,t){const n=e.name,s="get"+n.charAt(0).toUpperCase()+n.slice(1);if(e.shapeInfo.isUniform)return`\n      float ${s}(int index) {\n        ${xI(e)}\n      }\n    `;const r=e.shapeInfo.texShape,a=r[0],i=r[1];if(1===i&&1===a)return`\n      float ${s}(int index) {\n        return sampleTexture(${n}, halfCR);\n      }\n    `;const o=bI(n);if(1===i)return t?`\n      float ${s}(int index) {\n        vec2 uv = vec2(0.5, (float(index + ${o}) + 0.5) / float(${n}TexShape[0]));\n        return sampleTexture(${n}, uv);\n      }\n    `:`\n      float ${s}(int index) {\n        vec2 uv = vec2(0.5, (float(index + ${o}) + 0.5) / ${a}.0);\n        return sampleTexture(${n}, uv);\n      }\n    `;if(1===a)return t?`\n      float ${s}(int index) {\n        vec2 uv = vec2((float(index + ${o}) + 0.5) / float(${n}TexShape[1]), 0.5);\n        return sampleTexture(${n}, uv);\n      }\n    `:`\n      float ${s}(int index) {\n        vec2 uv = vec2((float(index + ${o}) + 0.5) / ${i}.0, 0.5);\n        return sampleTexture(${n}, uv);\n      }\n    `;return t?`\n    float ${s}(int index) {\n      vec2 uv = uvFromFlat(${n}TexShape[0], ${n}TexShape[1], index + ${o});\n      return sampleTexture(${n}, uv);\n    }\n  `:`\n    float ${s}(int index) {\n      vec2 uv = uvFromFlat(${a}, ${i}, index + ${o});\n      return sampleTexture(${n}, uv);\n    }\n  `}(e,t);case 2:return function(e,t){const n=e.shapeInfo.logicalShape,s=e.name,r="get"+s.charAt(0).toUpperCase()+s.slice(1),a=e.shapeInfo.texShape;if(null!=a&&Us.arraysEqual(n,a)){if(t)return`\n      float ${r}(int row, int col) {\n        vec2 uv = (vec2(col, row) + halfCR) / vec2(${s}TexShape[1], ${s}TexShape[0]);\n        return sampleTexture(${s}, uv);\n      }\n    `;const e=a[0];return`\n    float ${r}(int row, int col) {\n      vec2 uv = (vec2(col, row) + halfCR) / vec2(${a[1]}.0, ${e}.0);\n      return sampleTexture(${s}, uv);\n    }\n  `}const{newShape:i,keptDims:o}=Us.squeezeShape(n),l=i;if(l.length<n.length){const n=["row","col"];return`\n      ${hI(kI(e,l),t)}\n      float ${r}(int row, int col) {\n        return ${r}(${II(n,o)});\n      }\n    `}if(e.shapeInfo.isUniform)return`\n      float ${r}(int row, int col) {\n        int index = round(dot(vec2(row, col), vec2(${n[1]}, 1)));\n        ${xI(e)}\n      }\n    `;const u=a[0],c=a[1],h=bI(s);if(1===c)return t?`\n      float ${r}(int row, int col) {\n        float index = dot(vec3(row, col, ${h}), vec3(${s}Shape[1], 1, 1));\n        vec2 uv = vec2(0.5, (index + 0.5) / float(${s}TexShape[0]));\n        return sampleTexture(${s}, uv);\n      }\n    `:`\n    float ${r}(int row, int col) {\n      float index = dot(vec3(row, col, ${h}), vec3(${n[1]}, 1, 1));\n      vec2 uv = vec2(0.5, (index + 0.5) / ${u}.0);\n      return sampleTexture(${s}, uv);\n    }\n  `;if(1===u)return t?`\n      float ${r}(int row, int col) {\n        float index = dot(vec3(row, col, ${h}), vec3(${s}Shape[1], 1, 1));\n        vec2 uv = vec2((index + 0.5) / float(${s}TexShape[1]), 0.5);\n        return sampleTexture(${s}, uv);\n      }\n    `:`\n    float ${r}(int row, int col) {\n      float index = dot(vec3(row, col, ${h}), vec3(${n[1]}, 1, 1));\n      vec2 uv = vec2((index + 0.5) / ${c}.0, 0.5);\n      return sampleTexture(${s}, uv);\n    }\n  `;return t?`\n      float ${r}(int row, int col) {\n        // Explicitly use integer operations as dot() only works on floats.\n        int index = row * ${s}Shape[1] + col + ${h};\n        vec2 uv = uvFromFlat(${s}TexShape[0], ${s}TexShape[1], index);\n        return sampleTexture(${s}, uv);\n      }\n    `:`\n  float ${r}(int row, int col) {\n    // Explicitly use integer operations as dot() only works on floats.\n    int index = row * ${n[1]} + col + ${h};\n    vec2 uv = uvFromFlat(${u}, ${c}, index);\n    return sampleTexture(${s}, uv);\n  }\n`}(e,t);case 3:return function(e,t){const n=e.shapeInfo.logicalShape,s=e.name,r="get"+s.charAt(0).toUpperCase()+s.slice(1),a=n[1]*n[2],i=n[2],{newShape:o,keptDims:l}=Us.squeezeShape(n),u=o;if(u.length<n.length){const n=["row","col","depth"];return`\n        ${hI(kI(e,u),t)}\n        float ${r}(int row, int col, int depth) {\n          return ${r}(${II(n,l)});\n        }\n      `}if(e.shapeInfo.isUniform)return`\n      float ${r}(int row, int col, int depth) {\n        int index = round(dot(vec3(row, col, depth),\n                          vec3(${a}, ${i}, 1)));\n        ${xI(e)}\n      }\n    `;const c=e.shapeInfo.texShape,h=c[0],p=c[1],d=e.shapeInfo.flatOffset;if(p===a&&null==d)return t?`\n      float ${r}(int row, int col, int depth) {\n        int stride1 = ${s}Shape[2];\n        float texR = float(row);\n        float texC = dot(vec2(col, depth), vec2(stride1, 1));\n        vec2 uv = (vec2(texC, texR) + halfCR) /\n                   vec2(${s}TexShape[1], ${s}TexShape[0]);\n        return sampleTexture(${s}, uv);\n      }\n    `:`\n        float ${r}(int row, int col, int depth) {\n          float texR = float(row);\n          float texC = dot(vec2(col, depth), vec2(${i}, 1));\n          vec2 uv = (vec2(texC, texR) + halfCR) /\n                     vec2(${p}.0, ${h}.0);\n          return sampleTexture(${s}, uv);\n        }\n      `;if(p===i&&null==d)return t?`\n      float ${r}(int row, int col, int depth) {\n        float texR = dot(vec2(row, col), vec2(${s}Shape[1], 1));\n        float texC = float(depth);\n        vec2 uv = (vec2(texC, texR) + halfCR) / vec2(${s}TexShape[1], ${s}TexShape[0]);\n        return sampleTexture(${s}, uv);\n      }\n    `:`\n    float ${r}(int row, int col, int depth) {\n      float texR = dot(vec2(row, col), vec2(${n[1]}, 1));\n      float texC = float(depth);\n      vec2 uv = (vec2(texC, texR) + halfCR) / vec2(${p}.0, ${h}.0);\n      return sampleTexture(${s}, uv);\n    }\n  `;const f=bI(s);return t?`\n    float ${r}(int row, int col, int depth) {\n      // Explicitly use integer operations as dot() only works on floats.\n      int stride0 = ${s}Shape[1] * ${s}Shape[2];\n      int stride1 = ${s}Shape[2];\n      int index = row * ${a} + col * ${i} + depth + ${f};\n      vec2 uv = uvFromFlat(${s}TexShape[0], ${s}TexShape[1], index);\n      return sampleTexture(${s}, uv);\n    }\n    `:`\n      float ${r}(int row, int col, int depth) {\n        // Explicitly use integer operations as dot() only works on floats.\n        int index = row * ${a} + col * ${i} + depth + ${f};\n        vec2 uv = uvFromFlat(${h}, ${p}, index);\n        return sampleTexture(${s}, uv);\n      }\n  `}(e,t);case 4:return function(e,t){const n=e.shapeInfo.logicalShape,s=e.name,r="get"+s.charAt(0).toUpperCase()+s.slice(1),a=n[3],i=n[2]*a,o=n[1]*i,{newShape:l,keptDims:u}=Us.squeezeShape(n);if(l.length<n.length){const n=["row","col","depth","depth2"];return`\n      ${hI(kI(e,l),t)}\n      float ${r}(int row, int col, int depth, int depth2) {\n        return ${r}(${II(n,u)});\n      }\n    `}if(e.shapeInfo.isUniform)return`\n      float ${r}(int row, int col, int depth, int depth2) {\n        int index = round(dot(vec4(row, col, depth, depth2),\n                          vec4(${o}, ${i}, ${a}, 1)));\n        ${xI(e)}\n      }\n    `;const c=e.shapeInfo.flatOffset,h=e.shapeInfo.texShape,p=h[0],d=h[1],f=`int stride2 = ${s}Shape[3];`,m=`int stride1 = ${s}Shape[2] * stride2;`,g=`int stride0 = ${s}Shape[1] * stride1;`;if(d===o&&null==c)return t?`\n      float ${r}(int row, int col, int depth, int depth2) {\n        ${f}\n        ${m}\n        float texR = float(row);\n        float texC =\n            dot(vec3(col, depth, depth2),\n                vec3(stride1, stride2, 1));\n        vec2 uv = (vec2(texC, texR) + halfCR) /\n                   vec2(${s}TexShape[1], ${s}TexShape[0]);\n        return sampleTexture(${s}, uv);\n      }\n    `:`\n      float ${r}(int row, int col, int depth, int depth2) {\n        float texR = float(row);\n        float texC =\n            dot(vec3(col, depth, depth2),\n                vec3(${i}, ${a}, 1));\n        vec2 uv = (vec2(texC, texR) + halfCR) /\n                   vec2(${d}.0, ${p}.0);\n        return sampleTexture(${s}, uv);\n      }\n    `;if(d===a&&null==c)return t?`\n      float ${r}(int row, int col, int depth, int depth2) {\n        float texR = dot(vec3(row, col, depth),\n                         vec3(${s}Shape[1] * ${s}Shape[2], ${s}Shape[2], 1));\n        float texC = float(depth2);\n        vec2 uv = (vec2(texC, texR) + halfCR) /\n                  vec2(${s}TexShape[1], ${s}TexShape[0]);\n        return sampleTexture(${s}, uv);\n      }\n    `:`\n      float ${r}(int row, int col, int depth, int depth2) {\n        float texR = dot(vec3(row, col, depth),\n                         vec3(${n[1]*n[2]}, ${n[2]}, 1));\n        float texC = float(depth2);\n        vec2 uv = (vec2(texC, texR) + halfCR) /\n                  vec2(${d}.0, ${p}.0);\n        return sampleTexture(${s}, uv);\n      }\n    `;const y=bI(s);return t?`\n    float ${r}(int row, int col, int depth, int depth2) {\n      // Explicitly use integer operations as dot() only works on floats.\n      ${f}\n      ${m}\n      ${g}\n      int index = row * stride0 + col * stride1 +\n          depth * stride2 + depth2;\n      vec2 uv = uvFromFlat(${s}TexShape[0], ${s}TexShape[1], index + ${y});\n      return sampleTexture(${s}, uv);\n    }\n  `:`\n    float ${r}(int row, int col, int depth, int depth2) {\n      // Explicitly use integer operations as dot() only works on floats.\n      int index = row * ${o} + col * ${i} +\n          depth * ${a} + depth2;\n      vec2 uv = uvFromFlat(${p}, ${d}, index + ${y});\n      return sampleTexture(${s}, uv);\n    }\n  `}(e,t);case 5:return function(e){const t=e.shapeInfo.logicalShape,n=e.name,s="get"+n.charAt(0).toUpperCase()+n.slice(1),r=t[4],a=t[3]*r,i=t[2]*a,o=t[1]*i,{newShape:l,keptDims:u}=Us.squeezeShape(t);if(l.length<t.length){const t=["row","col","depth","depth2","depth3"];return`\n      ${hI(kI(e,l))}\n      float ${s}(int row, int col, int depth, int depth2, int depth3) {\n        return ${s}(${II(t,u)});\n      }\n    `}if(e.shapeInfo.isUniform)return`\n      float ${s}(int row, int col, int depth, int depth2, int depth3) {\n        float index = dot(\n          vec4(row, col, depth, depth2),\n          vec4(${o}, ${i}, ${a}, ${r})) +\n          depth3;\n        ${xI(e)}\n      }\n    `;const c=e.shapeInfo.flatOffset,h=e.shapeInfo.texShape,p=h[0],d=h[1];if(d===o&&null==c)return`\n      float ${s}(int row, int col, int depth, int depth2, int depth3) {\n        int texR = row;\n        float texC = dot(vec4(col, depth, depth2, depth3),\n                         vec4(${i}, ${a}, ${r}, 1));\n        vec2 uv = (vec2(texC, texR) + halfCR) /\n                   vec2(${d}.0, ${p}.0);\n        return sampleTexture(${n}, uv);\n      }\n    `;if(d===r&&null==c)return`\n      float ${s}(int row, int col, int depth, int depth2, int depth3) {\n        float texR = dot(\n          vec4(row, col, depth, depth2),\n          vec4(${t[1]*t[2]*t[3]},\n               ${t[2]*t[3]}, ${t[3]}, 1));\n        int texC = depth3;\n        vec2 uv = (vec2(texC, texR) + halfCR) /\n                  vec2(${d}.0, ${p}.0);\n        return sampleTexture(${n}, uv);\n      }\n    `;const f=bI(n);return`\n    float ${s}(int row, int col, int depth, int depth2, int depth3) {\n      // Explicitly use integer operations as dot() only works on floats.\n      int index = row * ${o} + col * ${i} + depth * ${a} +\n          depth2 * ${r} + depth3 + ${f};\n      vec2 uv = uvFromFlat(${p}, ${d}, index);\n      return sampleTexture(${n}, uv);\n    }\n  `}(e);case 6:return function(e){const t=e.shapeInfo.logicalShape,n=e.name,s="get"+n.charAt(0).toUpperCase()+n.slice(1),{newShape:r,keptDims:a}=Us.squeezeShape(t);if(r.length<t.length){const t=["row","col","depth","depth2","depth3","depth4"];return`\n      ${hI(kI(e,r))}\n      float ${s}(int row, int col, int depth,\n                    int depth2, int depth3, int depth4) {\n        return ${s}(${II(t,a)});\n      }\n    `}const i=t[5],o=t[4]*i,l=t[3]*o,u=t[2]*l,c=t[1]*u;if(e.shapeInfo.isUniform)return`\n      float ${s}(int row, int col, int depth,\n                  int depth2, int depth3, int depth4) {\n        int index = round(dot(\n          vec4(row, col, depth, depth2),\n          vec4(${c}, ${u}, ${l}, ${o})) +\n          dot(\n            vec2(depth3, depth4),\n            vec2(${i}, 1)));\n        ${xI(e)}\n      }\n    `;const h=e.shapeInfo.flatOffset,p=e.shapeInfo.texShape,d=p[0],f=p[1];if(f===c&&null==h)return`\n      float ${s}(int row, int col, int depth,\n                    int depth2, int depth3, int depth4) {\n        int texR = row;\n        float texC = dot(vec4(col, depth, depth2, depth3),\n          vec4(${u}, ${l}, ${o}, ${i})) +\n               float(depth4);\n        vec2 uv = (vec2(texC, texR) + halfCR) /\n                   vec2(${f}.0, ${d}.0);\n        return sampleTexture(${n}, uv);\n      }\n    `;if(f===i&&null==h)return`\n      float ${s}(int row, int col, int depth,\n                    int depth2, int depth3, int depth4) {\n        float texR = dot(vec4(row, col, depth, depth2),\n          vec4(${t[1]*t[2]*t[3]*t[4]},\n               ${t[2]*t[3]*t[4]},\n               ${t[3]*t[4]},\n               ${t[4]})) + float(depth3);\n        int texC = depth4;\n        vec2 uv = (vec2(texC, texR) + halfCR) /\n                  vec2(${f}.0, ${d}.0);\n        return sampleTexture(${n}, uv);\n      }\n    `;const m=bI(n);return`\n    float ${s}(int row, int col, int depth,\n                  int depth2, int depth3, int depth4) {\n      // Explicitly use integer operations as dot() only works on floats.\n      int index = row * ${c} + col * ${u} + depth * ${l} +\n          depth2 * ${o} + depth3 * ${i} + depth4 + ${m};\n      vec2 uv = uvFromFlat(${d}, ${f}, index);\n      return sampleTexture(${n}, uv);\n    }\n  `}(e);default:throw new Error(`${n.length}-D input sampling is not yet supported`)}}function pI(e,t){switch(e.shapeInfo.logicalShape.length){case 0:return function(e){const t=e.name,n="get"+t.charAt(0).toUpperCase()+t.slice(1),s=sI();return`\n    vec4 ${n}() {\n      return ${s.texture2D}(${t}, halfCR);\n    }\n  `}(e);case 1:return function(e,t){const n=e.name,s="get"+n.charAt(0).toUpperCase()+n.slice(1),r=e.shapeInfo.texShape,a=sI();if(t)return`\n    vec4 ${s}(int index) {\n      ivec2 packedTexShape = ivec2(ceil(float(${n}TexShape[0]) / 2.0), ceil(float(${n}TexShape[1]) / 2.0));\n      vec2 uv = packedUVfrom1D(\n        packedTexShape[0], packedTexShape[1], index);\n      return ${a.texture2D}(${n}, uv);\n    }\n  `;const i=[Math.ceil(r[0]/2),Math.ceil(r[1]/2)];return`\n    vec4 ${s}(int index) {\n      vec2 uv = packedUVfrom1D(\n        ${i[0]}, ${i[1]}, index);\n      return ${a.texture2D}(${n}, uv);\n    }\n  `}(e,t);case 2:return function(e,t){const n=e.shapeInfo.logicalShape,s=e.name,r="get"+s.charAt(0).toUpperCase()+s.slice(1),a=e.shapeInfo.texShape,i=a[0],o=a[1],l=sI();if(null!=a&&Us.arraysEqual(n,a))return t?`\n      vec4 ${r}(int row, int col) {\n        vec2 uv = (vec2(col, row) + halfCR) / vec2(${s}TexShape[1], ${s}TexShape[0]);\n\n        return ${l.texture2D}(${s}, uv);\n      }\n    `:`\n      vec4 ${r}(int row, int col) {\n        vec2 uv = (vec2(col, row) + halfCR) / vec2(${o}.0, ${i}.0);\n\n        return ${l.texture2D}(${s}, uv);\n      }\n    `;if(t)return`\n    vec4 ${r}(int row, int col) {\n      ivec2 packedTexShape = ivec2(ceil(float(${s}TexShape[0]) / 2.0), ceil(float(${s}TexShape[1]) / 2.0));\n      int valuesPerRow = int(ceil(float(${s}Shape[1]) / 2.0));\n      vec2 uv = packedUVfrom2D(valuesPerRow, packedTexShape[0], packedTexShape[1], row, col);\n      return ${l.texture2D}(${s}, uv);\n    }\n  `;const u=[Math.ceil(a[0]/2),Math.ceil(a[1]/2)],c=Math.ceil(n[1]/2);return`\n    vec4 ${r}(int row, int col) {\n      vec2 uv = packedUVfrom2D(${c}, ${u[0]}, ${u[1]}, row, col);\n      return ${l.texture2D}(${s}, uv);\n    }\n  `}(e,t);case 3:return function(e,t){const n=e.shapeInfo.logicalShape,s=e.name,r="get"+s.charAt(0).toUpperCase()+s.slice(1),a=e.shapeInfo.texShape,i=[Math.ceil(a[0]/2),Math.ceil(a[1]/2)];if(1===n[0]){const s=[1,2],a=["b","row","col"];return`\n        ${pI(kI(e,n.slice(1)),t)}\n        vec4 ${r}(int b, int row, int col) {\n          return ${r}(${II(a,s)});\n        }\n      `}const o=sI();if(t)return`\n    vec4 ${r}(int b, int row, int col) {\n      ivec2 packedTexShape = ivec2(ceil(float(${s}TexShape[0]) / 2.0), ceil(float(${s}TexShape[1]) / 2.0));\n      int valuesPerRow = int(ceil(float(${s}Shape[2]) / 2.0));\n      int texelsInBatch = valuesPerRow * int(ceil(float(${s}Shape[1]) / 2.0));\n      vec2 uv = packedUVfrom3D(\n        packedTexShape[0], packedTexShape[1], texelsInBatch, valuesPerRow, b, row, col);\n      return ${o.texture2D}(${s}, uv);\n    }\n  `;const l=i[0],u=i[1],c=Math.ceil(n[2]/2),h=c*Math.ceil(n[1]/2);return`\n    vec4 ${r}(int b, int row, int col) {\n      vec2 uv = packedUVfrom3D(\n        ${l}, ${u}, ${h}, ${c}, b, row, col);\n      return ${o.texture2D}(${s}, uv);\n    }\n  `}(e,t);default:return function(e,t){const n=e.name,s="get"+n.charAt(0).toUpperCase()+n.slice(1),r=sI();if(t)return`\n    vec4 ${s}(int b2, int b, int row, int col) {\n      int valuesPerRow = int(ceil(float(${n}Shape[3]) / 2.0));\n      int texelsInBatch = valuesPerRow * int(ceil(float(${n}Shape[2]) / 2.0));\n      int index = b * texelsInBatch + (row / 2) * valuesPerRow + (col / 2);\n      texelsInBatch *= ${n}Shape[1];\n      index = b2 * texelsInBatch + index;\n      ivec2 packedTexShape = ivec2(ceil(float(${n}TexShape[0]) / 2.0), ceil(float(${n}TexShape[1]) / 2.0));\n      int texR = index / packedTexShape[1];\n      int texC = index - texR * packedTexShape[1];\n      vec2 uv = (vec2(texC, texR) + halfCR) / vec2(packedTexShape[1], packedTexShape[0]); return ${r.texture2D}(${n}, uv);\n    }\n  `;const a=e.shapeInfo.logicalShape,i=a.length,o=e.shapeInfo.texShape,l=[Math.ceil(o[0]/2),Math.ceil(o[1]/2)],u=l[0],c=l[1],h=Math.ceil(a[i-1]/2);let p=h*Math.ceil(a[i-2]/2),d="int b, int row, int col",f=`b * ${p} + (row / 2) * ${h} + (col / 2)`;for(let e=2;e<i-1;e++)d=`int b${e}, `+d,p*=a[i-e-1],f=`b${e} * ${p} + `+f;return`\n    vec4 ${s}(${d}) {\n      int index = ${f};\n      int texR = index / ${c};\n      int texC = index - texR * ${c};\n      vec2 uv = (vec2(texC, texR) + halfCR) / vec2(${c}, ${u});\n      return ${r.texture2D}(${n}, uv);\n    }\n  `}(e,t)}}const dI="\nvec2 uvFromFlat(int texNumR, int texNumC, int index) {\n  int texR = index / texNumC;\n  int texC = index - texR * texNumC;\n  return (vec2(texC, texR) + halfCR) / vec2(texNumC, texNumR);\n}\nvec2 packedUVfrom1D(int texNumR, int texNumC, int index) {\n  int texelIndex = index / 2;\n  int texR = texelIndex / texNumC;\n  int texC = texelIndex - texR * texNumC;\n  return (vec2(texC, texR) + halfCR) / vec2(texNumC, texNumR);\n}\n",fI="\nvec2 packedUVfrom2D(int texelsInLogicalRow, int texNumR,\n  int texNumC, int row, int col) {\n  int texelIndex = (row / 2) * texelsInLogicalRow + (col / 2);\n  int texR = texelIndex / texNumC;\n  int texC = texelIndex - texR * texNumC;\n  return (vec2(texC, texR) + halfCR) / vec2(texNumC, texNumR);\n}\n",mI="\nvec2 packedUVfrom3D(int texNumR, int texNumC,\n    int texelsInBatch, int texelsInLogicalRow, int b,\n    int row, int col) {\n  int index = b * texelsInBatch + (row / 2) * texelsInLogicalRow + (col / 2);\n  int texR = index / texNumC;\n  int texC = index - texR * texNumC;\n  return (vec2(texC, texR) + halfCR) / vec2(texNumC, texNumR);\n}\n",gI="\n  float getChannel(vec4 frag, vec2 innerDims) {\n    vec2 modCoord = mod(innerDims, 2.);\n    return modCoord.x == 0. ?\n      (modCoord.y == 0. ? frag.r : frag.g) :\n      (modCoord.y == 0. ? frag.b : frag.a);\n  }\n  float getChannel(vec4 frag, int dim) {\n    float modCoord = mod(float(dim), 2.);\n    return modCoord == 0. ? frag.r : frag.g;\n  }\n";function yI(){return"\n    int getOutputCoords() {\n      return 0;\n    }\n  "}function bI(e){return`offset${e}`}function xI(e){const t=e.name,n=Us.sizeFromShape(e.shapeInfo.logicalShape);return n<2?`return ${t};`:`\n    for (int i = 0; i < ${n}; i++) {\n      if (i == index) {\n        return ${t}[i];\n      }\n    }\n  `}function wI(e){if(e<=1)return"int";if(2===e)return"ivec2";if(3===e)return"ivec3";if(4===e)return"ivec4";if(5===e)return"ivec5";if(6===e)return"ivec6";throw Error(`GPU for rank ${e} is not yet supported`)}function vI(e,t,n){const{newShape:s,keptDims:r}=Us.squeezeShape(t),a=t.length,i=e&&3===a&&1===t[0],o=i?t.slice(1):s,l=!e&&a>1&&!Us.arraysEqual(t,n)&&s.length<a||i;return{useSqueezeShape:l,uniformShape:l?o:t,keptDims:r}}function kI(e,t){const n=JSON.parse(JSON.stringify(e));return n.shapeInfo.logicalShape=t,n}function II(e,t){return t.map((t=>e[t])).join(", ")}
/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */const SI={},NI={alpha:!1,antialias:!1,premultipliedAlpha:!1,preserveDrawingBuffer:!1,depth:!1,stencil:!1,failIfMajorPerformanceCaveat:!0};function TI(e,t){if(!(e in SI)){const n=function(e,t){if(1!==e&&2!==e)throw new Error("Cannot get WebGL rendering context, WebGL is disabled.");const n=null==t?function(e){if("undefined"!=typeof OffscreenCanvas&&2===e)return new OffscreenCanvas(300,150);if("undefined"!=typeof document)return document.createElement("canvas");throw new Error("Cannot create a canvas in this context")}(e):t;return n.addEventListener("webglcontextlost",(t=>{t.preventDefault(),delete SI[e]}),!1),1===e?n.getContext("webgl",NI)||n.getContext("experimental-webgl",NI):n.getContext("webgl2",NI)}(e,t);if(null===n)return console.log("Could not get context for WebGL version",e),null;SI[e]=n}const n=SI[e];return null==n||n.isContextLost()?(delete SI[e],TI(e)):(n.disable(n.DEPTH_TEST),n.disable(n.STENCIL_TEST),n.disable(n.BLEND),n.disable(n.DITHER),n.disable(n.POLYGON_OFFSET_FILL),n.disable(n.SAMPLE_COVERAGE),n.enable(n.SCISSOR_TEST),n.enable(n.CULL_FACE),n.cullFace(n.BACK),SI[e])}var CI,$I,EI;function AI(e,t){return[t,e]}function RI(e){const t=Us.sizeFromShape(e),n=Math.ceil(t/4);return Us.sizeToSquarishShape(n)}function FI(e,t){return[Math.max(1,Math.ceil(t/2)),Math.max(1,Math.ceil(e/2))]}function DI(e,t){const n=e;let s,r,a,i,o,l,u,c,h,p;return 2===le().getNumber("WEBGL_VERSION")?(s=n.R32F,r=n.R16F,a=n.RGBA16F,i=n.RGBA32F,o=n.RED,u=4,c=1,h=n.HALF_FLOAT,p=n.FLOAT,l=n.RGBA8):(s=e.RGBA,r=e.RGBA,a=e.RGBA,i=n.RGBA,o=e.RGBA,u=4,c=4,h=null!=t?t.HALF_FLOAT_OES:null,p=e.FLOAT,l=e.RGBA),{internalFormatFloat:s,internalFormatHalfFloat:r,internalFormatPackedHalfFloat:a,internalFormatPackedFloat:i,textureFormatFloat:o,downloadTextureFormat:l,downloadUnpackNumChannels:u,defaultNumChannels:c,textureTypeHalfFloat:h,textureTypeFloat:p}}function _I(e,t){const n=t();return le().getBool("DEBUG")&&function(e){const t=e.getError();if(t!==e.NO_ERROR)throw new Error("WebGL Error: "+function(e,t){switch(t){case e.NO_ERROR:return"NO_ERROR";case e.INVALID_ENUM:return"INVALID_ENUM";case e.INVALID_VALUE:return"INVALID_VALUE";case e.INVALID_OPERATION:return"INVALID_OPERATION";case e.INVALID_FRAMEBUFFER_OPERATION:return"INVALID_FRAMEBUFFER_OPERATION";case e.OUT_OF_MEMORY:return"OUT_OF_MEMORY";case e.CONTEXT_LOST_WEBGL:return"CONTEXT_LOST_WEBGL";default:return`Unknown error code ${t}`}}(e,t))}(e),n}!function(e){e[e.DENSE=0]="DENSE",e[e.SHARED_BATCH=1]="SHARED_BATCH"}(CI||(CI={})),function(e){e[e.RENDER=0]="RENDER",e[e.UPLOAD=1]="UPLOAD",e[e.PIXELS=2]="PIXELS",e[e.DOWNLOAD=3]="DOWNLOAD"}($I||($I={})),function(e){e[e.UNPACKED_FLOAT16=0]="UNPACKED_FLOAT16",e[e.UNPACKED_FLOAT32=1]="UNPACKED_FLOAT32",e[e.PACKED_4X1_UNSIGNED_BYTE=2]="PACKED_4X1_UNSIGNED_BYTE",e[e.PACKED_2X2_FLOAT32=3]="PACKED_2X2_FLOAT32",e[e.PACKED_2X2_FLOAT16=4]="PACKED_2X2_FLOAT16"}(EI||(EI={}));function OI(e){return!!(le().getBool("WEBGL_RENDER_FLOAT32_ENABLED")||0===e||5.96e-8<Math.abs(e)&&Math.abs(e)<65504)}function MI(e,t){return HI(e,(()=>e.getExtension(t)),'Extension "'+t+'" not supported on this browser.')}function LI(e,t){const n=HI(e,(()=>e.createShader(e.FRAGMENT_SHADER)),"Unable to create fragment WebGLShader.");if(_I(e,(()=>e.shaderSource(n,t))),_I(e,(()=>e.compileShader(n))),!1===e.getShaderParameter(n,e.COMPILE_STATUS))throw function(e,t){const n=zI.exec(t);if(null==n)return console.log(`Couldn't parse line number in error: ${t}`),void console.log(e);const s=+n[1],r=e.split("\n"),a=r.length.toString().length+2,i=r.map(((e,t)=>Us.rightPad((t+1).toString(),a)+e));let o=0;for(let e=0;e<i.length;e++)o=Math.max(i[e].length,o);const l=i.slice(0,s-1),u=i.slice(s-1,s),c=i.slice(s);console.log(l.join("\n")),console.log(t.split("\n")[0]),console.log(`%c ${Us.rightPad(u[0],o)}`,"border:1px solid red; background-color:#e3d2d2; color:#a61717"),console.log(c.join("\n"))}(t,e.getShaderInfoLog(n)),new Error("Failed to compile fragment shader.");return n}const zI=/ERROR: [0-9]+:([0-9]+):/g;function BI(e,t){if(_I(e,(()=>e.validateProgram(t))),!1===e.getProgramParameter(t,e.VALIDATE_STATUS))throw console.log(e.getProgramInfoLog(t)),new Error("Shader program validation failed.")}function PI(e,t,n,s,r,a,i){const o=e.getAttribLocation(t,n);return-1!==o&&(_I(e,(()=>e.bindBuffer(e.ARRAY_BUFFER,s))),_I(e,(()=>e.vertexAttribPointer(o,r,e.FLOAT,!1,a,i))),_I(e,(()=>e.enableVertexAttribArray(o))),!0)}function WI(e,t,n,s){_I(e,(()=>function(e,t,n){jI(e,n),_I(e,(()=>e.activeTexture(e.TEXTURE0+n))),_I(e,(()=>e.bindTexture(e.TEXTURE_2D,t)))}(e,t,s))),_I(e,(()=>e.uniform1i(n,s)))}function UI(e,t,n){_I(e,(()=>e.bindFramebuffer(e.FRAMEBUFFER,n))),_I(e,(()=>e.framebufferTexture2D(e.FRAMEBUFFER,e.COLOR_ATTACHMENT0,e.TEXTURE_2D,t,0)))}function VI(e,t){_I(e,(()=>e.bindFramebuffer(e.FRAMEBUFFER,t))),_I(e,(()=>e.framebufferTexture2D(e.FRAMEBUFFER,e.COLOR_ATTACHMENT0,e.TEXTURE_2D,null,0)))}function GI(e){const t=e.checkFramebufferStatus(e.FRAMEBUFFER);if(t!==e.FRAMEBUFFER_COMPLETE)throw new Error("Error binding framebuffer: "+function(e,t){switch(t){case e.FRAMEBUFFER_INCOMPLETE_ATTACHMENT:return"FRAMEBUFFER_INCOMPLETE_ATTACHMENT";case e.FRAMEBUFFER_INCOMPLETE_MISSING_ATTACHMENT:return"FRAMEBUFFER_INCOMPLETE_MISSING_ATTACHMENT";case e.FRAMEBUFFER_INCOMPLETE_DIMENSIONS:return"FRAMEBUFFER_INCOMPLETE_DIMENSIONS";case e.FRAMEBUFFER_UNSUPPORTED:return"FRAMEBUFFER_UNSUPPORTED";default:return`unknown error ${t}`}}(e,t))}function HI(e,t,n){const s=_I(e,(()=>t()));if(null==s)throw new Error(n);return s}function jI(e,t){const n=e.MAX_COMBINED_TEXTURE_IMAGE_UNITS-1,s=t+e.TEXTURE0;if(s<e.TEXTURE0||s>n){throw new Error(`textureUnit must be in ${`[gl.TEXTURE0, gl.TEXTURE${n}]`}.`)}}function qI(e,t=2){return Us.sizeFromShape(e.slice(0,e.length-t))}function KI(e){if(0===e.length)throw Error("Cannot get rows and columns of an empty shape array.");return[e.length>1?e[e.length-2]:1,e[e.length-1]]}function XI(e){let t=[1,1,1];return 0===e.length||1===e.length&&1===e[0]||(t=[qI(e),...KI(e)]),t}function YI(e){return e%2==0}function ZI(e,t){if(e=e.slice(-2),t=t.slice(-2),Us.arraysEqual(e,t))return!0;if(!e.length||!t.length)return!0;if(0===e[0]||0===e[1]||0===t[0]||0===t[1])return!0;if(e.length!==t.length){const n=e.slice(-1)[0],s=t.slice(-1)[0];if(n===s)return!0;if(YI(n)&&YI(s)&&(1===e[0]||1===t[0]))return!0}return e[1]===t[1]&&YI(e[0])&&YI(t[0])}let JI,QI;function eS(e,t){return null!=e.getExtension(t)}function tS(e){try{if(null!=TI(e))return!0}catch(e){return console.log("Error when getting WebGL context: ",e),!1}return!1}function nS(e){if(0===e)return!1;const t=TI(e);if(1!==e){if(eS(t,"EXT_color_buffer_float"))return sS(t);const e="EXT_color_buffer_half_float";if(eS(t,e)){const n=t.getExtension(e);return function(e,t){const n=DI(e,t),s=e.createTexture();e.bindTexture(e.TEXTURE_2D,s);const r=1,a=1;e.texImage2D(e.TEXTURE_2D,0,n.internalFormatHalfFloat,r,a,0,n.textureFormatFloat,n.textureTypeHalfFloat,null);const i=e.createFramebuffer();e.bindFramebuffer(e.FRAMEBUFFER,i),e.framebufferTexture2D(e.FRAMEBUFFER,e.COLOR_ATTACHMENT0,e.TEXTURE_2D,s,0);const o=e.checkFramebufferStatus(e.FRAMEBUFFER)===e.FRAMEBUFFER_COMPLETE;return e.bindTexture(e.TEXTURE_2D,null),e.bindFramebuffer(e.FRAMEBUFFER,null),e.deleteTexture(s),e.deleteFramebuffer(i),o}(t,n)}return!1}if(!eS(t,"OES_texture_float"))return!1;if(!eS(t,"WEBGL_color_buffer_float"))return!1;return sS(t)}function sS(e){const t=DI(e),n=e.createTexture();e.bindTexture(e.TEXTURE_2D,n);e.texImage2D(e.TEXTURE_2D,0,t.internalFormatFloat,1,1,0,t.textureFormatFloat,t.textureTypeFloat,null);const s=e.createFramebuffer();e.bindFramebuffer(e.FRAMEBUFFER,s),e.framebufferTexture2D(e.FRAMEBUFFER,e.COLOR_ATTACHMENT0,e.TEXTURE_2D,n,0);const r=e.checkFramebufferStatus(e.FRAMEBUFFER)===e.FRAMEBUFFER_COMPLETE;return e.bindTexture(e.TEXTURE_2D,null),e.bindFramebuffer(e.FRAMEBUFFER,null),e.deleteTexture(n),e.deleteFramebuffer(s),r}function rS(e,t){Array.isArray(e)||(e=[e]),e.forEach((e=>{null!=e&&Us.assert("complex64"!==e.dtype,(()=>`${t} does not support complex64 tensors in the WebGL backend.`))}))}function aS(e,t){if(e.length!==t.length)throw Error(`Binary was compiled with ${e.length} inputs, but was executed with ${t.length} inputs`);e.forEach(((e,n)=>{const s=e.logicalShape,r=t[n],a=r.shape;if(!Us.arraysEqual(s,a))throw Error(`Binary was compiled with different shapes than the current args. Shapes ${s} and ${a} must match`);if(e.isUniform&&r.isUniform)return;const i=e.texShape,o=r.isUniform?null:r.texData.texShape;if(!Us.arraysEqual(i,o))throw Error(`Binary was compiled with different texture shapes than the current args. Shape ${i} and ${o} must match`)}))}function iS(e){return le().getBool("WEBGL_USE_SHAPES_UNIFORMS")&&e<=4}class oS{constructor(e,t,n){this.variableNames=["A","B"],this.outputShape=Bl.assertAndGetBroadcastShape(t,n),this.enableShapeUniforms=iS(this.outputShape.length),this.userCode=`\n      float binaryOperation(float a, float b) {\n        ${e}\n      }\n\n      void main() {\n        float a = getAAtOutCoords();\n        float b = getBAtOutCoords();\n        setOutput(binaryOperation(a, b));\n      }\n    `}}function lS(e,t){return["x","y","z","w","u","v"].slice(0,t).map((t=>`${e}.${t}`))}function uS(e,t){return 1===t?[e]:lS(e,t)}class cS{constructor(e,t,n,s=!1){this.variableNames=["A","B"],this.supportsBroadcasting=!0,this.packedInputs=!0,this.packedOutput=!0,this.outputShape=Bl.assertAndGetBroadcastShape(t,n);const r=this.outputShape.length;this.enableShapeUniforms=iS(r);let a="";if(s)if(0===r||1===Us.sizeFromShape(this.outputShape))a="\n          result.y = 0.;\n          result.z = 0.;\n          result.w = 0.;\n        ";else{if(a=`\n          ${wI(r)} coords = getOutputCoords();\n        `,1===r)this.enableShapeUniforms?a+="\n            result.y = (coords + 1) >= outShape ? 0. : result.y;\n            result.z = 0.;\n            result.w = 0.;\n          ":a+=`\n            result.y = (coords + 1) >= ${this.outputShape[0]} ? 0. : result.y;\n            result.z = 0.;\n            result.w = 0.;\n          `;else{const e=uS("coords",r);this.enableShapeUniforms?a+=`\n            bool nextRowOutOfBounds =\n              (${e[r-2]} + 1) >= outShape[${r} - 2];\n            bool nextColOutOfBounds =\n              (${e[r-1]} + 1) >= outShape[${r} - 1];\n            result.y = nextColOutOfBounds ? 0. : result.y;\n            result.z = nextRowOutOfBounds ? 0. : result.z;\n            result.w = nextColOutOfBounds || nextRowOutOfBounds ? 0. : result.w;\n          `:a+=`\n            bool nextRowOutOfBounds =\n              (${e[r-2]} + 1) >= ${this.outputShape[r-2]};\n            bool nextColOutOfBounds =\n              (${e[r-1]} + 1) >= ${this.outputShape[r-1]};\n            result.y = nextColOutOfBounds ? 0. : result.y;\n            result.z = nextRowOutOfBounds ? 0. : result.z;\n            result.w = nextColOutOfBounds || nextRowOutOfBounds ? 0. : result.w;\n          `}}this.userCode=`\n      vec4 binaryOperation(vec4 a, vec4 b) {\n        ${e}\n      }\n\n      void main() {\n        vec4 a = getAAtOutCoords();\n        vec4 b = getBAtOutCoords();\n\n        vec4 result = binaryOperation(a, b);\n        ${a}\n\n        setOutput(result);\n      }\n    `}}function hS(e){const{inputs:t,backend:n}=e,{x:s}=t;return n.incRef(s.dataId),{dataId:s.dataId,shape:s.shape,dtype:s.dtype}}const pS={kernelName:Pt,backendName:"webgl",kernelFunc:hS};function dS(e){const{inputs:t,backend:n}=e,{real:s,imag:r}=t,a=n.makeTensorInfo(s.shape,"complex64"),i=n.texData.get(a.dataId),o=hS({inputs:{x:s},backend:n}),l=hS({inputs:{x:r},backend:n});return i.complexTensorInfos={real:o,imag:l},a}const fS={kernelName:Qe,backendName:"webgl",kernelFunc:dS},mS="return (a < 0.) ? b * a : a;",gS="\n  vec4 aLessThanZero = vec4(lessThan(a, vec4(0.)));\n  return (aLessThanZero * (b * a)) + ((vec4(1.0) - aLessThanZero) * a);\n";const yS={kernelName:jt,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{x:r}=t,{alpha:a}=s,i=n.makeTensorInfo([],"float32",Us.createScalarValue(a,"float32")),o=le().getBool("WEBGL_PACK_BINARY_OPERATIONS")?new cS(gS,r.shape,i.shape):new oS(mS,r.shape,i.shape),l=n.runWebGLProgram(o,[r,i],"float32");return n.disposeIntermediateTensorInfo(i),l}},bS="return (a < 0.) ? b * a : a;",xS="\n  vec4 aLessThanZero = vec4(lessThan(a, vec4(0.)));\n  return (aLessThanZero * (b * a)) + ((vec4(1.0) - aLessThanZero) * a);\n";const wS={kernelName:$n,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n}=e,{x:s,alpha:r}=t,a=le().getBool("WEBGL_PACK_BINARY_OPERATIONS")?new cS(xS,s.shape,r.shape):new oS(bS,s.shape,r.shape);return n.runWebGLProgram(a,[s,r],"float32")}};class vS{constructor(e,t){this.variableNames=["A"],this.outputShape=e,this.enableShapeUniforms=iS(this.outputShape.length),this.userCode=`\n      float unaryOperation(float x) {\n        ${t}\n      }\n\n      void main() {\n        float x = getAAtOutCoords();\n        float y = unaryOperation(x);\n\n        setOutput(y);\n      }\n    `}}const kS="return abs(x);";const IS="return x;";class SS{constructor(e,t){this.variableNames=["A"],this.packedInputs=!0,this.packedOutput=!0,this.outputShape=e,this.enableShapeUniforms=iS(this.outputShape.length),this.userCode=`\n      vec4 unaryOperation(vec4 x) {\n        ${t}\n      }\n\n      void main() {\n        vec4 x = getAAtOutCoords();\n        vec4 y = unaryOperation(x);\n\n        setOutput(y);\n      }\n    `}}function NS({opSnippet:e,packedOpSnippet:t,cpuKernelImpl:n,dtype:s}){return({inputs:r,backend:a})=>{const{x:i}=r,o=a,l=s||i.dtype;if(o.shouldExecuteOnCPU([i])&&null!=n){const e=o.texData.get(i.dataId),t=n(e.values,l);return o.makeTensorInfo(i.shape,l,t)}let u;return u=le().getBool("WEBGL_PACK_UNARY_OPERATIONS")&&null!=t?new SS(i.shape,t):new vS(i.shape,e),o.runWebGLProgram(u,[i],l)}}function TS({opSnippet:e,packedOpSnippet:t,checkOutOfBounds:n=!1,supportsComplex:s=!1,cpuKernelImpl:r,dtype:a}){return({inputs:i,backend:o})=>{const{a:l,b:u}=i,c=o;if(s&&"complex64"===l.dtype){const t=c.texData.get(l.dataId),n=c.texData.get(u.dataId),[s,r]=[[t.complexTensorInfos.real,n.complexTensorInfos.real],[t.complexTensorInfos.imag,n.complexTensorInfos.imag]].map((t=>{const[n,s]=t,r={dataId:n.dataId,dtype:n.dtype,shape:l.shape},a={dataId:s.dataId,dtype:s.dtype,shape:u.shape},i=new oS(e,l.shape,u.shape);return c.runWebGLProgram(i,[r,a],ia(n.dtype,s.dtype))})),a=dS({inputs:{real:s,imag:r},backend:c});return c.disposeIntermediateTensorInfo(s),c.disposeIntermediateTensorInfo(r),a}const h=a||ia(l.dtype,u.dtype);if(("string"===l.dtype||"string"===u.dtype||c.shouldExecuteOnCPU([l,u]))&&null!=r){const e=c.texData.get(l.dataId).values,t=c.texData.get(u.dataId).values,n="string"===l.dtype?Bl.fromUint8ToStringArray(e):e,s="string"===l.dtype?Bl.fromUint8ToStringArray(t):t,[a,i]=r(l.shape,u.shape,n,s,h),o=c.makeTensorInfo(i,h);return c.texData.get(o.dataId).values=a,o}let p;return p=le().getBool("WEBGL_PACK_BINARY_OPERATIONS")&&null!=t?new cS(t,l.shape,u.shape,n):new oS(e,l.shape,u.shape),c.runWebGLProgram(p,[l,u],h)}}function CS(e,t=!1){if("linear"===e)return"return x;";if("relu"===e)return t?"\n  vec4 result = x * vec4(greaterThanEqual(x, vec4(0.0)));\n  bvec4 isNaN = isnan(x);\n\n  result.r = isNaN.r ? x.r : result.r;\n  result.g = isNaN.g ? x.g : result.g;\n  result.b = isNaN.b ? x.b : result.b;\n  result.a = isNaN.a ? x.a : result.a;\n\n  return result;\n":"if (isnan(x)) return x;\n  return (x < 0.0) ? 0.0 : x;\n";if("elu"===e)return t?"\n  vec4 result;\n\n  result.r = (x.r >= 0.0) ? x.r : (exp(x.r) - 1.0);\n  result.g = (x.g >= 0.0) ? x.g : (exp(x.g) - 1.0);\n  result.b = (x.b >= 0.0) ? x.b : (exp(x.b) - 1.0);\n  result.a = (x.a >= 0.0) ? x.a : (exp(x.a) - 1.0);\n\n  return result;\n":"return (x >= 0.0) ? x : (exp(x) - 1.0);";if("relu6"===e)return t?"\n  vec4 result = min(x, vec4(6.)) * vec4(greaterThanEqual(x, vec4(0.0)));\n  bvec4 isNaN = isnan(x);\n\n  result.r = isNaN.r ? x.r : result.r;\n  result.g = isNaN.g ? x.g : result.g;\n  result.b = isNaN.b ? x.b : result.b;\n  result.a = isNaN.a ? x.a : result.a;\n\n  return result;\n":"if (isnan(x)) return x;\n  return (x < 0.0) ? 0.0 : min(6.0, x);\n";if("prelu"===e)return t?xS:bS;if("leakyrelu"===e)return t?gS:mS;if("sigmoid"===e)return"return 1.0 / (1.0 + exp(-1.0 * x));";throw new Error(`Activation ${e} has not been implemented for the WebGL backend.`)}class $S{constructor(e,t,n,s=!1,r=!1,a=!1,i=null,o=!1,l=!1){this.variableNames=["matrixA","matrixB"],this.packedInputs=!0,this.packedOutput=!0,this.outputShape=n,this.enableShapeUniforms=iS(this.outputShape.length);const u=s?e[1]:e[2],c=Math.ceil(u/2),h=s?"i * 2, rc.y":"rc.y, i * 2",p=r?"rc.z, i * 2":"i * 2, rc.z",d=s?["a.xxyy","a.zzww"]:["a.xxzz","a.yyww"],f=r?["b.xzxz","b.ywyw"]:["b.xyxy","b.zwzw"];let m="",g="";i&&(m=o?`vec4 activation(vec4 a) {\n          vec4 b = getPreluActivationWeightsAtOutCoords();\n          ${i}\n        }`:l?`vec4 activation(vec4 a) {\n          vec4 b = getLeakyreluAlphaAtOutCoords();\n          ${i}\n        }`:`vec4 activation(vec4 x) {\n          ${i}\n        }`,g="result = activation(result);");const y=a?"result += getBiasAtOutCoords();":"";a&&this.variableNames.push("bias"),o&&this.variableNames.push("preluActivationWeights"),l&&this.variableNames.push("leakyreluAlpha");let b="rc.x",x="rc.x";e[0]<t[0]?b=`int(min(float(rc.x), ${e[0]-1}.))`:t[0]<e[0]&&(x=`int(min(float(rc.x), ${t[0]-1}.))`),this.userCode=`\n      ${m}\n      // Don't use uniform for sharedDimensionPacked for performance.\n      const float sharedDimension = ${c}.0;\n\n      vec4 dot2x2ARowBCol(ivec3 rc) {\n        vec4 result = vec4(0);\n        for (int i = 0; i < ${c}; i++) {\n          int batchA = ${b};\n          int batchB = ${x};\n          vec4 a = getMatrixA(batchA, ${h});\n          vec4 b = getMatrixB(batchB, ${p});\n\n          // These swizzled products need to be separately added.\n          // See: https://github.com/tensorflow/tfjs/issues/1735\n          result += (${d[0]} * ${f[0]});\n          result += (${d[1]} * ${f[1]});\n        }\n        return result;\n      }\n\n      void main() {\n        ivec3 rc = getOutputCoords();\n        vec4 result = dot2x2ARowBCol(rc);\n\n        ${y}\n\n        ${g}\n\n        setOutput(result);\n      }\n    `}}const ES="return areal * breal - aimag * bimag;",AS="return areal * bimag + aimag * breal;";class RS{constructor(e,t,n){this.variableNames=["AReal","AImag","BReal","BImag"],this.outputShape=Bl.assertAndGetBroadcastShape(t,n),this.userCode=`\n      float binaryOpComplex(\n          float areal, float aimag, float breal, float bimag) {\n        ${e}\n      }\n\n      void main() {\n        float areal = getARealAtOutCoords();\n        float aimag = getAImagAtOutCoords();\n        float breal = getBRealAtOutCoords();\n        float bimag = getBImagAtOutCoords();\n        setOutput(binaryOpComplex(areal, aimag, breal, bimag));\n      }\n    `}}var FS={};t(FS,"simpleAbsImpl",(()=>Wy)),t(FS,"addImpl",(()=>Fy)),t(FS,"bincountImpl",(()=>Sb)),t(FS,"bincountReduceImpl",(()=>Nb)),t(FS,"ceilImpl",(()=>$b)),t(FS,"concatImpl",(()=>_b)),t(FS,"equalImpl",(()=>gx)),t(FS,"expImpl",(()=>Cx)),t(FS,"expm1Impl",(()=>Fx)),t(FS,"floorImpl",(()=>Xx)),t(FS,"gatherNdImpl",(()=>sw)),t(FS,"gatherV2Impl",(()=>aw)),t(FS,"greaterImpl",(()=>ow)),t(FS,"greaterEqualImpl",(()=>cw)),t(FS,"lessImpl",(()=>ww)),t(FS,"lessEqualImpl",(()=>Iw)),t(FS,"linSpaceImpl",(()=>Tw)),t(FS,"logImpl",(()=>$w)),t(FS,"maxImpl",(()=>Vw)),t(FS,"maximumImpl",(()=>jw)),t(FS,"minimumImpl",(()=>nv)),t(FS,"multiplyImpl",(()=>lx)),t(FS,"negImpl",(()=>pv)),t(FS,"notEqualImpl",(()=>wv)),t(FS,"prodImpl",(()=>Dv)),t(FS,"rangeImpl",(()=>Ov)),t(FS,"rsqrtImpl",(()=>qv)),t(FS,"sigmoidImpl",(()=>xy)),t(FS,"sliceImpl",(()=>wb)),t(FS,"sparseFillEmptyRowsImpl",(()=>dk)),t(FS,"sparseReshapeImpl",(()=>mk)),t(FS,"sparseSegmentReductionImpl",(()=>yk)),t(FS,"sqrtImpl",(()=>kk)),t(FS,"squaredDifferenceImpl",(()=>Tk)),t(FS,"stridedSliceImpl",(()=>Rk)),t(FS,"stringNGramsImpl",(()=>_k)),t(FS,"stringSplitImpl",(()=>Lk)),t(FS,"stringToHashBucketFastImpl",(()=>Bk)),t(FS,"subImpl",(()=>zx)),t(FS,"tileImpl",(()=>Gk)),t(FS,"topKImpl",(()=>qk)),t(FS,"transposeImpl",(()=>Ky)),t(FS,"uniqueImpl",(()=>Qk));const{addImpl:DS,bincountImpl:_S,bincountReduceImpl:OS,ceilImpl:MS,concatImpl:LS,equalImpl:zS,expImpl:BS,expm1Impl:PS,floorImpl:WS,gatherNdImpl:US,gatherV2Impl:VS,greaterImpl:GS,greaterEqualImpl:HS,lessImpl:jS,lessEqualImpl:qS,linSpaceImpl:KS,logImpl:XS,maxImpl:YS,maximumImpl:ZS,minimumImpl:JS,multiplyImpl:QS,negImpl:eN,notEqualImpl:tN,prodImpl:nN,rangeImpl:sN,rsqrtImpl:rN,sigmoidImpl:aN,simpleAbsImpl:iN,sliceImpl:oN,sparseFillEmptyRowsImpl:lN,sparseReshapeImpl:uN,sparseSegmentReductionImpl:cN,sqrtImpl:hN,stridedSliceImpl:pN,stringNGramsImpl:dN,stringSplitImpl:fN,stringToHashBucketFastImpl:mN,subImpl:gN,tileImpl:yN,topKImpl:bN,transposeImpl:xN,uniqueImpl:wN}=FS,vN="return a * b;";function kN(e){const{inputs:t,backend:n}=e,{a:s,b:r}=t,a=Bl.upcastType(s.dtype,r.dtype);if("complex64"===s.dtype){const e=n.texData.get(s.dataId),t=n.texData.get(r.dataId),a=new RS(ES,s.shape,r.shape),i=new RS(AS,s.shape,r.shape),o=[{dataId:e.complexTensorInfos.real.dataId,dtype:e.complexTensorInfos.real.dtype,shape:s.shape},{dataId:e.complexTensorInfos.imag.dataId,dtype:e.complexTensorInfos.imag.dtype,shape:s.shape},{dataId:t.complexTensorInfos.real.dataId,dtype:t.complexTensorInfos.real.dtype,shape:r.shape},{dataId:t.complexTensorInfos.imag.dataId,dtype:t.complexTensorInfos.imag.dtype,shape:r.shape}],l=n.runWebGLProgram(a,o,"float32"),u=n.runWebGLProgram(i,o,"float32"),c=dS({inputs:{real:l,imag:u},backend:n});return n.disposeIntermediateTensorInfo(l),n.disposeIntermediateTensorInfo(u),c}if(n.shouldExecuteOnCPU([s,r])){const e=n.texData.get(s.dataId),t=n.texData.get(r.dataId),[i,o]=QS(s.shape,r.shape,e.values,t.values,a),l=n.makeTensorInfo(o,a);return n.texData.get(l.dataId).values=i,l}let i;return i=le().getBool("WEBGL_PACK_BINARY_OPERATIONS")?new cS(vN,s.shape,r.shape):new oS(vN,s.shape,r.shape),n.runWebGLProgram(i,[s,r],a)}const IN={kernelName:yn,backendName:"webgl",kernelFunc:kN};class SN{constructor(e,t){this.variableNames=["A"],this.packedInputs=!0,this.packedOutput=!0,this.customUniforms=[{name:"inputShape",type:"ivec3"}],this.outputShape=e,this.enableShapeUniforms=iS(this.outputShape.length);let n="";for(let e=0;e<4;e++){let t="thisRC = rc;";e%2==1&&(t+="thisRC.z += 1;"),e>1&&(t+="thisRC.y += 1;"),n+=`\n        ${t}\n        ${e>0?"if(thisRC.y < rows && thisRC.z < cols){":""}\n          int flatIndex = getFlatIndex(thisRC);\n\n          ivec3 inputRC = inputCoordsFromReshapedOutCoords(flatIndex);\n          vec2 inputRCInnerDims = vec2(float(inputRC.y),float(inputRC.z));\n\n          result[${e}] =\n            getChannel(getA(inputRC.x, inputRC.y, inputRC.z), inputRCInnerDims);\n        ${e>0?"}":""}\n      `}var s,r;this.userCode=`\n      ${s=t,r=this.enableShapeUniforms,`\n    ivec3 inputCoordsFromReshapedOutCoords(int index) {\n      ${r?iI(["r","c","d"],"inputShape"):rI(["r","c","d"],s)}\n      return ivec3(r, c, d);\n    }\n  `}\n      ${this.enableShapeUniforms?"\n  int getFlatIndex(ivec3 coords) {\n    return coords.x * outShapeStrides[0] + coords.y * outShapeStrides[1] + coords.z;\n  }\n":oI(e)}\n\n      void main() {\n        ivec3 rc = getOutputCoords();\n\n        vec4 result = vec4(0.);\n\n        ivec3 thisRC;\n        int rows = ${this.enableShapeUniforms?"outShape[1]":e[1]};\n        int cols = ${this.enableShapeUniforms?"outShape[2]":e[2]};\n\n        ${n}\n\n        setOutput(result);\n      }\n    `}}function NN(e){const{inputs:t,backend:n,attrs:s}=e,{x:r}=t,{shape:a}=s,i=n,o=Us.sizeFromShape(r.shape),l=Us.inferFromImplicitShape(a,o),u=Us.sizeFromShape(l);Us.assert(o===u,(()=>`The new shape (${l}) has ${u} elements and the old shape (${r.shape}) has ${o} elements. The new shape and old shape must have the same number of elements.`));const c=i.texData.get(r.dataId);return!c.isPacked||ZI(r.shape,l)||null!==c.texture&&ZI(c.shape,l)?(i.incRef(r.dataId),{dataId:r.dataId,shape:l,dtype:r.dtype}):function(e,t,n){const s=[qI(e.shape),...KI(e.shape)],r={dtype:e.dtype,shape:s,dataId:e.dataId},a=[qI(t),...KI(t)],i=new SN(a,s),o=[s],l=n.runWebGLProgram(i,[r],e.dtype,o,!0);return{dataId:l.dataId,shape:t,dtype:l.dtype}}(r,l,i)}const TN={kernelName:_n,backendName:"webgl",kernelFunc:NN};class CN{constructor(e,t){this.variableNames=["x"];const{windowSize:n,batchSize:s,inSize:r,outSize:a}=e;this.outputShape=[s,a];const i=4*Math.floor(n/4),o=n%4;let l="sumValue += dot(values, ones);";if(null!=t){const e=1/t;l=`sumValue += dot(values * ${Us.isInt(e)?e.toPrecision(2):e}, ones);`}let u="";r%n>0&&(u=`\n        if (inIdx < 0 || inIdx >= ${r}) {\n          return 0.0;\n        }\n      `),this.userCode=`\n      const vec4 ones = vec4(1.0, 1.0, 1.0, 1.0);\n\n      float getValue(int batch, int inIdx) {\n        ${u}\n        return getX(batch, inIdx);\n      }\n\n      void main() {\n        ivec2 coords = getOutputCoords();\n        int batch = coords[0];\n        int outIdx = coords[1];\n        int inOffset = outIdx * ${n};\n\n        float sumValue = 0.0;\n\n        for (int i = 0; i < ${i}; i += 4) {\n          int inIdx = inOffset + i;\n          vec4 values = vec4(\n            getValue(batch, inIdx),\n            getValue(batch, inIdx + 1),\n            getValue(batch, inIdx + 2),\n            getValue(batch, inIdx + 3)\n          );\n\n          ${l}\n        }\n\n        int inIdx = inOffset + ${i};\n        if (${1===o}) {\n          vec4 values = vec4(getValue(batch, inIdx), 0.0, 0.0, 0.0);\n\n          ${l}\n        } else if (${2===o}) {\n          vec4 values = vec4(\n            getValue(batch, inIdx),\n            getValue(batch, inIdx + 1), 0.0, 0.0);\n\n          ${l}\n        } else if (${3===o}) {\n          vec4 values = vec4(\n            getValue(batch, inIdx),\n            getValue(batch, inIdx + 1),\n            getValue(batch, inIdx + 2), 0.0);\n\n          ${l}\n        }\n        setOutput(sumValue);\n      }\n    `}}class $N{constructor(e,t){this.variableNames=["x"];const{windowSize:n,batchSize:s,inSize:r,outSize:a}=e;this.outputShape=[s,a];let i="0.0",o="";"prod"===t?i="1.0":"min"===t?(i="1.0 / 1e-20",o="min"):"max"===t&&(i="-1.0 / 1e-20",o="max");let l=`${t}(${t}(${t}(minMaxValue[0], minMaxValue[1]), minMaxValue[2]), minMaxValue[3])`;"sum"===t?l="sumValue":"prod"===t?l="prodValue":"all"===t?l="allValue":"any"===t&&(l="anyValue");const u=4*Math.floor(n/4),c=n%4;let h=`\n      if (${"sum"===t}) {\n        sumValue += dot(values, ones);\n      } else if (${"prod"===t}) {\n        vec2 tmp = vec2(values[0], values[1]) * vec2(values[2], values[3]);\n        prodValue *= tmp[0] * tmp[1];\n      } else {\n        minMaxValue = ${o}(values, minMaxValue);\n        if (${"min"===t} || ${"max"===t}) {\n          minMaxValue = ${o}(values, minMaxValue);\n          bvec4 isNaN = isnan(values);\n          if (isNaN.r || isNaN.g || isNaN.b || isNaN.a) {\n            minMaxValue = vec4(NAN);\n          }\n        }\n      }\n    `,p="vec4";"all"===t?(i="1.0",h="\n        bool reducedAllValue = all(values);\n        float floatedReducedAllValue = float(reducedAllValue);\n        allValue = float(allValue >= 1.0 && floatedReducedAllValue >= 1.0);\n      ",p="bvec4"):"any"===t&&(i="0.0",h="\n        bool reducedAnyValue = any(values);\n        float floatedReducedAnyValue = float(reducedAnyValue);\n        anyValue = float(anyValue >= 1.0 || floatedReducedAnyValue >= 1.0);\n      ",p="bvec4");let d="";r%n>0&&(d=`\n        if (inIdx < 0 || inIdx >= ${r}) {\n          return initializationValue;\n        }\n      `),this.userCode=`\n      const float initializationValue = ${i};\n      const vec4 ones = vec4(1.0, 1.0, 1.0, 1.0);\n\n      float getValue(int batch, int inIdx) {\n        ${d}\n        return getX(batch, inIdx);\n      }\n\n      void main() {\n        ivec2 coords = getOutputCoords();\n        int batch = coords[0];\n        int outIdx = coords[1];\n        int inOffset = outIdx * ${n};\n\n        vec4 minMaxValue = vec4(${i});\n        float prodValue = 1.0;\n        float sumValue = 0.0;\n        float allValue = 1.0;\n        float anyValue = 0.0;\n\n        for (int i = 0; i < ${u}; i += 4) {\n          int inIdx = inOffset + i;\n          ${p} values = ${p}(\n            getValue(batch, inIdx),\n            getValue(batch, inIdx + 1),\n            getValue(batch, inIdx + 2),\n            getValue(batch, inIdx + 3)\n          );\n\n          ${h}\n        }\n\n        int inIdx = inOffset + ${u};\n        if (${1===c}) {\n          ${p} values = ${p}(\n            getValue(batch, inIdx),\n            initializationValue,\n            initializationValue,\n            initializationValue\n          );\n\n          ${h}\n        } else if (${2===c}) {\n          ${p} values = ${p}(\n            getValue(batch, inIdx),\n            getValue(batch, inIdx + 1),\n            initializationValue,\n            initializationValue\n          );\n\n          ${h}\n        } else if (${3===c}) {\n          ${p} values = ${p}(\n            getValue(batch, inIdx),\n            getValue(batch, inIdx + 1),\n            getValue(batch, inIdx + 2),\n            initializationValue\n          );\n\n          ${h}\n        }\n        setOutput(${l});\n      }\n    `}}function EN(e,t,n,s){const r=function(e){const t=[];for(;0===t.length||1!==t[t.length-1].outSize;){const n=t.length?t[t.length-1].outSize:e[1],s=Bl.computeOptimalWindowSize(n);t.push({inSize:n,windowSize:s,outSize:Math.ceil(n/s)})}return t}(e.shape);let a=e;for(let i=0;i<r.length;i++){const{inSize:o,windowSize:l,outSize:u}=r[i];let c,h;c="mean"===n?0===i?new CN({windowSize:l,inSize:o,batchSize:e.shape[0],outSize:u},o):new CN({windowSize:l,inSize:o,batchSize:e.shape[0],outSize:u}):new $N({windowSize:l,inSize:o,batchSize:e.shape[0],outSize:u},n),h=a,a=s.runWebGLProgram(c,[a],t),h.dataId!==e.dataId&&s.disposeIntermediateTensorInfo(h)}return a}class AN{constructor(e,t){this.variableNames=["A"];const n=new Array(e.length);for(let s=0;s<n.length;s++)n[s]=e[t[s]];this.outputShape=n,this.rank=n.length;const s=wI(this.rank),r=function(e){const t=e.length;if(t>6)throw Error(`Transpose for rank ${t} is not yet supported`);const n=["resRC.x","resRC.y","resRC.z","resRC.w","resRC.u","resRC.v"],s=new Array(t);for(let t=0;t<e.length;t++)s[e[t]]=n[t];return s.join()}(t);this.userCode=`\n    void main() {\n      ${s} resRC = getOutputCoords();\n      setOutput(getA(${r}));\n    }\n    `}}class RN{constructor(e,t){this.variableNames=["A"],this.packedInputs=!0,this.packedOutput=!0;const n=new Array(e.length);for(let s=0;s<n.length;s++)n[s]=e[t[s]];if(this.outputShape=n,this.rank=n.length,this.rank>6)throw Error(`Packed transpose for rank ${this.rank} is not yet supported.`);const s=wI(this.rank),r=lS("rc",this.rank),a=new Array(this.rank);for(let e=0;e<t.length;e++)a[t[e]]=r[e];const i=`vec2(${a.slice(-2).join()})`,o=`++${r[this.rank-1]} < ${n[this.rank-1]}`,l=`getChannel(getA(${a.join()}), ${i})`;this.userCode=`\n    void main() {\n      ${s} rc = getOutputCoords();\n      vec4 result = vec4(0.);\n      result[0] = ${l};\n      if(${o}) {\n        result[1] = ${l};\n      }\n      --${r[this.rank-1]};\n      if(++${r[this.rank-2]} < ${n[this.rank-2]}) {\n        result[2] = ${l};\n        if(${o}) {\n          result[3] = ${l};\n        }\n      }\n      setOutput(result);\n    }\n    `}}function FN(e,t,n){const s=le().getBool("WEBGL_PACK_ARRAY_OPERATIONS")?new RN(e.shape,t):new AN(e.shape,t);return n.runWebGLProgram(s,[e],e.dtype)}function DN(e){const{inputs:t,backend:n,attrs:s}=e,{x:r}=t,{axis:a,keepDims:i}=s;return function(e,t,n,s){const r=t,a=e.shape.length,i=Us.parseAxisParam(r,e.shape);let o=i;const l=Bl.getAxesPermutation(o,a),u=null!=l;let c=e;u&&(c=FN(e,l,s),o=Bl.getInnerMostAxes(o.length,a)),Bl.assertAxesAreInnerMostDims("sum",o,a);const[h,p]=Bl.computeOutAndReduceShapes(c.shape,o);let d=h;n&&(d=Bl.expandShapeToKeepDim(h,i));const f=Us.sizeFromShape(p),m=NN({inputs:{x:c},attrs:{shape:[Us.sizeFromShape(e.shape)/f,f]},backend:s}),g=EN(m,oa(e.dtype),"sum",s),y=NN({inputs:{x:g},attrs:{shape:d},backend:s});return s.disposeIntermediateTensorInfo(m),s.disposeIntermediateTensorInfo(g),u&&s.disposeIntermediateTensorInfo(c),y}(r,a,i,n)}const _N={kernelName:Qn,backendName:"webgl",kernelFunc:DN};function ON(e){const{inputs:t,backend:n,attrs:s}=e,{x:r}=t,{perm:a}=s,i=n,o=r.shape.length,l=new Array(o);for(let e=0;e<l.length;e++)l[e]=r.shape[a[e]];let u;if(i.shouldExecuteOnCPU([r])){const e=i.texData.get(r.dataId).values,t=xN(e,r.shape,r.dtype,a,l);u=i.makeTensorInfo(l,r.dtype);i.texData.get(u.dataId).values=t}else u=FN(r,a,i);return u}const MN={kernelName:ws,backendName:"webgl",kernelFunc:ON};function LN({a:e,b:t,transposeA:n,transposeB:s,backend:r,bias:a=null,preluActivationWeights:i=null,leakyreluAlpha:o=0,activation:l=null}){const u=e.shape.length,c=t.shape.length,h=n?e.shape[u-2]:e.shape[u-1],p=s?t.shape[c-1]:t.shape[c-2],d=n?e.shape[u-1]:e.shape[u-2],f=s?t.shape[c-2]:t.shape[c-1],m=e.shape.slice(0,-2),g=t.shape.slice(0,-2),y=Us.sizeFromShape(m),b=Us.sizeFromShape(g),x=il.assertAndGetBroadcastShape(e.shape.slice(0,-2),t.shape.slice(0,-2)).concat([d,f]);Us.assert(h===p,(()=>`Error in matMul: inner shapes (${h}) and (${p}) of Tensors with shapes ${e.shape} and ${t.shape} and transposeA=${n} and transposeB=${s} must match.`));const w=n?[y,h,d]:[y,d,h],v=s?[b,f,p]:[b,p,f],k=NN({inputs:{x:e},backend:r,attrs:{shape:w}}),I=NN({inputs:{x:t},backend:r,attrs:{shape:v}}),S=[k,I],N=Math.max(y,b),T=n?k.shape[1]:k.shape[2],C=null!=a,$=null!=i,E="leakyrelu"===l,A=null!=l?CS(l,!0):null;let R;if((1===d||1===f)&&T>1e3&&!1===(C||$||E||null!=A)){let e=k,t=I;n&&(e=ON({inputs:{x:k},backend:r,attrs:{perm:[0,2,1]}}),S.push(e)),s&&(t=ON({inputs:{x:I},backend:r,attrs:{perm:[0,2,1]}}),S.push(t));const a=1===f;let i=e;1!==f&&(i=NN({inputs:{x:e},backend:r,attrs:{shape:[N,T,1]}}),S.push(i));const o=1===f?2:1;let l=t;a&&(l=NN({inputs:{x:t},backend:r,attrs:{shape:[N,1,T]}}),S.push(l));const u=kN({inputs:{a:i,b:l},backend:r});R=DN({inputs:{x:u},backend:r,attrs:{axis:o,keepDims:!0}}),S.push(u)}else{const l=ia(e.dtype,t.dtype),u=new $S(w,v,[N,d,f],n,s,C,A,$,E),c=[k,I];if(null!=a&&c.push(a),$&&c.push(i),E){const e=r.makeTensorInfo([],"float32",Us.createScalarValue(o,"float32"));c.push(e),S.push(e)}R=r.runWebGLProgram(u,c,l)}const F=NN({inputs:{x:R},backend:r,attrs:{shape:x}});S.push(R);for(const e of S)r.disposeIntermediateTensorInfo(e);return F}const zN={kernelName:$s,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{a:r,b:a,bias:i,preluActivationWeights:o}=t,{transposeA:l,transposeB:u,activation:c,leakyreluAlpha:h}=s;return LN({a:r,b:a,transposeA:l,transposeB:u,backend:n,bias:i,preluActivationWeights:o,leakyreluAlpha:h,activation:c})}},BN="return abs(x);";const PN={kernelName:$e,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n}=e,{x:s}=t;if(n.shouldExecuteOnCPU([s])&&"complex64"!==s.dtype){const e=n.texData.get(s.dataId),t=iN(e.values);return n.makeTensorInfo(s.shape,s.dtype,t)}let r;return r=le().getBool("WEBGL_PACK_UNARY_OPERATIONS")?new SS(s.shape,BN):new vS(s.shape,BN),n.runWebGLProgram(r,[s],s.dtype)}},WN=NS({opSnippet:"if (isnan(x)) return x;\n  if (abs(x) > 1.) {\n    return NAN;\n  }\n  return acos(x);\n"}),UN={kernelName:Ee,backendName:"webgl",kernelFunc:WN},VN=NS({opSnippet:"if (isnan(x)) return x;\n  if (x < 1.0) return NAN;\nreturn log(x + sqrt(x * x - 1.0));"}),GN={kernelName:Ae,backendName:"webgl",kernelFunc:VN},HN="return a + b;",jN=TS({opSnippet:HN,packedOpSnippet:HN,supportsComplex:!0,cpuKernelImpl:DS}),qN={kernelName:Re,backendName:"webgl",kernelFunc:jN};class KN{constructor(e,t){this.outputShape=[],this.outputShape=e,this.variableNames=t.map(((e,t)=>`T${t}`));const n=[];this.variableNames.forEach((e=>{n.push(`float v${e} = get${e}AtOutCoords();`)}));const s=this.variableNames.map((e=>`v${e}`)).join(" + ");this.userCode=`\n      void main() {\n        ${n.join("\n        ")}\n\n        float result = ${s};\n        setOutput(result);\n      }\n    `}}class XN{constructor(e,t){this.outputShape=[],this.packedInputs=!0,this.packedOutput=!0,this.outputShape=e,this.variableNames=t.map(((e,t)=>`T${t}`));const n=[];this.variableNames.forEach((e=>{n.push(`vec4 v${e} = get${e}AtOutCoords();`)}));const s=this.variableNames.map((e=>`v${e}`)).join(" + ");this.userCode=`\n      void main() {\n        ${n.join("\n        ")}\n\n        vec4 result = ${s};\n        setOutput(result);\n      }\n    `}}const YN={kernelName:Fe,backendName:"webgl",kernelFunc:function e(t){const{inputs:n,backend:s}=t,r=n;if(1===r.length)return hS({inputs:{x:r[0]},backend:s});if(r.length>le().get("WEBGL_MAX_TEXTURES_IN_SHADER")){const t=Math.floor(r.length/2),n=e({inputs:r.slice(0,t),backend:s}),a=e({inputs:r.slice(t),backend:s});return e({inputs:[n,a],backend:s})}const a=r.map((e=>e.dtype)).reduce(((e,t)=>ia(e,t))),i=r.map((e=>e.shape)),o=le().getBool("WEBGL_PACK")?new XN(r[0].shape,i):new KN(r[0].shape,i);return s.runWebGLProgram(o,r,a)}};const ZN={kernelName:De,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{x:r}=t,{axis:a,keepDims:i}=s,o=r.shape.length,l=Us.parseAxisParam(a,r.shape);let u=l;const c=Bl.getAxesPermutation(u,o);let h=r;null!=c&&(h=ON({inputs:{x:r},backend:n,attrs:{perm:c}}),u=Bl.getInnerMostAxes(u.length,o)),Bl.assertAxesAreInnerMostDims("all",u,o);const[p,d]=Bl.computeOutAndReduceShapes(h.shape,u),f=NN({inputs:{x:h},backend:n,attrs:{shape:[-1,Us.sizeFromShape(d)]}}),m=EN(f,f.dtype,"all",n);let g;if(i){g=NN({inputs:{x:m},backend:n,attrs:{shape:Bl.expandShapeToKeepDim(p,l)}})}else g=NN({inputs:{x:m},backend:n,attrs:{shape:p}});return n.disposeIntermediateTensorInfo(f),n.disposeIntermediateTensorInfo(m),null!=c&&n.disposeIntermediateTensorInfo(h),g}};const JN={kernelName:_e,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{x:r}=t,{axis:a,keepDims:i}=s,o=r.shape.length,l=Us.parseAxisParam(a,r.shape);let u=l;const c=Bl.getAxesPermutation(u,o);let h=r;null!=c&&(h=ON({inputs:{x:r},backend:n,attrs:{perm:c}}),u=Bl.getInnerMostAxes(u.length,o)),Bl.assertAxesAreInnerMostDims("any",u,o);const[p,d]=Bl.computeOutAndReduceShapes(h.shape,u),f=NN({inputs:{x:h},backend:n,attrs:{shape:[-1,Us.sizeFromShape(d)]}}),m=EN(f,f.dtype,"any",n);let g;if(i){g=NN({inputs:{x:m},backend:n,attrs:{shape:Bl.expandShapeToKeepDim(p,l)}})}else g=NN({inputs:{x:m},backend:n,attrs:{shape:p}});return n.disposeIntermediateTensorInfo(f),n.disposeIntermediateTensorInfo(m),null!=c&&n.disposeIntermediateTensorInfo(h),g}};class QN{constructor(e,t,n){this.variableNames=["A"];const{windowSize:s,batchSize:r,outSize:a}=e;n||this.variableNames.push("bestIndicesA"),this.outputShape=[r,a];const i="max"===t?">":"<",o=n?"inOffset + i;":"round(getBestIndicesA(batch, inOffset + i));";this.userCode=`\n      void main() {\n        ivec2 coords = getOutputCoords();\n        int batch = coords[0];\n        int outIdx = coords[1];\n        int inOffset = outIdx * ${s};\n\n        int bestIndex = inOffset;\n        float bestValue = getA(batch, bestIndex);\n\n        for (int i = 0; i < ${s}; i++) {\n          int inIdx = ${o};\n          float candidate = getA(batch, inIdx);\n          if (candidate ${i} bestValue) {\n            bestValue = candidate;\n            bestIndex = inIdx;\n          }\n        }\n        setOutput(float(bestIndex));\n      }\n    `}}class eT{constructor(e,t,n,s){this.variableNames=["A"],this.packedInputs=!0,this.packedOutput=!0,Us.assert(e.length>2,(()=>`Packed arg${n.charAt(0).toUpperCase()+n.slice(1)} supports only inputs with rank above 2.`));const r=e[e.length-1],a=Math.ceil(r/t);this.outputShape=e.slice(0,-1),a>1&&this.outputShape.push(a),s||this.variableNames.push("bestIndicesA");const i=this.outputShape,o=i.length,l=wI(o),u=uS("coords",o);let c,h;if(1===a){h=o+1;const e=wI(h);c=`\n        ${e} sourceLocR = ${e}(${u.join()}, 0);\n        ++${u[o-1]};\n        ${e} sourceLocG = ${e}(${u.join()}, 0);\n        ++${u[o-2]};\n        ${e} sourceLocA = ${e}(${u.join()}, 0);\n        --${u[o-1]};\n        ${e} sourceLocB = ${e}(${u.join()}, 0);\n        --${u[o-2]};`}else h=o,c=`\n        ${l} sourceLocR = coords;\n        ++${u[o-1]};\n        ${l} sourceLocG = coords;\n        ++${u[o-2]};\n        ${l} sourceLocA = coords;\n        --${u[o-1]};\n        ${l} sourceLocB = coords;\n        --${u[o-2]};`;const p=["x","y","z","w","u","v"].slice(0,h),d="."+p[h-1],f=p.map((e=>"int "+e)),m=uS("sourceLocR",h-1).concat("inIdx.r"),g=uS("sourceLocG",h-1).concat("inIdx.g"),y=uS("sourceLocB",h-1).concat("inIdx.b"),b=uS("sourceLocA",h-1).concat("inIdx.a"),x="max"===n?"greaterThan":"lessThan",w=s?"":`\n          inIdx = round(vec4(getBestIndicesAChannel(${m.join()}),\n                             getBestIndicesAChannel(${g.join()}),\n                             getBestIndicesAChannel(${y.join()}),\n                             getBestIndicesAChannel(${b.join()})));`,v=`vec4(\n            getAChannel(${m.join()}),\n            hasNextCol ? getAChannel(${g.join()}) : 0.,\n            hasNextRow ? getAChannel(${y.join()}) : 0.,\n            hasNextRow && hasNextCol ? getAChannel(${b.join()}) : 0.)`,k=s?"":`\n      float getBestIndicesAChannel(${f.join()}) {\n        return getChannel(getBestIndicesA(${p.join()}),\n                                          vec2(${p.slice(-2).join()}));\n      }`;this.userCode=`\n      float getAChannel(${f.join()}) {\n        return getChannel(getA(${p.join()}),\n                               vec2(${p.slice(-2).join()}));\n      }\n      ${k}\n      void main() {\n        ${l} coords = getOutputCoords();\n        bool hasNextCol = ${u[o-1]} < ${i[o-1]-1};\n        bool hasNextRow = ${u[o-2]} < ${i[o-2]-1};\n        ${c}\n        ivec4 srcIdx = ivec4(sourceLocR${d}, sourceLocG${d},\n          sourceLocB${d}, sourceLocA${d}) * ${t};\n        ivec4 inIdx = srcIdx;\n        vec4 bestIndex = vec4(inIdx);\n        vec4 bestValue = ${v};\n\n        for (int i = 0; i < ${t}; i++) {\n          inIdx = srcIdx;\n          ${w}\n          vec4 candidate = ${v};\n          bvec4 nan = isnan(candidate);\n          bvec4 replace = bvec4(\n            vec4(${x}(candidate, bestValue)) * (vec4(1.0) - vec4(nan)));\n\n          bestValue = vec4(replace.x  ? candidate.x : bestValue.x,\n                           replace.y  ? candidate.y : bestValue.y,\n                           replace.z  ? candidate.z : bestValue.z,\n                           replace.w  ? candidate.w : bestValue.w);\n          bestIndex = mix(bestIndex, vec4(inIdx), vec4(replace));\n          srcIdx++;\n        }\n        setOutput(bestIndex);\n      }\n    `}}function tT(e,t,n,s=null){let r=t.shape[0],a=t.shape[1];null!=s&&(r=s.shape[0],a=s.shape[1]);const i=Bl.computeOptimalWindowSize(a),o={windowSize:i,inSize:a,batchSize:r,outSize:Math.ceil(a/i)},l=new QN(o,n,null==s),u=[t];null!=s&&u.push(s);const c=e.runWebGLProgram(l,u,"int32");if(1===c.shape[1])return c;const h=tT(e,t,n,c);return e.disposeIntermediateTensorInfo(c),h}function nT(e,t,n,s=null){const r=null!=s?s.shape:t.shape,a=r[r.length-1],i=Bl.computeOptimalWindowSize(a),o=new eT(r,i,n,null==s),l=null==s?[t]:[t,s],u=e.runWebGLProgram(o,l,"int32");if(u.shape.length===t.shape.length){const s=nT(e,t,n,u);return e.disposeIntermediateTensorInfo(u),s}return u}function sT(e,t,n,s){const r=[n];if(Bl.assertAxesAreInnerMostDims("arg"+s.charAt(0).toUpperCase()+s.slice(1),r,t.shape.length),!le().getBool("WEBGL_PACK_REDUCE")||t.shape.length<=2){const n=[],a=e.texData.get(t.dataId);let i=t;null!==a&&a.isPacked&&(i=e.unpackTensor(t),n.push(i));const[o,l]=Bl.computeOutAndReduceShapes(i.shape,r),u=Us.sizeFromShape(l),c=NN({inputs:{x:i},backend:e,attrs:{shape:[-1,u]}});n.push(c);const h=tT(e,c,s);n.push(h);const p=NN({inputs:{x:h},backend:e,attrs:{shape:o}});return n.forEach((t=>e.disposeIntermediateTensorInfo(t))),p}return nT(e,t,s)}const rT={kernelName:Oe,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{x:r}=t,{axis:a}=s;let i=Us.parseAxisParam(a,r.shape);const o=Bl.getAxesPermutation(i,r.shape.length);let l=r;const u=[];null!=o&&(l=ON({inputs:{x:r},backend:n,attrs:{perm:o}}),u.push(l),i=Bl.getInnerMostAxes(i.length,l.shape.length)),Bl.assertAxesAreInnerMostDims("argMax",[i[0]],l.shape.length);const c=sT(n,l,i[0],"max");return u.forEach((e=>n.disposeIntermediateTensorInfo(e))),c}};const aT={kernelName:Me,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{x:r}=t,{axis:a}=s;let i=Us.parseAxisParam(a,r.shape);const o=Bl.getAxesPermutation(i,r.shape.length);let l=r;const u=[];null!=o&&(l=ON({inputs:{x:r},backend:n,attrs:{perm:o}}),u.push(l),i=Bl.getInnerMostAxes(i.length,l.shape.length)),Bl.assertAxesAreInnerMostDims("argMin",[i[0]],l.shape.length);const c=sT(n,l,i[0],"min");return u.forEach((e=>n.disposeIntermediateTensorInfo(e))),c}},iT=NS({opSnippet:"if (isnan(x)) return x;\n  if (abs(x) > 1.) {\n    return NAN;\n  }\n  return asin(x);\n"}),oT={kernelName:Le,backendName:"webgl",kernelFunc:iT},lT=NS({opSnippet:"if (isnan(x)) return x;return log(x + sqrt(x * x + 1.0));"}),uT={kernelName:ze,backendName:"webgl",kernelFunc:lT},cT=NS({opSnippet:"if (isnan(x)) return x;\n  return atan(x);\n"}),hT={kernelName:Be,backendName:"webgl",kernelFunc:cT},pT=TS({opSnippet:"\n  if (isnan(a)) return a;\n  if (isnan(b)) return b;\n\n  return atan(a, b);\n",packedOpSnippet:"\n  vec4 result = atan(a, b);\n  vec4 isNaN = min(vec4(isnan(a)) + vec4(isnan(b)), vec4(1.0));\n  \n  result.r = isNaN.r > 0. ? NAN : result.r;\n  result.g = isNaN.g > 0. ? NAN : result.g;\n  result.b = isNaN.b > 0. ? NAN : result.b;\n  result.a = isNaN.a > 0. ? NAN : result.a;\n\n  return result;\n"}),dT={kernelName:We,backendName:"webgl",kernelFunc:pT},fT=NS({opSnippet:"if (isnan(x)) return x;\n  if ((x < -1.0) || (x > 1.0)) return NAN;\nreturn (log(1.0 + x) - log(1.0 - x)) / 2.0;"}),mT={kernelName:Pe,backendName:"webgl",kernelFunc:fT};class gT{constructor(e,t,n,s=!1,r=!1){if(this.variableNames=["x"],"avg"===t&&n)throw new Error("Cannot compute positions for average pool.");const a=e.filterWidth,i=e.strideHeight,o=e.strideWidth,l=e.dilationHeight,u=e.dilationWidth,c=e.effectiveFilterHeight,h=e.effectiveFilterWidth,p=e.padInfo.top,d=e.padInfo.left;this.outputShape=e.outShape;const f="avg"===t,m=`((batch  * ${e.inHeight} + xR) * ${e.inWidth} + xC) * ${e.inChannels} + d`,g=`(xR * ${e.inWidth} + xC) * ${e.inChannels} + d`;let y="0.0";if(f||(y="-1.0 / 1e-20"),n){const t=">=";return void(this.userCode=`\n        const ivec2 strides = ivec2(${i}, ${o});\n        const ivec2 pads = ivec2(${p}, ${d});\n\n        void main() {\n          ivec4 coords = getOutputCoords();\n          int batch = coords[0];\n          int d = coords[3];\n\n          ivec2 xRCCorner = coords.yz * strides - pads;\n          int xRCorner = xRCCorner.x;\n          int xCCorner = xRCCorner.y;\n\n          // max/min x(?, ?, d) to get y(yR, yC, d).\n          // ? = to be determined\n          float minMaxValue = 0.0;\n          float minMaxValueFound = 0.0;\n          int minMaxPosition = 0;\n          float avgValue = 0.0;\n\n          for (int wR = 0; wR < ${c};\n              wR += ${l}) {\n            int xR = xRCorner + wR;\n\n            if (xR < 0 || xR >= ${e.inHeight}) {\n              continue;\n            }\n\n            for (int wC = 0; wC < ${h};\n                wC += ${u}) {\n              int xC = xCCorner + wC;\n\n              if (xC < 0 || xC >= ${e.inWidth}) {\n                continue;\n              }\n\n              float value = getX(batch, xR, xC, d);\n\n              // If a min / max value has already been found, use it. If not,\n              // use the current value.\n              float currMinMaxValue = mix(\n                  value, minMaxValue, minMaxValueFound);\n              if (value ${t} currMinMaxValue) {\n                minMaxValue = value;\n                minMaxValueFound = 1.0;\n                minMaxPosition = ${s?r?m:g:`wR * ${h} + wC`};\n              }\n            }\n          }\n          setOutput(float(minMaxPosition));\n        }\n      `)}let b=`${t}(${t}(${t}(minMaxValue[0], minMaxValue[1]), minMaxValue[2]), minMaxValue[3])`;"avg"===t&&(b="avgValue / count");const x=4*Math.floor(a/4),w=a%4,v=`\n      if (${f}) {\n        avgValue += dot(values, ones);\n      } else {\n        minMaxValue = max(values, minMaxValue);\n      }\n    `;this.userCode=`\n      const ivec2 strides = ivec2(${i}, ${o});\n      const ivec2 pads = ivec2(${p}, ${d});\n      const float initializationValue = ${y};\n      const vec4 ones = vec4(1.0, 1.0, 1.0, 1.0);\n\n      float count = 0.0;\n\n      float getValue(int batch, int xR, int xC, int d) {\n        if (xC < 0 || xC >= ${e.inWidth}) {\n          return initializationValue;\n        }\n        count += 1.0;\n        return getX(batch, xR, xC, d);\n      }\n\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int batch = coords[0];\n        int d = coords[3];\n\n        ivec2 xRCCorner = coords.yz * strides - pads;\n        int xRCorner = xRCCorner.x;\n        int xCCorner = xRCCorner.y;\n\n        // max/min x(?, ?, d) to get y(yR, yC, d).\n        // ? = to be determined\n        vec4 minMaxValue = vec4(${y});\n        float avgValue = 0.0;\n        count = 0.0;\n\n        for (int wR = 0; wR < ${c};\n            wR += ${l}) {\n          int xR = xRCorner + wR;\n\n          if (xR < 0 || xR >= ${e.inHeight}) {\n            continue;\n          }\n\n          for (int wC = 0; wC < ${x}; wC += 4) {\n            int xC = xCCorner + wC * ${u};\n\n            vec4 values = vec4(\n              getValue(batch, xR, xC, d),\n              getValue(batch, xR, xC + ${u}, d),\n              getValue(batch, xR, xC + 2 * ${u}, d),\n              getValue(batch, xR, xC + 3 * ${u}, d)\n            );\n\n            ${v}\n          }\n\n          int xC = xCCorner + ${x};\n          if (${1===w}) {\n            vec4 values = vec4(\n              getValue(batch, xR, xC, d),\n              initializationValue,\n              initializationValue,\n              initializationValue\n            );\n\n            ${v}\n          } else if (${2===w}) {\n            vec4 values = vec4(\n              getValue(batch, xR, xC, d),\n              getValue(batch, xR, xC + ${u}, d),\n              initializationValue,\n              initializationValue\n            );\n\n            ${v}\n          } else if (${3===w}) {\n            vec4 values = vec4(\n              getValue(batch, xR, xC, d),\n              getValue(batch, xR, xC + ${u}, d),\n              getValue(batch, xR, xC + 2 * ${u}, d),\n              initializationValue\n            );\n\n            ${v}\n          }\n        }\n        setOutput(${b});\n      }\n    `}}class yT{constructor(e,t,n,s=!1,r=!1){if(this.variableNames=["x"],"avg"===t&&n)throw new Error("Cannot compute positions for average pool.");const a=e.filterWidth,i=e.strideDepth,o=e.strideHeight,l=e.strideWidth,u=e.dilationDepth,c=e.dilationHeight,h=e.dilationWidth,p=e.effectiveFilterDepth,d=e.effectiveFilterHeight,f=e.effectiveFilterWidth,m=e.padInfo.front,g=e.padInfo.top,y=e.padInfo.left;this.outputShape=e.outShape;const b="avg"===t;let x="0.0";if(b||(x="-1.0 / 1e-20"),n){const t=">=";return void(this.userCode=`\n        const ivec3 strides =\n            ivec3(${i}, ${o}, ${l});\n        const ivec3 pads = ivec3(${m}, ${g}, ${y});\n\n        void main() {\n          ivec5 coords = getOutputCoords();\n          int batch = coords.x;\n          int ch = coords.u;\n\n          ivec3 xCorner = ivec3(coords.y, coords.z, coords.w) * strides - pads;\n          int xDCorner = xCorner.x;\n          int xRCorner = xCorner.y;\n          int xCCorner = xCorner.z;\n\n          // max/min x(?, ?, ?, ch) to get y(yD, yR, yC, ch).\n          // ? = to be determined\n          float minMaxValue = 0.0;\n          float minMaxValueFound = 0.0;\n          int minMaxPosition = 0;\n\n          for (int wD = 0; wD < ${p};\n              wD += ${u}) {\n            int xD = xDCorner + wD;\n\n            if (xD < 0 || xD >= ${e.inDepth}) {\n              continue;\n            }\n\n            for (int wR = 0; wR < ${d};\n                wR += ${c}) {\n              int xR = xRCorner + wR;\n\n              if (xR < 0 || xR >= ${e.inHeight}) {\n                continue;\n              }\n\n              for (int wC = 0; wC < ${f};\n                  wC += ${h}) {\n                int xC = xCCorner + wC;\n\n                if (xC < 0 || xC >= ${e.inWidth}) {\n                  continue;\n                }\n\n                float value = getX(batch, xD, xR, xC, ch);\n\n                // If a min / max value has already been found, use it. If not,\n                // use the current value.\n                float currMinMaxValue = mix(\n                    value, minMaxValue, minMaxValueFound);\n                if (value ${t} currMinMaxValue) {\n                  minMaxValue = value;\n                  minMaxValueFound = 1.0;\n                  minMaxPosition = ${s?r?`(((batch * ${e.inDepth} + xD) * ${e.inHeight} + xR) * ${e.inWidth} + xC) * ${e.inChannels} + ch`:`((xD * ${e.inHeight} + xR) * ${e.inWidth} + xC) * ${e.inChannels} + ch`:`wD * ${d} * ${f} +\n                      wR * ${f} + wC`};\n                }\n              }\n            }\n          }\n          setOutput(float(minMaxPosition));\n        }\n      `)}let w=`${t}(${t}(${t}(minMaxValue[0], minMaxValue[1]), minMaxValue[2]), minMaxValue[3])`;"avg"===t&&(w="avgValue / count");const v=4*Math.floor(a/4),k=a%4,I=`\n      if (${b}) {\n        avgValue += dot(values, ones);\n      } else {\n        minMaxValue = max(values, minMaxValue);\n      }\n    `;this.userCode=`\n      const ivec3 strides =\n        ivec3(${i}, ${o}, ${l});\n      const ivec3 pads = ivec3(${m}, ${g}, ${y});\n      const float initializationValue = ${x};\n      const vec4 ones = vec4(1.0, 1.0, 1.0, 1.0);\n\n      float count = 0.0;\n\n      float getValue(int batch, int xD, int xR, int xC, int ch) {\n        if (xC < 0 || xC >= ${e.inWidth}) {\n          return initializationValue;\n        }\n        count += 1.0;\n        return getX(batch, xD, xR, xC, ch);\n      }\n\n      void main() {\n        ivec5 coords = getOutputCoords();\n        int batch = coords.x;\n        int ch = coords.u;\n\n        ivec3 xCorner = ivec3(coords.y, coords.z, coords.w) * strides - pads;\n        int xDCorner = xCorner.x;\n        int xRCorner = xCorner.y;\n        int xCCorner = xCorner.z;\n\n        // max/min x(?, ?, ?, d) to get y(yD, yR, yC, ch).\n        // ? = to be determined\n        vec4 minMaxValue = vec4(${x});\n        float avgValue = 0.0;\n        count = 0.0;\n\n        for (int wD = 0; wD < ${p};\n            wD += ${u}) {\n          int xD = xDCorner + wD;\n\n          if (xD < 0 || xD >= ${e.inDepth}) {\n            continue;\n          }\n\n          for (int wR = 0; wR < ${d};\n            wR += ${c}) {\n            int xR = xRCorner + wR;\n\n            if (xR < 0 || xR >= ${e.inHeight}) {\n              continue;\n            }\n\n            for (int wC = 0; wC < ${v}; wC += 4) {\n              int xC = xCCorner + wC * ${h};\n\n              vec4 values = vec4(\n                getValue(batch, xD, xR, xC, ch),\n                getValue(batch, xD, xR, xC + ${h}, ch),\n                getValue(batch, xD, xR, xC + 2 * ${h}, ch),\n                getValue(batch, xD, xR, xC + 3 * ${h}, ch)\n              );\n\n              ${I}\n            }\n\n            int xC = xCCorner + ${v};\n            if (${1===k}) {\n              vec4 values = vec4(\n                getValue(batch, xD, xR, xC, ch),\n                initializationValue,\n                initializationValue,\n                initializationValue\n              );\n\n              ${I}\n            } else if (${2===k}) {\n              vec4 values = vec4(\n                getValue(batch, xD, xR, xC, ch),\n                getValue(batch, xD, xR, xC + ${h}, ch),\n                initializationValue,\n                initializationValue\n              );\n\n              ${I}\n            } else if (${3===k}) {\n              vec4 values = vec4(\n                getValue(batch, xD, xR, xC, ch),\n                getValue(batch, xD, xR, xC + ${h}, ch),\n                getValue(batch, xD, xR, xC + 2 * ${h}, ch),\n                initializationValue\n              );\n\n              ${I}\n            }\n          }\n          setOutput(${w});\n        }\n      }\n    `}}const bT={kernelName:Ue,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{x:r}=t;rS(r,"avgPool");const{filterSize:a,strides:i,pad:o,dimRoundingMode:l}=s;Us.assert(Bl.eitherStridesOrDilationsAreOne(i,1),(()=>`Error in avgPool: Either strides or dilations must be 1. Got strides ${i} and dilations '1'`));const u=Bl.computePool2DInfo(r.shape,a,i,1,o,l);if(1===u.filterWidth&&1===u.filterHeight&&Us.arraysEqual(u.inShape,u.outShape))return hS({inputs:{x:r},backend:n});const c=new gT(u,"avg",!1);return n.runWebGLProgram(c,[r],"float32")}};const xT={kernelName:Ge,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{x:r}=t,{filterSize:a,strides:i,pad:o,dimRoundingMode:l,dataFormat:u}=s,c=Bl.computePool3DInfo(r.shape,a,i,[1,1,1],o,l,u),h=new yT(c,"avg",!1);return n.runWebGLProgram(h,[r],"float32")}};class wT{constructor(e){this.variableNames=["dy"],this.outputShape=e.inShape;const t=e.filterHeight,n=e.filterWidth,s=e.strideHeight,r=e.strideWidth,a=e.dilationHeight,i=e.dilationWidth,o=e.effectiveFilterHeight,l=e.effectiveFilterWidth,u=o-1-e.padInfo.top,c=l-1-e.padInfo.left,h=1/(t*n);this.userCode=`\n      const ivec2 pads = ivec2(${u}, ${c});\n      const float avgMultiplier = float(${h});\n\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int b = coords[0];\n        int d = coords[3];\n\n        ivec2 dyRCCorner = coords.yz - pads;\n        int dyRCorner = dyRCCorner.x;\n        int dyCCorner = dyRCCorner.y;\n\n        // Convolve dy(?, ?, d) with pos mask(:, :, d) to get dx(xR, xC, d).\n        // ? = to be determined. : = across all values in that axis.\n        float dotProd = 0.0;\n        for (int wR = 0; wR < ${o};\n            wR += ${a}) {\n          float dyR = float(dyRCorner + wR) / ${s}.0;\n\n          if (dyR < 0.0 || dyR >= ${e.outHeight}.0 || fract(dyR) > 0.0) {\n            continue;\n          }\n          int idyR = int(dyR);\n\n          for (int wC = 0; wC < ${l};\n            wC+= ${i}) {\n            float dyC = float(dyCCorner + wC) / ${r}.0;\n\n            if (dyC < 0.0 || dyC >= ${e.outWidth}.0 ||\n                fract(dyC) > 0.0) {\n              continue;\n            }\n            int idyC = int(dyC);\n\n            float dyValue = getDy(b, idyR, idyC, d);\n\n            dotProd += dyValue * avgMultiplier;\n          }\n        }\n        setOutput(dotProd);\n      }\n    `}}class vT{constructor(e){this.variableNames=["dy"],this.outputShape=e.inShape;const t=e.filterDepth,n=e.filterHeight,s=e.filterWidth,r=e.strideDepth,a=e.strideHeight,i=e.strideWidth,o=e.dilationDepth,l=e.dilationHeight,u=e.dilationWidth,c=e.effectiveFilterDepth,h=e.effectiveFilterHeight,p=e.effectiveFilterWidth,d=c-1-e.padInfo.front,f=h-1-e.padInfo.top,m=p-1-e.padInfo.left,g=1/(t*n*s);this.userCode=`\n      const ivec3 pads = ivec3(${d}, ${f}, ${m});\n      const float avgMultiplier = float(${g});\n\n      void main() {\n        ivec5 coords = getOutputCoords();\n        int batch = coords.x;\n        int ch = coords.u;\n\n        ivec3 dyCorner = ivec3(coords.y, coords.z, coords.w) - pads;\n        int dyDCorner = dyCorner.x;\n        int dyRCorner = dyCorner.y;\n        int dyCCorner = dyCorner.z;\n\n        // Convolve dy(?, ?, ?, d) with pos mask(:, :, :, ch) to get\n        // dx(xD, xR, xC, ch).\n        // ? = to be determined. : = across all values in that axis.\n        float dotProd = 0.0;\n\n        for (int wD = 0; wD < ${c};\n            wD += ${o}) {\n          float dyD = float(dyDCorner + wD) / ${r}.0;\n\n          if (dyD < 0.0 || dyD >= ${e.outDepth}.0 || fract(dyD) > 0.0) {\n            continue;\n          }\n          int idyD = int(dyD);\n\n          for (int wR = 0; wR < ${h};\n              wR += ${l}) {\n            float dyR = float(dyRCorner + wR) / ${a}.0;\n\n            if (dyR < 0.0 || dyR >= ${e.outHeight}.0 ||\n                fract(dyR) > 0.0) {\n              continue;\n            }\n            int idyR = int(dyR);\n\n            for (int wC = 0; wC < ${p};\n                wC += ${u}) {\n              float dyC = float(dyCCorner + wC) / ${i}.0;\n\n              if (dyC < 0.0 || dyC >= ${e.outWidth}.0 ||\n                  fract(dyC) > 0.0) {\n                continue;\n              }\n              int idyC = int(dyC);\n\n              float dyValue = getDy(batch, idyD, idyR, idyC, ch);\n\n              dotProd += dyValue * avgMultiplier;\n            }\n          }\n        }\n        setOutput(dotProd);\n      }\n    `}}const kT={kernelName:He,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{dy:r,input:a}=t,i=a,{filterSize:o,strides:l,pad:u,dimRoundingMode:c}=s,h=Bl.computePool3DInfo(i.shape,o,l,[1,1,1],u,c),p=new vT(h);return n.runWebGLProgram(p,[r],i.dtype)}};const IT={kernelName:Ve,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{dy:r,input:a}=t,i=a;rS([r,a],"avgPoolGrad");const{filterSize:o,strides:l,pad:u}=s,c=Bl.computePool2DInfo(i.shape,o,l,1,u),h=new wT(c);return n.runWebGLProgram(h,[r],i.dtype)}};const ST={kernelName:je,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{a:r,b:a}=t,{transposeA:i,transposeB:o}=s;return LN({a:r,b:a,transposeA:i,transposeB:o,backend:n})}};class NT{constructor(e,t,n,s,r,a){this.outputShape=[],this.variableNames=["x","mean","variance"],Bl.assertAndGetBroadcastShape(e,t),Bl.assertAndGetBroadcastShape(e,n);let i="0.0";null!=s&&(Bl.assertAndGetBroadcastShape(e,s),this.variableNames.push("offset"),i="getOffsetAtOutCoords()");let o="1.0";null!=r&&(Bl.assertAndGetBroadcastShape(e,r),this.variableNames.push("scale"),o="getScaleAtOutCoords()"),this.outputShape=e,this.userCode=`\n      void main() {\n        float x = getXAtOutCoords();\n        float mean = getMeanAtOutCoords();\n        float variance = getVarianceAtOutCoords();\n        float offset = ${i};\n        float scale = ${o};\n        float inv = scale * inversesqrt(variance + float(${a}));\n        setOutput(dot(vec3(x, -mean, offset), vec3(inv, inv, 1)));\n      }\n    `}}class TT{constructor(e,t,n,s,r,a){this.packedInputs=!0,this.packedOutput=!0,this.variableNames=["x","mean","variance"],Bl.assertAndGetBroadcastShape(e,t),Bl.assertAndGetBroadcastShape(e,n);let i="vec4(0.0)";null!=s&&(Bl.assertAndGetBroadcastShape(e,s),this.variableNames.push("offset"),i="getOffsetAtOutCoords()");let o="vec4(1.0)";null!=r&&(Bl.assertAndGetBroadcastShape(e,r),this.variableNames.push("scale"),o="getScaleAtOutCoords()"),this.outputShape=e,this.userCode=`\n      void main() {\n        vec4 offset = ${i};\n        vec4 scale = ${o};\n\n        vec4 x = getXAtOutCoords();\n        vec4 mean = getMeanAtOutCoords();\n        vec4 variance = getVarianceAtOutCoords();\n\n        vec4 inv = scale * inversesqrt(variance + vec4(${a}));\n\n        setOutput((x - mean) * inv + offset);\n      }\n    `}}const CT={kernelName:Ot,backendName:"webgl",kernelFunc:({inputs:e,backend:t,attrs:n})=>{const{x:s,mean:r,variance:a,offset:i,scale:o}=e;Us.assert(r.shape.length===a.shape.length,(()=>"Batch normalization gradient requires mean and variance to have equal ranks.")),Us.assert(null==i||r.shape.length===i.shape.length,(()=>"Batch normalization gradient requires mean and offset to have equal ranks.")),Us.assert(null==o||r.shape.length===o.shape.length,(()=>"Batch normalization gradient requires mean and scale to have equal ranks."));let{varianceEpsilon:l}=n;null==l&&(l=.001);const u=[s,r,a];let c=null;null!=i&&(c=i.shape,u.push(i));let h=null;null!=o&&(h=o.shape,u.push(o));const p=le().getBool("WEBGL_PACK_NORMALIZATION")?new TT(s.shape,r.shape,a.shape,c,h,l):new NT(s.shape,r.shape,a.shape,c,h,l);return t.runWebGLProgram(p,u,u[0].dtype)}};class $T{constructor(e){this.variableNames=["source"],this.outputShape=e,this.rank=e.length;const t=wI(this.rank);this.customUniforms=[{name:"start",arrayIndex:this.rank,type:"int"}];const n=function(e){if(1===e)return"sourceLoc";if(e<=6)return ET.slice(0,e).map((e=>"sourceLoc."+e)).join(",");throw Error(`Slicing for rank ${e} is not yet supported`)}(this.rank);let s;s=`\n        ${t} sourceLoc;\n        ${t} coords = getOutputCoords();\n        ${e.map(((e,t)=>`sourceLoc.${ET[t]} = start[${t}] + coords.${ET[t]};`)).join("\n")}\n      `,this.userCode=`\n      void main() {\n        ${s}\n        setOutput(getSource(${n}));\n      }\n    `}}const ET=["x","y","z","w","u","v"];class AT{constructor(e){this.variableNames=["source"],this.packedInputs=!0,this.packedOutput=!0,this.outputShape=e,this.rank=e.length,this.customUniforms=[{name:"start",arrayIndex:this.rank,type:"int"}];const t=wI(this.rank),n=uS("coords",this.rank),s=uS("sourceLoc",this.rank),r=1===this.rank?"sourceLoc":`vec2(${s.slice(-2).join()})`,a=`getChannel(getSource(${s.join()}), ${r})`,i=`\n      result.x = ${a};\n      if (++${n[this.rank-1]} < ${e[this.rank-1]}) {\n        ++${s[this.rank-1]};\n        result.y = ${a};\n        --${s[this.rank-1]};\n      }\n    `,o=1===this.rank?"":`\n      --${n[this.rank-1]};\n      if (++${n[this.rank-2]} < ${e[this.rank-2]}) {\n        ++${s[this.rank-2]};\n        result.z = ${a};\n        if (++${n[this.rank-1]} < ${e[this.rank-1]}) {\n          ++${s[this.rank-1]};\n          result.w = ${a};\n        }\n      }\n    `,l=this.rank<=4?`sourceLoc = coords +\n            ${t}(${e.map(((e,t)=>`start[${t}]`)).join()});`:e.map(((e,t)=>`${s[t]} = ${n[t]} + start[${t}];`)).join("\n");this.userCode=`\n      void main() {\n        ${t} coords = getOutputCoords();\n        ${t} sourceLoc;\n        ${l}\n        vec4 result = vec4(0.);\n        ${i}\n        ${o}\n        setOutput(result);\n      }\n    `}}function RT(e){const{inputs:t,backend:n,attrs:s}=e,{x:r}=t,{begin:a,size:i}=s,[o,l]=yl.parseSliceParams(r,a,i);if(yl.assertParamsValid(r,o,l),0===Us.sizeFromShape(l))return n.makeTensorInfo(l,r.dtype,[]);if(n.shouldExecuteOnCPU([r])||"string"===r.dtype){const e=n.texData.get(r.dataId),t=oN(e.values,o,l,r.shape,r.dtype);return n.makeTensorInfo(l,r.dtype,t)}const{isPacked:u}=n.texData.get(r.dataId),c=yl.isSliceContinous(r.shape,o,l);if(u||!c){const e=le().getBool("WEBGL_PACK_ARRAY_OPERATIONS")?new AT(l):new $T(l),t=[o];return n.runWebGLProgram(e,[r],r.dtype,t)}return n.uploadToGPU(r.dataId),function(e,t,n,s){const r=s.texData.get(e.dataId),a=s.makeTensorInfo(n,e.dtype),i=s.texData.get(a.dataId);Object.assign(i,r),i.refCount=1,i.shape=n,i.dtype=e.dtype;let o=yl.computeFlatOffset(t,Us.computeStrides(e.shape));r.slice&&(o+=r.slice.flatOffset),i.slice={flatOffset:o,origDataId:r.slice&&r.slice.origDataId||e.dataId};const l=s.dataRefCount.get(i.slice.origDataId)||1;return s.dataRefCount.set(i.slice.origDataId,l+1),a}(r,o,l,n)}const FT={kernelName:jn,backendName:"webgl",kernelFunc:RT},DT={kernelName:qe,backendName:"webgl",kernelFunc:e=>{const{inputs:t,backend:n,attrs:s}=e,{x:r}=t,{blockShape:a,crops:i}=s;Us.assert(r.shape.length<=4,(()=>"batchToSpaceND for rank > 4 with a WebGL backend not implemented yet"));const o=a.reduce(((e,t)=>e*t)),l=Bl.getReshaped(r.shape,a,o),u=Bl.getPermuted(l.length,a.length),c=Bl.getReshapedPermuted(r.shape,a,o),h=Bl.getSliceBeginCoords(i,a.length),p=Bl.getSliceSize(c,i,a.length),d=[],f=NN({inputs:{x:r},backend:n,attrs:{shape:l}}),m=ON({inputs:{x:f},backend:n,attrs:{perm:u}}),g=NN({inputs:{x:m},backend:n,attrs:{shape:c}}),y=RT({inputs:{x:g},backend:n,attrs:{begin:h,size:p}});return d.push(f),d.push(m),d.push(g),d.forEach((e=>n.disposeIntermediateTensorInfo(e))),y}};const _T={kernelName:Ke,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{x:r,weights:a}=t,{size:i}=s,o=n.readSync(r.dataId),l=n.readSync(a.dataId),u=_S(o,l,a.dtype,a.shape,i);return n.makeTensorInfo([i],a.dtype,u)}};const OT={kernelName:Xe,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n}=e,{s0:s,s1:r}=t,a=n.readSync(s.dataId),i=n.readSync(r.dataId),o=Bl.assertAndGetBroadcastShape(Array.from(a),Array.from(i));return n.makeTensorInfo([o.length],"int32",Int32Array.from(o))}},MT=TS({opSnippet:"return float(a != b);",cpuKernelImpl:tN,dtype:"bool"}),LT={kernelName:xn,backendName:"webgl",kernelFunc:MT};function zT(e){const{inputs:t,backend:n}=e,{input:s}=t;return hS({inputs:{x:n.texData.get(s.dataId).complexTensorInfos.real},backend:n})}const BT={kernelName:Rn,backendName:"webgl",kernelFunc:zT};const PT={kernelName:Ye,backendName:"webgl",kernelFunc:function e(t){const{inputs:n,backend:s,attrs:r}=t,{x:a}=n,{dtype:i}=r;if("complex64"===i){if("complex64"===a.dtype)return hS({inputs:{x:a},backend:s});const t=ph(a.shape),n=e({inputs:{x:a},backend:s,attrs:{dtype:"float32"}}),r=dS({inputs:{real:n,imag:t},backend:s});return t.dispose(),s.disposeIntermediateTensorInfo(n),r}if("complex64"===a.dtype){const t=zT({inputs:{input:a},backend:s}),n=e({inputs:{x:t},backend:s,attrs:{dtype:i}});return s.disposeIntermediateTensorInfo(t),n}if(!Us.hasEncodingLoss(a.dtype,i)){const e=hS({inputs:{x:a},backend:s});return{dataId:e.dataId,shape:e.shape,dtype:i}}if("int32"===i)return function(e,t){const n=new vS(e.shape,"return float(int(x));"),s=t.runWebGLProgram(n,[e],"int32");return{dataId:s.dataId,shape:s.shape,dtype:s.dtype}}(a,s);if("bool"===i){const e=s.makeTensorInfo([],"bool",Us.getTypedArrayFromDType("bool",1)),t=MT({inputs:{a:a,b:e},backend:s});return s.disposeIntermediateTensorInfo(e),t}throw new Error(`Error in Cast: failed to cast ${a.dtype} to ${i}`)}},WT="return ceil(x);",UT=NS({opSnippet:WT,packedOpSnippet:WT,cpuKernelImpl:MS}),VT={kernelName:Ze,backendName:"webgl",kernelFunc:UT};class GT{constructor(e){this.variableNames=["A"],this.customUniforms=[{name:"minVal",type:"float"},{name:"maxVal",type:"float"}],this.outputShape=e,this.userCode="\n\n      void main() {\n        float value = getAAtOutCoords();\n        if (isnan(value)) {\n          setOutput(value);\n          return;\n        }\n\n        setOutput(clamp(value, minVal, maxVal));\n      }\n    "}}class HT{constructor(e){this.variableNames=["A"],this.packedInputs=!0,this.packedOutput=!0,this.customUniforms=[{name:"minVal",type:"float"},{name:"maxVal",type:"float"}],this.outputShape=e,this.userCode="\n      void main() {\n        vec4 value = getAAtOutCoords();\n\n        if (any(isnan(value))) {\n          setOutput(value);\n          return;\n        }\n\n        setOutput(clamp(value, vec4(minVal), vec4(maxVal)));\n      }\n    "}}const jT={kernelName:Je,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{x:r}=t,{clipValueMin:a,clipValueMax:i}=s;let o;o=le().getBool("WEBGL_PACK_CLIP")?new HT(r.shape):new GT(r.shape);const l=[[a],[i]];return n.runWebGLProgram(o,[r],r.dtype,l)}};class qT{constructor(e){this.variableNames=["real","imag"],this.outputShape=e,this.userCode="\n      void main() {\n        float re = abs(getRealAtOutCoords());\n        float im = abs(getImagAtOutCoords());\n        float mx = max(re, im);\n\n        // sadly the length function in glsl is not underflow-safe\n        // (at least not on Intel GPUs). So the safe solution is\n        // to ensure underflow-safety in all cases.\n        setOutput(\n          mx == 0.0 ? 0.0 : mx * length(vec2(1, min(re, im)/mx))\n        );\n      }\n    "}}function KT(e,t){return{dataId:t.dataId,dtype:t.dtype,shape:e.shape}}const XT={kernelName:et,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n}=e,{x:s}=t,r=n.texData.get(s.dataId),a=new qT(s.shape),i=[KT(s,r.complexTensorInfos.real),KT(s,r.complexTensorInfos.imag)];return n.runWebGLProgram(a,i,i[0].dtype)}};class YT{constructor(e){this.outputShape=[],this.outputShape=Bl.computeOutShape(e,1),this.variableNames=e.map(((e,t)=>`T${t}`));const t=new Array(e.length-1);t[0]=e[0][1];for(let n=1;n<t.length;n++)t[n]=t[n-1]+e[n][1];const n=[`if (yC < ${t[0]}) setOutput(getT0(yR, yC));`];for(let e=1;e<t.length;e++){const s=t[e-1];n.push(`else if (yC < ${t[e]}) setOutput(getT${e}(yR, yC-${s}));`)}const s=t.length,r=t[t.length-1];n.push(`else setOutput(getT${s}(yR, yC-${r}));`),this.userCode=`\n      void main() {\n        ivec2 coords = getOutputCoords();\n        int yR = coords.x;\n        int yC = coords.y;\n\n        ${n.join("\n        ")}\n      }\n    `}}class ZT{constructor(e,t){this.packedInputs=!0,this.packedOutput=!0,this.outputShape=[],this.outputShape=Bl.computeOutShape(e,t);const n=this.outputShape,s=n.length,r=wI(s),a=uS("coords",s),i=["x","y","z","w","u","v"].slice(0,s);this.variableNames=e.map(((e,t)=>`T${t}`));const o=new Array(e.length-1);o[0]=e[0][t];for(let n=1;n<o.length;n++)o[n]=o[n-1]+e[n][t];const l=i[t],u=i.slice(-2),c=i.join();let h=`if (${l} < ${o[0]}) {\n        return getChannel(\n            getT0(${c}), vec2(${u.join()}));\n        }`;for(let e=1;e<o.length;e++){const t=o[e-1];h+=`\n        if (${l} < ${o[e]}  && ${l} >= ${o[e-1]}) {\n          return getChannel(\n            getT${e}(${JT(i,l,t)}),\n            vec2(${JT(u,l,t)}));\n        }`}const p=o.length,d=o[o.length-1];h+=`\n        return getChannel(\n          getT${p}(${JT(i,l,d)}),\n          vec2(${JT(u,l,d)}));`,this.userCode=`\n      float getValue(${i.map((e=>"int "+e))}) {\n        ${h}\n      }\n\n      void main() {\n        ${r} coords = getOutputCoords();\n        vec4 result = vec4(getValue(${a}), 0., 0., 0.);\n\n        ${a[s-1]} = ${a[s-1]} + 1;\n        if (${a[s-1]} < ${n[s-1]}) {\n          result.g = getValue(${a});\n        }\n\n        ${a[s-2]} = ${a[s-2]} + 1;\n        if (${a[s-2]} < ${n[s-2]}) {\n          result.a = getValue(${a});\n        }\n\n        ${a[s-1]} = ${a[s-1]} - 1;\n        if (${a[s-2]} < ${n[s-2]} &&\n            ${a[s-1]} < ${n[s-1]}) {\n          result.b = getValue(${a});\n        }\n        setOutput(result);\n      }\n    `}}function JT(e,t,n){const s=e.indexOf(t);return e.map(((e,t)=>t===s?`${e} - ${n}`:e)).join()}function QT(e){const{inputs:t,backend:n}=e,{input:s}=t;return hS({inputs:{x:n.texData.get(s.dataId).complexTensorInfos.imag},backend:n})}const eC={kernelName:Ut,backendName:"webgl",kernelFunc:QT};function tC(e,t,n){const s=e[0].dtype;if("complex64"===s){const s=e.map((e=>zT({inputs:{input:e},backend:n}))),r=e.map((e=>QT({inputs:{input:e},backend:n}))),a=tC(s,t,n),i=tC(r,t,n),o=dS({inputs:{real:a,imag:i},backend:n});return s.forEach((e=>n.disposeIntermediateTensorInfo(e))),r.forEach((e=>n.disposeIntermediateTensorInfo(e))),n.disposeIntermediateTensorInfo(a),n.disposeIntermediateTensorInfo(i),o}let r=n.shouldExecuteOnCPU(e);if("string"===s&&(r=!0),r){const r=e.map((e=>{const s=Us.sizeFromShape(e.shape.slice(t));return NN({inputs:{x:e},backend:n,attrs:{shape:[-1,s]}})})),a=r.map((e=>({vals:n.readSync(e.dataId),shape:e.shape}))),i=Bl.computeOutShape(r.map((e=>e.shape)),1),o=1===r[0].shape[0],l=LS(a,i,s,o),u=Bl.computeOutShape(e.map((e=>e.shape)),t),c=n.makeTensorInfo(u,s,l);return r.forEach((e=>n.disposeIntermediateTensorInfo(e))),c}if(e.length>le().getNumber("WEBGL_MAX_TEXTURES_IN_SHADER")){const s=Math.floor(e.length/2),r=tC(e.slice(0,s),t,n),a=tC(e.slice(s),t,n),i=tC([r,a],t,n);return n.disposeIntermediateTensorInfo(r),n.disposeIntermediateTensorInfo(a),i}if(le().getBool("WEBGL_PACK_ARRAY_OPERATIONS")&&e[0].shape.length>1){const r=new ZT(e.map((e=>e.shape)),t);return n.runWebGLProgram(r,e,s)}const{tensors2D:a,outShape:i}=function(e,t,n){const s=Bl.computeOutShape(e.map((e=>e.shape)),t);return{tensors2D:e.map((e=>NN({inputs:{x:e},attrs:{shape:[-1,Us.sizeFromShape(e.shape.slice(t))]},backend:n}))),outShape:s}}(e,t,n),o=new YT(a.map((e=>e.shape))),l=n.runWebGLProgram(o,a,s);a.forEach((e=>n.disposeIntermediateTensorInfo(e)));const u=NN({inputs:{x:l},attrs:{shape:i},backend:n});return n.disposeIntermediateTensorInfo(l),u}function nC(e){const{inputs:t,backend:n,attrs:s}=e,{axis:r}=s,a=Us.parseAxisParam(r,t[0].shape)[0],i=Bl.computeOutShape(t.map((e=>e.shape)),a);if(0===Us.sizeFromShape(i))return n.makeTensorInfo(i,t[0].dtype,[]);const o=t.filter((e=>Us.sizeFromShape(e.shape)>0));if(1===o.length)return hS({inputs:{x:o[0]},backend:n});const l=o.map((e=>e.shape));return Bl.assertParamsConsistent(l,a),tC(o,a,n)}const sC={kernelName:tt,backendName:"webgl",kernelFunc:nC};class rC{constructor(e,t=!1,n=null,s=!1,r=!1){this.variableNames=["x","W"],this.outputShape=e.outShape;const a=e.padInfo.top,i=e.padInfo.left,o=e.strideHeight,l=e.strideWidth,u=e.dilationHeight,c=e.dilationWidth,h=e.filterHeight,p=e.filterWidth,d=4*Math.floor(e.inChannels/4),f=e.inChannels%4,m="channelsLast"===e.dataFormat,g=m?1:2,y=m?2:3,b=m?3:1;let x="",w="";n&&(x=s?`float activation(float a) {\n          float b = getPreluActivationWeightsAtOutCoords();\n          ${n}\n        }`:r?`float activation(float a) {\n          float b = getLeakyreluAlphaAtOutCoords();\n          ${n}\n        }`:`\n          float activation(float x) {\n            ${n}\n          }\n        `,w="result = activation(result);");const v=t?"result += getBiasAtOutCoords();":"";t&&this.variableNames.push("bias"),s&&this.variableNames.push("preluActivationWeights"),r&&this.variableNames.push("leakyreluAlpha"),this.userCode=`\n      ${x}\n\n      const ivec2 strides = ivec2(${o}, ${l});\n      const ivec2 pads = ivec2(${a}, ${i});\n\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int batch = coords[0];\n        int d2 = coords[${b}];\n\n        ivec2 xRCCorner =\n            ivec2(coords[${g}], coords[${y}]) * strides - pads;\n        int xRCorner = xRCCorner.x;\n        int xCCorner = xRCCorner.y;\n\n        // Convolve x(?, ?, d1) with w(:, :, d1, d2) to get y(yR, yC, d2).\n        // ? = to be determined. : = across all values in that axis.\n        float dotProd = 0.0;\n        for (int wR = 0; wR < ${h}; wR++) {\n          int xR = xRCorner + wR * ${u};\n\n          if (xR < 0 || xR >= ${e.inHeight}) {\n            continue;\n          }\n\n          for (int wC = 0; wC < ${p}; wC++) {\n            int xC = xCCorner + wC * ${c};\n\n            if (xC < 0 || xC >= ${e.inWidth}) {\n              continue;\n            }\n\n            for (int d1 = 0; d1 < ${d}; d1 += 4) {\n              vec4 wValues = vec4(\n                getW(wR, wC, d1, d2),\n                getW(wR, wC, d1 + 1, d2),\n                getW(wR, wC, d1 + 2, d2),\n                getW(wR, wC, d1 + 3, d2)\n              );\n\n              if (${m}) {\n                vec4 xValues = vec4(\n                  getX(batch, xR, xC, d1),\n                  getX(batch, xR, xC, d1 + 1),\n                  getX(batch, xR, xC, d1 + 2),\n                  getX(batch, xR, xC, d1 + 3)\n                );\n                dotProd += dot(xValues, wValues);\n              } else {\n                vec4 xValues = vec4(\n                  getX(batch, d1, xR, xC),\n                  getX(batch, d1 + 1, xR, xC),\n                  getX(batch, d1 + 2, xR, xC),\n                  getX(batch, d1 + 3, xR, xC)\n                );\n                dotProd += dot(xValues, wValues);\n              }\n            }\n\n            if (${1===f}) {\n\n              if (${m}) {\n                dotProd +=\n                    getX(batch, xR, xC, ${d}) *\n                    getW(wR, wC, ${d}, d2);\n              } else {\n                dotProd +=\n                    getX(batch, ${d}, xR, xC) *\n                    getW(wR, wC, ${d}, d2);\n              }\n\n            } else if (${2===f}) {\n              vec2 wValues = vec2(\n                getW(wR, wC, ${d}, d2),\n                getW(wR, wC, ${d} + 1, d2)\n              );\n\n              if (${m}) {\n                vec2 xValues = vec2(\n                  getX(batch, xR, xC, ${d}),\n                  getX(batch, xR, xC, ${d} + 1)\n                );\n                dotProd += dot(xValues, wValues);\n              } else {\n                vec2 xValues = vec2(\n                  getX(batch, ${d}, xR, xC),\n                  getX(batch, ${d} + 1, xR, xC)\n                );\n                dotProd += dot(xValues, wValues);\n              }\n\n            } else if (${3===f}) {\n              vec3 wValues = vec3(\n                getW(wR, wC, ${d}, d2),\n                getW(wR, wC, ${d} + 1, d2),\n                getW(wR, wC, ${d} + 2, d2)\n              );\n\n              if (${m}) {\n                vec3 xValues = vec3(\n                  getX(batch, xR, xC, ${d}),\n                  getX(batch, xR, xC, ${d} + 1),\n                  getX(batch, xR, xC, ${d} + 2)\n                );\n                dotProd += dot(xValues, wValues);\n              } else {\n                vec3 xValues = vec3(\n                  getX(batch, ${d}, xR, xC),\n                  getX(batch, ${d} + 1, xR, xC),\n                  getX(batch, ${d} + 2, xR, xC)\n                );\n                dotProd += dot(xValues, wValues);\n              }\n\n            }\n          }\n        }\n\n        float result = dotProd;\n        ${v}\n        ${w}\n        setOutput(result);\n      }\n    `}}class aC{constructor(e){this.variableNames=["x","W"],this.outputShape=e.outShape;const t=e.padInfo.front,n=e.padInfo.top,s=e.padInfo.left,r=e.strideDepth,a=e.strideHeight,i=e.strideWidth,o=e.dilationDepth,l=e.dilationHeight,u=e.dilationWidth,c=e.filterDepth,h=e.filterHeight,p=e.filterWidth,d=4*Math.floor(e.inChannels/4),f=e.inChannels%4;this.userCode=`\n      const ivec3 strides = ivec3(${r}, ${a}, ${i});\n      const ivec3 pads = ivec3(${t}, ${n}, ${s});\n\n      void main() {\n        ivec5 coords = getOutputCoords();\n        int batch = coords.x;\n        int d2 = coords.u;\n\n        ivec3 xFRCCorner = ivec3(coords.y, coords.z, coords.w) * strides - pads;\n        int xFCorner = xFRCCorner.x;\n        int xRCorner = xFRCCorner.y;\n        int xCCorner = xFRCCorner.z;\n\n        // Convolve x(?, ?, ?, d1) with w(:, :, :, d1, d2) to get\n        // y(yF, yR, yC, d2). ? = to be determined. : = across all\n        // values in that axis.\n        float dotProd = 0.0;\n        for (int wF = 0; wF < ${c}; wF++) {\n          int xF = xFCorner + wF * ${o};\n\n          if (xF < 0 || xF >= ${e.inDepth}) {\n            continue;\n          }\n\n          for (int wR = 0; wR < ${h}; wR++) {\n            int xR = xRCorner + wR * ${l};\n\n            if (xR < 0 || xR >= ${e.inHeight}) {\n              continue;\n            }\n\n            for (int wC = 0; wC < ${p}; wC++) {\n              int xC = xCCorner + wC * ${u};\n\n              if (xC < 0 || xC >= ${e.inWidth}) {\n                continue;\n              }\n\n              for (int d1 = 0; d1 < ${d}; d1 += 4) {\n                vec4 xValues = vec4(\n                  getX(batch, xF, xR, xC, d1),\n                  getX(batch, xF, xR, xC, d1 + 1),\n                  getX(batch, xF, xR, xC, d1 + 2),\n                  getX(batch, xF, xR, xC, d1 + 3)\n                );\n                vec4 wValues = vec4(\n                  getW(wF, wR, wC, d1, d2),\n                  getW(wF, wR, wC, d1 + 1, d2),\n                  getW(wF, wR, wC, d1 + 2, d2),\n                  getW(wF, wR, wC, d1 + 3, d2)\n                );\n\n                dotProd += dot(xValues, wValues);\n              }\n\n              if (${1===f}) {\n                dotProd +=\n                  getX(batch, xF, xR, xC, ${d}) *\n                  getW(wF, wR, wC, ${d}, d2);\n              } else if (${2===f}) {\n                vec2 xValues = vec2(\n                  getX(batch, xF, xR, xC, ${d}),\n                  getX(batch, xF, xR, xC, ${d} + 1)\n                );\n                vec2 wValues = vec2(\n                  getW(wF, wR, wC, ${d}, d2),\n                  getW(wF, wR, wC, ${d} + 1, d2)\n                );\n                dotProd += dot(xValues, wValues);\n              } else if (${3===f}) {\n                vec3 xValues = vec3(\n                  getX(batch, xF, xR, xC, ${d}),\n                  getX(batch, xF, xR, xC, ${d} + 1),\n                  getX(batch, xF, xR, xC, ${d} + 2)\n                );\n                vec3 wValues = vec3(\n                  getW(wF, wR, wC, ${d}, d2),\n                  getW(wF, wR, wC, ${d} + 1, d2),\n                  getW(wF, wR, wC, ${d} + 2, d2)\n                );\n                dotProd += dot(xValues, wValues);\n              }\n            }\n          }\n        }\n        setOutput(dotProd);\n      }\n    `}}class iC{constructor(e,t){this.variableNames=["A"],this.packedInputs=!0,this.packedOutput=!0,this.customUniforms=[{name:"inputShape",type:"ivec3"},{name:"pad",type:"ivec2"},{name:"stride",type:"ivec2"},{name:"dilation",type:"ivec2"},{name:"inChannels",type:"int"},{name:"itemsPerBlockRow",type:"int"},{name:"outWidth",type:"int"}],this.outputShape=e,this.enableShapeUniforms=iS(this.outputShape.length);const{dataFormat:n}=t,s=sI(),r="channelsLast"===n,a=r?0:1,i=r?1:2,o=this.enableShapeUniforms?"if(blockIndex < outShape[1] && pos < outShape[0]) {":`if(blockIndex < ${e[1]} && pos < ${e[0]}) {`;let l="";for(let e=0;e<=1;e++)for(let t=0;t<=1;t++)l+=`\n          blockIndex = rc.y + ${t};\n          pos = rc.x + ${e};\n\n          ${o}\n            offsetY = int(blockIndex / outWidth) * stride[0] - pad[0];\n            d0 = offsetY + dilation[0] * (pos / itemsPerBlockRow);\n\n            if(d0 < inputShape[${a}] && d0 >= 0) {\n              // Use custom imod instead mod. On Intel GPU, mod may generate\n              // unexpected value.\n              // https://github.com/tensorflow/tfjs/issues/5447\n              offsetX = imod(blockIndex, outWidth) * stride[1] - pad[1];\n              d1 = offsetX + dilation[1] * (imod(pos, itemsPerBlockRow) /\n                  inChannels);\n\n              if(d1 < inputShape[${i}] && d1 >= 0) {\n\n                ch = imod(pos, inChannels);\n\n                if (${r}) {\n                  innerDims = vec2(d1, ch);\n                  result[${2*e+t}] = getChannel(\n                    getA(d0, int(innerDims.x),\n                    int(innerDims.y)), innerDims);\n                } else {\n                  innerDims = vec2(d0, d1);\n                  result[${2*e+t}] = getChannel(\n                    getA(ch, int(innerDims.x),\n                    int(innerDims.y)), innerDims);\n                }\n              }\n            }\n          }\n        `;this.userCode=`\n      void main() {\n        ivec2 rc = getOutputCoords();\n\n        vec4 result = vec4(0);\n\n        int blockIndex, pos, offsetY, d0, offsetX, d1, ch;\n        vec2 innerDims;\n\n        ${l}\n\n        ${s.output} = result;\n      }\n    `}}function oC({x:e,filter:t,convInfo:n,backend:s,bias:r=null,preluActivationWeights:a=null,leakyreluAlpha:i=0,activation:o=null}){const l=e.shape,u=s.texData.get(e.dataId),c=n.inChannels,h=l[0]*l[1]*l[2],p=n.outChannels,d="channelsLast"===n.dataFormat;let f;const m=[];if(!((1===h||1===p)&&c>1e3)&&u.isPacked&&d&&null!=u.texture&&l[2]%2!=0&&Us.arraysEqual(u.shape.slice(-3),l.slice(-3))){const c=l[0]*l[1]*(l[2]+1),h={dataId:e.dataId,shape:[1,c,n.inChannels],dtype:e.dtype},p=u.shape;u.shape=u.shape.slice(),u.shape[u.shape.length-2]++,Us.assert(ZI(u.shape,h.shape),(()=>`packed reshape ${u.shape} to ${h.shape} isn't free`));const d=NN({inputs:{x:t},backend:s,attrs:{shape:[1,n.inChannels,n.outChannels]}});m.push(d);const g=LN({a:h,b:d,backend:s,transposeA:false,transposeB:false,bias:r,activation:o,preluActivationWeights:a,leakyreluAlpha:i}),y=s.texData.get(g.dataId);Us.assert(y.isPacked,(()=>"batchMatMul result is expected to be packed")),u.shape=p,y.shape=n.outShape,f=hS({inputs:{x:g},backend:s}),f.shape=n.outShape,m.push(g)}else{const u=NN({inputs:{x:e},backend:s,attrs:{shape:[1,d?l[0]*l[1]*l[2]:l[0]*l[2]*l[3],n.inChannels]}}),c=NN({inputs:{x:t},backend:s,attrs:{shape:[1,n.inChannels,n.outChannels]}}),h=LN({a:u,b:c,transposeA:false,transposeB:false,backend:s,bias:r,activation:o,preluActivationWeights:a,leakyreluAlpha:i});f=NN({inputs:{x:h},backend:s,attrs:{shape:n.outShape}}),m.push(u),m.push(c),m.push(h)}for(const e of m)s.disposeIntermediateTensorInfo(e);return f}function lC({x:e,filter:t,convInfo:n,backend:s,bias:r=null,preluActivationWeights:a=null,leakyreluAlpha:i=0,activation:o=null}){const{filterWidth:l,filterHeight:u,inChannels:c,outWidth:h,outHeight:p,dataFormat:d}=n,f="channelsLast"===d,m=l*u*c,g=p*h,y=[m,g],b=[],x=NN({inputs:{x:e},backend:s,attrs:{shape:e.shape.slice(1)}}),w=NN({inputs:{x:t},backend:s,attrs:{shape:[1,m,Us.sizeFromShape(t.shape)/m]}});b.push(x),b.push(w);const v=new iC(y,n),k=[x.shape,[n.padInfo.top,n.padInfo.left],[n.strideHeight,n.strideWidth],[n.dilationHeight,n.dilationWidth],[n.inChannels],[n.filterWidth*n.inChannels],[n.outWidth]],I=s.runWebGLProgram(v,[x],"float32",k),S=NN({inputs:{x:I},backend:s,attrs:{shape:[1,y[0],y[1]]}});b.push(I),b.push(S);const N=null!=r,T=null!=a,C="leakyrelu"===o,$=o?CS(o,!0):null,E=new $S(S.shape,w.shape,[1,g,n.outChannels],!0,!1,N,$,T,C),A=[S,w];if(r&&A.push(r),T&&A.push(a),C){const e=s.makeTensorInfo([],"float32",Us.createScalarValue(i,"float32"));A.push(e),b.push(e)}const R=s.runWebGLProgram(E,A,"float32"),F=NN({inputs:{x:R},backend:s,attrs:{shape:f?[1,p,h,n.outChannels]:[1,n.outChannels,p,h]}});b.push(R);for(const e of b)s.disposeIntermediateTensorInfo(e);return F}const uC={kernelName:nt,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{x:r,filter:a}=t,{strides:i,pad:o,dataFormat:l,dilations:u,dimRoundingMode:c}=s,h=Bl.convertConv2DDataFormat(l),p=Bl.computeConv2DInfo(r.shape,a.shape,i,u,o,c,!1,h);let d;if(1!==p.filterHeight||1!==p.filterWidth||1!==p.dilationHeight||1!==p.dilationWidth||1!==p.strideHeight||1!==p.strideWidth||"SAME"!==p.padInfo.type&&"VALID"!==p.padInfo.type)if(le().getBool("WEBGL_CONV_IM2COL")&&1===r.shape[0])d=lC({x:r,filter:a,convInfo:p,backend:n});else{const e=new rC(p);d=n.runWebGLProgram(e,[r,a],"float32")}else d=oC({x:r,filter:a,convInfo:p,backend:n});const f=NN({inputs:{x:d},backend:n,attrs:{shape:p.outShape}});return n.disposeIntermediateTensorInfo(d),f}};class cC{constructor(e){this.variableNames=["x","dy"],this.outputShape=e.filterShape;const t=e.strideHeight,n=e.strideWidth,s=e.padInfo.top,r=e.padInfo.left,a="channelsLast"===e.dataFormat;this.userCode=`\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int wR = coords.x;\n        int wC = coords.y;\n        int d1 = coords.z;\n        int d2 = coords.w;\n\n        // Convolve x(?, ?, d1) with dy(:, :, d2) to get dw(wR, wC, d1, d2).\n        // ? = to be determined. : = across all values in that axis.\n        float dotProd = 0.0;\n\n        for (int b = 0; b < ${e.batchSize}; b++) {\n          for (int yR = 0; yR < ${e.outHeight}; yR++) {\n            int xR = wR + yR * ${t} - ${s};\n\n            if (xR < 0 || xR >= ${e.inHeight}) {\n              continue;\n            }\n\n            for (int yC = 0; yC < ${e.outWidth}; yC++) {\n              int xC = wC + yC * ${n} - ${r};\n\n              if (xC < 0 || xC >= ${e.inWidth}) {\n                continue;\n              }\n\n              if (${a}) {\n                float dyValue = getDy(b, yR, yC, d2);\n                float xValue = getX(b, xR, xC, d1);\n                dotProd += (xValue * dyValue);\n              } else {\n                float dyValue = getDy(b, d2, yR, yC);\n                float xValue = getX(b, d1, xR, xC);\n                dotProd += (xValue * dyValue);\n              }\n\n            }\n          }\n        }\n        setOutput(dotProd);\n      }\n    `}}class hC{constructor(e){this.variableNames=["dy","W"],this.outputShape=e.inShape;const t=e.filterHeight,n=e.filterWidth,s=e.strideHeight,r=e.strideWidth,a="channelsLast"===e.dataFormat,i=t-1-e.padInfo.top,o=n-1-e.padInfo.left,l=a?1:2,u=a?2:3,c=a?3:1;this.userCode=`\n      const ivec2 pads = ivec2(${i}, ${o});\n\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int batch = coords[0];\n        int d1 = coords[${c}];\n\n        ivec2 dyCorner = ivec2(coords[${l}], coords[${u}]) - pads;\n        int dyRCorner = dyCorner.x;\n        int dyCCorner = dyCorner.y;\n\n        // Convolve dy(?, ?, d2) with w(:, :, d1, d2) to compute dx(xR, xC, d1).\n        // ? = to be determined. : = across all values in that axis.\n        float dotProd = 0.0;\n        for (int wR = 0; wR < ${t}; wR++) {\n          float dyR = float(dyRCorner + wR) / ${s}.0;\n\n          if (dyR < 0.0 || dyR >= ${e.outHeight}.0 || fract(dyR) > 0.0) {\n            continue;\n          }\n          int idyR = int(dyR);\n\n          int wRPerm = ${t} - 1 - wR;\n\n          for (int wC = 0; wC < ${n}; wC++) {\n            float dyC = float(dyCCorner + wC) / ${r}.0;\n\n            if (dyC < 0.0 || dyC >= ${e.outWidth}.0 ||\n                fract(dyC) > 0.0) {\n              continue;\n            }\n            int idyC = int(dyC);\n\n            int wCPerm = ${n} - 1 - wC;\n\n            for (int d2 = 0; d2 < ${e.outChannels}; d2++) {\n\n              if (${a}) {\n                float xValue = getDy(batch, idyR, idyC, d2);\n                float wValue = getW(wRPerm, wCPerm, d1, d2);\n                dotProd += xValue * wValue;\n              } else {\n                float xValue = getDy(batch, d2, idyR, idyC);\n                float wValue = getW(wRPerm, wCPerm, d1, d2);\n                dotProd += xValue * wValue;\n              }\n\n            }\n          }\n        }\n        setOutput(dotProd);\n      }\n    `}}class pC{constructor(e){this.variableNames=["x","dy"],this.outputShape=e.filterShape;const t=e.strideDepth,n=e.strideHeight,s=e.strideWidth,r=e.padInfo.front,a=e.padInfo.top,i=e.padInfo.left;this.userCode=`\n      void main() {\n        ivec5 coords = getOutputCoords();\n        int wF = coords.x;\n        int wR = coords.y;\n        int wC = coords.z;\n        int d1 = coords.w;\n        int d2 = coords.u;\n\n        float dotProd = 0.0;\n\n        for (int b = 0; b < ${e.batchSize}; b++) {\n          for (int yF = 0; yF < ${e.outDepth}; yF++) {\n            int xF = wF + yF * ${t} - ${r};\n\n            if (xF < 0 || xF >= ${e.inDepth}) {\n              continue;\n            }\n\n            for (int yR = 0; yR < ${e.outHeight}; yR++) {\n              int xR = wR + yR * ${n} - ${a};\n\n              if (xR < 0 || xR >= ${e.inHeight}) {\n                continue;\n              }\n\n              for (int yC = 0; yC < ${e.outWidth}; yC++) {\n                int xC = wC + yC * ${s} - ${i};\n\n                if (xC < 0 || xC >= ${e.inWidth}) {\n                  continue;\n                }\n\n                float dyValue = getDy(b, yF, yR, yC, d2);\n                float xValue = getX(b, xF, xR, xC, d1);\n                dotProd += (xValue * dyValue);\n              }\n            }\n          }\n        }\n        setOutput(dotProd);\n      }\n    `}}class dC{constructor(e){this.variableNames=["dy","W"],this.outputShape=e.inShape;const t=e.filterDepth,n=e.filterHeight,s=e.filterWidth,r=e.strideDepth,a=e.strideHeight,i=e.strideWidth,o=t-1-e.padInfo.front,l=n-1-e.padInfo.top,u=s-1-e.padInfo.left;this.userCode=`\n      const ivec3 pads = ivec3(${o}, ${l}, ${u});\n\n      void main() {\n        ivec5 coords = getOutputCoords();\n        int batch = coords.x;\n        int d1 = coords.u;\n\n\n        ivec3 dyCorner = ivec3(coords.y, coords.z, coords.w) - pads;\n        int dyFCorner = dyCorner.x;\n        int dyRCorner = dyCorner.y;\n        int dyCCorner = dyCorner.z;\n\n        float dotProd = 0.0;\n        for (int wF = 0; wF < ${t}; wF++) {\n          float dyF = float(dyFCorner + wF) / ${r}.0;\n\n          if (dyF < 0.0 || dyF >= ${e.outDepth}.0 || fract(dyF) > 0.0) {\n            continue;\n          }\n          int idyF = int(dyF);\n\n          int wFPerm = ${t} - 1 - wF;\n\n          for (int wR = 0; wR < ${n}; wR++) {\n            float dyR = float(dyRCorner + wR) / ${a}.0;\n\n            if (dyR < 0.0 || dyR >= ${e.outHeight}.0 ||\n              fract(dyR) > 0.0) {\n              continue;\n            }\n            int idyR = int(dyR);\n\n            int wRPerm = ${n} - 1 - wR;\n\n            for (int wC = 0; wC < ${s}; wC++) {\n              float dyC = float(dyCCorner + wC) / ${i}.0;\n\n              if (dyC < 0.0 || dyC >= ${e.outWidth}.0 ||\n                  fract(dyC) > 0.0) {\n                continue;\n              }\n              int idyC = int(dyC);\n\n              int wCPerm = ${s} - 1 - wC;\n\n              for (int d2 = 0; d2 < ${e.outChannels}; d2++) {\n                float xValue = getDy(batch, idyF, idyR, idyC, d2);\n                float wValue = getW(wFPerm, wRPerm, wCPerm, d1, d2);\n                dotProd += xValue * wValue;\n              }\n            }\n          }\n        }\n        setOutput(dotProd);\n      }\n    `}}const fC={kernelName:st,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{x:r,dy:a}=t,{strides:i,pad:o,dataFormat:l,dimRoundingMode:u,filterShape:c}=s,h=Bl.convertConv2DDataFormat(l),p=Bl.computeConv2DInfo(r.shape,c,i,1,o,u,!1,h),d=new cC(p);return n.runWebGLProgram(d,[r,a],"float32")}};const mC={kernelName:rt,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{dy:r,filter:a}=t,{inputShape:i,strides:o,pad:l,dataFormat:u,dimRoundingMode:c}=s,h=Bl.convertConv2DDataFormat(u),p=Bl.computeConv2DInfo(i,a.shape,o,1,l,c,!1,h),d=new hC(p);return n.runWebGLProgram(d,[r,a],"float32")}};const gC={kernelName:at,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{x:r,filter:a}=t,{strides:i,pad:o,dilations:l}=s,u=Bl.computeConv3DInfo(r.shape,a.shape,i,l,o),c=new aC(u);return n.runWebGLProgram(c,[r,a],"float32")}};const yC={kernelName:it,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{x:r,dy:a}=t,{strides:i,pad:o,filterShape:l}=s,u=Bl.computeConv3DInfo(r.shape,l,i,1,o),c=new pC(u);return n.runWebGLProgram(c,[r,a],"float32")}};const bC={kernelName:ot,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{dy:r,filter:a}=t,{pad:i,strides:o,inputShape:l}=s,u=Bl.computeConv3DInfo(l,a.shape,o,1,i),c=new dC(u);return n.runWebGLProgram(c,[r,a],"float32")}},xC=NS({opSnippet:"if (isnan(x)) return x;\n  return cos(x);\n"}),wC={kernelName:lt,backendName:"webgl",kernelFunc:xC},vC=NS({opSnippet:"\n  float e2x = exp(-x);\n  return (e2x + 1.0 / e2x) / 2.0;\n"}),kC={kernelName:ut,backendName:"webgl",kernelFunc:vC};class IC{constructor(e,t,n,s,r){this.variableNames=["Image","Boxes","BoxInd"],this.outputShape=[];const[a,i,o,l]=e,[u]=t,[c,h]=n;this.outputShape=[u,c,h,l];const p="bilinear"===s?1:0,[d,f]=[i-1+".0",o-1+".0"],[m,g,y]=c>1?[""+(i-1)/(c-1),"(y2-y1) * height_ratio",`y1*${d} + float(y)*(height_scale)`]:["0.0","0.0",`0.5 * (y1+y2) * ${d}`],[b,x,w]=h>1?[""+(o-1)/(h-1),"(x2-x1) * width_ratio",`x1*${f} + float(x)*(width_scale)`]:["0.0","0.0",`0.5 * (x1+x2) * ${f}`];this.userCode=`\n      const float height_ratio = float(${m});\n      const float width_ratio = float(${b});\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int b = coords[0];\n        int y = coords[1];\n        int x = coords[2];\n        int d = coords[3];\n\n        // get box vals\n        float y1 = getBoxes(b,0);\n        float x1 = getBoxes(b,1);\n        float y2 = getBoxes(b,2);\n        float x2 = getBoxes(b,3);\n\n        // get image in batch index\n        int bInd = round(getBoxInd(b));\n        if(bInd < 0 || bInd >= ${a}) {\n          return;\n        }\n\n        float height_scale = ${g};\n        float width_scale = ${x};\n\n        float in_y = ${y};\n        if( in_y < 0.0 || in_y > ${d} ) {\n          setOutput(float(${r}));\n          return;\n        }\n        float in_x = ${w};\n        if( in_x < 0.0 || in_x > ${f} ) {\n          setOutput(float(${r}));\n          return;\n        }\n\n        vec2 sourceFracIndexCR = vec2(in_x,in_y);\n        if(${p} == 1) {\n          // Compute the four integer indices.\n          ivec2 sourceFloorCR = ivec2(sourceFracIndexCR);\n          ivec2 sourceCeilCR = ivec2(ceil(sourceFracIndexCR));\n\n          float topLeft = getImage(b, sourceFloorCR.y, sourceFloorCR.x, d);\n          float bottomLeft = getImage(b, sourceCeilCR.y, sourceFloorCR.x, d);\n          float topRight = getImage(b, sourceFloorCR.y, sourceCeilCR.x, d);\n          float bottomRight = getImage(b, sourceCeilCR.y, sourceCeilCR.x, d);\n\n          vec2 fracCR = sourceFracIndexCR - vec2(sourceFloorCR);\n\n          float top = topLeft + (topRight - topLeft) * fracCR.x;\n          float bottom = bottomLeft + (bottomRight - bottomLeft) * fracCR.x;\n          float newValue = top + (bottom - top) * fracCR.y;\n          setOutput(newValue);\n        } else {\n          // Compute the coordinators of nearest neighbor point.\n          ivec2 sourceNearestCR = ivec2(floor(\n            sourceFracIndexCR + vec2(0.5,0.5)));\n          float newValue = getImage(b, sourceNearestCR.y, sourceNearestCR.x, d);\n          setOutput(newValue);\n        }\n      }\n    `}}const SC={kernelName:ht,backendName:"webgl",kernelFunc:e=>{const{inputs:t,backend:n,attrs:s}=e,{image:r,boxes:a,boxInd:i}=t,{cropSize:o,method:l,extrapolationValue:u}=s,c=new IC(r.shape,a.shape,o,l,u);return n.runWebGLProgram(c,[r,a,i],"float32")}};class NC{constructor(e,t,n){this.variableNames=["x"],this.customUniforms=[{name:"index",type:"float"}],this.outputShape=e;const s=e.length,r=t?"0.0":`getX(${TC(s,"coords")})`,a=e[e.length-1];let i="",o="";t?(i=n?"end != "+(a-1):"end != 0",o=n?"end + 1":"end - 1"):(i=n?`end + pow2 < ${a}`:"end >= pow2",o=n?"end + pow2":"end - pow2"),this.userCode=`\n      void main() {\n        ${wI(s)} coords = getOutputCoords();\n        int end = ${CC(s,"coords")};\n        float val = ${r};\n        int pow2 = int(pow(2.0, index));\n        if (${i}) {\n          int idx = ${o};\n          ${CC(s,"coords")} = idx;\n          val += getX(${TC(s,"coords")});\n        }\n        setOutput(val);\n      }\n    `}}function TC(e,t){if(1===e)return`${t}`;if(2===e)return`${t}.x, ${t}.y`;if(3===e)return`${t}.x, ${t}.y, ${t}.z`;if(4===e)return`${t}.x, ${t}.y, ${t}.z, ${t}.w`;throw Error(`Cumulative sum for rank ${e} is not yet supported`)}function CC(e,t){if(1===e)return`${t}`;if(2===e)return`${t}.y`;if(3===e)return`${t}.z`;if(4===e)return`${t}.w`;throw Error(`Cumulative sum for rank ${e} is not yet supported`)}const $C={kernelName:ct,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{x:r}=t,{axis:a,exclusive:i,reverse:o}=s,l=r.shape.length,u=Bl.getAxesPermutation([a],l);let c=r;null!=u&&(c=ON({inputs:{x:r},backend:n,attrs:{perm:u}}));const h=Bl.getInnerMostAxes(1,l)[0];if(h!==l-1)throw new Error(`WebGL cumsum shader expects an inner-most axis=${r.shape.length-1} but got axis=${a}`);const p=c.shape[h];let d=hS({inputs:{x:c},backend:n});for(let e=0;e<=Math.ceil(Math.log2(p))-1;e++){const t=new NC(c.shape,!1,o),s=[[e]],r=d;d=n.runWebGLProgram(t,[d],d.dtype,s),n.disposeIntermediateTensorInfo(r)}if(i){const e=new NC(c.shape,i,o),t=d;d=n.runWebGLProgram(e,[d],d.dtype),n.disposeIntermediateTensorInfo(t)}if(null!=u){const e=ON({inputs:{x:d},backend:n,attrs:{perm:Bl.getUndoAxesPermutation(u)}});return n.disposeIntermediateTensorInfo(d),n.disposeIntermediateTensorInfo(c),e}return d}};const EC={kernelName:pt,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{x:r,weights:a}=t,{size:i,binaryOutput:o}=s;if(1===r.shape.length){const e=n.readSync(r.dataId),t=n.readSync(a.dataId),s=_S(e,t,a.dtype,a.shape,i);return n.makeTensorInfo([i],a.dtype,s)}if(2===r.shape.length){const e=n.bufferSync(r),t=n.bufferSync(a),s=OS(e,t,i,o);return n.makeTensorInfo(s.shape,a.dtype,s.values)}throw new Error(`Error in denseBincount: input must be at most rank 2, but got rank${r.shape.length}.`)}};class AC{constructor(e,t,n){this.variableNames=["x"],this.outputShape=[],this.outputShape=e,this.blockSize=t,this.dataFormat=n,this.userCode=`\n    void main() {\n      ivec4 coords = getOutputCoords();\n      int b = coords[0];\n      int h = ${this.getHeightCoordString()};\n      int w = ${this.getWidthCoordString()};\n      int d = ${this.getDepthCoordString()};\n\n      int in_h = h / ${t};\n      int offset_h = imod(h, ${t});\n      int in_w = w / ${t};\n      int offset_w = imod(w, ${t});\n      int offset_d = (offset_h * ${t} + offset_w) *\n        ${this.getOutputDepthSize()};\n      int in_d = d + offset_d;\n\n      float result = ${this.getInputSamplingString()};\n      setOutput(result);\n    }\n  `}getHeightCoordString(){return"NHWC"===this.dataFormat?"coords[1]":"coords[2]"}getWidthCoordString(){return"NHWC"===this.dataFormat?"coords[2]":"coords[3]"}getDepthCoordString(){return"NHWC"===this.dataFormat?"coords[3]":"coords[1]"}getOutputDepthSize(){return"NHWC"===this.dataFormat?this.outputShape[3]:this.outputShape[1]}getInputSamplingString(){return"NHWC"===this.dataFormat?"getX(b, in_h, in_w, in_d)":"getX(b, in_d, in_h, in_w)"}}const RC={kernelName:dt,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{x:r}=t,{blockSize:a,dataFormat:i}=s,o=r.shape[0],l=("NHWC"===i?r.shape[1]:r.shape[2])*a,u=("NHWC"===i?r.shape[2]:r.shape[3])*a,c=("NHWC"===i?r.shape[3]:r.shape[1])/(a*a),h=new AC("NHWC"===i?[o,l,u,c]:[o,c,l,u],a,i);return n.runWebGLProgram(h,[r],r.dtype)}};class FC{constructor(e,t=!1,n=null,s=!1,r=!1){this.variableNames=["x","W"],this.customUniforms=[{name:"pads",type:"ivec2"},{name:"strides",type:"ivec2"},{name:"dilations",type:"ivec2"},{name:"inDims",type:"ivec2"}],this.outputShape=e.outShape,this.enableShapeUniforms=iS(this.outputShape.length);const a=e.filterHeight,i=e.filterWidth,o=e.outChannels/e.inChannels;let l="",u="";n&&(l=s?`float activation(float a) {\n          float b = getPreluActivationWeightsAtOutCoords();\n          ${n}\n        }`:r?`float activation(float a) {\n          float b = getLeakyreluAlphaAtOutCoords();\n          ${n}\n        }`:`\n          float activation(float x) {\n            ${n}\n          }\n        `,u="result = activation(result);");const c=t?"result += getBiasAtOutCoords();":"";t&&this.variableNames.push("bias"),s&&this.variableNames.push("preluActivationWeights"),r&&this.variableNames.push("leakyreluAlpha"),this.userCode=`\n      ${l}\n\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int batch = coords.x;\n        ivec2 xRCCorner = coords.yz * strides - pads;\n        int d2 = coords.w;\n        int d1 = d2 / ${o};\n        int q = d2 - d1 * ${o};\n\n        int xRCorner = xRCCorner.x;\n        int xCCorner = xRCCorner.y;\n\n        // Convolve x(?, ?, d1) with w(:, :, d1, q) to get y(yR, yC, d2).\n        // ? = to be determined. : = across all values in that axis.\n        float dotProd = 0.0;\n        // TO DO(dsmilkov): Flatten the two for loops and vec4 the operations.\n        for (int wR = 0; wR < ${a}; wR++) {\n          int xR = xRCorner + wR * dilations[0];\n\n          if (xR < 0 || xR >= inDims[0]) {\n            continue;\n          }\n\n          for (int wC = 0; wC < ${i}; wC++) {\n            int xC = xCCorner + wC * dilations[1];\n\n            if (xC < 0 || xC >= inDims[1]) {\n              continue;\n            }\n\n            float xVal = getX(batch, xR, xC, d1);\n            float wVal = getW(wR, wC, d1, q);\n            dotProd += xVal * wVal;\n          }\n        }\n\n        float result = dotProd;\n        ${c}\n        ${u}\n        setOutput(result);\n      }\n    `}}class DC{constructor(e,t=!1,n=null,s=!1,r=!1){this.variableNames=["x","W"],this.packedInputs=!0,this.packedOutput=!0,this.customUniforms=[{name:"pads",type:"ivec2"},{name:"strides",type:"ivec2"},{name:"dilations",type:"ivec2"},{name:"inDims",type:"ivec2"}],this.outputShape=e.outShape,this.enableShapeUniforms=iS(this.outputShape.length);const a=e.outChannels/e.inChannels,i=e.padInfo.left,o=e.strideWidth,l=e.dilationWidth,u=e.filterHeight,c=e.filterWidth,h=c;let p="\n      int xR; int xC; int xCOffset;\n      vec4 wTexel; vec4 previous; vec4 final;";for(let e=0;e<c;e++)p+=`\n          vec4 xTexelC${2*e};\n          int xTexelC${2*e}Ready;\n          vec4 xTexelC${2*e+1};\n          int xTexelC${2*e+1}Ready;\n          vec4 xC${e};`;p+=`\n    for (int r = 0; r < ${u}; r++) {\n      `;for(let e=0;e<c;e++)p+=`\n          xTexelC${2*e} = vec4(0.0);\n          xTexelC${2*e}Ready = 0;\n          xTexelC${2*e+1} = vec4(0.0);\n          xTexelC${2*e+1}Ready = 0;\n          xC${e} = vec4(0.0);`;p+="\n        xR = xRCorner + r * dilations[0];\n        if (xR >=0 && xR < inDims[0]) {\n      ";for(let e=0;e<(h+1)/2;e++){const t=2*e;if(p+=`\n          xC = xCCorner + ${t*l};\n          `,1===o){if(t<c&&(i%2==1?(p+=`\n                xCOffset = xC + 1;\n                if (xCOffset >= 0 && xCOffset < inDims[1] && xTexelC${t}Ready == 0) {\n                  xTexelC${t} = getX(batch, xR, xCOffset, d1);\n\n                  // Need to manually clear unused channels in case\n                  // we're reading from recycled texture.\n                  if (xCOffset + 1 >= inDims[1]) {\n                    xTexelC${t}.zw = vec2(0.0);\n                  }\n                  xTexelC${t}Ready = 1;\n                }\n              `,p+=1===l&&t>0?`\n                xC${t} = vec4(xTexelC${t-2}.zw, xTexelC${t}.xy);\n                `:`\n                  xCOffset = xC + 1 - 2;\n\n                  if (xCOffset >= 0 && xCOffset < inDims[1]) {\n                    previous = getX(batch, xR, xCOffset, d1);\n\n                    // Need to manually clear unused channels in case\n                    // we're reading from recycled texture.\n                    if (xCOffset + 1 >= inDims[1]) {\n                      previous.zw = vec2(0.0);\n                    }\n\n                    xC${t} = vec4(previous.zw, xTexelC${t}.xy);\n                  } else {\n                    xC${t} = vec4(0.0, 0.0, xTexelC${t}.xy);\n                  }\n                  `):p+=`\n                if (xC >= 0 && xC < inDims[1] && xTexelC${t}Ready == 0) {\n                  xTexelC${t} = getX(batch, xR, xC, d1);\n                  if (xC + 1 >= inDims[1]) {\n                    xTexelC${t}.zw = vec2(0.0);\n                  }\n                  xTexelC${t}Ready = 1;\n                }\n\n                xC${t} = xTexelC${t};\n                `,t+1<c)){const e=i%2==0?Us.nearestLargerEven(l):l;l%2==0&&i%2==1||l%2!=0&&i%2!=1?(p+=`\n                  xCOffset = xC + imod(pads[1], 2) + ${e};\n\n                  if (xCOffset >= 0 && xCOffset < inDims[1] && xTexelC${t+1}Ready == 0) {\n                    xTexelC${t+1} = getX(batch, xR, xCOffset, d1);\n\n                    // Need to manually clear unused channels in case\n                    // we're reading from recycled texture.\n                    if (xCOffset + 1 >= inDims[1]) {\n                      xTexelC${t+1}.zw = vec2(0.0);\n                    }\n                    xTexelC${t+1}Ready = 1;\n                  }\n                  `,l>1&&(p+=`\n                    xCOffset -= 2;\n                    if (xCOffset >= 0 && xCOffset < inDims[1] && xTexelC${t}Ready == 0) {\n                      xTexelC${t} = getX(batch, xR, xCOffset, d1);\n                      xTexelC${t}Ready = 1;\n                    }\n                    `),p+=`\n                  xC${t+1} = vec4(xTexelC${t}.zw, xTexelC${t+1}.xy);\n                  `):p+=1===e?`\n                    xC${t+1} = xTexelC${t};\n                    `:`\n                    xCOffset = xC + ${e};\n\n                    if (xCOffset >= 0 && xCOffset < inDims[1] && xTexelC${t+1}Ready == 0) {\n                      xTexelC${t+1} = getX(batch, xR, xCOffset, d1);\n                      if (xCOffset + 1 >= inDims[1]) {\n                        xTexelC${t+1}.zw = vec2(0.0);\n                      }\n                      xTexelC${t+1}Ready = 1;\n                    }\n\n                    xC${t+1} = xTexelC${t+1};\n                    `}}else t<c&&(i%2==1?(p+=`\n                xCOffset = xC + 1 - strides[1];\n                if(xCOffset >= 0 && xCOffset < inDims[1] && xTexelC${t}Ready == 0) {\n                  xTexelC${t} = getX(batch, xR, xCOffset, d1);\n                  // Need to manually clear unused channels in case\n                  // we're reading from recycled texture.\n                  if (xCOffset + 1 >= inDims[1]) {\n                    xTexelC${t}.zw = vec2(0.0);\n                  }\n                  xTexelC${t}Ready = 1;\n                }\n\n                if(xC + 1 >= 0 && xC + 1 < inDims[1] && xTexelC${t+1}Ready == 0) {\n                  xTexelC${t+1} = getX(batch, xR, xC + 1, d1);\n                  // Need to manually clear unused channels in case\n                  // we're reading from recycled texture.\n                  if (xC + 2 >= inDims[1]) {\n                    xTexelC${t+1}.zw = vec2(0.0);\n                  }\n                  xTexelC${t+1}Ready = 1;\n                }\n\n                xC${t} = vec4(xTexelC${t}.zw, xTexelC${t+1}.zw);\n              `,t+1<c&&(p+=`\n                  final = vec4(0.0);\n                  xCOffset = xC + 1 + strides[1];\n                  if(xCOffset >= 0 && xCOffset < inDims[1]) {\n                    final = getX(batch, xR, xCOffset, d1);\n                  }\n                  xC${t+1} = vec4(xTexelC${t+1}.xy, final.xy);\n                `)):(p+=`\n                if(xC >= 0 && xC < inDims[1] && xTexelC${t}Ready == 0) {\n                  xTexelC${t} = getX(batch, xR, xC, d1);\n                  if (xC + 1 >= inDims[1]) {\n                    xTexelC${t}.zw = vec2(0.0);\n                  }\n                  xTexelC${t}Ready = 1;\n                }\n\n                xCOffset = xC + strides[1];\n                if(xCOffset >= 0 && xCOffset < inDims[1] && xTexelC${t+1}Ready == 0) {\n                  xTexelC${t+1} = getX(batch, xR, xCOffset, d1);\n                  if (xCOffset + 1 >= inDims[1]) {\n                    xTexelC${t+1}.zw = vec2(0.);\n                  }\n                  xTexelC${t+1}Ready = 1;\n                }\n\n                xC${t} = vec4(\n                  xTexelC${t}.xy, xTexelC${t+1}.xy);\n              `,t+1<c&&(p+=`\n                  xC${t+1} = vec4(xTexelC${t}.zw, xTexelC${t+1}.zw);\n                `)));t<c&&(p+=`\n            wTexel = getW(r, ${t}, d1, q);\n            dotProd += xC${t} * vec4(wTexel.xz, wTexel.xz);\n          `,t+1<c&&(p+=`\n              wTexel = getW(r, ${t+1}, d1, q);\n              dotProd += xC${t+1} * vec4(wTexel.xz, wTexel.xz);\n            `))}p+="\n    }\n  ",p+="\n      }\n    ";let d="",f="";n&&(d=s?`vec4 activation(vec4 a) {\n          vec4 b = getPreluActivationWeightsAtOutCoords();\n          ${n}\n        }`:r?`vec4 activation(vec4 a) {\n          vec4 b = getLeakyreluAlphaAtOutCoords();\n          ${n}\n        }`:`vec4 activation(vec4 x) {\n          ${n}\n        }`,f="result = activation(result);");const m=t?"result += getBiasAtOutCoords();":"";t&&this.variableNames.push("bias"),s&&this.variableNames.push("preluActivationWeights"),r&&this.variableNames.push("leakyreluAlpha"),this.userCode=`\n      ${d}\n\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int batch = coords.x;\n        ivec2 xRCCorner = coords.yz * strides - pads;\n        int d2 = coords.w;\n        int d1 = d2 / ${a};\n        int q = d2 - d1 * ${a};\n        int xRCorner = xRCCorner.x;\n        int xCCorner = xRCCorner.y;\n\n        //intialize dotProd with a small epsilon seems to reduce GPU accuracy loss.\n        vec4 dotProd = vec4(0.000000000000001);\n\n        ${p}\n\n        vec4 result = dotProd - vec4(0.000000000000001);\n        ${m}\n        ${f}\n        setOutput(result);\n      }\n    `}}const _C={kernelName:ft,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{x:r,filter:a}=t,{strides:i,pad:o,dilations:l,dimRoundingMode:u}=s;let c=l;null==c&&(c=[1,1]),Us.assert(Bl.eitherStridesOrDilationsAreOne(i,c),(()=>`Error in depthwiseConv2d: Either strides or dilations must be 1. Got strides ${i} and dilations '${c}'`));const h=Bl.computeConv2DInfo(r.shape,a.shape,i,c,o,u,!0);let p;p=le().getBool("WEBGL_PACK_DEPTHWISECONV")&&h.strideWidth<=2&&h.outChannels/h.inChannels==1?new DC(h):new FC(h);const d=[[h.padInfo.top,h.padInfo.left],[h.strideHeight,h.strideWidth],[h.dilationHeight,h.dilationWidth],[h.inHeight,h.inWidth]];return n.runWebGLProgram(p,[r,a],"float32",d)}};class OC{constructor(e){this.variableNames=["x","dy"],this.outputShape=e.filterShape;const t=e.strideHeight,n=e.strideWidth,s=e.padInfo.top,r=e.padInfo.left,a=e.outChannels/e.inChannels;this.userCode=`\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int wR = coords.x;\n        int wC = coords.y;\n        int d1 = coords.z;\n        int dm = coords.w;\n        int d2 = d1 * ${a} + dm;\n\n        float dotProd = 0.0;\n\n        // TO DO: Vec4 over the batch size\n        for (int b = 0; b < ${e.batchSize}; b++) {\n          for (int yR = 0; yR < ${e.outHeight}; yR++) {\n            int xR = wR + yR * ${t} - ${s};\n\n            if (xR < 0 || xR >= ${e.inHeight}) {\n              continue;\n            }\n\n            for (int yC = 0; yC < ${e.outWidth}; yC++) {\n              int xC = wC + yC * ${n} - ${r};\n\n              if (xC < 0 || xC >= ${e.inWidth}) {\n                continue;\n              }\n\n              float dyValue = getDy(b, yR, yC, d2);\n              float xValue = getX(b, xR, xC, d1);\n              dotProd += (xValue * dyValue);\n            }\n          }\n        }\n        setOutput(dotProd);\n      }\n    `}}class MC{constructor(e){this.variableNames=["dy","W"],this.outputShape=e.inShape;const t=e.filterHeight,n=e.filterWidth,s=e.strideHeight,r=e.strideWidth,a=t-1-e.padInfo.top,i=n-1-e.padInfo.left,o=e.outChannels/e.inChannels;this.userCode=`\n      const ivec2 pads = ivec2(${a}, ${i});\n\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int batch = coords[0];\n        int d1 = coords[3];\n        ivec2 dyCorner = coords.yz - pads;\n        int dyRCorner = dyCorner.x;\n        int dyCCorner = dyCorner.y;\n\n        float dotProd = 0.0;\n\n        for (int wR = 0; wR < ${t}; wR++) {\n          float dyR = float(dyRCorner + wR) / ${s}.0;\n\n          if (dyR < 0.0 || dyR >= ${e.outHeight}.0 || fract(dyR) > 0.0) {\n            continue;\n          }\n          int idyR = int(dyR);\n\n          int wRPerm = ${t} - 1 - wR;\n\n          for (int wC = 0; wC < ${n}; wC++) {\n            float dyC = float(dyCCorner + wC) / ${r}.0;\n\n            if (dyC < 0.0 || dyC >= ${e.outWidth}.0 ||\n                fract(dyC) > 0.0) {\n              continue;\n            }\n            int idyC = int(dyC);\n\n            int wCPerm = ${n} - 1 - wC;\n\n            // TO DO: Vec4 over the channelMul\n            for (int dm = 0; dm < ${o}; dm++) {\n              int d2 = d1 * ${o} + dm;\n              float xValue = getDy(batch, idyR, idyC, d2);\n              float wValue = getW(wRPerm, wCPerm, d1, dm);\n              dotProd += xValue * wValue;\n            }\n          }\n        }\n        setOutput(dotProd);\n      }\n    `}}const LC={kernelName:mt,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{x:r,dy:a}=t,{strides:i,dilations:o,pad:l,dimRoundingMode:u,filterShape:c}=s,h=Bl.computeConv2DInfo(r.shape,c,i,o,l,u,!0),p=new OC(h);return n.runWebGLProgram(p,[r,a],"float32")}};const zC={kernelName:gt,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{dy:r,filter:a}=t,{strides:i,dilations:o,pad:l,dimRoundingMode:u,inputShape:c}=s,h=Bl.computeConv2DInfo(c,a.shape,i,o,l,u,!0),p=new MC(h);return n.runWebGLProgram(p,[r,a],"float32")}};class BC{constructor(e){this.variableNames=["X"],this.outputShape=[e,e],this.userCode="\n      void main() {\n          ivec2 coords = getOutputCoords();\n          float val = coords[0] == coords[1] ? getX(coords[0]) : 0.0;\n          setOutput(val);\n      }\n    "}}const PC={kernelName:yt,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n}=e,{x:s}=t,r=[...s.shape,...s.shape],a=Us.sizeFromShape(s.shape),i=NN({inputs:{x:s},backend:n,attrs:{shape:[a]}}),o=new BC(a),l=n.runWebGLProgram(o,[i],i.dtype),u=NN({inputs:{x:l},backend:n,attrs:{shape:r}});return n.disposeIntermediateTensorInfo(i),n.disposeIntermediateTensorInfo(l),u}};class WC{constructor(e){this.variableNames=["x","W"],this.outputShape=e.outShape;const{inHeight:t,inWidth:n,padInfo:s,strideHeight:r,strideWidth:a,filterHeight:i,filterWidth:o,dilationHeight:l,dilationWidth:u}=e,{top:c,left:h}=s;this.userCode=`\n      const ivec2 strides = ivec2(${r}, ${a});\n      const ivec2 pads = ivec2(${c}, ${h});\n      const float neg_infinity = -3.4e38;\n\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int batch = coords.x;\n        int d1 = coords.w;\n        ivec2 outTopLeftCorner =\n            coords.yz * strides - pads;\n        int hBeg = outTopLeftCorner.x;\n        int wBeg = outTopLeftCorner.y;\n\n        float curVal = neg_infinity;\n        for (int h = 0; h < ${i}; h++) {\n          int hIn = hBeg + h * ${l};\n\n          if (hIn >= 0 && hIn < ${t}) {\n            for (int w = 0; w < ${o}; w++) {\n              int wIn = wBeg + w * ${u};\n\n              if (wIn >= 0 && wIn < ${n}) {\n                float xVal = getX(batch, hIn, wIn, d1);\n                float wVal = getW(h, w, d1);\n\n                float val = xVal + wVal;\n                if (val > curVal) {\n                  curVal = val;\n                }\n              }\n            }\n          }\n        }\n\n        float result = curVal;\n        setOutput(result);\n      }\n    `}}const UC={kernelName:bt,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{x:r,filter:a}=t,{strides:i,pad:o,dilations:l}=s,u=Bl.computeDilation2DInfo(r.shape,a.shape,i,o,"NHWC",l);let c;const h=new WC(u);c=n.runWebGLProgram(h,[r,a],"float32");const p=NN({inputs:{x:c},backend:n,attrs:{shape:u.outShape}});return n.disposeIntermediateTensorInfo(c),p}};const VC={kernelName:kt,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{equation:r}=s,a=t,{allDims:i,summedDims:o,idDims:l}=Bl.decodeEinsumEquation(r,a.length);Bl.checkEinsumDimSizes(i.length,l,a);const{path:u,steps:c}=Bl.getEinsumComputePath(o,l),h=c.length;let p=null,d=i.length;const f=[];for(let e=0;e<h;++e){for(const t of c[e]){const{permutationIndices:e,expandDims:s}=Bl.getEinsumPermutation(d,l[t]);let r;Bl.isIdentityPermutation(e)?r=a[t]:(r=ON({inputs:{x:a[t]},backend:n,attrs:{perm:e}}),f.push(r));const i=r.shape.slice();for(let e=0;e<s.length;++e)i.splice(s[e],0,1);Us.arraysEqual(r.shape,i)||(r=NN({inputs:{x:r},backend:n,attrs:{shape:i}}),f.push(r)),null===p?p=r:(p=kN({inputs:{a:r,b:p},backend:n}),f.push(p))}e<h-1&&(u[e]>=0&&(p=DN({inputs:{x:p},backend:n,attrs:{axis:u[e]-(i.length-d),keepDims:!1}}),f.push(p)),d--)}for(const e of f)e!==p&&n.disposeIntermediateTensorInfo(e);return p}},GC=NS({opSnippet:"return (x >= 0.0) ? x : (exp(x) - 1.0);",packedOpSnippet:"\n  vec4 result;\n\n  result.r = (x.r >= 0.0) ? x.r : (exp(x.r) - 1.0);\n  result.g = (x.g >= 0.0) ? x.g : (exp(x.g) - 1.0);\n  result.b = (x.b >= 0.0) ? x.b : (exp(x.b) - 1.0);\n  result.a = (x.a >= 0.0) ? x.a : (exp(x.a) - 1.0);\n\n  return result;\n"}),HC={kernelName:It,backendName:"webgl",kernelFunc:GC},jC={kernelName:St,backendName:"webgl",kernelFunc:e=>{const{inputs:t,backend:n}=e,{dy:s,y:r}=t,a=le().getBool("WEBGL_PACK_BINARY_OPERATIONS")?new cS("\n  vec4 bGTEZero = vec4(greaterThanEqual(b, vec4(0.)));\n  return (bGTEZero * a) + ((vec4(1.0) - bGTEZero) * (a * (b + vec4(1.0))));\n",s.shape,r.shape):new oS("return (b >= 1.0) ? a : a * (b + 1.0);",s.shape,r.shape);return n.runWebGLProgram(a,[s,r],s.dtype)}},qC=TS({opSnippet:"return float(a == b);",packedOpSnippet:"\n  return vec4(equal(a, b));\n",dtype:"bool",cpuKernelImpl:zS}),KC={kernelName:Tt,backendName:"webgl",kernelFunc:qC},XC=NS({opSnippet:`\n  // Error function is calculated approximately with elementary function.\n  // See "Handbook of Mathematical Functions with Formulas,\n  // Graphs, and Mathematical Tables", Abramowitz and Stegun.\n  float p = ${Bl.ERF_P};\n  float a1 = ${Bl.ERF_A1};\n  float a2 = ${Bl.ERF_A2};\n  float a3 = ${Bl.ERF_A3};\n  float a4 = ${Bl.ERF_A4};\n  float a5 = ${Bl.ERF_A5};\n\n  float sign = sign(x);\n  x = abs(x);\n  float t = 1.0 / (1.0 + p * x);\n  return sign * (1.0 - (((((a5*t + a4)*t) + a3)*t + a2)*t + a1)*t*exp(-x*x));\n`}),YC={kernelName:Nt,backendName:"webgl",kernelFunc:XC},ZC=NS({opSnippet:"if (isnan(x)) return x;\n  return exp(x);\n",packedOpSnippet:"\n  vec4 result = exp(x);\n  bvec4 isNaN = isnan(x);\n  result.r = isNaN.r ? x.r : result.r;\n  result.g = isNaN.g ? x.g : result.g;\n  result.b = isNaN.b ? x.b : result.b;\n  result.a = isNaN.a ? x.a : result.a;\n\n  return result;\n",cpuKernelImpl:BS,dtype:"float32"}),JC={kernelName:Ct,backendName:"webgl",kernelFunc:ZC};function QC(e){const{inputs:t,attrs:n,backend:s}=e,{dim:r}=n,{input:a}=t,i=a.shape.length,o=a.shape.slice();let l=r;return r<0&&(Us.assert(-(i+1)<=r,(()=>`Axis must be in the interval [${-(i+1)}, ${i}]`)),l=i+r+1),o.splice(l,0,1),NN({inputs:{x:a},backend:s,attrs:{shape:o}})}const e$={kernelName:$t,backendName:"webgl",kernelFunc:QC},t$="return exp(x) - 1.0;",n$=NS({opSnippet:t$,packedOpSnippet:t$,cpuKernelImpl:PS}),s$={kernelName:Et,backendName:"webgl",kernelFunc:n$};class r${constructor(e,t,n){this.variableNames=["real","imag"];const s=t[1];this.outputShape=t;const r=n?`2.0 * ${Math.PI}`:`-2.0 * ${Math.PI}`,a=n?`${s}.0`:"1.0";let i;if("real"===e)i="return real * expR - imag * expI;";else{if("imag"!==e)throw new Error(`FFT component must be either "real" or "imag", got ${e}.`);i="return real * expI + imag * expR;"}this.userCode=`\n      const float exponentMultiplier = ${r};\n\n      float unaryOpComplex(float real, float expR, float imag, float expI) {\n        ${i}\n      }\n\n      float mulMatDFT(int batch, int index) {\n        float indexRatio = float(index) / float(${s});\n        float exponentMultiplierTimesIndexRatio =\n            exponentMultiplier * indexRatio;\n\n        float result = 0.0;\n\n        for (int i = 0; i < ${s}; i++) {\n          // x = (-2|2 * PI / N) * index * i;\n          float x = exponentMultiplierTimesIndexRatio * float(i);\n          float expR = cos(x);\n          float expI = sin(x);\n          float real = getReal(batch, i);\n          float imag = getImag(batch, i);\n\n          result +=\n              unaryOpComplex(real, expR, imag, expI) / ${a};\n        }\n\n        return result;\n      }\n\n      void main() {\n        ivec2 coords = getOutputCoords();\n        setOutput(mulMatDFT(coords[0], coords[1]));\n      }\n    `}}function a$(e,t,n){const s=n.texData.get(e.dataId),r=Us.sizeFromShape(e.shape),a=e.shape[e.shape.length-1],i=NN({inputs:{x:e},backend:n,attrs:{shape:[r/a,a]}}),o=i.shape,l=new r$("real",o,t),u=new r$("imag",o,t),c=[{dataId:s.complexTensorInfos.real.dataId,dtype:s.complexTensorInfos.real.dtype,shape:o},{dataId:s.complexTensorInfos.imag.dataId,dtype:s.complexTensorInfos.imag.dtype,shape:o}],h=n.runWebGLProgram(l,c,"float32"),p=n.runWebGLProgram(u,c,"float32"),d=dS({inputs:{real:h,imag:p},backend:n});n.disposeIntermediateTensorInfo(h),n.disposeIntermediateTensorInfo(p);const f=NN({inputs:{x:d},backend:n,attrs:{shape:e.shape}});return n.disposeIntermediateTensorInfo(i),n.disposeIntermediateTensorInfo(d),f}const i$={kernelName:At,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n}=e,{input:s}=t;return a$(s,!1,n)}};class o${constructor(e,t){this.outputShape=[],this.customUniforms=[{name:"value",type:"float"}],this.variableNames=["x"],this.outputShape=e,this.userCode="\n      void main() {\n        // Input can be obtained from uniform value.\n        setOutput(value);\n      }\n    "}}function l$(e){const{backend:t,attrs:n}=e,{shape:s,value:r}=n;let{dtype:a}=n;if(a=a||Us.inferDtype(r),"string"===a){const e=Us.getArrayFromDType(a,Us.sizeFromShape(s));return e.fill(r),t.makeTensorInfo(s,a,e)}{const e=new o$(s,r),n=[[r]];return t.runWebGLProgram(e,[],a,n)}}const u$={kernelName:Rt,backendName:"webgl",kernelFunc:l$};class c${constructor(e){this.variableNames=["Image"],this.outputShape=[];const t=e[2];this.outputShape=e,this.userCode=`\n        void main() {\n          ivec4 coords = getOutputCoords();\n          int x = coords[2];\n\n          int coordX = ${t} - x - 1;\n          float outputValue;\n          if(coordX >= 0 && coordX < ${t}) {\n            outputValue = getImage(coords[0], coords[1], coordX, coords[3]);\n          } else {\n            outputValue = getImage(coords[0], coords[1], coords[2], coords[3]);\n          }\n          setOutput(outputValue);\n        }\n    `}}const h$={kernelName:Ft,backendName:"webgl",kernelFunc:({inputs:e,backend:t})=>{const{image:n}=e,s=t,r=new c$(n.shape);return s.runWebGLProgram(r,[n],n.dtype)}},p$="return floor(x);",d$=NS({opSnippet:p$,packedOpSnippet:p$,cpuKernelImpl:WS}),f$={kernelName:Dt,backendName:"webgl",kernelFunc:d$},m$=TS({opSnippet:"\n  float s = sign(a) * sign(b);\n  int ia = round(a);\n  int ib = round(b);\n  if (ib != 0) {\n    // Windows (D3D) wants guaranteed non-zero int division at compile-time.\n    return float(idiv(ia, ib, s));\n  } else {\n    return NAN;\n  }\n",packedOpSnippet:"\n  ivec4 ia = round(a);\n  ivec4 ib = round(b);\n  bvec4 cond = notEqual(ib, ivec4(0));\n  ivec4 result = ivec4(0);\n  vec4 s = sign(a) * sign(b);\n\n  // Windows (D3D) wants guaranteed non-zero int division at compile-time.\n  if (cond[0]) {\n    result[0] = idiv(ia[0], ib[0], s[0]);\n  }\n  if (cond[1]) {\n    result[1] = idiv(ia[1], ib[1], s[1]);\n  }\n  if (cond[2]) {\n    result[2] = idiv(ia[2], ib[2], s[2]);\n  }\n  if (cond[3]) {\n    result[3] = idiv(ia[3], ib[3], s[3]);\n  }\n  return vec4(result);\n",dtype:"int32"}),g$={kernelName:_t,backendName:"webgl",kernelFunc:m$};class y${constructor(e){this.variableNames=["A"];const t=sI(),[n,s]=e;this.outputShape=e,this.userCode=`\n      void main() {\n        ivec3 coords = getOutputCoords();\n        int texR = coords[0];\n        int texC = coords[1];\n        int depth = coords[2];\n        vec2 uv = (vec2(texC, texR) + halfCR) / vec2(${s}.0, ${n}.0);\n\n        vec4 values = ${t.texture2D}(A, uv);\n        float value;\n        if (depth == 0) {\n          value = values.r;\n        } else if (depth == 1) {\n          value = values.g;\n        } else if (depth == 2) {\n          value = values.b;\n        } else if (depth == 3) {\n          value = values.a;\n        }\n\n        setOutput(floor(value * 255.0 + 0.5));\n      }\n    `}}class b${constructor(e){this.variableNames=["A"],this.packedInputs=!1,this.packedOutput=!0;const t=sI(),[n,s]=e;this.outputShape=e,this.userCode=`\n      void main() {\n        ivec3 coords = getOutputCoords();\n        int texR = coords[0];\n        int texC = coords[1];\n        int depth = coords[2];\n\n        vec4 result = vec4(0.);\n\n        for(int row=0; row<=1; row++) {\n          for(int col=0; col<=1; col++) {\n            texC = coords[1] + row;\n            depth = coords[2] + col;\n\n            vec2 uv = (vec2(texC, texR) + halfCR) /\n                       vec2(${s}.0, ${n}.0);\n            vec4 values = ${t.texture2D}(A, uv);\n            float value;\n            if (depth == 0) {\n              value = values.r;\n            } else if (depth == 1) {\n              value = values.g;\n            } else if (depth == 2) {\n              value = values.b;\n            } else if (depth == 3) {\n              value = values.a;\n            }\n\n            result[row * 2 + col] = floor(value * 255.0 + 0.5);\n          }\n        }\n\n        ${t.output} = result;\n      }\n    `}}const x$={kernelName:Ts,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e;let{pixels:r}=t;const{numChannels:a}=s,i="undefined"!=typeof HTMLVideoElement&&r instanceof HTMLVideoElement,o="undefined"!=typeof HTMLImageElement&&r instanceof HTMLImageElement,[l,u]=i?[r.videoWidth,r.videoHeight]:[r.width,r.height],c=[u,l],h=[u,l,a];(o||i)&&(null==w$&&(w$=document.createElement("canvas").getContext("2d")),w$.canvas.width=l,w$.canvas.height=u,w$.drawImage(r,0,0,l,u),r=w$.canvas);const p=n.makeTensorInfo(c,"int32");n.texData.get(p.dataId).usage=$I.PIXELS,n.gpgpu.uploadPixelDataToTexture(n.getTexture(p.dataId),r);const d=le().getBool("WEBGL_PACK")?new b$(h):new y$(h),f=n.runWebGLProgram(d,[p],"int32");return n.disposeData(p.dataId),f}};let w$;const v$={kernelName:Es,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{x:r,filter:a,bias:i,preluActivationWeights:o}=t,{strides:l,pad:u,dataFormat:c,dilations:h,dimRoundingMode:p,activation:d,leakyreluAlpha:f}=s,m=Bl.convertConv2DDataFormat(c),g=Bl.computeConv2DInfo(r.shape,a.shape,l,h,u,p,!1,m);let y;const b=[];if(1!==g.filterHeight||1!==g.filterWidth||1!==g.dilationHeight||1!==g.dilationWidth||1!==g.strideHeight||1!==g.strideWidth||"SAME"!==g.padInfo.type&&"VALID"!==g.padInfo.type)if(le().getBool("WEBGL_CONV_IM2COL")&&1===r.shape[0])y=lC({x:r,filter:a,convInfo:g,backend:n,bias:i,activation:d,preluActivationWeights:o,leakyreluAlpha:f});else{const e=null!=i,t=null!=o,s="leakyrelu"===d,l=d?CS(d,!1):null,u=new rC(g,e,l,t,s),c=[r,a];if(i&&c.push(i),o&&c.push(o),s){const e=n.makeTensorInfo([],"float32",Us.createScalarValue(f,"float32"));c.push(e),b.push(e)}y=n.runWebGLProgram(u,c,"float32")}else y=oC({x:r,filter:a,convInfo:g,backend:n,bias:i,activation:d,preluActivationWeights:o,leakyreluAlpha:f});const x=NN({inputs:{x:y},backend:n,attrs:{shape:g.outShape}});return b.push(y),b.forEach((e=>n.disposeIntermediateTensorInfo(e))),x}};const k$={kernelName:As,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{x:r,filter:a,bias:i,preluActivationWeights:o}=t,{strides:l,pad:u,dilations:c,dimRoundingMode:h,activation:p,leakyreluAlpha:d}=s,f=[];let m=c;null==m&&(m=[1,1]),Us.assert(Bl.eitherStridesOrDilationsAreOne(l,m),(()=>`Error in depthwiseConv2d: Either strides or dilations must be 1. Got strides ${l} and dilations '${m}'`));const g=Bl.computeConv2DInfo(r.shape,a.shape,l,m,u,h,!0),y=le().getBool("WEBGL_PACK_DEPTHWISECONV")&&g.strideWidth<=2&&g.outChannels/g.inChannels==1,b=p?CS(p,y):null,x=[r,a],w=null!=i,v=null!=o,k="leakyrelu"===p;if(w&&x.push(i),v&&x.push(o),k){const e=n.makeTensorInfo([],"float32",Us.createScalarValue(d,"float32"));x.push(e),f.push(e)}let I;I=y?new DC(g,w,b,v,k):new FC(g,w,b,v,k);const S=[[g.padInfo.top,g.padInfo.left],[g.strideHeight,g.strideWidth],[g.dilationHeight,g.dilationWidth],[g.inHeight,g.inWidth]],N=n.runWebGLProgram(I,x,"float32",S);return f.forEach((e=>n.disposeIntermediateTensorInfo(e))),N}};class I${constructor(e,t,n){this.sliceDim=e,this.strides=t,this.variableNames=["x","indices"],this.outputShape=n;const s=wI(t.length),r=wI(n.length),a=this.sliceDim>1?"strides[j]":"strides";this.userCode=`\n        ${s} strides = ${s}(${this.strides});\n         void main() {\n          ${r} coords = getOutputCoords();\n          int flattenIndex = 0;\n          for (int j = 0; j < ${this.sliceDim}; j++) {\n            int index = round(getIndices(coords[0], j));\n            flattenIndex += index * ${a};\n          }\n          setOutput(getX(flattenIndex, coords[1]));\n        }\n      `}}const S$={kernelName:Lt,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n}=e,{params:s,indices:r}=t,a=r.shape,i=a[a.length-1],o=Us.sizeFromShape(s.shape),[l,u,c,h]=Bl.prepareAndValidate(s,r),p=NN({inputs:{x:r},backend:n,attrs:{shape:[u,i]}}),d=NN({inputs:{x:s},backend:n,attrs:{shape:[Us.sizeFromShape(s.shape)/c,c]}});if(n.shouldExecuteOnCPU([s,r])||"string"===s.dtype){const e=n.readSync(r.dataId),t=n.bufferSync(s),a=US(e,t,s.dtype,u,i,c,h,s.shape,o);return n.makeTensorInfo(l,s.dtype,a.values)}const f=new I$(i,h,[u,c]),m=n.runWebGLProgram(f,[d,p],d.dtype),g=NN({inputs:{x:m},backend:n,attrs:{shape:l}});return n.disposeIntermediateTensorInfo(p),n.disposeIntermediateTensorInfo(d),n.disposeIntermediateTensorInfo(m),g}};class N${constructor(e,t){this.variableNames=["A","indices"],this.outputShape=t,this.rank=t.length;const n=wI(this.rank),s=function(e,t){const n=["resRC.x","resRC.y","resRC.z","resRC.w"],s=[];for(let t=0;t<e.length;t++)2===t?s.push("index"):s.push(`${n[t]}`);return s.join()}(e);this.userCode=`\n      void main() {\n        ${n} resRC = getOutputCoords();\n        int index = int(getIndices(resRC.x, resRC.z));\n        float inBounds = (index >= 0) && (index < ${e[2]}) ? 1.0 : 0.0;\n        setOutput(inBounds * getA(${s}));\n      }\n    `}}function T$(e){const{inputs:t,backend:n,attrs:s}=e,{x:r,indices:a}=t,{axis:i,batchDims:o}=s,l=Us.parseAxisParam(i,r.shape)[0];if(le().get("DEBUG")){const e=n.readSync(a.dataId),t=r.shape[l];for(let n=0;n<e.length;++n){const s=e[n];Us.assert(s<=t-1&&s>=0,(()=>`GatherV2: the index value ${s} is not in [0, ${t-1}]`))}}const u=Bl.segment_util.collectGatherOpShapeInfo(r,a,l,o),c=Us.sizeFromShape(a.shape),h=[],p=NN({inputs:{x:r},backend:n,attrs:{shape:[u.batchSize,u.outerSize,u.dimSize,u.sliceSize]}}),d=NN({inputs:{x:a},backend:n,attrs:{shape:[u.batchSize,c/u.batchSize]}});h.push(p),h.push(d);const f=[u.batchSize,u.outerSize,c/u.batchSize,u.sliceSize];if(n.shouldExecuteOnCPU([r,a])||"string"===r.dtype){const e=n.bufferSync(d),t=n.bufferSync(p),s=VS(t,e,f);return h.forEach((e=>n.disposeIntermediateTensorInfo(e))),n.makeTensorInfo(u.outputShape,s.dtype,s.values)}const m=new N$(p.shape,f),g=n.runWebGLProgram(m,[p,d],p.dtype);h.push(g);const y=NN({inputs:{x:g},backend:n,attrs:{shape:u.outputShape}});return h.forEach((e=>n.disposeIntermediateTensorInfo(e))),y}const C$={kernelName:Mt,backendName:"webgl",kernelFunc:T$},$$=TS({opSnippet:"return float(a > b);",packedOpSnippet:"\n  return vec4(greaterThan(a, b));\n",cpuKernelImpl:GS,dtype:"bool"}),E$={kernelName:zt,backendName:"webgl",kernelFunc:$$},A$=TS({opSnippet:"return float(a >= b);",packedOpSnippet:"\n  return vec4(greaterThanEqual(a, b));\n",dtype:"bool",cpuKernelImpl:HS}),R$={kernelName:Bt,backendName:"webgl",kernelFunc:A$};const F$={kernelName:Wt,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n}=e,{input:s}=t;return a$(s,!0,n)}},D$=NS({opSnippet:"return float(!isnan(x) && !isinf(x));",dtype:"bool"}),_$={kernelName:Vt,backendName:"webgl",kernelFunc:D$},O$=NS({opSnippet:"return float(isinf(x));",dtype:"bool"}),M$={kernelName:Gt,backendName:"webgl",kernelFunc:O$},L$=NS({opSnippet:"return float(isnan(x));",dtype:"bool"}),z$={kernelName:Ht,backendName:"webgl",kernelFunc:L$},B$=TS({opSnippet:"return float(a < b);",packedOpSnippet:"\n  return vec4(lessThan(a, b));\n",cpuKernelImpl:jS,dtype:"bool"}),P$={kernelName:qt,backendName:"webgl",kernelFunc:B$},W$=TS({opSnippet:"return float(a <= b);",packedOpSnippet:"\n  return vec4(lessThanEqual(a, b));\n",cpuKernelImpl:qS,dtype:"bool"}),U$={kernelName:Kt,backendName:"webgl",kernelFunc:W$};const V$={kernelName:Xt,backendName:"webgl",kernelFunc:function(e){const{backend:t,attrs:n}=e,{start:s,stop:r,num:a}=n,i=KS(s,r,a);return t.makeTensorInfo([i.length],"float32",i)}},G$=NS({opSnippet:"if (isnan(x)) return x;\n  return x < 0.0 ? 0./0. : log(x);\n",packedOpSnippet:"\n  vec4 result = log(x);\n  bvec4 isNaN = isnan(x);\n  result.r = isNaN.r ? x.r : (x.r < 0.0 ? 0./0. : result.r);\n  result.g = isNaN.g ? x.g : (x.g < 0.0 ? 0./0. : result.g);\n  result.b = isNaN.b ? x.b : (x.b < 0.0 ? 0./0. : result.b);\n  result.a = isNaN.a ? x.a : (x.a < 0.0 ? 0./0. : result.a);\n  return result;\n",cpuKernelImpl:XS}),H$={kernelName:Yt,backendName:"webgl",kernelFunc:G$},j$=NS({opSnippet:"if (isnan(x)) return x;\n  return log(1.0 + x);\n"}),q$={kernelName:Zt,backendName:"webgl",kernelFunc:j$},K$=TS({opSnippet:"return float(a >= 1.0 && b >= 1.0);",packedOpSnippet:"\n  return vec4(\n    vec4(greaterThanEqual(a, vec4(1.0))) *\n    vec4(greaterThanEqual(b, vec4(1.0))));\n",dtype:"bool"}),X$={kernelName:Jt,backendName:"webgl",kernelFunc:K$},Y$=NS({opSnippet:"return float(!(x >= 1.0));"}),Z$={kernelName:Qt,backendName:"webgl",kernelFunc:Y$},J$=TS({opSnippet:"return float(a >= 1.0 || b >= 1.0);",packedOpSnippet:"\n  return min(\n    vec4(greaterThanEqual(a, vec4(1.0))) +\n    vec4(greaterThanEqual(b, vec4(1.0))),\n    vec4(1.0));\n",dtype:"bool"}),Q$={kernelName:en,backendName:"webgl",kernelFunc:J$};class eE{constructor(e,t,n,s,r){this.variableNames=["x"],this.outputShape=[];const a=t,i=e[3]-1;let o;this.outputShape=e;const l=`float(${n}) + float(${s}) * sum`;o=.5===r?`inversesqrt(${l})`:1===r?`1.0/(${l})`:`exp(log(${l}) * float(-${r}));`,this.userCode=`\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int b = coords[0];\n        int r = coords[1];\n        int c = coords[2];\n        int d = coords[3];\n        float x = getX(b, r, c, d);\n        float sum = 0.0;\n        for (int j = -${a}; j <= ${a}; j++) {\n          int idx = d + j;\n          if (idx >= 0 && idx <=  ${i}) {\n            float z = getX(b, r, c, idx);\n            sum += z * z;\n          }\n        }\n        float val = x * ${o};\n        setOutput(val);\n      }\n    `}}class tE{constructor(e,t,n,s,r){this.variableNames=["x"],this.outputShape=[],this.packedInputs=!0,this.packedOutput=!0;const a=t,i=e[3]-1;let o;this.outputShape=e;const l=`float(${n}) + float(${s}) * sum`;o=.5===r?`inversesqrt(${l})`:1===r?`1.0/(${l})`:`exp(log(${l}) * float(-${r}));`,this.userCode=`\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int b = coords.x;\n        int r = coords.y;\n        int c = coords.z;\n        int d = coords.w;\n\n        bool hasNextCol = d < ${this.outputShape[3]};\n        bool hasNextRow = c < ${this.outputShape[2]};\n\n        vec4 sum = vec4(0.);\n        vec4 xFragAtOutputCoords = getX(b, r, c, d);\n\n        vec4 xAtOutputCoords = vec4(\n          getChannel(xFragAtOutputCoords, vec2(c, d)),\n          hasNextCol ?\n            getChannel(xFragAtOutputCoords, vec2(c, d + 1)) : 0.0,\n          hasNextRow ?\n            getChannel(xFragAtOutputCoords , vec2(c + 1, d)) : 0.0,\n          (hasNextRow && hasNextCol) ?\n            getChannel(xFragAtOutputCoords, vec2(c + 1, d + 1)) : 0.0\n        );\n\n        int firstChannel = d - ${a};\n        vec2 cache = vec2(0.);\n        if(firstChannel >= 0){\n          vec4 firstChannelFrag = getX(b, r, c, firstChannel);\n          cache.x = getChannel(firstChannelFrag, vec2(c, firstChannel));\n            if(hasNextRow){\n              cache.y = getChannel(firstChannelFrag, vec2(c + 1, firstChannel));\n            }\n        }\n\n        ivec2 depth = ivec2(d, d + 1);\n        for (int j = - ${a}; j <= ${a}; j++) {\n          ivec2 idx = depth + j;\n          bvec2 aboveLowerBound = greaterThanEqual(idx, ivec2(0));\n          bvec2 belowUpperBound = lessThanEqual(idx, ivec2(${i}));\n\n          bool depthInRange = aboveLowerBound.x && belowUpperBound.x;\n          bool depthPlusOneInRange = aboveLowerBound.y && belowUpperBound.y;\n\n          if(depthInRange || depthPlusOneInRange){\n            vec4 z = vec4(0.);\n            vec4 xFragAtCurrentDepth;\n            z.xz = cache.xy;\n            if(depthPlusOneInRange && hasNextCol){\n              xFragAtCurrentDepth = idx.y != d ?\n                getX(b, r, c, idx.y) : xFragAtOutputCoords;\n              z.y = getChannel(xFragAtCurrentDepth, vec2(c, idx.y));\n              if(hasNextRow){\n                z.w = getChannel(xFragAtCurrentDepth, vec2(c + 1, idx.y));\n              }\n            }\n            cache.xy = z.yw;\n            sum += z * z;\n          }\n        }\n        vec4 result = xAtOutputCoords * ${o};\n        setOutput(result);\n      }\n    `}}const nE={kernelName:tn,backendName:"webgl",kernelFunc:e=>{const{inputs:t,backend:n,attrs:s}=e,{x:r}=t,{depthRadius:a,bias:i,alpha:o,beta:l}=s,u=le().getBool("WEBGL_PACK_NORMALIZATION")?new tE(r.shape,a,i,o,l):new eE(r.shape,a,i,o,l);return n.runWebGLProgram(u,[r],r.dtype)}};class sE{constructor(e,t,n,s,r){this.variableNames=["inputImage","outputImage","dy"],this.outputShape=[],this.outputShape=e,this.depth=e[3],this.depthRadius=t,this.bias=n,this.alpha=s,this.beta=r,this.userCode=`\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int b = coords[0];\n        int r = coords[1];\n        int c = coords[2];\n\n        float result = 0.0;\n        for (int d = 0; d < ${this.depth}; ++d) {\n          int depthBegin = int(max(0.0, float(d - ${t})));\n          int depthEnd = int(min(float(${this.depth}),\n              float(d + ${t} + 1)));\n\n          const int MIN_DEPTH_BEGIN = 0;\n          const int MAX_DEPTH_END = ${this.depth};\n\n          float norm = 0.0;\n          for (int k = MIN_DEPTH_BEGIN; k < MAX_DEPTH_END; ++k) {\n            if (k < depthBegin){\n              continue;\n            }\n            else if (k >= depthBegin && k < depthEnd) {\n              norm += getInputImage(b, r, c, k) * getInputImage(b, r, c, k);\n            }\n            else {\n              break;\n            }\n          }\n\n          norm = float(${s}) * norm + float(${n});\n\n          for(int k = MIN_DEPTH_BEGIN; k < MAX_DEPTH_END; ++k){\n            if (k < depthBegin){\n              continue;\n            }\n            else if (k >= depthBegin && k < depthEnd){\n              float dyi = -2.0 * float(${s})\n                * float(${r})\n                * getInputImage(b ,r ,c, k) * getOutputImage(b, r, c, d)\n                / norm;\n              if (k == d) {\n                dyi += pow(norm, -1.0 * ${r});\n              }\n              if (k == coords[3]) {\n                dyi *= getDy(b, r, c, d);\n                result += dyi;\n              }\n            }\n            else {\n              break;\n            }\n          }\n      }\n      setOutput(result);\n      }\n    `}}const rE={kernelName:nn,backendName:"webgl",kernelFunc:e=>{const{inputs:t,backend:n,attrs:s}=e,{x:r,y:a,dy:i}=t,{depthRadius:o,bias:l,alpha:u,beta:c}=s,h=new sE(r.shape,o,l,u,c);return n.runWebGLProgram(h,[r,a,i],r.dtype)}};function aE(e){const{inputs:t,backend:n,attrs:s}=e,{x:r}=t,{reductionIndices:a,keepDims:i}=s,o=r.shape.length,l=Us.parseAxisParam(a,r.shape);let u=l;const c=Bl.getAxesPermutation(u,o),h=null!=c,p=n.shouldExecuteOnCPU([r]);let d=r;if(h){if(p){const e=n.texData.get(d.dataId).values,t=new Array(o);for(let e=0;e<t.length;e++)t[e]=r.shape[c[e]];const s=xN(e,r.shape,r.dtype,c,t);d=n.makeTensorInfo(t,r.dtype);n.texData.get(d.dataId).values=s}else d=FN(r,c,n);u=Bl.getInnerMostAxes(u.length,o)}Bl.assertAxesAreInnerMostDims("max",u,o);const[f,m]=Bl.computeOutAndReduceShapes(d.shape,u);let g,y=f;if(i&&(y=Bl.expandShapeToKeepDim(f,l)),p){const e=n.texData.get(d.dataId).values,t=YS(e,Us.sizeFromShape(m),y,r.dtype);g=n.makeTensorInfo(y,r.dtype);n.texData.get(g.dataId).values=t}else g=function(e,t,n,s){const r=Us.sizeFromShape(t),a=NN({inputs:{x:e},attrs:{shape:[Us.sizeFromShape(e.shape)/r,r]},backend:s}),i=EN(a,e.dtype,"max",s),o=NN({inputs:{x:i},attrs:{shape:n},backend:s});return s.disposeIntermediateTensorInfo(a),s.disposeIntermediateTensorInfo(i),o}(d,m,y,n);return h&&n.disposeIntermediateTensorInfo(d),g}const iE={kernelName:sn,backendName:"webgl",kernelFunc:aE},oE=TS({opSnippet:"\n  if (isnan(a)) return a;\n  if (isnan(b)) return b;\n\n  return max(a, b);\n",packedOpSnippet:"\n  vec4 result = vec4(max(a, b));\n  vec4 isNaN = min(vec4(isnan(a)) + vec4(isnan(b)), vec4(1.0));\n  \n  result.r = isNaN.r > 0. ? NAN : result.r;\n  result.g = isNaN.g > 0. ? NAN : result.g;\n  result.b = isNaN.b > 0. ? NAN : result.b;\n  result.a = isNaN.a > 0. ? NAN : result.a;\n\n  return result;\n",cpuKernelImpl:ZS}),lE={kernelName:rn,backendName:"webgl",kernelFunc:oE};const uE={kernelName:an,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{x:r}=t;rS(r,"maxPool");const{filterSize:a,strides:i,pad:o,dimRoundingMode:l}=s;Us.assert(Bl.eitherStridesOrDilationsAreOne(i,1),(()=>`Error in maxPool: Either strides or dilations must be 1. Got strides ${i} and dilations '1'`));const u=Bl.computePool2DInfo(r.shape,a,i,1,o,l);if(1===u.filterWidth&&1===u.filterHeight&&Us.arraysEqual(u.inShape,u.outShape))return hS({inputs:{x:r},backend:n});const c=new gT(u,"max",!1);return n.runWebGLProgram(c,[r],r.dtype)}};const cE={kernelName:ln,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{x:r}=t,{filterSize:a,strides:i,pad:o,dataFormat:l,dimRoundingMode:u}=s,c=Bl.computePool3DInfo(r.shape,a,i,[1,1,1],o,u,l),h=new yT(c,"max",!1);return n.runWebGLProgram(h,[r],r.dtype)}};class hE{constructor(e){this.variableNames=["dy","maxPos"],this.outputShape=e.inShape;const t=e.strideHeight,n=e.strideWidth,s=e.dilationHeight,r=e.effectiveFilterHeight,a=e.effectiveFilterWidth,i=r-1-e.padInfo.top,o=a-1-e.padInfo.left,l=r*a-1;this.userCode=`\n      const ivec2 pads = ivec2(${i}, ${o});\n\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int b = coords[0];\n        int d = coords[3];\n\n        ivec2 dyRCCorner = coords.yz - pads;\n        int dyRCorner = dyRCCorner.x;\n        int dyCCorner = dyRCCorner.y;\n\n        // Convolve dy(?, ?, d) with pos mask(:, :, d) to get dx(xR, xC, d).\n        // ? = to be determined. : = across all values in that axis.\n        float dotProd = 0.0;\n        for (int wR = 0; wR < ${r};\n          wR += ${s}) {\n          float dyR = float(dyRCorner + wR) / ${t}.0;\n\n          if (dyR < 0.0 || dyR >= ${e.outHeight}.0 || fract(dyR) > 0.0) {\n            continue;\n          }\n          int idyR = int(dyR);\n\n          for (int wC = 0; wC < ${a}; wC++) {\n            float dyC = float(dyCCorner + wC) / ${n}.0;\n\n            if (dyC < 0.0 || dyC >= ${e.outWidth}.0 ||\n                fract(dyC) > 0.0) {\n              continue;\n            }\n            int idyC = int(dyC);\n\n            float dyValue = getDy(b, idyR, idyC, d);\n            int maxPosValue = ${l} - int(getMaxPos(b, idyR, idyC, d));\n\n            // Get the current value, check it against the value from the\n            // position matrix.\n            int curPosValue = wR * ${a} + wC;\n            float mask = float(maxPosValue == curPosValue ? 1.0 : 0.0);\n\n            dotProd += dyValue * mask;\n          }\n        }\n        setOutput(dotProd);\n      }\n    `}}class pE{constructor(e){this.variableNames=["dy","maxPos"],this.outputShape=e.inShape;const t=e.strideDepth,n=e.strideHeight,s=e.strideWidth,r=e.dilationDepth,a=e.dilationHeight,i=e.dilationWidth,o=e.effectiveFilterDepth,l=e.effectiveFilterHeight,u=e.effectiveFilterWidth,c=o-1-e.padInfo.front,h=l-1-e.padInfo.top,p=u-1-e.padInfo.left,d=o*l*u-1;this.userCode=`\n      const ivec3 pads = ivec3(${c}, ${h}, ${p});\n\n      void main() {\n        ivec5 coords = getOutputCoords();\n        int batch = coords.x;\n        int ch = coords.u;\n\n        ivec3 dyCorner = ivec3(coords.y, coords.z, coords.w) - pads;\n        int dyDCorner = dyCorner.x;\n        int dyRCorner = dyCorner.y;\n        int dyCCorner = dyCorner.z;\n\n        // Convolve dy(?, ?, ?, ch) with pos mask(:, :, :, d) to get\n        // dx(xD, xR, xC, ch).\n        // ? = to be determined. : = across all values in that axis.\n        float dotProd = 0.0;\n\n        for (int wD = 0; wD < ${o};\n           wD += ${r}) {\n          float dyD = float(dyDCorner + wD) / ${t}.0;\n\n          if (dyD < 0.0 || dyD >= ${e.outDepth}.0 || fract(dyD) > 0.0) {\n            continue;\n          }\n          int idyD = int(dyD);\n\n          for (int wR = 0; wR < ${l};\n              wR += ${a}) {\n            float dyR = float(dyRCorner + wR) / ${n}.0;\n\n            if (dyR < 0.0 || dyR >= ${e.outHeight}.0 ||\n                fract(dyR) > 0.0) {\n              continue;\n            }\n            int idyR = int(dyR);\n\n            for (int wC = 0; wC < ${u};\n                wC += ${i}) {\n              float dyC = float(dyCCorner + wC) / ${s}.0;\n\n              if (dyC < 0.0 || dyC >= ${e.outWidth}.0 ||\n                  fract(dyC) > 0.0) {\n                continue;\n              }\n              int idyC = int(dyC);\n\n              float dyValue = getDy(batch, idyD, idyR, idyC, ch);\n              int maxPosValue = ${d} -\n                  int(getMaxPos(batch, idyD, idyR, idyC, ch));\n\n              // Get the current value, check it against the value from the\n              // position matrix.\n              int curPosValue =\n                  wD * ${l} * ${u} +\n                  wR * ${u} + wC;\n              float mask = float(maxPosValue == curPosValue ? 1.0 : 0.0);\n\n              dotProd += dyValue * mask;\n            }\n          }\n        }\n        setOutput(dotProd);\n      }\n    `}}const dE={kernelName:un,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{dy:r,input:a}=t,i=a,{filterSize:o,strides:l,pad:u,dimRoundingMode:c}=s,h=Bl.computePool3DInfo(i.shape,o,l,[1,1,1],u,c),p=new yT(h,"max",!0),d=n.runWebGLProgram(p,[i],i.dtype),f=new pE(h),m=n.runWebGLProgram(f,[r,d],i.dtype);return n.disposeIntermediateTensorInfo(d),m}};const fE={kernelName:on,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{dy:r,input:a,output:i}=t,o=a;rS([a,i],"maxPoolGrad");const{filterSize:l,strides:u,pad:c,dimRoundingMode:h}=s,p=Bl.computePool2DInfo(o.shape,l,u,1,c,h),d=new gT(p,"max",!0),f=n.runWebGLProgram(d,[o],o.dtype),m=new hE(p),g=n.runWebGLProgram(m,[r,f],o.dtype);return n.disposeIntermediateTensorInfo(f),g}};const mE={kernelName:cn,backendName:"webgl",kernelFunc:({inputs:e,attrs:t,backend:n})=>{const{x:s}=e,{filterSize:r,strides:a,pad:i,includeBatchInIndex:o}=t,l=n;Us.assert(4===s.shape.length,(()=>`Error in maxPool: input must be rank 4 but got rank ${s.shape.length}.`));const u=[1,1];Us.assert(Bl.eitherStridesOrDilationsAreOne(a,u),(()=>`Error in maxPool: Either strides or dilations must be 1. Got strides ${a} and dilations '${u}'`));const c=Bl.computePool2DInfo(s.shape,r,a,u,i),[h,p]=function(e,t,n,s){let r=new gT(n,"max",!1);const a=s.runWebGLProgram(r,[e],"float32");return r=new gT(n,"max",!0,!0,t),[a,s.runWebGLProgram(r,[e],"float32")]}(s,o,c,l);return[h,p]}};const gE={kernelName:hn,backendName:"webgl",kernelFunc:({inputs:e,attrs:t,backend:n})=>{const{x:s}=e,{keepDims:r,axis:a}=t,i=n,o=s.shape.length,l=Us.parseAxisParam(a,s.shape);let u=l;const c=Bl.getAxesPermutation(u,o),h=null!=c,p=i.shouldExecuteOnCPU([s]),d=[];let f=s;if(h){if(p){const e=i.texData.get(f.dataId).values,t=new Array(o);for(let e=0;e<t.length;e++)t[e]=s.shape[c[e]];const n=xN(e,s.shape,s.dtype,c,t);f=i.makeTensorInfo(t,s.dtype);i.texData.get(f.dataId).values=n}else f=FN(s,c,i);d.push(f),u=Bl.getInnerMostAxes(u.length,o)}Bl.assertAxesAreInnerMostDims("sum",u,o);const[m,g]=Bl.computeOutAndReduceShapes(f.shape,u);let y=m;r&&(y=Bl.expandShapeToKeepDim(m,l));const b=function(e,t,n,s){const r=Us.sizeFromShape(t),a=NN({inputs:{x:e},attrs:{shape:[Us.sizeFromShape(e.shape)/r,r]},backend:s}),i=EN(a,"float32","mean",s),o=NN({inputs:{x:i},attrs:{shape:n},backend:s});return s.disposeIntermediateTensorInfo(a),s.disposeIntermediateTensorInfo(i),o}(f,g,y,i);for(const e of d)i.disposeIntermediateTensorInfo(e);return b}};const yE={kernelName:pn,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{x:r}=t,{axis:a,keepDims:i}=s,o=r.shape.length,l=Us.parseAxisParam(a,r.shape);let u=l;const c=Bl.getAxesPermutation(u,o);let h=r;null!=c&&(h=ON({inputs:{x:r},backend:n,attrs:{perm:c}}),u=Bl.getInnerMostAxes(u.length,r.shape.length)),Bl.assertAxesAreInnerMostDims("min",u,o);const[p,d]=Bl.computeOutAndReduceShapes(h.shape,u),f=NN({inputs:{x:h},backend:n,attrs:{shape:[-1,Us.sizeFromShape(d)]}}),m=EN(f,f.dtype,"min",n);let g;if(i){g=NN({inputs:{x:m},backend:n,attrs:{shape:Bl.expandShapeToKeepDim(p,l)}})}else g=NN({inputs:{x:m},backend:n,attrs:{shape:p}});return n.disposeIntermediateTensorInfo(f),n.disposeIntermediateTensorInfo(m),null!=c&&n.disposeIntermediateTensorInfo(h),g}},bE=TS({opSnippet:"\n  if (isnan(a)) return a;\n  if (isnan(b)) return b;\n\n  return min(a, b);\n",packedOpSnippet:"\n  vec4 result = vec4(min(a, b));\n  vec4 isNaN = min(vec4(isnan(a)) + vec4(isnan(b)), vec4(1.0));\n  \n  result.r = isNaN.r > 0. ? NAN : result.r;\n  result.g = isNaN.g > 0. ? NAN : result.g;\n  result.b = isNaN.b > 0. ? NAN : result.b;\n  result.a = isNaN.a > 0. ? NAN : result.a;\n\n  return result;\n",cpuKernelImpl:JS}),xE={kernelName:dn,backendName:"webgl",kernelFunc:bE};class wE{constructor(e,t,n){this.variableNames=["x"],this.outputShape=t.map(((t,n)=>t[0]+e[n]+t[1]));const s=e.length,r=wI(s),a=t.map((e=>e[0])).join(","),i=t.map(((t,n)=>t[0]+e[n])).join(","),o=["coords[0]","coords[1]","coords[2]","coords[3]"].slice(0,s),l="reflect"===n?0:1;this.userCode=1!==s?`\n      ${r} start = ${r}(${a});\n      ${r} end = ${r}(${i});\n\n      void main() {\n        ${r} outC = getOutputCoords();\n        for (int i = 0; i < ${s}; i++) {\n          if (outC[i] < start[i]) {\n            outC[i] = start[i] * 2 - outC[i] - ${l};\n          } else if(outC[i] >= end[i]) {\n            outC[i] = (end[i] - 1) * 2 - outC[i] + ${l};\n          }\n        }\n        ${r} coords = outC - start;\n        setOutput(getX(${o}));\n      }\n    `:`\n        int start = ${a};\n        int end = ${i};\n\n        void main() {\n          int outC = getOutputCoords();\n          if (outC < start) {\n            outC = start * 2 - outC - ${l};\n          } else if(outC >= end) {\n            outC = (end - 1) * 2 - outC + ${l};\n          }\n          setOutput(getX(outC - start));\n        }\n      `}}class vE{constructor(e,t,n){this.variableNames=["x"],this.packedInputs=!0,this.packedOutput=!0,this.outputShape=t.map(((t,n)=>t[0]+e[n]+t[1]));const s=e.length,r=wI(s),a=t.map((e=>e[0])).join(","),i=t.map(((t,n)=>t[0]+e[n])).join(","),o=uS("rc",s),l=uS("source",s),u=`${o[s-1]} < ${this.outputShape[s-1]}`,c=1===s?"source":`vec2(${l.slice(-2).join()})`,h="reflect"===n?0:1;let p="";if(1===s){const e=`\n        ${r} source = rc;\n        if (source < start) {\n          source = start * 2 - source - ${h};\n        } else if (source >= end) {\n          source = (end - 1) * 2 - source + ${h};\n        }\n        source -= start;\n      `;p=`\n        ${r} rc = outputLoc;\n        ${e}\n        result[0] = getChannel(getX(${l.join()}), ${c});\n        ${o[s-1]} += 1;\n        if(${u}) {\n          ${e}\n          result[1] = getChannel(getX(${l.join()}), ${c});\n        }\n      `}else{const e=`\n        ${r} source = rc;\n        ${r} lt = ${r}(lessThan(source, start));\n        ${r} gte = ${r}(greaterThanEqual(source, end));\n        ${r} orig = 1 - (lt + gte);\n        source = orig * source +\n                lt * (start * 2 - source - ${h}) +\n                gte * ((end - 1) * 2 - source + ${h});\n        source -= start;\n      `;p=`\n        ${r} rc = outputLoc;\n        ${e}\n        result[0] = getChannel(getX(${l.join()}), ${c});\n        ${o[s-1]} += 1;\n        if(${u}) {\n          ${e}\n          result[1] = getChannel(getX(${l.join()}), ${c});\n        }\n        rc = outputLoc;\n        ${o[s-2]} += 1;\n        if(${o[s-2]} < ${this.outputShape[s-2]}) {\n          ${e}\n          result[2] = getChannel(getX(${l.join()}), ${c});\n          ${o[s-1]} += 1;\n          if(${u}) {\n            ${e}\n            result[3] = getChannel(getX(${l.join()}), ${c});\n          }\n        }\n      `}this.userCode=`\n      const ${r} start = ${r}(${a});\n      const ${r} end = ${r}(${i});\n\n      void main() {\n        ${r} outputLoc = getOutputCoords();\n        vec4 result = vec4(0.);\n        ${p}\n        setOutput(result);\n      }\n    `}}const kE={kernelName:fn,backendName:"webgl",kernelFunc:({inputs:e,backend:t,attrs:n})=>{const{x:s}=e,{paddings:r,mode:a}=n,i=le().getBool("WEBGL_PACK_ARRAY_OPERATIONS")?new vE(s.shape,r,a):new wE(s.shape,r,a);return t.runWebGLProgram(i,[s],s.dtype)}},IE=TS({opSnippet:"if (b == 0.0) return NAN;\n  return mod(a, b);",packedOpSnippet:"\n  vec4 result = mod(a, b);\n  vec4 isNaN = vec4(equal(b, vec4(0.0)));\n  \n  result.r = isNaN.r > 0. ? NAN : result.r;\n  result.g = isNaN.g > 0. ? NAN : result.g;\n  result.b = isNaN.b > 0. ? NAN : result.b;\n  result.a = isNaN.a > 0. ? NAN : result.a;\n\n  return result;\n"}),SE={kernelName:mn,backendName:"webgl",kernelFunc:IE};class NE{constructor(e,t,n){this.variableNames=["probs"],this.customUniforms=[{name:"seed",type:"float"}],this.outputShape=[e,n],this.userCode=`\n      void main() {\n        ivec2 coords = getOutputCoords();\n        int batch = coords[0];\n\n        float r = random(seed);\n        float cdf = 0.0;\n\n        for (int i = 0; i < ${t-1}; i++) {\n          cdf += getProbs(batch, i);\n\n          if (r < cdf) {\n            setOutput(float(i));\n            return;\n          }\n        }\n\n        // If no other event happened, last event happened.\n        setOutput(float(${t-1}));\n      }\n    `}}const TE=TS({opSnippet:"\nif (a == b) {\n  return 1.0;\n};\nreturn a / b;",packedOpSnippet:"\n  // vec4 one = vec4(equal(a, b));\n  // return one + (vec4(1.0) - one) * a / b;\n  vec4 result = a / b;\n  if(a.x == b.x) {\n    result.x = 1.;\n  }\n  if(a.y == b.y) {\n    result.y = 1.;\n  }\n  if(a.z == b.z) {\n    result.z = 1.;\n  }\n  if(a.w == b.w) {\n    result.w = 1.;\n  }\n\n  return result;\n",checkOutOfBounds:!0}),CE={kernelName:vt,backendName:"webgl",kernelFunc:TE},$E="return a - b;",EE=TS({opSnippet:$E,packedOpSnippet:$E,supportsComplex:!0,cpuKernelImpl:gN}),AE={kernelName:fs,backendName:"webgl",kernelFunc:EE};function RE(e){const{inputs:t,backend:n,attrs:s}=e,{logits:r}=t,{dim:a}=s,i=Us.parseAxisParam([a],r.shape),o=aE({inputs:{x:r},backend:n,attrs:{reductionIndices:i,keepDims:!1}}),l=Bl.expandShapeToKeepDim(o.shape,i),u=NN({inputs:{x:o},backend:n,attrs:{shape:l}}),c=EE({inputs:{a:r,b:u},backend:n}),h=ZC({inputs:{x:c},backend:n}),p=DN({inputs:{x:h},backend:n,attrs:{axis:i,keepDims:!1}}),d=NN({inputs:{x:p},backend:n,attrs:{shape:l}}),f=TE({inputs:{a:h,b:d},backend:n});return n.disposeIntermediateTensorInfo(o),n.disposeIntermediateTensorInfo(u),n.disposeIntermediateTensorInfo(c),n.disposeIntermediateTensorInfo(h),n.disposeIntermediateTensorInfo(p),n.disposeIntermediateTensorInfo(d),f}const FE={kernelName:ns,backendName:"webgl",kernelFunc:RE};const DE={kernelName:gn,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{logits:r}=t,{numSamples:a,seed:i,normalized:o}=s,l=o?r:RE({inputs:{logits:r},backend:n,attrs:{dim:r.shape.length-1}}),u=l.shape[0],c=l.shape[1],h=new NE(u,c,a),p=[[i]],d=n.runWebGLProgram(h,[l],"int32",p);return o||n.disposeIntermediateTensorInfo(l),d}};const _E={kernelName:bn,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n}=e,{x:s}=t;if(n.shouldExecuteOnCPU([s])){const e=n.texData.get(s.dataId),[t,r]=eN(e.values,s.shape,s.dtype);return n.makeTensorInfo(r,s.dtype,t)}let r;return r=le().getBool("WEBGL_PACK_UNARY_OPERATIONS")?new SS(s.shape,"\n  vec4 result = -x;\n  bvec4 isNaN = isnan(x);\n\n  result.r = isNaN.r ? x.r : result.r;\n  result.g = isNaN.g ? x.g : result.g;\n  result.b = isNaN.b ? x.b : result.b;\n  result.a = isNaN.a ? x.a : result.a;\n\n  return result;\n"):new vS(s.shape,"if (isnan(x)) return x;\n  return -x;\n"),n.runWebGLProgram(r,[s],s.dtype)}},OE=Uc.nonMaxSuppressionV3Impl;const ME={kernelName:wn,backendName:"webgl",kernelFunc:function(e){Bl.warn("tf.nonMaxSuppression() in webgl locks the UI thread. Call tf.nonMaxSuppressionAsync() instead");const{inputs:t,backend:n,attrs:s}=e,{boxes:r,scores:a}=t,{maxOutputSize:i,iouThreshold:o,scoreThreshold:l}=s,u=n.readSync(r.dataId),c=n.readSync(a.dataId),{selectedIndices:h}=OE(u,c,i,o,l);return n.makeTensorInfo([h.length],"int32",new Int32Array(h))}},LE=Uc.nonMaxSuppressionV4Impl;const zE={kernelName:vn,backendName:"webgl",kernelFunc:function(e){Bl.warn("tf.nonMaxSuppression() in webgl locks the UI thread. Call tf.nonMaxSuppressionAsync() instead");const{inputs:t,backend:n,attrs:s}=e,{boxes:r,scores:a}=t,{maxOutputSize:i,iouThreshold:o,scoreThreshold:l,padToMaxOutputSize:u}=s,c=n.readSync(r.dataId),h=n.readSync(a.dataId),{selectedIndices:p,validOutputs:d}=LE(c,h,i,o,l,u);return[n.makeTensorInfo([p.length],"int32",new Int32Array(p)),n.makeTensorInfo([],"int32",new Int32Array([d]))]}},BE=Uc.nonMaxSuppressionV5Impl;const PE={kernelName:kn,backendName:"webgl",kernelFunc:function(e){Bl.warn("tf.nonMaxSuppression() in webgl locks the UI thread. Call tf.nonMaxSuppressionAsync() instead");const{inputs:t,backend:n,attrs:s}=e,{boxes:r,scores:a}=t,{maxOutputSize:i,iouThreshold:o,scoreThreshold:l,softNmsSigma:u}=s,c=n.readSync(r.dataId),h=n.readSync(a.dataId),p=i,d=o,f=l,m=u,{selectedIndices:g,selectedScores:y}=BE(c,h,p,d,f,m);return[n.makeTensorInfo([g.length],"int32",new Int32Array(g)),n.makeTensorInfo([y.length],"float32",new Float32Array(y))]}};class WE{constructor(e,t,n,s){this.variableNames=["indices"],this.outputShape=[e,t],this.userCode=`\n      void main() {\n        ivec2 coords = getOutputCoords();\n        int index = round(getIndices(coords.x));\n        setOutput(mix(float(${s}), float(${n}),\n                      float(index == coords.y)));\n      }\n    `}}const UE={kernelName:Sn,backendName:"webgl",kernelFunc:e=>{const{inputs:t,backend:n,attrs:s}=e,{indices:r}=t,{depth:a,onValue:i,offValue:o}=s,l=Us.sizeFromShape(r.shape),u=new WE(l,a,i,o),c=NN({inputs:{x:r},backend:n,attrs:{shape:[l]}}),h=n.runWebGLProgram(u,[c],r.dtype);n.disposeIntermediateTensorInfo(c);const p=NN({inputs:{x:h},backend:n,attrs:{shape:[...r.shape,a]}});return n.disposeIntermediateTensorInfo(h),p}};function VE(e){const{inputs:t,backend:n}=e,{x:s}=t;if("complex64"===s.dtype){const e=zT({inputs:{input:s},backend:n}),t=VE({inputs:{x:e},backend:n}),r=QT({inputs:{input:s},backend:n}),a=VE({inputs:{x:r},backend:n}),i=dS({inputs:{real:t,imag:a},backend:n});return n.disposeIntermediateTensorInfo(e),n.disposeIntermediateTensorInfo(t),n.disposeIntermediateTensorInfo(r),n.disposeIntermediateTensorInfo(a),i}return l$({attrs:{shape:s.shape,dtype:s.dtype,value:"string"===s.dtype?"":0},backend:n})}const GE={kernelName:Ss,backendName:"webgl",kernelFunc:VE};const HE={kernelName:In,backendName:"webgl",kernelFunc:function e(t){const{inputs:n,backend:s}=t,{x:r}=n;if("string"===r.dtype)throw new Error("onesLike is not supported under string dtype");if("complex64"===r.dtype){const t=zT({inputs:{input:r},backend:s}),n=e({inputs:{x:t},backend:s}),a=QT({inputs:{input:r},backend:s}),i=VE({inputs:{x:a},backend:s}),o=dS({inputs:{real:n,imag:i},backend:s});return s.disposeIntermediateTensorInfo(t),s.disposeIntermediateTensorInfo(n),s.disposeIntermediateTensorInfo(a),s.disposeIntermediateTensorInfo(i),o}return l$({attrs:{shape:r.shape,dtype:r.dtype,value:1},backend:s})}};const jE={kernelName:Nn,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{axis:r}=s;if(1===t.length)return QC({inputs:{input:t[0]},backend:n,attrs:{dim:r}});const a=t[0].shape,i=t[0].dtype;t.forEach((e=>{Us.assertShapesMatch(a,e.shape,"All tensors passed to stack must have matching shapes"),Us.assert(i===e.dtype,(()=>"All tensors passed to stack must have matching dtypes"))}));const o=[],l=nC({inputs:t.map((e=>{const t=QC({inputs:{input:e},backend:n,attrs:{dim:r}});return o.push(t),t})),backend:n,attrs:{axis:r}});return o.forEach((e=>n.disposeIntermediateTensorInfo(e))),l}};class qE{constructor(e,t,n){this.variableNames=["x"],this.customUniforms=[{name:"value",type:"float"}],this.outputShape=t.map(((t,n)=>t[0]+e[n]+t[1]));const s=e.length,r=wI(s),a=t.map((e=>e[0])).join(","),i=t.map(((t,n)=>t[0]+e[n])).join(","),o=["coords[0]","coords[1]","coords[2]","coords[3]"].slice(0,s);this.userCode=1!==s?`\n      ${r} start = ${r}(${a});\n      ${r} end = ${r}(${i});\n\n      void main() {\n        ${r} outC = getOutputCoords();\n        if (any(lessThan(outC, start)) || any(greaterThanEqual(outC, end))) {\n          setOutput(value);\n        } else {\n          ${r} coords = outC - start;\n          setOutput(getX(${o}));\n        }\n      }\n    `:`\n        int start = ${a};\n        int end = ${i};\n\n        void main() {\n          int outC = getOutputCoords();\n          if (outC < start || outC >= end) {\n            setOutput(value);\n          } else {\n            setOutput(getX(outC - start));\n          }\n        }\n      `}}class KE{constructor(e,t,n){this.variableNames=["x"],this.packedInputs=!0,this.packedOutput=!0,this.customUniforms=[{name:"value",type:"float"}],this.outputShape=t.map(((t,n)=>t[0]+e[n]+t[1]));const s=e.length,r=wI(s),a=t.map((e=>e[0])).join(","),i=t.map(((t,n)=>t[0]+e[n])).join(","),o=uS("rc",s),l=uS("source",s),u=`${o[s-1]} < ${this.outputShape[s-1]}`,c=1===s?"source":`vec2(${l.slice(-2).join()})`,h=[`${r} rc = outputLoc;`,`${o[s-1]} += 1;\n       if(${u}) {\n      `,1===s?"":`}\n       rc = outputLoc;\n       ${o[s-2]} += 1;\n       if(${o[s-2]} < ${this.outputShape[s-2]}) {`,1===s?"":`  ${o[s-1]} += 1;\n         if(${u}) {`],p=1===s?"rc < start || rc >= end":"any(lessThan(rc, start)) || any(greaterThanEqual(rc, end))";let d="";for(let e=0,t=1===s?2:4;e<t;e++)d+=`\n        ${h[e]}\n        if (${p}) {\n          result[${e}] = float(value);\n        } else {\n          ${r} source = rc - start;\n          result[${e}] = getChannel(getX(${l.join()}), ${c});\n        }\n      `;d+=1===s?"} ":"}}",this.userCode=`\n      const ${r} start = ${r}(${a});\n      const ${r} end = ${r}(${i});\n\n      void main() {\n        ${r} outputLoc = getOutputCoords();\n        vec4 result = vec4(0.);\n        ${d}\n        setOutput(result);\n      }\n    `}}const XE=e=>{const{inputs:t,backend:n,attrs:s}=e,{x:r}=t,{paddings:a,constantValue:i}=s;if(0===Us.sizeFromShape(r.shape)){return l$({backend:n,attrs:{shape:a.map(((e,t)=>e[0]+r.shape[t]+e[1])),value:i,dtype:r.dtype}})}const o=le().getBool("WEBGL_PACK_ARRAY_OPERATIONS")?new KE(r.shape,a,i):new qE(r.shape,a,i),l=[[i]];return n.runWebGLProgram(o,[r],r.dtype,l)},YE={kernelName:Tn,backendName:"webgl",kernelFunc:XE},ZE=TS({opSnippet:"\n  if(a < 0.0 && floor(b) < b){\n    return NAN;\n  }\n  if (b == 0.0) {\n    return 1.0;\n  }\n  return (round(mod(b, 2.0)) != 1) ?\n      pow(abs(a), b) : sign(a) * pow(abs(a), b);\n",packedOpSnippet:"\n  // isModRound1 has 1 for components with round(mod(b, 2.0)) == 1, 0 otherwise.\n  vec4 isModRound1 = vec4(equal(round(mod(b, 2.0)), ivec4(1)));\n  vec4 multiplier = sign(a) * isModRound1 + (vec4(1.0) - isModRound1);\n  vec4 result = multiplier * pow(abs(a), b);\n\n  // Ensure that a^0 = 1, including 0^0 = 1 as this correspond to TF and JS\n  bvec4 isExpZero = equal(b, vec4(0.0));\n  result.r = isExpZero.r ? 1.0 : result.r;\n  result.g = isExpZero.g ? 1.0 : result.g;\n  result.b = isExpZero.b ? 1.0 : result.b;\n  result.a = isExpZero.a ? 1.0 : result.a;\n\n  vec4 isNaN = vec4(lessThan(a, vec4(0.0))) * vec4(lessThan(floor(b), b));\n  \n  result.r = isNaN.r > 0. ? NAN : result.r;\n  result.g = isNaN.g > 0. ? NAN : result.g;\n  result.b = isNaN.b > 0. ? NAN : result.b;\n  result.a = isNaN.a > 0. ? NAN : result.a;\n\n  return result;\n"}),JE={kernelName:Cn,backendName:"webgl",kernelFunc:ZE};const QE={kernelName:En,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{x:r}=t,{axis:a,keepDims:i}=s,o=r.shape.length,l=[],u=Us.parseAxisParam(a,r.shape);let c=u;const h=Bl.getAxesPermutation(c,o);let p,d=r;if(null!=h&&(d=ON({inputs:{x:r},backend:n,attrs:{perm:h}}),c=Bl.getInnerMostAxes(c.length,o),l.push(d)),Bl.assertAxesAreInnerMostDims("prod",c,o),n.shouldExecuteOnCPU([d])){const e=n.texData.get(d.dataId).values,{outVals:t,outShape:s,outDtype:r}=nN(d.shape,d.dtype,e,c);p=n.makeTensorInfo(s,r,t)}else{const[e,t]=Bl.computeOutAndReduceShapes(d.shape,c),s=Us.sizeFromShape(t),a=NN({inputs:{x:d},backend:n,attrs:{shape:[-1,s]}}),i=EN(a,oa(r.dtype),"prod",n);p=NN({inputs:{x:i},backend:n,attrs:{shape:e}}),l.push(a),l.push(i)}if(i){l.push(p);const e=Bl.expandShapeToKeepDim(p.shape,u);p=NN({inputs:{x:p},backend:n,attrs:{shape:e}})}return l.forEach((e=>n.disposeIntermediateTensorInfo(e))),p}},eA=e=>{const{backend:t,attrs:n}=e,{start:s,stop:r,step:a,dtype:i}=n,o=sN(s,r,a,i);return t.makeTensorInfo([o.length],i,o)},tA={kernelName:An,backendName:"webgl",kernelFunc:eA},nA=NS({opSnippet:"return 1.0 / x;"}),sA={kernelName:Fn,backendName:"webgl",kernelFunc:nA},rA=NS({opSnippet:"if (isnan(x)) return x;\n  return (x < 0.0) ? 0.0 : x;\n",packedOpSnippet:"\n  vec4 result = x * vec4(greaterThanEqual(x, vec4(0.0)));\n  bvec4 isNaN = isnan(x);\n\n  result.r = isNaN.r ? x.r : result.r;\n  result.g = isNaN.g ? x.g : result.g;\n  result.b = isNaN.b ? x.b : result.b;\n  result.a = isNaN.a ? x.a : result.a;\n\n  return result;\n"}),aA={kernelName:Dn,backendName:"webgl",kernelFunc:rA},iA=NS({opSnippet:"if (isnan(x)) return x;\n  return (x < 0.0) ? 0.0 : min(6.0, x);\n",packedOpSnippet:"\n  vec4 result = min(x, vec4(6.)) * vec4(greaterThanEqual(x, vec4(0.0)));\n  bvec4 isNaN = isnan(x);\n\n  result.r = isNaN.r ? x.r : result.r;\n  result.g = isNaN.g ? x.g : result.g;\n  result.b = isNaN.b ? x.b : result.b;\n  result.a = isNaN.a ? x.a : result.a;\n\n  return result;\n"}),oA={kernelName:Bn,backendName:"webgl",kernelFunc:iA};class lA{constructor(e,t,n,s,r){this.variableNames=["A"],this.outputShape=[];const[a,i,o,l]=e;this.outputShape=[a,t,n,l];const u=[s&&t>1?i-1:i,s&&n>1?o-1:o],c=[s&&t>1?t-1:t,s&&n>1?n-1:n];let h;h=r?"(vec2(yRC) + vec2(0.5)) * effectiveInputOverOutputRatioRC - vec2(0.5)":"vec2(yRC) * effectiveInputOverOutputRatioRC",this.userCode=`\n      const vec2 effectiveInputOverOutputRatioRC = vec2(\n          ${u[0]/c[0]},\n          ${u[1]/c[1]});\n      const vec2 inputShapeRC = vec2(${i}.0, ${o}.0);\n\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int b = coords[0];\n        int d = coords[3];\n        ivec2 yRC = coords.yz;\n\n        // Fractional source index.\n        vec2 sourceFracIndexRC = ${h};\n\n        // Compute the four integer indices.\n        ivec2 sourceFloorRC = ivec2(max(sourceFracIndexRC, vec2(0.0)));\n        ivec2 sourceCeilRC = ivec2(\n          min(inputShapeRC - 1.0, ceil(sourceFracIndexRC)));\n\n        float topLeft = getA(b, sourceFloorRC.x, sourceFloorRC.y, d);\n        float bottomLeft = getA(b, sourceCeilRC.x, sourceFloorRC.y, d);\n        float topRight = getA(b, sourceFloorRC.x, sourceCeilRC.y, d);\n        float bottomRight = getA(b, sourceCeilRC.x, sourceCeilRC.y, d);\n\n        vec2 fracRC = sourceFracIndexRC - vec2(sourceFloorRC);\n\n        float top = topLeft + (topRight - topLeft) * fracRC.y;\n        float bottom = bottomLeft + (bottomRight - bottomLeft) * fracRC.y;\n        float newValue = top + (bottom - top) * fracRC.x;\n\n        setOutput(newValue);\n      }\n    `}}class uA{constructor(e,t,n,s,r){this.variableNames=["A"],this.packedInputs=!0,this.packedOutput=!0,this.outputShape=[];const[a,i,o,l]=e;this.outputShape=[a,t,n,l];const u=[s&&t>1?i-1:i,s&&n>1?o-1:o],c=[s&&t>1?t-1:t,s&&n>1?n-1:n];let h;h=r?"(vec3(yRC) + vec3(0.5)) * effectiveInputOverOutputRatioRC - vec3(0.5)":"vec3(yRC) * effectiveInputOverOutputRatioRC",this.userCode=`\n      const vec3 effectiveInputOverOutputRatioRC = vec3(\n          ${u[0]/c[0]},\n          ${u[1]/c[1]},\n          ${u[1]/c[1]});\n      const vec3 inputShapeRC = vec3(${i}.0, ${o}.0,\n                                     ${o}.0);\n\n      float getAValue(int b, int r, int c, int d) {\n        return getChannel(getA(b, r, c, d), vec2(c, d));\n      }\n\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int b = coords[0];\n        int d = coords[3];\n        // Calculate values for next column in yRC.z.\n        ivec3 yRC = coords.yzz + ivec3(0, 0, 1);\n\n        // Fractional source index.\n        vec3 sourceFracIndexRC = ${h};\n\n        // Compute the four integer indices.\n        ivec3 sourceFloorRC = ivec3(max(sourceFracIndexRC, vec3(0.0)));\n        ivec3 sourceCeilRC = ivec3(\n          min(inputShapeRC - 1.0, ceil(sourceFracIndexRC)));\n\n        // Should we calculate next column and row elements in 2x2 packed cell.\n        bool hasNextCol = d < ${l-1};\n        bool hasNextRow = coords.z < ${n-1};\n\n        // In parallel, construct four corners for all four components in\n        // packed 2x2 cell.\n        vec4 topLeft = vec4(\n          getAValue(b, sourceFloorRC.x, sourceFloorRC.y, d),\n          hasNextCol ? getAValue(b, sourceFloorRC.x, sourceFloorRC.y, d + 1)\n                     : 0.0,\n          hasNextRow ? getAValue(b, sourceFloorRC.x, sourceFloorRC.z, d)\n                     : 0.0,\n          (hasNextRow && hasNextCol) ?\n            getAValue(b, sourceFloorRC.x, sourceFloorRC.z, d + 1) : 0.0);\n\n        vec4 bottomLeft = vec4(\n          getAValue(b, sourceCeilRC.x, sourceFloorRC.y, d),\n          hasNextCol ? getAValue(b, sourceCeilRC.x, sourceFloorRC.y, d + 1)\n                     : 0.0,\n          hasNextRow ? getAValue(b, sourceCeilRC.x, sourceFloorRC.z, d)\n                     : 0.0,\n          (hasNextRow && hasNextCol) ?\n            getAValue(b, sourceCeilRC.x, sourceFloorRC.z, d + 1) : 0.0);\n\n        vec4 topRight = vec4(\n          getAValue(b, sourceFloorRC.x, sourceCeilRC.y, d),\n          hasNextCol ? getAValue(b, sourceFloorRC.x, sourceCeilRC.y, d + 1)\n                     : 0.0,\n          hasNextRow ? getAValue(b, sourceFloorRC.x, sourceCeilRC.z, d)\n                     : 0.0,\n          (hasNextRow && hasNextCol) ?\n            getAValue(b, sourceFloorRC.x, sourceCeilRC.z, d + 1) : 0.0);\n\n        vec4 bottomRight = vec4(\n          getAValue(b, sourceCeilRC.x, sourceCeilRC.y, d),\n          hasNextCol ? getAValue(b, sourceCeilRC.x, sourceCeilRC.y, d + 1)\n                     : 0.0,\n          hasNextRow ? getAValue(b, sourceCeilRC.x, sourceCeilRC.z, d)\n                     : 0.0,\n          (hasNextRow && hasNextCol) ?\n            getAValue(b, sourceCeilRC.x, sourceCeilRC.z, d + 1) : 0.0);\n\n        vec3 fracRC = sourceFracIndexRC - vec3(sourceFloorRC);\n\n        vec4 top = mix(topLeft, topRight, fracRC.yyzz);\n        vec4 bottom = mix(bottomLeft, bottomRight, fracRC.yyzz);\n        vec4 newValue = mix(top, bottom, fracRC.x);\n\n        setOutput(newValue);\n      }\n    `}}const cA={kernelName:Ln,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{images:r}=t,{alignCorners:a,halfPixelCenters:i,size:o}=s,[l,u]=o,c=le().getBool("WEBGL_PACK_IMAGE_OPERATIONS")?new uA(r.shape,l,u,a,i):new lA(r.shape,l,u,a,i);return n.runWebGLProgram(c,[r],"float32")}};class hA{constructor(e,t,n){this.variableNames=["dy"],this.outputShape=[],this.outputShape=t;const[,s,r]=t,[,a,i]=e,o=[n&&a>1?s-1:s,n&&i>1?r-1:r],l=[n&&a>1?a-1:a,n&&i>1?i-1:i],u=o[0]/l[0],c=o[1]/l[1],h=1/u,p=1/c,d=2*Math.ceil(h)+2,f=2*Math.ceil(p)+2;this.userCode=`\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int b = coords[0];\n        int d = coords[3];\n        int r = coords[1];\n        int c = coords[2];\n\n        float accumulator = 0.0;\n\n        const float heightScale = float(${u});\n        const float widthScale = float(${c});\n\n        const float invHeightScale = float(${h});\n        const float invWidthScale = float(${p});\n\n        const int winHeight = int(${d});\n        const int winWidth = int(${f});\n\n        // Compute bounds for where in dy we will look\n        float startRLerp = floor(float(r) * invHeightScale);\n        int startDyR = int(startRLerp - float(winHeight / 2));\n\n        float startCLerp = floor(float(c) * invWidthScale);\n        int startDyC = int(startCLerp - float(winWidth / 2));\n\n        // Loop over dy\n        for (int dyROffset = 0; dyROffset < winHeight; dyROffset++) {\n          int dyR = dyROffset + startDyR;\n\n          // Guard against the window exceeding the bounds of dy\n          if (dyR < 0 || dyR >= ${a}) {\n            continue;\n          }\n\n          for (int dyCOffset = 0; dyCOffset < winWidth; dyCOffset++) {\n            int dyC = dyCOffset + startDyC;\n\n            // Guard against the window exceeding the bounds of dy\n            if (dyC < 0 || dyC >= ${i}) {\n              continue;\n            }\n\n            float dxR = float(dyR) * heightScale;\n            int topDxRIndex = int(floor(dxR));\n            int bottomDxRIndex = int(min(ceil(dxR), ${s-1}.0));\n            float dxRLerp = dxR - float(topDxRIndex);\n            float inverseDxRLerp = 1.0 - dxRLerp;\n\n            float dxC = float(dyC) * widthScale;\n            int leftDxCIndex = int(floor(dxC));\n            int rightDxCIndex = int(min(ceil(dxC), ${r-1}.0));\n            float dxCLerp = dxC - float(leftDxCIndex);\n            float inverseDxCLerp = 1.0 - dxCLerp;\n\n            if (r == topDxRIndex && c == leftDxCIndex) {\n              // topLeft\n              accumulator +=\n                getDy(b, dyR, dyC, d) * inverseDxRLerp * inverseDxCLerp;\n            }\n\n            if (r == topDxRIndex && c == rightDxCIndex) {\n              // topRight\n              accumulator += getDy(b, dyR, dyC, d) * inverseDxRLerp * dxCLerp;\n            }\n\n            if (r == bottomDxRIndex && c == leftDxCIndex) {\n              // bottomLeft\n              accumulator += getDy(b, dyR, dyC, d) * dxRLerp * inverseDxCLerp;\n            }\n\n            if (r == bottomDxRIndex && c == rightDxCIndex) {\n              // bottomRight\n              accumulator += getDy(b, dyR, dyC, d) * dxRLerp * dxCLerp;\n            }\n          }\n        }\n        // End loop over dy\n\n        setOutput(accumulator);\n      }\n    `}}const pA={kernelName:zn,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{images:r,dy:a}=t,{alignCorners:i}=s,o=new hA(a.shape,r.shape,i);return n.runWebGLProgram(o,[a],a.dtype)}};class dA{constructor(e,t,n,s,r){this.variableNames=["A"],this.outputShape=[];const[a,i,o,l]=e;this.outputShape=[a,t,n,l];const u=[s&&t>1?i-1:i,s&&n>1?o-1:o],c=[s&&t>1?t-1:t,s&&n>1?n-1:n],h=s?"0.5":"0.0";let p;p=r?"max((vec2(yRC) + vec2(0.5)) * effectiveInputOverOutputRatioRC, vec2(0.0))":"vec2(yRC) * effectiveInputOverOutputRatioRC",this.userCode=`\n      const vec2 effectiveInputOverOutputRatioRC = vec2(\n          ${u[0]/c[0]},\n          ${u[1]/c[1]});\n      const vec2 inputShapeRC = vec2(${i}.0, ${o}.0);\n\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int b = coords[0];\n        int d = coords[3];\n        ivec2 yRC = coords.yz;\n\n        // Fractional source index.\n        vec2 sourceFracIndexRC = ${p};\n\n        // Compute the coordinators of nearest neighbor point.\n        ivec2 sourceNearestRC = ivec2(\n          min(inputShapeRC - 1.0, floor(sourceFracIndexRC + ${h})));\n        float newValue = getA(b, sourceNearestRC.x, sourceNearestRC.y, d);\n\n        setOutput(newValue);\n      }\n    `}}class fA{constructor(e,t,n,s,r){this.variableNames=["A"],this.packedInputs=!0,this.packedOutput=!0,this.outputShape=[];const[a,i,o,l]=e;this.outputShape=[a,t,n,l];const u=[s&&t>1?i-1:i,s&&n>1?o-1:o],c=[s&&t>1?t-1:t,s&&n>1?n-1:n],h=s?"0.5":"0.0";let p;p=r?"max((vec3(yRC) + vec3(0.5)) * effectiveInputOverOutputRatioRC, vec3(0.0))":"vec3(yRC) * effectiveInputOverOutputRatioRC",this.userCode=`\n      const vec3 effectiveInputOverOutputRatioRC = vec3(\n          ${u[0]/c[0]},\n          ${u[1]/c[1]},\n          ${u[1]/c[1]});\n      const vec3 inputShapeRC = vec3(${i}.0, ${o}.0,\n                                     ${o}.0);\n\n      float getAValue(int b, int r, int c, int d) {\n        return getChannel(getA(b, r, c, d), vec2(c, d));\n      }\n\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int b = coords[0];\n        int d = coords[3];\n        // Calculate values for next column in yRC.z.\n        ivec3 yRC = coords.yzz + ivec3(0, 0, 1);\n\n        // Fractional source index.\n        vec3 sourceFracIndexRC = ${p};\n\n        // Compute the coordinators of nearest neighbor point.\n        ivec3 sourceNearestRC = ivec3(\n          min(inputShapeRC - 1.0, floor(sourceFracIndexRC + ${h})));\n\n        // Should we calculate next column and row elements in 2x2 packed cell.\n        bool hasNextCol = d < ${l-1};\n        bool hasNextRow = coords.z < ${n-1};\n\n        vec4 newValue = vec4(\n          getAValue(b, sourceNearestRC.x, sourceNearestRC.y, d),\n          hasNextCol ? getAValue(b, sourceNearestRC.x, sourceNearestRC.y, d + 1)\n                     : 0.0,\n          hasNextRow ? getAValue(b, sourceNearestRC.x, sourceNearestRC.z, d)\n                     : 0.0,\n          (hasNextRow && hasNextCol) ?\n            getAValue(b, sourceNearestRC.x, sourceNearestRC.z, d + 1) : 0.0);\n\n        setOutput(newValue);\n      }\n    `}}const mA={kernelName:On,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{images:r}=t,{alignCorners:a,halfPixelCenters:i,size:o}=s,[l,u]=o,c=le().getBool("WEBGL_PACK_IMAGE_OPERATIONS")?new fA(r.shape,l,u,a,i):new dA(r.shape,l,u,a,i);return n.runWebGLProgram(c,[r],r.dtype)}};class gA{constructor(e,t,n){this.variableNames=["dy"],this.outputShape=[],this.outputShape=t;const[,s,r]=t,[,a,i]=e,o=[n&&a>1?s-1:s,n&&i>1?r-1:r],l=[n&&a>1?a-1:a,n&&i>1?i-1:i],u=o[0]/l[0],c=o[1]/l[1],h=1/u,p=1/c,d=2*Math.ceil(h)+2,f=2*Math.ceil(p)+2;this.userCode=`\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int b = coords[0];\n        int d = coords[3];\n        int r = coords[1];\n        int c = coords[2];\n\n        float accumulator = 0.0;\n\n        const float heightScale = float(${u});\n        const float widthScale = float(${c});\n\n        const float invHeightScale = float(${h});\n        const float invWidthScale = float(${p});\n\n        const int winHeight = int(${d});\n        const int winWidth = int(${f});\n\n        // Compute bounds for where in dy we will look\n        float startRLerp = floor(float(r) * invHeightScale);\n        int startDyR = int(floor(startRLerp - float(winHeight / 2)));\n\n        float startCLerp = floor(float(c) * invWidthScale);\n        int startDyC = int(floor(startCLerp - float(winWidth / 2)));\n\n        // Loop over dy\n        for (int dyROffset = 0; dyROffset < winHeight; dyROffset++) {\n          int dyR = dyROffset + startDyR;\n\n          // Guard against the window exceeding the bounds of dy\n          if (dyR < 0 || dyR >= ${a}) {\n            continue;\n          }\n\n          for (int dyCOffset = 0; dyCOffset < winWidth; dyCOffset++) {\n            int dyC = dyCOffset + startDyC;\n\n            // Guard against the window exceeding the bounds of dy\n            if (dyC < 0 || dyC >= ${i}) {\n              continue;\n            }\n\n            float sourceFracRow =\n              float(${o[0]}) *\n                (float(dyR) / float(${l[0]}));\n\n            float sourceFracCol =\n                float(${o[1]}) *\n                  (float(dyC) / float(${l[1]}));\n\n            int sourceNearestRow = int(min(\n                float(int(${s}) - 1),\n                ${n} ? float(round(sourceFracRow)) :\n                                  float(floor(sourceFracRow))));\n\n            int sourceNearestCol = int(min(\n                float(int(${r}) - 1),\n                ${n} ? float(round(sourceFracCol)) :\n                                  float(floor(sourceFracCol))));\n\n            if (r == sourceNearestRow && c == sourceNearestCol) {\n              accumulator += getDy(b, dyR, dyC, d);\n            }\n          }\n        }\n        // End loop over dy\n\n        setOutput(accumulator);\n      }\n    `}}const yA={kernelName:Mn,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{images:r,dy:a}=t,{alignCorners:i}=s,o=new gA(a.shape,r.shape,i);return n.runWebGLProgram(o,[a],a.dtype)}};class bA{constructor(e,t){this.variableNames=["x"];const n=e.length;if(n>4)throw new Error(`WebGL backend: Reverse of rank-${n} tensor is not yet supported`);if(this.outputShape=e,1===n)return void(this.userCode=`\n        void main() {\n          int coord = getOutputCoords();\n          setOutput(getX(${e[0]} - coord - 1));\n        }\n      `);const s=e.map(((n,s)=>(n=>-1!==t.indexOf(n)&&1!==e[n]?`${e[n]} - coords[${n}] - 1`:`coords[${n}]`)(s))).join(","),r=wI(n);this.userCode=`\n      void main() {\n        ${r} coords = getOutputCoords();\n        setOutput(getX(${s}));\n      }\n    `}}class xA{constructor(e,t){this.variableNames=["x"],this.packedInputs=!0,this.packedOutput=!0;const n=e.length;if(n>4)throw new Error(`WebGL backend: Reverse of rank-${n} tensor is not yet supported`);this.outputShape=e;const s=uS("rc",n),r=`${s[n-1]} + 1 < ${this.outputShape[n-1]}`,a=`${s[n-2]} + 1 < ${this.outputShape[n-2]}`,i=wI(n);var o;function l(n){const s=e.map(((s,r)=>function(n,s){return-1!==t.indexOf(n)&&1!==e[n]?`${e[n]} - ${s[n]} - 1`:`${s[n]}`}(r,n)));return`getChannel(getX(${s.join(",")}), vec2(${s.slice(-2).join(",")}))`}this.userCode=1===n?`\n        void main(){\n          int rc = getOutputCoords();\n          vec4 result = vec4(0.);\n          result.r = getChannel(getX(${e[0]} - rc - 1),\n            ${e[0]} - rc - 1);\n          if(${r}){\n              result.g = getChannel(getX(${e[0]} - (rc  + 1) - 1),\n                ${e[0]} - (rc  + 1) - 1);\n          }\n          setOutput(result);\n        }\n      `:`\n        void main() {\n          ${i} rc = getOutputCoords();\n          vec4 result = vec4(0.);\n          result.r = ${o=s.slice(),l(o)};\n          if(${r}){\n            result.g = ${function(e){return e[n-1]="("+e[n-1]+" + 1)",l(e)}(s.slice())};\n          }\n          if(${a}) {\n            result.b = ${function(e){return e[n-2]="("+e[n-2]+" + 1)",l(e)}(s.slice())};\n            if(${r}) {\n              result.a = ${function(e){return e[n-1]="("+e[n-1]+" + 1)",e[n-2]="("+e[n-2]+" + 1)",l(e)}(s.slice())};\n            }\n          }\n          setOutput(result);\n        }\n    `}}const wA={kernelName:Pn,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{x:r}=t,{dims:a}=s,i=r.shape.length,o=Us.parseAxisParam(a,r.shape);if(0===i)return hS({inputs:{x:r},backend:n});const l=le().getBool("WEBGL_PACK_ARRAY_OPERATIONS")?new xA(r.shape,o):new bA(r.shape,o);return n.runWebGLProgram(l,[r],r.dtype)}};class vA{constructor(e,t){this.variableNames=["Image"],this.outputShape=[],this.customUniforms=[{name:"params",type:"vec4"}];const n=e[1],s=e[2];this.outputShape=e;let r="";r="number"==typeof t?`float outputValue = ${t.toFixed(2)};`:`\n        vec3 fill = vec3(${t.join(",")});\n        float outputValue = fill[coords[3]];`,this.userCode=`\n        void main() {\n          ivec4 coords = getOutputCoords();\n          int x = coords[2];\n          int y = coords[1];\n          float coordXFloat = (float(x) - params[0]) * params[3] -\n            (float(y) - params[1]) * params[2];\n          float coordYFloat = (float(x) - params[0]) * params[2] +\n            (float(y) - params[1]) * params[3];\n          int coordX = int(round(coordXFloat + params[0]));\n          int coordY = int(round(coordYFloat + params[1]));\n          ${r}\n          if(coordX >= 0 && coordX < ${s} && coordY >= 0 && coordY < ${n}) {\n            outputValue = getImage(coords[0], coordY, coordX, coords[3]);\n          }\n          setOutput(outputValue);\n        }\n    `}}const kA={kernelName:Cs,backendName:"webgl",kernelFunc:({inputs:e,attrs:t,backend:n})=>{const{image:s}=e,{radians:r,fillValue:a,center:i}=t,o=n,l=new vA(s.shape,a),[u,c]=Bl.getImageCenter(i,s.shape[1],s.shape[2]),h=[[u,c,Math.sin(r),Math.cos(r)]];return o.runWebGLProgram(l,[s],s.dtype,h)}},IA=NS({opSnippet:"\n  // OpenGL ES does not support round function.\n  // The algorithm is based on banker's rounding.\n  float base = floor(x);\n  if ((x - base) < 0.5) {\n    return floor(x);\n  } else if ((x - base) > 0.5) {\n    return ceil(x);\n  } else {\n    if (mod(base, 2.0) == 0.0) {\n      return base;\n    } else {\n      return base + 1.0;\n    }\n  }\n"}),SA={kernelName:Wn,backendName:"webgl",kernelFunc:IA},NA=NS({opSnippet:"return inversesqrt(x);",cpuKernelImpl:rN}),TA={kernelName:Un,backendName:"webgl",kernelFunc:NA};class CA{constructor(e,t,n,s,r,a,i=!0){this.variableNames=["updates","indices","defaultValue"],this.outputShape=a;const o=wI(r.length),l=wI(a.length);let u="";1===n?u="i":2===n&&(u="i, j");const c=`getIndices(${u})`;let h="";1===s?h="i":2===s&&(h="i, coords[1]");const p=`getUpdates(${h})`,d=t>1?"strides[j]":"strides";this.userCode=`\n        ${o} strides = ${o}(${r});\n\n        void main() {\n          ${l} coords = getOutputCoords();\n          float sum = 0.0;\n          bool found = false;\n          for (int i = 0; i < ${e}; i++) {\n            int flattenedIndex = 0;\n            for (int j = 0; j < ${t}; j++) {\n              int index = round(${c});\n              flattenedIndex += index * ${d};\n            }\n            if (flattenedIndex == coords[0]) {\n              sum += ${p};\n              found = true;\n            }\n          }\n          setOutput(mix(getDefaultValue(), sum, float(found)));\n        }\n      `}}const $A={kernelName:Vn,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{indices:r,updates:a}=t,{shape:i}=s,{sliceRank:o,numUpdates:l,sliceSize:u,strides:c,outputSize:h}=Bl.calculateShapes(a,r,i),p=[h/u,u];if(0===h)return n.makeTensorInfo(i,r.dtype);const d=NN({inputs:{x:r},backend:n,attrs:{shape:[l,o]}}),f=NN({inputs:{x:a},backend:n,attrs:{shape:[l,u]}}),m=n.makeTensorInfo([],"float32",new Float32Array([0])),g=new CA(l,o,d.shape.length,f.shape.length,c,p),y=n.runWebGLProgram(g,[f,d,m],f.dtype),b=NN({inputs:{x:y},backend:n,attrs:{shape:i}});return n.disposeIntermediateTensorInfo(d),n.disposeIntermediateTensorInfo(f),n.disposeIntermediateTensorInfo(y),n.disposeIntermediateTensorInfo(m),b}};class EA{constructor(e,t,n){let s,r;if(this.variableNames=["c","a","b"],this.outputShape=t,n>4)throw Error(`Where for rank ${n} is not yet supported`);if(1===n)r="resRC",s="resRC";else{const n=["resRC.x","resRC.y","resRC.z","resRC.w"],a=[],i=[];for(let s=0;s<t.length;s++)i.push(`${n[s]}`),s<e&&a.push(`${n[s]}`);s=a.join(),r=i.join()}const a=wI(n);this.userCode=`\n      void main() {\n        ${a} resRC = getOutputCoords();\n        float cVal = getC(${s});\n        if (cVal >= 1.0) {\n          setOutput(getA(${r}));\n        } else {\n          setOutput(getB(${r}));\n        }\n      }\n    `}}const AA={kernelName:Gn,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n}=e,{condition:s,t:r,e:a}=t,i=new EA(s.shape.length,r.shape,r.shape.length);return n.runWebGLProgram(i,[s,r,a],ia(r.dtype,a.dtype))}},RA=NS({opSnippet:`\n  // Stable and Attracting Fixed Point (0, 1) for Normalized Weights.\n  // see: https://arxiv.org/abs/1706.02515\n  float scaleAlpha = ${Bl.SELU_SCALEALPHA};\n  float scale = ${Bl.SELU_SCALE};\n  return (x >= 0.0) ? scale * x : scaleAlpha * (exp(x) - 1.0);\n`}),FA={kernelName:Hn,backendName:"webgl",kernelFunc:RA},DA=NS({opSnippet:"if (isnan(x)) return x;\n  return 1.0 / (1.0 + exp(-1.0 * x));\n",packedOpSnippet:"\n  vec4 result = 1.0 / (1.0 + exp(-1.0 * x));\n  bvec4 isNaN = isnan(x);\n\n  result.r = isNaN.r ? x.r : result.r;\n  result.g = isNaN.g ? x.g : result.g;\n  result.b = isNaN.b ? x.b : result.b;\n  result.a = isNaN.a ? x.a : result.a;\n\n  return result;\n",cpuKernelImpl:aN}),_A={kernelName:Yn,backendName:"webgl",kernelFunc:DA},OA=NS({opSnippet:"\n  if (isnan(x)) { return 0.0; }\n  return sign(x);\n"}),MA={kernelName:Xn,backendName:"webgl",kernelFunc:OA},LA=NS({opSnippet:"if (isnan(x)) return x;\n  return sin(x);\n"}),zA={kernelName:qn,backendName:"webgl",kernelFunc:LA},BA=NS({opSnippet:"\n  float e2x = exp(x);\n  return (e2x - 1.0 / e2x) / 2.0;\n"}),PA={kernelName:Kn,backendName:"webgl",kernelFunc:BA},WA=NS({opSnippet:"\n  float epsilon = 1.1920928955078125e-7;\n  float threshold = log(epsilon) + 2.0;\n\n  bool too_large = x > -threshold;\n  bool too_small = x < threshold;\n\n  float result;\n  float exp_x = exp(x);\n\n  if (too_large){\n    result = x;\n  }\n  else if (too_small){\n    result = exp_x;\n  }\n  else{\n    result = log(exp_x + 1.0);\n  }\n  return result;\n"}),UA={kernelName:Zn,backendName:"webgl",kernelFunc:WA},VA={kernelName:es,backendName:"webgl",kernelFunc:e=>{const{inputs:t,backend:n,attrs:s}=e,{x:r}=t,{blockShape:a,paddings:i}=s;Us.assert(r.shape.length<=4,(()=>"spaceToBatchND for rank > 4 with a WebGL backend not implemented yet"));const o=a.reduce(((e,t)=>e*t)),l=[[0,0]];l.push(...i);for(let e=1+a.length;e<r.shape.length;++e)l.push([0,0]);const u=[],c=XE({inputs:{x:r},backend:n,attrs:{paddings:l,constantValue:0}}),h=Bl.getReshaped(c.shape,a,o,!1),p=Bl.getPermuted(h.length,a.length,!1),d=Bl.getReshapedPermuted(c.shape,a,o,!1),f=NN({inputs:{x:c},backend:n,attrs:{shape:h}}),m=ON({inputs:{x:f},backend:n,attrs:{perm:p}}),g=NN({inputs:{x:m},backend:n,attrs:{shape:d}});return u.push(c),u.push(f),u.push(m),u.forEach((e=>n.disposeIntermediateTensorInfo(e))),g}};const GA={kernelName:ss,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n}=e,{indices:s,values:r,denseShape:a,defaultValue:i}=t;if(1!==a.shape.length)throw new Error(`Dense shape must be a vector, saw:\n         ${a.shape}`);if(2!==s.shape.length)throw new Error(`Indices must be a matrix, saw:\n         ${s.shape}`);if(1!==r.shape.length)throw new Error(`Values must be a vector, saw:\n         ${r.shape}`);if(0!==i.shape.length)throw new Error(`Default value must be a scalar, saw:\n        ${i.shape}`);const o=n.readSync(s.dataId),l=n.readSync(r.dataId),u=n.readSync(a.dataId),c=n.readSync(i.dataId)[0],[h,p,d,f,m]=lN(o,s.shape,s.dtype,l,r.dtype,u,c);return[n.makeTensorInfo(p,s.dtype,h),n.makeTensorInfo([p[0]],r.dtype,d),n.makeTensorInfo([f.length],"bool",new Uint8Array(f.map((e=>Number(e))))),n.makeTensorInfo([m.length],s.dtype,new Int32Array(m))]}};const HA={kernelName:rs,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n}=e,{inputIndices:s,inputShape:r,newShape:a}=t;if(2!==s.shape.length)throw new Error(`Input indices should be a matrix but received shape ${s.shape}`);if(1!==r.shape.length)throw new Error(`Input shape should be a vector but received shape ${r.shape}`);if(1!==a.shape.length)throw new Error(`Target shape should be a vector but received shape ${a.shape}`);const i=Array.from(n.readSync(r.dataId)),o=n.readSync(s.dataId),l=Array.from(n.readSync(a.dataId)),[u,c,h]=uN(o,s.shape,s.dtype,i,l);return[n.makeTensorInfo(c,s.dtype,u),n.makeTensorInfo([h.length],a.dtype,new Int32Array(h))]}};const jA={kernelName:as,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n}=e,{data:s,indices:r,segmentIds:a}=t;if(s.shape.length<1)throw new Error("Data should be at least 1 dimensional but received scalar");if(1!==r.shape.length)throw new Error(`Indices should be a vector but received shape\n              ${r.shape}`);if(1!==a.shape.length)throw new Error(`Segment ids should be a vector but received shape\n              ${a.shape}`);const i=n.readSync(s.dataId),o=n.readSync(r.dataId),l=n.readSync(a.dataId),[u,c]=cN(i,s.shape,s.dtype,o,l,!0);return n.makeTensorInfo(c,s.dtype,u)}};const qA={kernelName:is,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n}=e,{data:s,indices:r,segmentIds:a}=t;if(s.shape.length<1)throw new Error("Data should be at least 1 dimensional but received scalar");if(1!==r.shape.length)throw new Error(`Indices should be a vector but received shape\n             ${r.shape}`);if(1!==a.shape.length)throw new Error(`Segment ids should be a vector but received shape\n             ${a.shape}`);const i=n.readSync(s.dataId),o=n.readSync(r.dataId),l=n.readSync(a.dataId),[u,c]=cN(i,s.shape,s.dtype,o,l);return n.makeTensorInfo(c,s.dtype,u)}};const KA={kernelName:os,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{sparseIndices:r,sparseValues:a,defaultValue:i}=t,{outputShape:o}=s,{sliceRank:l,numUpdates:u,strides:c,outputSize:h}=Bl.calculateShapes(a,r,o),p=new CA(u,l,r.shape.length,a.shape.length,c,[h,1],!1),d=n.runWebGLProgram(p,[a,r,i],a.dtype),f=NN({inputs:{x:d},backend:n,attrs:{shape:o}});return n.disposeIntermediateTensorInfo(d),f}};const XA={kernelName:ts,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{x:r}=t,{numOrSizeSplits:a,axis:i}=s,o=Us.parseAxisParam(i,r.shape)[0],l=Bl.prepareSplitSize(r,a,o),u=r.shape.length,c=new Array(u).fill(0),h=r.shape.slice();return l.map((e=>{const t=[...h];t[o]=e;const s=RT({inputs:{x:r},backend:n,attrs:{begin:c,size:t}});return c[o]+=e,s}))}},YA="return sqrt(x);",ZA=NS({opSnippet:YA,packedOpSnippet:YA,cpuKernelImpl:hN}),JA={kernelName:Jn,backendName:"webgl",kernelFunc:ZA},QA={kernelName:us,backendName:"webgl",kernelFunc:NS({opSnippet:"return x * x;"})},eR="return (a - b) * (a - b);",tR=TS({opSnippet:eR,packedOpSnippet:eR}),nR={kernelName:ls,backendName:"webgl",kernelFunc:tR};const sR={kernelName:Ns,backendName:"webgl",kernelFunc:function({inputs:e,attrs:t,backend:n}){const{x:s}=e,r=`if (isnan(x)) return x;\n    return x > 0.0 ? 1.0 : float(${t.alpha});\n  `,a=new vS(s.shape,r);return n.runWebGLProgram(a,[s],s.dtype)}};class rR{constructor(e,t,n){this.variableNames=["x"],this.outputShape=n;const s=n.length,r=wI(n.length),a=wI(n.length);let i="";if(1===s)i="coords * strides + begin";else{let e=0;i=n.map(((t,s)=>(e++,1===n.length?`coords * strides[${s}] + begin[${s}]`:`coords[${e-1}] * strides[${s}] + begin[${s}]`))).join(",")}this.userCode=`\n      ${r} begin = ${r}(${e});\n      ${r} strides = ${r}(${t});\n\n      void main() {\n        ${a} coords = getOutputCoords();\n        setOutput(getX(${i}));\n      }\n    `}}const aR={kernelName:cs,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{x:r}=t,{begin:a,end:i,strides:o,beginMask:l,endMask:u,ellipsisMask:c,newAxisMask:h,shrinkAxisMask:p}=s,{finalShapeSparse:d,finalShape:f,isIdentity:m,sliceDim0:g,isSimpleSlice:y,begin:b,end:x,strides:w}=yl.sliceInfo(r.shape,a,i,o,l,u,c,h,p);let v;if(m)v=NN({inputs:{x:r},backend:n,attrs:{shape:f}});else if(g||y){Us.assert(r.shape.length>=1,(()=>`Input must have rank at least 1, got: ${r.shape.length}`));const e=yl.computeOutShape(b,x,w),t=RT({inputs:{x:r},backend:n,attrs:{begin:b,size:e}});v=NN({inputs:{x:t},backend:n,attrs:{shape:f}}),n.disposeIntermediateTensorInfo(t)}else{if(n.shouldExecuteOnCPU([r])){const e=n.readSync(r.dataId),t=Bo(r.shape,r.dtype,e),s=pN(d,t,w,b);v=n.makeTensorInfo(f,r.dtype,s.values)}else{const e=new rR(b,w,d);v=n.runWebGLProgram(e,[r],r.dtype)}}const k=NN({inputs:{x:v},backend:n,attrs:{shape:f}});return n.disposeIntermediateTensorInfo(v),k}};const iR={kernelName:hs,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{separator:r,nGramWidths:a,leftPad:i,rightPad:o,padWidth:l,preserveShortSequences:u}=s,{data:c,dataSplits:h}=t,p=n.readSync(c.dataId),d=n.readSync(h.dataId),[f,m]=dN(p,d,r,a,i,o,l,u);return[n.makeTensorInfo([f.length],"string",f),n.makeTensorInfo(h.shape,"int32",m)]}};const oR={kernelName:ps,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{skipEmpty:r}=s,{input:a,delimiter:i}=t;if("string"!==a.dtype)throw new Error("Input must be of datatype string");if(1!==a.shape.length)throw new Error(`Input must be a vector, got shape: ${a.shape}`);if(0!==i.shape.length)throw new Error(`Delimiter must be a scalar, got shape: ${i.shape}`);const o=n.readSync(a.dataId),l=n.readSync(i.dataId)[0],[u,c,h]=fN(o,l,r),p=c.length;return[n.makeTensorInfo([p,2],"int32",u),n.makeTensorInfo([p],"string",c),n.makeTensorInfo([2],"int32",new Int32Array(h))]}};const lR={kernelName:ds,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{numBuckets:r}=s,{input:a}=t;if("string"!==a.dtype)throw new Error("Input must be of datatype string");if(r<=0)throw new Error("Number of buckets must be at least 1");const i=n.readSync(a.dataId),o=mN(i,r);return n.makeTensorInfo(a.shape,"int32",o)}},uR=NS({opSnippet:"return tan(x);"}),cR={kernelName:ms,backendName:"webgl",kernelFunc:uR},hR=NS({opSnippet:"\n  float e2x = exp(-2.0 * abs(x));\n  return sign(x) * (1.0 - e2x) / (1.0 + e2x);\n"}),pR={kernelName:gs,backendName:"webgl",kernelFunc:hR};class dR{constructor(e,t){this.variableNames=["A"];const n=new Array(e.length);for(let s=0;s<n.length;s++)n[s]=e[s]*t[s];this.outputShape=n,this.rank=n.length;const s=wI(this.rank),r=function(e){const t=e.length;if(t>5)throw Error(`Tile for rank ${t} is not yet supported`);if(1===t)return`imod(resRC, ${e[0]})`;const n=["resRC.x","resRC.y","resRC.z","resRC.w","resRC.u"],s=[];for(let t=0;t<e.length;t++)s.push(`imod(${n[t]}, ${e[t]})`);return s.join()}(e);this.userCode=`\n      void main() {\n        ${s} resRC = getOutputCoords();\n        setOutput(getA(${r}));\n      }\n    `}}function fR(e){const{inputs:t,backend:n,attrs:s}=e,{x:r}=t,{reps:a}=s;if("string"===r.dtype||r.shape.length>5){const e=n.readSync(r.dataId),t="string"===r.dtype?e.map((e=>Us.decodeString(e))):e,s=Bo(r.shape,r.dtype,t),i=yN(s,a);return n.makeTensorInfo(i.shape,i.dtype,i.values)}const i=new dR(r.shape,a);return n.runWebGLProgram(i,[r],r.dtype)}const mR={kernelName:ys,backendName:"webgl",kernelFunc:fR};class gR{constructor(e){this.variableNames=["x","indices"],this.customUniforms=[{name:"n",type:"int"},{name:"firstPass",type:"int"},{name:"negativeInf",type:"float"},{name:"dir",type:"int"},{name:"inc",type:"int"}],this.outputShape=e,this.userCode="\n       void main() {\n         ivec2 coords = getOutputCoords();\n         int batch = coords[0];\n         int elemIdx = coords[1];\n\n         // We compare elements pair-wise within a group of size 2 * inc.\n         // The comparing rule for each group alternates between ascending\n         // and descending. Within each group, we compare each pair at\n         // positions i and i+inc. To decide whether an element at position i\n         // is x0 or x1, we mod it by 2 * inc, if the result is smaller than\n         // inc, it is in the first half of the group, we denote it as x0,\n         // otherwise we denote it as x1.\n         // For example, as shown in the Bitonic top K paper referenced above,\n         // Figure5(a) shows that element[1] is in the\n         // second half of the group when group size is 2, but it is in the\n         // first half of the group when group size is 4.\n\n         bool isFirstInPair = imod(elemIdx, 2 * inc) < inc;\n         int i = isFirstInPair ? elemIdx : elemIdx - inc;\n\n         int i0 = firstPass == 1 ? i : int(getIndices(batch, i));\n         int i1 = firstPass == 1 ? i + inc : int(getIndices(batch, i + inc));\n         float x0 = i0 < n ? getX(batch, i0) : negativeInf;\n         float x1 = i1 < n ? getX(batch, i1) : negativeInf;\n\n         // Denotes which direction indices are in (ascending or descending).\n         bool reverse = imod(elemIdx, 2 * dir) >= dir;\n         bool isGreater = x0 > x1 || (x0 == x1 && i1 > i0);\n         if (reverse == isGreater) { // Elements in opposite order of direction\n           int iTemp = i0;\n           i0 = i1;\n           i1 = iTemp;\n         }\n         if (isFirstInPair) {\n            setOutput(float(i0));\n         } else {\n            setOutput(float(i1));\n         }\n       }\n     "}}class yR{constructor(e){this.variableNames=["x","indices"],this.customUniforms=[{name:"n",type:"int"},{name:"firstPass",type:"int"},{name:"k",type:"int"}],this.outputShape=e,this.userCode="\n    void main() {\n         // Takes max of indices (0, k), (1, k + 1), (2, k + 2) ...\n         ivec2 coords = getOutputCoords();\n         int batch = coords[0];\n         int elemIdx = coords[1];\n\n         // The output size is half of the previous size.\n         // If the previous sequence is | | | | _ _ _ _  | | | |  _ _ _ _ (k=4),\n         // we only need to output the indices at positions |, the indices at\n         // positions _ can be thrown away, see Figure5(b) After Phase 2\n         // (Merge phase) in the Bitonic Top K paper referenced above.\n         // For example, the paper shows we only need to output the orange bars.\n         // The output sequence should look like this | | | | | | | |.\n         // Because the sequence is halved, to map the output index back\n         // to the previous sequence to find the corresponding value,\n         // we need to double the index. When we double the index,\n         // we basically interpolate a position, so 2i looks like\n         // | _ | _ | _ | _ | _ | _ | _. We move the | to the first k position\n         // of each 2k positions by - elemIdx % k. E.g. for output at\n         // index 4,5,6,7, we want to get the corresponding element at\n         // original index 8,9,10,11, for output at index 8,9,10,11,\n         // we want to get the corresponding element at original index\n         // 16,17,18,19, so on and so forth.\n\n         int i = elemIdx < k ? elemIdx : (elemIdx * 2 - imod(elemIdx, k));\n         int i0 = firstPass == 1 ? i : int(getIndices(batch, i));\n         int i1 = firstPass == 1 ? i + k : int(getIndices(batch, i + k));\n\n         float x0 = getX(batch, i0);\n         float x1 = i1 < n ? getX(batch, i1) : x0;\n\n         setOutput(x0 >= x1 ? float(i0) : float(i1));\n       }\n     "}}function bR(e,t){null!==t&&e.disposeIntermediateTensorInfo(t)}function xR(e){let t=1;for(;t<e;)t*=2;return t}const wR={kernelName:bs,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{x:r}=t,{k:a,sorted:i}=s,o=le().getNumber("TOPK_LAST_DIM_CPU_HANDOFF_SIZE_THRESHOLD"),l=le().getNumber("TOPK_K_CPU_HANDOFF_THRESHOLD"),u=r.shape,c=u[u.length-1];if(n.shouldExecuteOnCPU([r])||c<o||a>l){const e=n.readSync(r.dataId),[t,s]=bN(e,u,r.dtype,a,i);return[n.makeTensorInfo(t.shape,t.dtype,t.values),n.makeTensorInfo(s.shape,s.dtype,s.values)]}if(0===a)return u[u.length-1]=0,[n.makeTensorInfo(u,r.dtype,[]),n.makeTensorInfo(u,"int32",[])];if(1===c)return[r,l$({attrs:{shape:u,dtype:"int32",value:0},backend:n})];const h=n.texData.get(r.dataId),p=null!==h&&h.isPacked,d=p?n.unpackTensor(r):r,f=Us.sizeFromShape(u)/c,m=NN({inputs:{x:d},attrs:{shape:[f,c]},backend:n});p&&bR(n,d);const g=xR(a),y=xR(c);let b=null;const x=()=>null===b?[m,m]:[m,b],w=(e,t,s)=>{const r=x(),a=new gR(s),i=[[c],[null===b?1:0],[Number.NEGATIVE_INFINITY],[e],[t]],o=b;b=n.runWebGLProgram(a,r,"int32",i),bR(n,o)};for(let e=1;e<g;e*=2){const t=2*e;for(let n=e;n>=1;n/=2)w(t,n,[f,y])}for(let e=y;e>g;e/=2){const t=x(),s=new yR([f,e/2]),r=[[c],[null===b?1:0],[g]],a=b;b=n.runWebGLProgram(s,t,"int32",r),bR(n,a);const i=g/2,o=2*i;for(let e=i;e>=1;e/=2)w(o,e,b.shape)}let v=b;b=RT({inputs:{x:b},backend:n,attrs:{begin:0,size:[f,a]}}),bR(n,v);let k=T$({inputs:{x:m,indices:b},backend:n,attrs:{axis:1,batchDims:1}});bR(n,m);const I=u.slice(0,-1);I.push(a),v=b,b=NN({inputs:{x:b},attrs:{shape:I},backend:n}),bR(n,v);const S=k;return k=NN({inputs:{x:k},attrs:{shape:I},backend:n}),bR(n,S),[k,b]}};class vR{constructor(e,t,n,s,r,a){this.variableNames=["Image","Transforms"],this.outputShape=a;const i="nearest"===n?1:2;let o;switch(s){case"constant":default:o=1;break;case"reflect":o=2;break;case"wrap":o=3;break;case"nearest":o=4}this.userCode=`\n            float mapCoord(float outCoord, float len) {\n              float inCoord = outCoord;\n              if(${o} == 2) {\n                if (inCoord < 0.0) {\n                  if (len <= 1.0) {\n                    inCoord = 0.0;\n                  } else {\n                    float sz2 = 2.0 * len;\n                    if (inCoord < sz2) {\n                      inCoord = sz2 * float(int(float(-inCoord / sz2))) +\n                      inCoord;\n                    }\n                    inCoord = inCoord < -len ? inCoord + sz2 : -inCoord - 1.0;\n                  }\n                } else if (inCoord > len - 1.0) {\n                  if (len <= 1.0) {\n                    inCoord = 0.0;\n                  } else {\n                    float sz2 = 2.0 * len;\n                    inCoord -= sz2 * float(int(float(inCoord / sz2)));\n                    if (inCoord >= len) {\n                      inCoord = sz2 - inCoord - 1.0;\n                    }\n                  }\n                }\n                return clamp(inCoord, 0.0, len - 1.0);\n              } else if (${o} == 3) {\n                if (inCoord < 0.0) {\n                  if (len <= 1.0) {\n                    inCoord = 0.0;\n                  } else {\n                    float sz = len - 1.0;\n                    inCoord += len * (float(int(float(-inCoord / sz))) + 1.0);\n                  }\n                } else if (inCoord > len - 1.0) {\n                  if (len <= 1.0) {\n                    inCoord = 0.0;\n                  } else {\n                    float sz = len - 1.0;\n                    inCoord -= len * float(int(float(inCoord / sz)));\n                  }\n                }\n                return clamp(inCoord, 0.0, len - 1.0);\n              } else if (${o} == 4) {\n                return clamp(outCoord, 0.0, len - 1.0);\n              } else {\n                return outCoord;\n              }\n            }\n\n            float readWithFillValue(int batch, int coordY, int coordX,\n              int channel) {\n              float outputValue;\n              if (0 <= coordY && coordY < ${e} && 0 <= coordX && coordX < ${t}) {\n                  outputValue = getImage(batch, coordY, coordX, channel);\n              } else {\n                outputValue = float(${r});\n              }\n              return outputValue;\n            }\n\n            void main() {\n              ivec4 coords = getOutputCoords();\n              float outputValue;\n              int batch = coords[0];\n              int x = coords[2];\n              int y = coords[1];\n              int channel = coords[3];\n              float xf = float(x);\n              float yf = float(y);\n              float a1 = getTransforms(batch, 0);\n              float a2 = getTransforms(batch, 1);\n              float a3 = getTransforms(batch, 2);\n              float b1 = getTransforms(batch, 3);\n              float b2 = getTransforms(batch, 4);\n              float b3 = getTransforms(batch, 5);\n              float c1 = getTransforms(batch, 6);\n              float c2 = getTransforms(batch, 7);\n              float projection = c1 * xf + c2 * yf + 1.0;\n              if (projection == 0.0) {\n                outputValue = float(${r});\n              } else {\n                float inX = (a1 * xf + a2 * yf + a3) / projection;\n                float inY = (b1 * xf + b2 * yf + b3) / projection;\n                float mapX = mapCoord(inX, float(${t}));\n                float mapY = mapCoord(inY, float(${e}));\n\n                if (${i} == 1) {\n                  int coordY = int(round(mapY));\n                  int coordX = int(round(mapX));\n                  outputValue = readWithFillValue(batch, coordY, coordX,\n                    channel);\n                } else {\n                  float yFloor = floor(mapY);\n                  float xFloor = floor(mapX);\n                  float yCeil = yFloor + 1.0;\n                  float xCeil = xFloor + 1.0;\n                  float valueYFloor = (xCeil - mapX) *\n                  readWithFillValue(batch, int(yFloor), int(xFloor), channel) +\n                  (mapX - xFloor) *\n                  readWithFillValue(batch, int(yFloor), int(xCeil), channel);\n                  float valueYCeil = (xCeil - mapX) *\n                  readWithFillValue(batch, int(yCeil), int(xFloor), channel) +\n                  (mapX - xFloor) *\n                  readWithFillValue(batch, int(yCeil), int(xCeil), channel);\n                  outputValue = (yCeil - mapY) * valueYFloor +\n                  (mapY - yFloor) * valueYCeil;\n                }\n              }\n              setOutput(outputValue);\n            }\n        `}}const kR={kernelName:xs,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{image:r,transforms:a}=t,{interpolation:i,fillMode:o,fillValue:l,outputShape:u}=s,[c,h,p,d]=r.shape,[f,m]=null!=u?u:[h,p],g=new vR(h,p,i,o,l,[c,f,m,d]);return n.runWebGLProgram(g,[r,a],"float32")}};const IR={kernelName:vs,backendName:"webgl",kernelFunc:function(e){const{inputs:t,attrs:n,backend:s}=e,{axis:r}=n,{x:a}=t;rS(a,"unique"),console.warn("WARNING: ","UI might be locked temporarily as data is being downloaded");const i=s.readSync(a.dataId),{outputValues:o,outputShape:l,indices:u}=wN(i,r,a.shape,a.dtype);return[s.makeTensorInfo(l,a.dtype,o),s.makeTensorInfo([u.length],"int32",u)]}};const SR={kernelName:ks,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{value:r}=t;let{axis:a}=s;a<0&&(a+=r.shape.length);const i=r,o=i.shape.length,l=r.shape[a],u=new Array(o-1);let c=0;for(let e=0;e<o;e++)e!==a&&(u[c++]=i.shape[e]);const h=[],p=new Array(o).fill(0),d=i.shape.slice();d[a]=1;const f=new Array(l);for(let e=0;e<f.length;e++){p[a]=e;const t=RT({inputs:{x:i},backend:n,attrs:{begin:p,size:d}}),s=NN({inputs:{x:t},backend:n,attrs:{shape:u}});f[e]=s,h.push(t)}return h.forEach((e=>n.disposeIntermediateTensorInfo(e))),f}};class NR{constructor(e,t){this.variableNames=["x","segmentIds"];const n=e.windowSize,s=e.batchSize,r=e.inSize,a=e.numSegments,i=a*Math.ceil(r/n);this.outputShape=[s,i];const o=4*Math.floor(n/4),l=n%4,u="\n        sumValue += dot(values, segFilter);\n    ";let c="";r%n>0&&(c=`\n        if (inIdx < 0 || inIdx >= ${r}) {\n          return initializationValue;\n        }\n      `);let h="";r%n>0&&(h=`\n        if (inIdx < 0 || inIdx >= ${r}) {\n          return -1.0;\n        }\n      `),this.userCode=`\n      const float initializationValue = 0.0;\n\n      float getValue(int batch, int inIdx) {\n        ${c}\n        return getX(batch, inIdx);\n      }\n\n      float getSegmentIdAtIndex(int inIdx) {\n        ${h}\n        return getSegmentIds(inIdx);\n      }\n\n      void main() {\n        ivec2 coords = getOutputCoords();\n        int batch = coords[0];\n        int outIdx = coords[1];\n        int inOffset = int(floor(float(outIdx) / float(\n          ${a})) * float(${n}));\n        int currentSeg = int(mod(float(outIdx), float(${a})));\n\n        float sumValue = 0.0;\n\n        for (int i = 0; i < ${o}; i += 4) {\n          int inIdx = inOffset + i;\n          vec4 values = vec4(\n            getValue(batch, inIdx),\n            getValue(batch, inIdx + 1),\n            getValue(batch, inIdx + 2),\n            getValue(batch, inIdx + 3)\n          );\n\n          vec4 segFilter = vec4(\n            int(getSegmentIdAtIndex(inIdx)) == currentSeg ? 1 : 0,\n            int(getSegmentIdAtIndex(inIdx + 1)) == currentSeg ? 1 : 0,\n            int(getSegmentIdAtIndex(inIdx + 2)) == currentSeg ? 1 : 0,\n            int(getSegmentIdAtIndex(inIdx + 3)) == currentSeg ? 1 : 0\n          );\n\n          ${u}\n        }\n\n        int inIdx = inOffset + ${o};\n        if (${1===l}) {\n          vec4 values = vec4(\n            getValue(batch, inIdx),\n            initializationValue,\n            initializationValue,\n            initializationValue\n          );\n\n          int inIdxSeg = int(getSegmentIdAtIndex(inIdx));\n\n          vec4 segFilter = vec4(\n            int(getSegmentIdAtIndex(inIdx)) == currentSeg ? 1 : 0,\n            0,\n            0,\n            0\n          );\n\n          ${u}\n        } else if (${2===l}) {\n          vec4 values = vec4(\n            getValue(batch, inIdx),\n            getValue(batch, inIdx + 1),\n            initializationValue,\n            initializationValue\n          );\n\n          vec4 segFilter = vec4(\n            int(getSegmentIdAtIndex(inIdx)) == currentSeg ? 1 : 0,\n            int(getSegmentIdAtIndex(inIdx + 1)) == currentSeg ? 1 : 0,\n              0,\n              0\n          );\n\n          ${u}\n        } else if (${3===l}) {\n          vec4 values = vec4(\n            getValue(batch, inIdx),\n            getValue(batch, inIdx + 1),\n            getValue(batch, inIdx + 2),\n            initializationValue\n          );\n\n          vec4 segFilter = vec4(\n            int(getSegmentIdAtIndex(inIdx)) == currentSeg ? 1 : 0,\n            int(getSegmentIdAtIndex(inIdx + 1)) == currentSeg ? 1 : 0,\n            int(getSegmentIdAtIndex(inIdx + 2)) == currentSeg ? 1 : 0,\n            0\n          );\n\n          ${u}\n        }\n        setOutput(sumValue);\n      }\n    `}}const TR=[zN,PN,UN,GN,qN,YN,ZN,JN,rT,aT,oT,uT,hT,dT,mT,bT,xT,kT,IT,ST,CT,DT,_T,OT,PT,VT,jT,fS,XT,sC,uC,fC,mC,gC,yC,bC,wC,kC,SC,$C,EC,RC,_C,LC,zC,PC,UC,VC,HC,jC,KC,YC,JC,e$,s$,i$,u$,h$,f$,g$,x$,v$,k$,S$,C$,E$,R$,pS,F$,eC,_$,M$,z$,yS,P$,U$,V$,H$,q$,X$,Z$,Q$,nE,rE,iE,lE,uE,cE,dE,fE,mE,gE,yE,xE,kE,SE,DE,IN,_E,ME,zE,PE,LT,UE,HE,jE,YE,JE,wS,QE,tA,BT,CE,sA,aA,oA,TN,cA,pA,mA,yA,wA,kA,SA,TA,$A,AA,FA,_A,MA,zA,PA,FT,FE,UA,VA,GA,HA,jA,qA,KA,XA,JA,QA,nR,sR,aR,iR,oR,lR,AE,_N,cR,pR,mR,wR,kR,MN,IR,SR,{kernelName:Is,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{x:r,segmentIds:a}=t,{numSegments:i}=s,o=r.shape.length,l=[];let u=0;const c=Bl.getAxesPermutation([u],o);let h=r;null!=c&&(h=ON({inputs:{x:r},backend:n,attrs:{perm:c}}),l.push(h),u=Bl.getInnerMostAxes(1,o)[0]);const p=Bl.segment_util.computeOutShape(h.shape,u,i),d=Us.sizeFromShape([h.shape[u]]),f=NN({inputs:{x:h},backend:n,attrs:{shape:[-1,d]}});l.push(f);const m=oa(r.dtype),g=(e,t,s,r,a)=>{const i=e.shape[0],o=e.shape[1],u=Bl.segment_util.segOpComputeOptimalWindowSize(o,a),c=new NR({windowSize:u,inSize:o,batchSize:i,numSegments:a},t),h=n.compileAndRun(c,[e,s],r);if(l.push(h),h.shape[1]===a)return h;const p=eA({backend:n,attrs:{start:0,stop:a,step:1,dtype:"float32"}}),d=fR({inputs:{x:p},backend:n,attrs:{reps:[o/u]}});l.push(p),l.push(d);return g(h,t,d,r,a)},y=NN({inputs:{x:g(f,"unsortedSegmentSum",a,m,i)},backend:n,attrs:{shape:p}});let b=y;if(null!=c){l.push(y);const e=Bl.getUndoAxesPermutation(c);b=ON({inputs:{x:b},backend:n,attrs:{perm:e}})}return l.forEach((e=>n.disposeIntermediateTensorInfo(e))),b}},GE];for(const e of TR)Bs(e);const CR=le();CR.registerFlag("HAS_WEBGL",(()=>CR.getNumber("WEBGL_VERSION")>0)),CR.registerFlag("WEBGL_VERSION",(()=>tS(2)?2:tS(1)?1:0)),CR.registerFlag("WEBGL_CHECK_NUMERICAL_PROBLEMS",(()=>!1)),CR.registerFlag("WEBGL_BUFFER_SUPPORTED",(()=>2===CR.get("WEBGL_VERSION"))),CR.registerFlag("WEBGL_CPU_FORWARD",(()=>!0)),CR.registerFlag("WEBGL_FORCE_F16_TEXTURES",(()=>!1)),CR.registerFlag("WEBGL_PACK",(()=>CR.getBool("HAS_WEBGL"))),CR.registerFlag("WEBGL_PACK_NORMALIZATION",(()=>CR.getBool("WEBGL_PACK"))),CR.registerFlag("WEBGL_PACK_CLIP",(()=>CR.getBool("WEBGL_PACK"))),CR.registerFlag("WEBGL_PACK_DEPTHWISECONV",(()=>CR.getBool("WEBGL_PACK"))),CR.registerFlag("WEBGL_PACK_BINARY_OPERATIONS",(()=>CR.getBool("WEBGL_PACK"))),CR.registerFlag("WEBGL_PACK_UNARY_OPERATIONS",(()=>CR.getBool("WEBGL_PACK"))),CR.registerFlag("WEBGL_PACK_ARRAY_OPERATIONS",(()=>CR.getBool("WEBGL_PACK"))),CR.registerFlag("WEBGL_PACK_IMAGE_OPERATIONS",(()=>CR.getBool("WEBGL_PACK"))),CR.registerFlag("WEBGL_PACK_REDUCE",(()=>CR.getBool("WEBGL_PACK"))),CR.registerFlag("WEBGL_LAZILY_UNPACK",(()=>CR.getBool("WEBGL_PACK"))),CR.registerFlag("WEBGL_CONV_IM2COL",(()=>CR.getBool("WEBGL_PACK"))),CR.registerFlag("WEBGL_MAX_TEXTURE_SIZE",(()=>function(e){if(null==JI){const t=TI(e);JI=t.getParameter(t.MAX_TEXTURE_SIZE)}return JI}(CR.getNumber("WEBGL_VERSION")))),CR.registerFlag("WEBGL_MAX_TEXTURES_IN_SHADER",(()=>function(e){if(null==QI){const t=TI(e);QI=t.getParameter(t.MAX_TEXTURE_IMAGE_UNITS)}return Math.min(16,QI)}(CR.getNumber("WEBGL_VERSION")))),CR.registerFlag("WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_VERSION",(()=>{const e=CR.getNumber("WEBGL_VERSION");return 0===e?0:function(e){if(0===e)return 0;let t;const n=TI(e);return t=eS(n,"EXT_disjoint_timer_query_webgl2")&&2===e?2:eS(n,"EXT_disjoint_timer_query")?1:0,t}(e)})),CR.registerFlag("WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_RELIABLE",(()=>CR.getNumber("WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_VERSION")>0&&!xa.isMobile())),CR.registerFlag("WEBGL_RENDER_FLOAT32_CAPABLE",(()=>function(e){if(0===e)return!1;const t=TI(e);if(1===e){if(!eS(t,"OES_texture_float"))return!1}else if(!eS(t,"EXT_color_buffer_float"))return!1;return sS(t)}(CR.getNumber("WEBGL_VERSION")))),CR.registerFlag("WEBGL_RENDER_FLOAT32_ENABLED",(()=>!CR.getBool("WEBGL_FORCE_F16_TEXTURES")&&CR.getBool("WEBGL_RENDER_FLOAT32_CAPABLE"))),CR.registerFlag("WEBGL_DOWNLOAD_FLOAT_ENABLED",(()=>nS(CR.getNumber("WEBGL_VERSION")))),CR.registerFlag("WEBGL_FENCE_API_ENABLED",(()=>{return 2===(e=CR.getNumber("WEBGL_VERSION"))&&null!=TI(e).fenceSync;var e})),CR.registerFlag("WEBGL_SIZE_UPLOAD_UNIFORM",(()=>CR.getBool("WEBGL_RENDER_FLOAT32_ENABLED")?4:0)),CR.registerFlag("WEBGL_DELETE_TEXTURE_THRESHOLD",(()=>-1),(e=>{if(e<0&&-1!==e)throw new Error(`WEBGL_DELETE_TEXTURE_THRESHOLD must be -1 (indicating never delete) or at least 0, but got ${e}.`)})),CR.registerFlag("WEBGL_FLUSH_THRESHOLD",(()=>xa.isMobile()?1:-1),(e=>{if(e<0&&-1!==e)throw new Error(`WEBGL_FLUSH_THRESHOLD must be -1 (indicating never manual flush) or at least 0, but got ${e}.`)})),CR.registerFlag("CPU_HANDOFF_SIZE_THRESHOLD",(()=>128)),CR.registerFlag("WEBGL_USE_SHAPES_UNIFORMS",(()=>!1)),CR.registerFlag("TOPK_LAST_DIM_CPU_HANDOFF_SIZE_THRESHOLD",(()=>1e5)),CR.registerFlag("TOPK_K_CPU_HANDOFF_THRESHOLD",(()=>128));class $R{constructor(e){this.variableNames=["A"],this.packedInputs=!1,this.packedOutput=!0,this.outPackingScheme=CI.DENSE,this.customUniforms=[{name:"texShape",type:"ivec2"}];const t=sI();this.outputShape=e,this.enableShapeUniforms=iS(this.outputShape.length),this.userCode=`\n      ivec3 outCoordsFromFlatIndex(int index) {\n        ${this.enableShapeUniforms?aI(["r","c","d"],e):rI(["r","c","d"],e)}\n        return ivec3(r, c, d);\n      }\n\n      void main() {\n        ivec2 resTexRC = ivec2(resultUV.yx * vec2(texShape[0], texShape[1]));\n        int index = 4 * (resTexRC.x * texShape[1] + resTexRC.y);\n\n        vec4 result = vec4(0.);\n\n        for (int i=0; i<4; i++) {\n          int flatIndex = index + i;\n          ivec3 rc = outCoordsFromFlatIndex(flatIndex);\n          result[i] = getA(rc.x, rc.y, rc.z);\n        }\n\n        ${t.output} = result;\n      }\n    `}}class ER{constructor(e){this.variableNames=["A"],this.packedInputs=!0,this.packedOutput=!0,this.outPackingScheme=CI.DENSE,this.customUniforms=[{name:"texShape",type:"ivec2"}];const t=sI();this.outputShape=e,this.enableShapeUniforms=iS(this.outputShape.length),this.userCode=`\n      ivec3 outCoordsFromFlatIndex(int index) {\n        ${this.enableShapeUniforms?aI(["r","c","d"],e):rI(["r","c","d"],e)}\n        return ivec3(r, c, d);\n      }\n\n      void main() {\n        ivec2 resTexRC = ivec2(resultUV.yx * vec2(texShape[0], texShape[1]));\n        int index = 4 * (resTexRC.x * texShape[1] + resTexRC.y);\n\n        vec4 result = vec4(0.);\n\n        for (int i=0; i<4; i++) {\n          int flatIndex = index + i;\n          ivec3 rc = outCoordsFromFlatIndex(flatIndex);\n          result[i] = getChannel(getA(rc.x, rc.y, rc.z), vec2(rc.y, rc.z));\n        }\n\n        ${t.output} = result;\n      }\n    `}}class AR{constructor(e){this.variableNames=["A"],this.outTexUsage=$I.DOWNLOAD;const t=sI();this.outputShape=e,this.userCode=`\n      ${lI}\n\n      void main() {\n        float x = getAAtOutCoords();\n        ${t.output} = encode_float(x);\n      }\n    `}}class RR{constructor(e){this.variableNames=["A"],this.packedInputs=!0,this.packedOutput=!1,this.outTexUsage=$I.DOWNLOAD;const t=sI();this.outputShape=e,this.userCode=`\n      ${lI}\n\n      void main() {\n        ivec3 coords = getOutputCoords();\n        float x = getChannel(getAAtOutCoords(), vec2(coords.y, coords.z));\n        ${t.output} = encode_float(x);\n      }\n    `}}class FR{constructor(e,t=!1){this.variableNames=["A"],this.customUniforms=[{name:"texShape",type:"ivec2"}];const n=sI();this.outputShape=e,this.enableShapeUniforms=iS(this.outputShape.length);let s="result";t&&(s="floor(result * 255. + 0.5)"),this.userCode=`\n      ${this.enableShapeUniforms?"\n  int getFlatIndex(ivec3 coords) {\n    return coords.x * outShapeStrides[0] + coords.y * outShapeStrides[1] + coords.z;\n  }\n":oI(e)}\n\n      void main() {\n        ivec3 coords = getOutputCoords();\n\n        int flatIndex = getFlatIndex(coords);\n        int offset = imod(flatIndex, 4);\n\n        flatIndex = idiv(flatIndex, 4, 1.);\n\n        int r = flatIndex / texShape[1];\n        int c = imod(flatIndex, texShape[1]);\n        vec2 uv = (vec2(c, r) + halfCR) / vec2(texShape[1], texShape[0]);\n        vec4 values = ${n.texture2D}(A, uv);\n\n        float result;\n\n        if(offset == 0) {\n          result = values[0];\n        } else if(offset == 1) {\n          result = values[1];\n        } else if(offset == 2) {\n          result = values[2];\n        } else {\n          result = values[3];\n        }\n\n        ${n.output} = vec4(${s}, 0., 0., 0.);\n      }\n    `}}class DR{constructor(e,t=!1){this.variableNames=["A"],this.packedInputs=!1,this.packedOutput=!0,this.customUniforms=[{name:"texShape",type:"ivec2"}];const n=sI();this.outputShape=e,this.enableShapeUniforms=iS(this.outputShape.length);let s="",r="result";t&&(r="floor(result * 255. + 0.5)");for(let t=0;t<=1;t++)for(let r=0;r<=1;r++){const a=2*t+r;s+=`\n          localCoords = coords;\n          if(localCoords[2] + ${r} < ${this.enableShapeUniforms?"outShape[2]":`${e[2]}`}) {\n          localCoords[2] += ${r};\n          if (localCoords[1] + ${t} < ${this.enableShapeUniforms?"outShape[1]":`${e[1]}`}) {\n            localCoords[1] += ${t};\n\n            flatIndex = getFlatIndex(localCoords);\n            offset = imod(flatIndex, 4);\n\n            flatIndex = idiv(flatIndex, 4, 1.);\n\n            int r = flatIndex / texShape[1];\n            int c = imod(flatIndex, texShape[1]);\n            vec2 uv = (vec2(c, r) + halfCR) / vec2(texShape[1], texShape[0]);\n            values = ${n.texture2D}(A, uv);\n\n            if (offset == 0) {\n              result[${a}] = values[0];\n            } else if (offset == 1) {\n              result[${a}] = values[1];\n            } else if (offset == 2) {\n              result[${a}] = values[2];\n            } else {\n              result[${a}] = values[3];\n            }\n          }\n        }\n        `}this.userCode=`\n        ${this.enableShapeUniforms?"\n  int getFlatIndex(ivec3 coords) {\n    return coords.x * outShapeStrides[0] + coords.y * outShapeStrides[1] + coords.z;\n  }\n":oI(e)}\n\n        void main() {\n          ivec3 coords = getOutputCoords();\n\n          vec4 result = vec4(0.);\n          int flatIndex, r, c, offset;\n          ivec3 localCoords;\n          vec2 uv;\n          vec4 values;\n\n          ${s}\n\n          ${n.output} = ${r};\n        }\n    `}}function _R(e){const t=sI();return function(e,t){const n=HI(e,(()=>e.createShader(e.VERTEX_SHADER)),"Unable to create vertex WebGLShader.");if(_I(e,(()=>e.shaderSource(n,t))),_I(e,(()=>e.compileShader(n))),!1===e.getShaderParameter(n,e.COMPILE_STATUS))throw console.log(e.getShaderInfoLog(n)),new Error("Failed to compile vertex shader.");return n}(e,`${t.version}\n    precision highp float;\n    ${t.attribute} vec3 clipSpacePos;\n    ${t.attribute} vec2 uv;\n    ${t.varyingVs} vec2 resultUV;\n\n    void main() {\n      gl_Position = vec4(clipSpacePos, 1);\n      resultUV = uv;\n    }`)}function OR(e){return function(e,t){const n=HI(e,(()=>e.createBuffer()),"Unable to create WebGLBuffer");return _I(e,(()=>e.bindBuffer(e.ARRAY_BUFFER,n))),_I(e,(()=>e.bufferData(e.ARRAY_BUFFER,t,e.STATIC_DRAW))),n}(e,new Float32Array([-1,1,0,0,1,-1,-1,0,0,0,1,1,0,1,1,1,-1,0,1,0]))}function MR(e){return function(e,t){const n=HI(e,(()=>e.createBuffer()),"Unable to create WebGLBuffer");return _I(e,(()=>e.bindBuffer(e.ELEMENT_ARRAY_BUFFER,n))),_I(e,(()=>e.bufferData(e.ELEMENT_ARRAY_BUFFER,t,e.STATIC_DRAW))),n}(e,new Uint16Array([0,1,2,2,1,3]))}function LR(e,t,n,s,r,a){!function(e,t){const n=le().getNumber("WEBGL_MAX_TEXTURE_SIZE");if(e<=0||t<=0)throw new Error(`Requested texture size [${e}x${t}] is invalid.`);if(e>n||t>n)throw new Error(`Requested texture size [${e}x${t}] greater than WebGL maximum on this browser / GPU [${n}x${n}].`)}(t,n);const i=function(e){return HI(e,(()=>e.createTexture()),"Unable to create WebGLTexture.")}(e),o=e.TEXTURE_2D;return _I(e,(()=>e.bindTexture(o,i))),_I(e,(()=>e.texParameteri(o,e.TEXTURE_WRAP_S,e.CLAMP_TO_EDGE))),_I(e,(()=>e.texParameteri(o,e.TEXTURE_WRAP_T,e.CLAMP_TO_EDGE))),_I(e,(()=>e.texParameteri(o,e.TEXTURE_MIN_FILTER,e.NEAREST))),_I(e,(()=>e.texParameteri(o,e.TEXTURE_MAG_FILTER,e.NEAREST))),1===le().getNumber("WEBGL_VERSION")?_I(e,(()=>e.texImage2D(o,0,s,t,n,0,r,a,null))):_I(e,(()=>e.texStorage2D(o,1,s,t,n))),_I(e,(()=>e.bindTexture(e.TEXTURE_2D,null))),{texture:i,texShape:[n,t]}}function zR(e){return e.internalFormatFloat}function BR(e){return e.internalFormatHalfFloat}function PR(e){return e.downloadTextureFormat}function WR(e){return e.internalFormatPackedFloat}function UR(e){return e.internalFormatPackedHalfFloat}function VR(e,t,n,s,r,a,i,o){const l=e,u=new Float32Array(function(e,t){const[n,s]=FI(e,t);return n*s*4}(a,i));return l.bindBuffer(l.PIXEL_PACK_BUFFER,t),l.getBufferSubData(l.PIXEL_PACK_BUFFER,0,u),l.bindBuffer(l.PIXEL_PACK_BUFFER,null),u}class GR{constructor(e){this.outputTexture=null,this.program=null,this.disposed=!1,this.vertexAttrsAreBound=!1,this.itemsToPoll=[];const t=le().getNumber("WEBGL_VERSION");null!=e?(this.gl=e,function(e,t){SI[e]=t}(t,e)):this.gl=TI(t);let n="WEBGL_color_buffer_float";const s="EXT_color_buffer_half_float";if(1===le().getNumber("WEBGL_VERSION")){const e="OES_texture_float",t="OES_texture_half_float";if(this.textureFloatExtension=MI(this.gl,e),eS(this.gl,t))this.textureHalfFloatExtension=MI(this.gl,t);else if(le().get("WEBGL_FORCE_F16_TEXTURES"))throw new Error("GL context does not support half float textures, yet the environment flag WEBGL_FORCE_F16_TEXTURES is set to true.");if(this.colorBufferFloatExtension=this.gl.getExtension(n),eS(this.gl,s))this.colorBufferHalfFloatExtension=MI(this.gl,s);else if(le().get("WEBGL_FORCE_F16_TEXTURES"))throw new Error("GL context does not support color renderable half floats, yet the environment flag WEBGL_FORCE_F16_TEXTURES is set to true.")}else if(n="EXT_color_buffer_float",eS(this.gl,n))this.colorBufferFloatExtension=this.gl.getExtension(n);else{if(!eS(this.gl,s))throw new Error("GL context does not support color renderable floats");this.colorBufferHalfFloatExtension=this.gl.getExtension(s)}this.vertexBuffer=OR(this.gl),this.indexBuffer=MR(this.gl),this.framebuffer=function(e){return HI(e,(()=>e.createFramebuffer()),"Unable to create WebGLFramebuffer.")}(this.gl),this.textureConfig=DI(this.gl,this.textureHalfFloatExtension)}get debug(){return le().getBool("DEBUG")}dispose(){if(this.disposed)return;null!=this.program&&console.warn("Disposing a GPGPUContext that still has a bound WebGLProgram. This is probably a resource leak, delete the program with GPGPUContext.deleteProgram before disposing."),null!=this.outputTexture&&console.warn("Disposing a GPGPUContext that still has a bound output matrix texture.  This is probably a resource leak, delete the output matrix texture with GPGPUContext.deleteMatrixTexture before disposing.");const e=this.gl;_I(e,(()=>e.finish())),_I(e,(()=>e.bindFramebuffer(e.FRAMEBUFFER,null))),_I(e,(()=>e.deleteFramebuffer(this.framebuffer))),_I(e,(()=>e.bindBuffer(e.ARRAY_BUFFER,null))),_I(e,(()=>e.bindBuffer(e.ELEMENT_ARRAY_BUFFER,null))),_I(e,(()=>e.deleteBuffer(this.indexBuffer))),this.disposed=!0}createFloat32MatrixTexture(e,t){return this.throwIfDisposed(),function(e,t,n,s){const[r,a]=AI(t,n);return LR(e,r,a,zR(s),s.textureFormatFloat,e.FLOAT)}(this.gl,e,t,this.textureConfig)}createFloat16MatrixTexture(e,t){return this.throwIfDisposed(),function(e,t,n,s){const[r,a]=AI(t,n);return LR(e,r,a,BR(s),s.textureFormatFloat,s.textureTypeHalfFloat)}(this.gl,e,t,this.textureConfig)}createUnsignedBytesMatrixTexture(e,t){return this.throwIfDisposed(),function(e,t,n,s){const[r,a]=AI(t,n);return LR(e,r,a,PR(s),e.RGBA,e.UNSIGNED_BYTE)}(this.gl,e,t,this.textureConfig)}uploadPixelDataToTexture(e,t){this.throwIfDisposed(),function(e,t,n){_I(e,(()=>e.bindTexture(e.TEXTURE_2D,t))),n.data instanceof Uint8Array?2===le().getNumber("WEBGL_VERSION")?_I(e,(()=>e.texSubImage2D(e.TEXTURE_2D,0,0,0,n.width,n.height,e.RGBA,e.UNSIGNED_BYTE,n.data))):_I(e,(()=>e.texImage2D(e.TEXTURE_2D,0,e.RGBA,n.width,n.height,0,e.RGBA,e.UNSIGNED_BYTE,n.data))):2===le().getNumber("WEBGL_VERSION")?_I(e,(()=>e.texSubImage2D(e.TEXTURE_2D,0,0,0,e.RGBA,e.UNSIGNED_BYTE,n))):_I(e,(()=>e.texImage2D(e.TEXTURE_2D,0,e.RGBA,e.RGBA,e.UNSIGNED_BYTE,n))),_I(e,(()=>e.bindTexture(e.TEXTURE_2D,null)))}(this.gl,e,t)}uploadDenseMatrixToTexture(e,t,n,s){this.throwIfDisposed(),function(e,t,n,s,r,a){let i,o,l;_I(e,(()=>e.bindTexture(e.TEXTURE_2D,t))),r instanceof Uint8Array?(i=new Uint8Array(n*s*4),o=e.UNSIGNED_BYTE,l=e.RGBA):(i=new Float32Array(n*s*4),o=e.FLOAT,l=a.internalFormatPackedFloat),i.set(r),2===le().getNumber("WEBGL_VERSION")?_I(e,(()=>e.texSubImage2D(e.TEXTURE_2D,0,0,0,n,s,e.RGBA,o,i))):_I(e,(()=>e.texImage2D(e.TEXTURE_2D,0,l,n,s,0,e.RGBA,o,i))),_I(e,(()=>e.bindTexture(e.TEXTURE_2D,null)))}(this.gl,e,t,n,s,this.textureConfig)}createFloat16PackedMatrixTexture(e,t){return this.throwIfDisposed(),function(e,t,n,s){const[r,a]=FI(t,n);return LR(e,r,a,UR(s),e.RGBA,s.textureTypeHalfFloat)}(this.gl,e,t,this.textureConfig)}createPackedMatrixTexture(e,t){return this.throwIfDisposed(),function(e,t,n,s){const[r,a]=FI(t,n);return LR(e,r,a,WR(s),e.RGBA,e.FLOAT)}(this.gl,e,t,this.textureConfig)}deleteMatrixTexture(e){this.throwIfDisposed(),this.outputTexture===e&&(VI(this.gl,this.framebuffer),this.outputTexture=null),_I(this.gl,(()=>this.gl.deleteTexture(e)))}downloadByteEncodedFloatMatrixFromOutputTexture(e,t,n){return this.downloadMatrixDriver(e,(()=>function(e,t,n,s){const[r,a]=AI(t,n),i=new Uint8Array(t*n*4);return _I(e,(()=>e.readPixels(0,0,r,a,s.downloadTextureFormat,e.UNSIGNED_BYTE,i))),new Float32Array(i.buffer)}(this.gl,t,n,this.textureConfig)))}downloadPackedMatrixFromBuffer(e,t,n,s,r,a){return VR(this.gl,e,0,0,0,r,a,this.textureConfig)}downloadFloat32MatrixFromBuffer(e,t){return function(e,t,n){const s=e,r=new Float32Array(n);return s.bindBuffer(s.PIXEL_PACK_BUFFER,t),s.getBufferSubData(s.PIXEL_PACK_BUFFER,0,r),s.bindBuffer(s.PIXEL_PACK_BUFFER,null),r}(this.gl,e,t)}createBufferFromTexture(e,t,n){this.bindTextureToFrameBuffer(e);const s=function(e,t,n,s){const r=e.createBuffer();_I(e,(()=>e.bindBuffer(e.PIXEL_PACK_BUFFER,r)));const a=16*t*n;return _I(e,(()=>e.bufferData(e.PIXEL_PACK_BUFFER,a,e.STREAM_READ))),_I(e,(()=>e.readPixels(0,0,n,t,e.RGBA,e.FLOAT,0))),_I(e,(()=>e.bindBuffer(e.PIXEL_PACK_BUFFER,null))),r}(this.gl,t,n,this.textureConfig);return this.unbindTextureToFrameBuffer(),s}createAndWaitForFence(){const e=this.createFence(this.gl);return this.pollFence(e)}createFence(e){let t,n;if(le().getBool("WEBGL_FENCE_API_ENABLED")){const s=e,r=s.fenceSync(s.SYNC_GPU_COMMANDS_COMPLETE,0);e.flush(),n=()=>{const e=s.clientWaitSync(r,0,0);return e===s.ALREADY_SIGNALED||e===s.CONDITION_SATISFIED},t=r}else le().getNumber("WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_VERSION")>0?(t=this.beginQuery(),this.endQuery(),n=()=>this.isQueryAvailable(t,le().getNumber("WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_VERSION"))):n=()=>!0;return{query:t,isFencePassed:n}}downloadMatrixFromPackedTexture(e,t,n){return this.downloadMatrixDriver(e,(()=>function(e,t,n){const s=new Float32Array(t*n*4);return _I(e,(()=>e.readPixels(0,0,n,t,e.RGBA,e.FLOAT,s))),s}(this.gl,t,n)))}createProgram(e){this.throwIfDisposed();const t=this.gl;null==this.vertexShader&&(this.vertexShader=_R(t));const n=function(e){return HI(e,(()=>e.createProgram()),"Unable to create WebGLProgram.")}(t);return _I(t,(()=>t.attachShader(n,this.vertexShader))),_I(t,(()=>t.attachShader(n,e))),function(e,t){if(_I(e,(()=>e.linkProgram(t))),!1===e.getProgramParameter(t,e.LINK_STATUS))throw console.log(e.getProgramInfoLog(t)),new Error("Failed to link vertex and fragment shaders.")}(t,n),this.debug&&BI(t,n),this.vertexAttrsAreBound||(this.setProgram(n),this.vertexAttrsAreBound=function(e,t,n){return _I(e,(()=>e.bindBuffer(e.ARRAY_BUFFER,n))),PI(e,t,"clipSpacePos",n,3,20,0)&&PI(e,t,"uv",n,2,20,12)}(t,this.program,this.vertexBuffer)),n}deleteProgram(e){this.throwIfDisposed(),e===this.program&&(this.program=null),null!=e&&_I(this.gl,(()=>this.gl.deleteProgram(e)))}setProgram(e){this.throwIfDisposed(),this.program=e,null!=this.program&&this.debug&&BI(this.gl,this.program),_I(this.gl,(()=>this.gl.useProgram(e)))}getUniformLocation(e,t,n=!0){return this.throwIfDisposed(),n?function(e,t,n){return HI(e,(()=>e.getUniformLocation(t,n)),'uniform "'+n+'" not present in program.')}(this.gl,e,t):function(e,t,n){return e.getUniformLocation(t,n)}(this.gl,e,t)}getAttributeLocation(e,t){return this.throwIfDisposed(),_I(this.gl,(()=>this.gl.getAttribLocation(e,t)))}getUniformLocationNoThrow(e,t){return this.throwIfDisposed(),this.gl.getUniformLocation(e,t)}setInputMatrixTexture(e,t,n){this.throwIfDisposed(),this.throwIfNoProgram(),WI(this.gl,e,t,n)}setOutputMatrixTexture(e,t,n){this.setOutputMatrixTextureDriver(e,n,t)}setOutputPackedMatrixTexture(e,t,n){this.throwIfDisposed();const[s,r]=FI(t,n);this.setOutputMatrixTextureDriver(e,s,r)}setOutputMatrixWriteRegion(e,t,n,s){this.setOutputMatrixWriteRegionDriver(n,e,s,t)}setOutputPackedMatrixWriteRegion(e,t,n,s){throw new Error("setOutputPackedMatrixWriteRegion not implemented.")}debugValidate(){null!=this.program&&BI(this.gl,this.program),GI(this.gl)}executeProgram(){this.throwIfDisposed(),this.throwIfNoProgram();const e=this.gl;this.debug&&this.debugValidate(),_I(e,(()=>e.drawElements(e.TRIANGLES,6,e.UNSIGNED_SHORT,0)))}blockUntilAllProgramsCompleted(){this.throwIfDisposed(),_I(this.gl,(()=>this.gl.finish()))}getQueryTimerExtension(){return null==this.disjointQueryTimerExtension&&(this.disjointQueryTimerExtension=MI(this.gl,2===le().getNumber("WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_VERSION")?"EXT_disjoint_timer_query_webgl2":"EXT_disjoint_timer_query")),this.disjointQueryTimerExtension}getQueryTimerExtensionWebGL2(){return this.getQueryTimerExtension()}getQueryTimerExtensionWebGL1(){return this.getQueryTimerExtension()}beginQuery(){if(2===le().getNumber("WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_VERSION")){const e=this.gl,t=this.getQueryTimerExtensionWebGL2(),n=e.createQuery();return e.beginQuery(t.TIME_ELAPSED_EXT,n),n}const e=this.getQueryTimerExtensionWebGL1(),t=e.createQueryEXT();return e.beginQueryEXT(e.TIME_ELAPSED_EXT,t),t}endQuery(){if(2===le().getNumber("WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_VERSION")){const e=this.gl,t=this.getQueryTimerExtensionWebGL2();return void e.endQuery(t.TIME_ELAPSED_EXT)}const e=this.getQueryTimerExtensionWebGL1();e.endQueryEXT(e.TIME_ELAPSED_EXT)}async waitForQueryAndGetTime(e){return await Us.repeatedTry((()=>this.disposed||this.isQueryAvailable(e,le().getNumber("WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_VERSION")))),this.getQueryTime(e,le().getNumber("WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_VERSION"))}getQueryTime(e,t){if(0===t)return null;if(2===t){const t=this.gl;return t.getQueryParameter(e,t.QUERY_RESULT)/1e6}{const t=this.getQueryTimerExtensionWebGL1();return t.getQueryObjectEXT(e,t.QUERY_RESULT_EXT)/1e6}}isQueryAvailable(e,t){if(0===t)return!0;if(2===t){const t=this.gl,n=this.getQueryTimerExtensionWebGL2(),s=t.getQueryParameter(e,t.QUERY_RESULT_AVAILABLE);return null==this.disjoint&&(this.disjoint=this.gl.getParameter(n.GPU_DISJOINT_EXT)),s&&!this.disjoint}{const t=this.getQueryTimerExtensionWebGL1(),n=t.getQueryObjectEXT(e,t.QUERY_RESULT_AVAILABLE_EXT);return null==this.disjoint&&(this.disjoint=this.gl.getParameter(t.GPU_DISJOINT_EXT)),n&&!this.disjoint}}pollFence(e){return new Promise((t=>{this.addItemToPoll((()=>e.isFencePassed()),(()=>t()))}))}pollItems(){const e=function(e){let t=0;for(;t<e.length;++t){if(!e[t]())break}return t-1}(this.itemsToPoll.map((e=>e.isDoneFn)));for(let t=0;t<=e;++t){const{resolveFn:e}=this.itemsToPoll[t];e()}this.itemsToPoll=this.itemsToPoll.slice(e+1)}addItemToPoll(e,t){this.itemsToPoll.push({isDoneFn:e,resolveFn:t}),this.itemsToPoll.length>1||Us.repeatedTry((()=>(this.pollItems(),0===this.itemsToPoll.length)))}bindTextureToFrameBuffer(e){this.throwIfDisposed(),UI(this.gl,e,this.framebuffer),this.debug&&GI(this.gl)}unbindTextureToFrameBuffer(){null!=this.outputTexture?(UI(this.gl,this.outputTexture,this.framebuffer),this.debug&&GI(this.gl)):VI(this.gl,this.framebuffer)}downloadMatrixDriver(e,t){this.bindTextureToFrameBuffer(e);const n=t();return this.unbindTextureToFrameBuffer(),n}setOutputMatrixTextureDriver(e,t,n){this.throwIfDisposed();const s=this.gl;UI(s,e,this.framebuffer),this.debug&&GI(s),this.outputTexture=e,_I(s,(()=>s.viewport(0,0,t,n))),_I(s,(()=>s.scissor(0,0,t,n)))}setOutputMatrixWriteRegionDriver(e,t,n,s){this.throwIfDisposed(),_I(this.gl,(()=>this.gl.scissor(e,t,n,s)))}throwIfDisposed(){if(this.disposed)throw new Error("Attempted to use disposed GPGPUContext.")}throwIfNoProgram(){if(null==this.program)throw new Error("No GPU program is currently set.")}}class HR{constructor(e){if(this.variableNames=["A"],this.packedInputs=!1,this.packedOutput=!0,this.outputShape=e,this.rank=e.length,this.enableShapeUniforms=iS(this.outputShape.length),0===this.rank)this.userCode="\n        void main() {\n          setOutput(vec4(getA(), 0., 0., 0.));\n        }\n      ";else{const e=uS("rc",this.rank),t=wI(this.rank),n=this.getOutOfBoundsCondition(e),s=this.getSetup(e),r=this.getOutput(e);this.userCode=`\n        void main() {\n          ${t} rc = getOutputCoords();\n\n          if(${n}) {\n            setOutput(vec4(0));\n          } else {\n            ${s}\n\n            setOutput(vec4(${r}));\n          }\n        }\n      `}}getSourceCoordsArr(e){const t=[];for(let n=0;n<=1;n++)for(let s=0;s<=1;s++){let r=`${0===n?"r":"rp1"}, ${0===s?"c":"cp1"}`;for(let t=2;t<this.rank;t++)r=`${e[e.length-1-t]},`+r;t.push(r)}return t}getOutOfBoundsCondition(e){if(1===this.rank)return`rc > ${this.enableShapeUniforms?"outShape":this.outputShape[0]}`;let t="";for(let n=this.rank-2;n<this.rank;n++)t+=`${e[n]} >= ${this.enableShapeUniforms?`outShape[${n}]`:this.outputShape[n]}`,n<this.rank-1&&(t+="||");return t}getSetup(e){if(1===this.rank)return"";const t=e.slice(-2),n=this.enableShapeUniforms?`outShape[${this.rank} - 1]`:this.outputShape[this.rank-1],s=this.enableShapeUniforms?`outShape[${this.rank} - 2]`:this.outputShape[this.rank-2];return`\n      int r = ${t[0]};\n      int c = ${t[1]};\n      int rp1 = r + 1;\n      int cp1 = c + 1;\n\n      bool cEdge = cp1 >= ${n};\n      bool rEdge = rp1 >= ${s};\n    `}getOutput(e){const t=this.getSourceCoordsArr(e);if(1===this.rank){return`getA(rc), (rc + 1 >= ${this.enableShapeUniforms?"outShape":this.outputShape[0]} ? 0. : getA(rc + 1)), 0, 0`}return`getA(${t[0]}),\n            cEdge ? 0. : getA(${t[1]}),\n            rEdge ? 0. : getA(${t[2]}),\n            rEdge || cEdge ? 0. : getA(${t[3]})`}}class jR{constructor(e){this.gpgpu=e,this.numUsedTextures=0,this.numFreeTextures=0,this._numBytesAllocated=0,this._numBytesFree=0,this.freeTextures={},this.logEnabled=!1,this.usedTextures={}}acquireTexture(e,t,n){const s=KR(t,n),r=XR(e,s,n);r in this.freeTextures||(this.freeTextures[r]=[]),r in this.usedTextures||(this.usedTextures[r]=[]);const a=qR(e,s,this.gpgpu.gl,this.gpgpu.textureConfig,n);if(this.freeTextures[r].length>0){this.numFreeTextures--,this.numUsedTextures++,this._numBytesFree-=a,this.log();const e=this.freeTextures[r].shift();return this.usedTextures[r].push(e),e}let i;return s===EI.PACKED_2X2_FLOAT32?i=this.gpgpu.createPackedMatrixTexture(e[0],e[1]):s===EI.PACKED_2X2_FLOAT16?i=this.gpgpu.createFloat16PackedMatrixTexture(e[0],e[1]):s===EI.UNPACKED_FLOAT32?i=this.gpgpu.createFloat32MatrixTexture(e[0],e[1]):s===EI.UNPACKED_FLOAT16?i=this.gpgpu.createFloat16MatrixTexture(e[0],e[1]):s===EI.PACKED_4X1_UNSIGNED_BYTE&&(i=this.gpgpu.createUnsignedBytesMatrixTexture(e[0],e[1])),this.usedTextures[r].push(i),this.numUsedTextures++,this._numBytesAllocated+=a,this.log(),i}releaseTexture(e,t,n,s){if(null==this.freeTextures)return;const r=KR(n,s),a=XR(t,r,s);a in this.freeTextures||(this.freeTextures[a]=[]);const i=qR(t,r,this.gpgpu.gl,this.gpgpu.textureConfig,s),o=le().get("WEBGL_DELETE_TEXTURE_THRESHOLD");-1!==o&&this._numBytesAllocated>o?(this.gpgpu.deleteMatrixTexture(e.texture),this._numBytesAllocated-=i):(this.freeTextures[a].push(e),this.numFreeTextures++,this._numBytesFree+=i),this.numUsedTextures--;const l=this.usedTextures[a],u=l.indexOf(e);if(u<0)throw new Error("Cannot release a texture that was never provided by this texture manager");l.splice(u,1),this.log()}log(){if(!this.logEnabled)return;const e=this.numFreeTextures+this.numUsedTextures;console.log("Free/Used",`${this.numFreeTextures} / ${this.numUsedTextures}`,`(${e})`);const t=this._numBytesFree/this._numBytesAllocated;console.log(`Bytes allocated: ${this._numBytesAllocated}`),console.log(`Bytes unused: ${this._numBytesFree} (${Math.round(100*t)}%)`)}get numBytesAllocated(){return this._numBytesAllocated}get numBytesFree(){return this._numBytesFree}getNumUsedTextures(){return this.numUsedTextures}getNumFreeTextures(){return this.numFreeTextures}dispose(){if(null!=this.freeTextures){for(const e in this.freeTextures)this.freeTextures[e].forEach((e=>{this.gpgpu.deleteMatrixTexture(e.texture)}));for(const e in this.usedTextures)this.usedTextures[e].forEach((e=>{this.gpgpu.deleteMatrixTexture(e.texture)}));this.freeTextures=null,this.usedTextures=null,this.numUsedTextures=0,this.numFreeTextures=0,this._numBytesAllocated=0,this._numBytesFree=0}}}function qR(e,t,n,s,r){const a=function(e,t){switch(e){case EI.PACKED_2X2_FLOAT32:return WR(t);case EI.PACKED_2X2_FLOAT16:return UR(t);case EI.UNPACKED_FLOAT32:return zR(t);case EI.UNPACKED_FLOAT16:return BR(t);case EI.PACKED_4X1_UNSIGNED_BYTE:return PR(t);default:throw new Error(`Unknown physical texture type ${e}`)}}(t,s);let i;if(r){const[t,n]=FI(e[0],e[1]);i=t*n}else{const[t,n]=AI(e[0],e[1]);i=t*n}const o=function(e,t){const n=e;if(t===n.R32F)return 4;if(t===n.R16F)return 2;if(t===n.RGBA32F)return 16;if(t===e.RGBA)return 16;if(t===n.RGBA16F)return 8;if(t===n.RGBA8)return 4;throw new Error(`Unknown internal format ${t}`)}(n,a);return i*o}function KR(e,t){if(e===$I.UPLOAD)return EI.PACKED_2X2_FLOAT32;if(e===$I.RENDER||null==e)return function(e){return le().getBool("WEBGL_RENDER_FLOAT32_ENABLED")?e?EI.PACKED_2X2_FLOAT32:EI.UNPACKED_FLOAT32:e?EI.PACKED_2X2_FLOAT16:EI.UNPACKED_FLOAT16}(t);if(e===$I.DOWNLOAD||e===$I.PIXELS)return EI.PACKED_4X1_UNSIGNED_BYTE;throw new Error(`Unknown logical texture type ${e}`)}function XR(e,t,n){return`${e[0]}_${e[1]}_${t}_${n}`}class YR{constructor(e){this.variableNames=["A"],this.packedInputs=!0,this.packedOutput=!1,this.outputShape=e,this.enableShapeUniforms=iS(this.outputShape.length);const t=e.length,n=uS("rc",t),s=wI(t),r=function(e,t){if(1===e)return"rc";let n="";for(let s=0;s<e;s++)n+=t[s],s<e-1&&(n+=",");return n}(t,n),a=n.slice(-2),i=t<=1?"rc":`vec2(${a.join(",")})`;this.userCode=`\n      void main() {\n        ${s} rc = getOutputCoords();\n        vec4 packedInput = getA(${r});\n\n        setOutput(getChannel(packedInput, ${i}));\n      }\n    `}}const ZR=Uc.whereImpl,JR={};const QR=le().getNumber("CPU_HANDOFF_SIZE_THRESHOLD");class eF extends l{constructor(e){if(super(),this.pendingRead=new WeakMap,this.pendingDisposal=new WeakSet,this.dataRefCount=new WeakMap,this.numBytesInGPU=0,this.uploadWaitMs=0,this.downloadWaitMs=0,this.lastGlFlushTime=0,this.warnedAboutMemory=!1,this.pendingDeletes=0,this.disposed=!1,!le().getBool("HAS_WEBGL"))throw new Error("WebGL is not supported on this device");let t;if(null!=e){if(e instanceof GR)t=e;else{const n=TI(le().getNumber("WEBGL_VERSION"),e);t=new GR(n)}this.binaryCache={},this.gpgpuCreatedLocally=!1}else{const e=TI(le().getNumber("WEBGL_VERSION"));t=new GR(e),this.binaryCache=((n=le().getNumber("WEBGL_VERSION"))in JR||(JR[n]={}),JR[n]),this.gpgpuCreatedLocally=!0}var n;this.gpgpu=t,this.canvas=this.gpgpu.gl.canvas,this.textureManager=new jR(this.gpgpu),this.numMBBeforeWarning=null==le().global.screen?1024:le().global.screen.height*le().global.screen.width*window.devicePixelRatio*600/1024/1024,this.texData=new o(this,Qc())}nextDataId(){return eF.nextDataId++}numDataIds(){return this.texData.numDataIds()-this.pendingDeletes}write(e,t,n){if((le().getBool("WEBGL_CHECK_NUMERICAL_PROBLEMS")||le().getBool("DEBUG"))&&this.checkNumericalProblems(e),"complex64"===n&&null!=e)throw new Error("Cannot write to a complex64 dtype. Please use tf.complex(real, imag).");const s={id:this.nextDataId()};return this.texData.set(s,{shape:t,dtype:n,values:e,usage:$I.UPLOAD,refCount:1}),s}refCount(e){if(this.texData.has(e)){return this.texData.get(e).refCount}return 0}incRef(e){this.texData.get(e).refCount++}decRef(e){if(this.texData.has(e)){this.texData.get(e).refCount--}}move(e,t,n,s,r){if(le().getBool("DEBUG")&&this.checkNumericalProblems(t),"complex64"===s)throw new Error("Cannot write to a complex64 dtype. Please use tf.complex(real, imag).");this.texData.set(e,{shape:n,dtype:s,values:t,usage:$I.UPLOAD,refCount:r})}disposeIntermediateTensorInfo(e){this.disposeData(e.dataId)}readSync(e){const t=this.texData.get(e),{values:n,dtype:s,complexTensorInfos:r,slice:a,shape:i,isPacked:o}=t;if(null!=a){let t;t=o?new SS(i,IS):new vS(i,IS);const n=this.runWebGLProgram(t,[{dataId:e,shape:i,dtype:s}],s),r=this.readSync(n.dataId);return this.disposeIntermediateTensorInfo(n),r}if(null!=n)return this.convertAndCacheOnCPU(e);if("string"===s)return n;const l=null!=this.activeTimers;let u,c;if(l&&(u=Us.now()),"complex64"===s){const e=this.readSync(r.real.dataId),t=this.readSync(r.imag.dataId);c=Bl.mergeRealAndImagArrays(e,t)}else c=this.getValuesFromTexture(e);return l&&(this.downloadWaitMs+=Us.now()-u),this.convertAndCacheOnCPU(e,c)}async read(e){if(this.pendingRead.has(e)){const t=this.pendingRead.get(e);return new Promise((e=>t.push(e)))}const t=this.texData.get(e),{values:n,shape:s,slice:r,dtype:a,complexTensorInfos:i,isPacked:o}=t;if(null!=r){let t;t=o?new SS(s,IS):new vS(s,IS);const n=this.runWebGLProgram(t,[{dataId:e,shape:s,dtype:a}],a),r=this.read(n.dataId);return this.disposeIntermediateTensorInfo(n),r}if(null!=n)return this.convertAndCacheOnCPU(e);if(le().getBool("DEBUG")&&!le().getBool("WEBGL_DOWNLOAD_FLOAT_ENABLED")&&2===le().getNumber("WEBGL_VERSION"))throw new Error("tensor.data() with WEBGL_DOWNLOAD_FLOAT_ENABLED=false and WEBGL_VERSION=2 not yet supported.");let l,u,c=null;if("complex64"!==a&&le().get("WEBGL_BUFFER_SUPPORTED")){l=this.decode(e);const t=this.texData.get(l.dataId);c=this.gpgpu.createBufferFromTexture(t.texture.texture,...RI(s))}if(this.pendingRead.set(e,[]),"complex64"!==a&&await this.gpgpu.createAndWaitForFence(),"complex64"===a){const e=await Promise.all([this.read(i.real.dataId),this.read(i.imag.dataId)]),t=e[0],n=e[1];u=Bl.mergeRealAndImagArrays(t,n)}else if(null==c)u=this.getValuesFromTexture(e);else{const e=Us.sizeFromShape(s);u=this.gpgpu.downloadFloat32MatrixFromBuffer(c,e)}if(null!=l&&this.disposeIntermediateTensorInfo(l),null!=c){const e=this.gpgpu.gl;_I(e,(()=>e.deleteBuffer(c)))}const h=this.convertAndCacheOnCPU(e,u),p=this.pendingRead.get(e);return this.pendingRead.delete(e),p.forEach((e=>e(h))),this.pendingDisposal.has(e)&&(this.pendingDisposal.delete(e),this.disposeData(e)&&Qc().removeDataId(e,this),this.pendingDeletes--),h}readToGPU(e,t={}){const n=this.texData.get(e),{values:s,shape:r,slice:a,dtype:i,isPacked:o,texture:l}=n;if("complex64"===i)throw new Error("Does not support reading texture for complex64 dtype.");if(null!=a){let n;n=o?new SS(r,IS):new vS(r,IS);const s=this.runWebGLProgram(n,[{dataId:e,shape:r,dtype:i}],i),a=this.readToGPU(s,t);return this.disposeIntermediateTensorInfo(s),a}if(null==l)throw null!=s?new Error("Data is not on GPU but on CPU."):new Error("There is no data on GPU or CPU.");const u=this.decode(e,t.customTexShape),c=Qc().makeTensorFromDataId(u.dataId,u.shape,u.dtype),h=this.texData.get(u.dataId);return Object.assign({tensorRef:c},h.texture)}bufferSync(e){const t=this.readSync(e.dataId);let n=t;if("string"===e.dtype)try{n=t.map((e=>Us.decodeString(e)))}catch(e){throw new Error("Failed to decode encoded string bytes into utf-8")}return Bo(e.shape,e.dtype,n)}checkNumericalProblems(e){if(null!=e)for(let t=0;t<e.length;t++){const n=e[t];if(!OI(n)){if(le().getBool("WEBGL_RENDER_FLOAT32_CAPABLE"))throw Error(`The value ${n} cannot be represented with your current settings. Consider enabling float32 rendering: 'tf.env().set('WEBGL_RENDER_FLOAT32_ENABLED', true);'`);throw Error(`The value ${n} cannot be represented on this device.`)}}}getValuesFromTexture(e){const{shape:t,dtype:n,isPacked:s}=this.texData.get(e),r=Us.sizeFromShape(t);if(le().getBool("WEBGL_DOWNLOAD_FLOAT_ENABLED")){const n=this.decode(e),s=this.texData.get(n.dataId),a=this.gpgpu.downloadMatrixFromPackedTexture(s.texture.texture,...RI(t)).subarray(0,r);return this.disposeIntermediateTensorInfo(n),a}const a=le().getBool("WEBGL_PACK")&&!0===s,i=a?XI(t):t,o=a?new RR(i):new AR(i),l=this.runWebGLProgram(o,[{shape:i,dtype:n,dataId:e}],"float32"),u=this.texData.get(l.dataId),c=this.gpgpu.downloadByteEncodedFloatMatrixFromOutputTexture(u.texture.texture,u.texShape[0],u.texShape[1]).subarray(0,r);return this.disposeIntermediateTensorInfo(l),c}timerAvailable(){return le().getNumber("WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_RELIABLE")>0}time(e){const t=this.activeTimers,n=[];let s=!1;null==this.programTimersStack?(this.programTimersStack=n,s=!0):this.activeTimers.push(n),this.activeTimers=n,e();const r=Us.flatten(this.activeTimers.map((e=>e.query))).filter((e=>null!=e)),a=Us.flatten(this.activeTimers.map((e=>e.name))).filter((e=>null!=e));this.activeTimers=t,s&&(this.programTimersStack=null);const i={uploadWaitMs:this.uploadWaitMs,downloadWaitMs:this.downloadWaitMs,kernelMs:null,wallMs:null};return(async()=>{if(le().getNumber("WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_RELIABLE")>0){const e=await Promise.all(r);i.kernelMs=Us.sum(e),i.getExtraProfileInfo=()=>e.map(((e,t)=>({name:a[t],ms:e}))).map((e=>`${e.name}: ${e.ms}`)).join(", ")}else i.kernelMs={error:"WebGL query timers are not supported in this environment."};return this.uploadWaitMs=0,this.downloadWaitMs=0,i})()}memory(){return{unreliable:!1,numBytesInGPU:this.numBytesInGPU,numBytesInGPUAllocated:this.textureManager.numBytesAllocated,numBytesInGPUFree:this.textureManager.numBytesFree}}startTimer(){return le().getNumber("WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_RELIABLE")>0?this.gpgpu.beginQuery():{startMs:Us.now(),endMs:null}}endTimer(e){return le().getNumber("WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_RELIABLE")>0?(this.gpgpu.endQuery(),e):(e.endMs=Us.now(),e)}async getQueryTime(e){if(le().getNumber("WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_RELIABLE")>0)return this.gpgpu.waitForQueryAndGetTime(e);const t=e;return t.endMs-t.startMs}disposeData(e,t=!1){if(this.pendingDisposal.has(e))return!1;if(!this.texData.has(e))return!0;if(t?this.texData.get(e).refCount=0:this.texData.get(e).refCount--,!t&&this.texData.get(e).refCount>0)return!1;if(this.pendingRead.has(e))return this.pendingDisposal.add(e),this.pendingDeletes++,!1;this.releaseGPUData(e);const{complexTensorInfos:n}=this.texData.get(e);return null!=n&&(this.disposeData(n.real.dataId,t),this.disposeData(n.imag.dataId,t)),this.texData.delete(e),!0}releaseGPUData(e){const{texture:t,dtype:n,texShape:s,usage:r,isPacked:a,slice:i}=this.texData.get(e),o=i&&i.origDataId||e,l=this.dataRefCount.get(o);l>1?this.dataRefCount.set(o,l-1):(this.dataRefCount.delete(o),null!=t&&(this.numBytesInGPU-=this.computeBytes(s,n),this.textureManager.releaseTexture(t,s,r,a)));const u=this.texData.get(e);u.texture=null,u.texShape=null,u.isPacked=!1,u.slice=null}getTexture(e){return this.uploadToGPU(e),this.texData.get(e).texture.texture}getDataInfo(e){return this.texData.get(e)}shouldExecuteOnCPU(e,t=QR){return le().getBool("WEBGL_CPU_FORWARD")&&e.every((e=>null==this.texData.get(e.dataId).texture&&Us.sizeFromShape(e.shape)<t))}getGPGPUContext(){return this.gpgpu}where(e){Bl.warn("tf.where() in webgl locks the UI thread. Call tf.whereAsync() instead");const t=e.dataSync();return ZR(e.shape,t)}packedUnaryOp(e,t,n){const s=new SS(e.shape,t),r=this.compileAndRun(s,[e],n);return Qc().makeTensorFromDataId(r.dataId,r.shape,r.dtype)}abs(e){if(this.shouldExecuteOnCPU([e])&&"complex64"!==e.dtype){const t=iN(this.texData.get(e.dataId).values);return this.makeOutput(e.shape,e.dtype,t)}if(le().getBool("WEBGL_PACK_UNARY_OPERATIONS"))return this.packedUnaryOp(e,kS,e.dtype);const t=new vS(e.shape,kS),n=this.compileAndRun(t,[e]);return Qc().makeTensorFromDataId(n.dataId,n.shape,n.dtype)}makeTensorInfo(e,t,n){let s;if("string"===t&&null!=n&&n.length>0&&Us.isString(n[0])){const r=n.map((e=>Us.encodeString(e)));s=this.write(r,e,t)}else s=this.write(n,e,t);return this.texData.get(s).usage=null,{dataId:s,shape:e,dtype:t}}makeOutput(e,t,n){const{dataId:s}=this.makeTensorInfo(e,t,n);return Qc().makeTensorFromDataId(s,e,t,this)}unpackTensor(e){const t=new YR(e.shape);return this.runWebGLProgram(t,[e],e.dtype)}packTensor(e){const t=new HR(e.shape);return this.runWebGLProgram(t,[e],e.dtype,null,!0)}packedReshape(e,t){const n=[qI(e.shape),...KI(e.shape)],s={dtype:e.dtype,shape:n,dataId:e.dataId},r=[qI(t),...KI(t)],a=new SN(r,n),i=[n],o=this.runWebGLProgram(a,[s],e.dtype,i,!0);return{dataId:o.dataId,shape:t,dtype:o.dtype}}decode(e,t){const n=this.texData.get(e),{isPacked:s,shape:r,dtype:a}=n;if(null!=t){const e=Us.sizeFromShape(r),n=t[0]*t[1]*4;Us.assert(e<=n,(()=>"customTexShape is too small. Row * Column * 4 should be equal or larger than the size of the tensor data."))}const i=XI(r);let o;o=s?new ER(i):new $R(i);const l=[null!=t?t:RI(i)];return{dtype:a,shape:r,dataId:this.runWebGLProgram(o,[{shape:i,dtype:a,dataId:e}],a,l,!0,t).dataId}}runWebGLProgram(e,t,n,s,r=!1,a){const i=this.makeTensorInfo(e.outputShape,n),o=this.texData.get(i.dataId);if(e.packedOutput&&(o.isPacked=!0),e.outPackingScheme===CI.DENSE){const t=null!=a?a:RI(e.outputShape);o.texShape=t.map((e=>2*e))}if(null!=e.outTexUsage&&(o.usage=e.outTexUsage),0===Us.sizeFromShape(i.shape))return o.values=Us.getTypedArrayFromDType(i.dtype,0),i;const l=[],u=t.map((t=>{if("complex64"===t.dtype)throw new Error("GPGPUProgram does not support complex64 input. For complex64 dtypes, please separate the program into real and imaginary parts.");let n=this.texData.get(t.dataId);if(null==n.texture){if(!e.packedInputs&&Us.sizeFromShape(t.shape)<=le().getNumber("WEBGL_SIZE_UPLOAD_UNIFORM"))return{shape:t.shape,texData:null,isUniform:!0,uniformValues:n.values};e.packedInputs&&(n.isPacked=!0,n.shape=t.shape)}if(this.uploadToGPU(t.dataId),!!n.isPacked!=!!e.packedInputs)t=n.isPacked?this.unpackTensor(t):this.packTensor(t),l.push(t),n=this.texData.get(t.dataId);else if(n.isPacked&&!ZI(n.shape,t.shape)){const e=t,s=t.shape;t.shape=n.shape,t=this.packedReshape(t,s),l.push(t),n=this.texData.get(t.dataId),e.shape=s}return{shape:t.shape,texData:n,isUniform:!1}}));this.uploadToGPU(i.dataId);const c={shape:i.shape,texData:o,isUniform:!1},h=function(e,t,n){let s="";t.concat(n).forEach((t=>{const r=null!=t.texData&&null!=t.texData.slice&&t.texData.slice.flatOffset>0;if(e.enableShapeUniforms&&!t.isUniform){const a=t.texData.texShape,{useSqueezeShape:i,uniformShape:o,keptDims:l}=vI(e.packedInputs,t.shape,a);let u="",c="",h="";if(1===o.length&&e.packedInputs){const e=[Math.ceil(a[0]/2),Math.ceil(a[1]/2)];u=`${e[0]>1}_${e[1]>1}`}else if(2!==o.length||e.packedInputs){if(o.length>2&&!e.packedInputs){const e=Us.computeStrides(o);h=`${e[0]===a[1]}_${e[e.length-1]===a[1]}`}}else c=`${o[0]>1}_${o[1]>1}`;const p=t.shape.length,d=2===o.length&&Us.arraysEqual(t.shape,a),f=1===Us.sizeFromShape(t.shape),m=Bl.getBroadcastDims(t.shape,n.shape),g=!e.packedInputs&&p===n.shape.length&&Us.arraysEqual(a,n.texData.texShape),y=e.packedInputs||o.length>2?"":`${a[0]>1}_${a[1]>1}`;s+=`${p}_${g}_${i?l:""}_${o.length}_${f}_${m}_${d}_${u}_${c}_${h}_${y}_${r}`}else{const e=t.isUniform?"uniform":t.texData.texShape;s+=`${t.shape}_${e}_${r}`}}));const r=e.userCode;let a=e.constructor.name;return a+="_"+s+"_"+r+`${le().getNumber("WEBGL_VERSION")}`,a}(e,u,c),p=this.getAndSaveBinary(h,(()=>function(e,t,n,s){const r=n.map(((e,n)=>{const s={logicalShape:e.shape,texShape:e.isUniform?null:e.texData.texShape,isUniform:e.isUniform,isPacked:!e.isUniform&&e.texData.isPacked,flatOffset:null};return null!=e.texData&&null!=e.texData.slice&&e.texData.slice.flatOffset>0&&(s.flatOffset=e.texData.slice.flatOffset),{name:t.variableNames[n],shapeInfo:s}})),a=r.map((e=>e.shapeInfo)),i={logicalShape:s.shape,texShape:s.texData.texShape,isUniform:!1,isPacked:s.texData.isPacked,flatOffset:null},o=cI(r,i,t),l=LI(e.gl,o),u=e.createProgram(l);let c=null;const h=e.getUniformLocation(u,"NAN",!1);1===le().getNumber("WEBGL_VERSION")&&(c=e.getUniformLocation(u,"INFINITY",!1));const p=!1,d={},f={},m={};for(let n=0;n<t.variableNames.length;n++){const s=t.variableNames[n];d[s]=e.getUniformLocation(u,s,p),d[`offset${s}`]=e.getUniformLocation(u,`offset${s}`,p),t.enableShapeUniforms&&(f[`${s}Shape`]=e.getUniformLocation(u,`${s}Shape`,p),m[`${s}TexShape`]=e.getUniformLocation(u,`${s}TexShape`,p))}let g,y,b;t.enableShapeUniforms&&(g=e.getUniformLocation(u,"outShape",p),b=e.getUniformLocation(u,"outShapeStrides",p),y=e.getUniformLocation(u,"outTexShape",p));const x=[];return t.customUniforms&&t.customUniforms.forEach(((t,n)=>{x[n]=e.getUniformLocation(u,t.name,p)})),{program:t,fragmentShader:l,source:o,webGLProgram:u,uniformLocations:d,customUniformLocations:x,inShapeInfos:a,outShapeInfo:i,infLoc:c,nanLoc:h,inShapesLocations:f,inTexShapesLocations:m,outShapeLocation:g,outShapeStridesLocation:b,outTexShapeLocation:y}}(this.gpgpu,e,u,c))),d=null!=this.activeTimers;let f;d&&(f=this.startTimer()),function(e,t,n,s,r){t.program.enableShapeUniforms||(aS(t.inShapeInfos,n),aS([t.outShapeInfo],[s]));const a=s.texData.texture,i=s.texData.texShape;s.texData.isPacked?e.setOutputPackedMatrixTexture(a.texture,i[0],i[1]):e.setOutputMatrixTexture(a.texture,i[0],i[1]),e.setProgram(t.webGLProgram),1===le().getNumber("WEBGL_VERSION")&&null!==t.infLoc&&e.gl.uniform1f(t.infLoc,1/0),null!==t.nanLoc&&e.gl.uniform1f(t.nanLoc,NaN),n.forEach(((n,s)=>{const r=t.program.variableNames[s],a=t.uniformLocations[r],i=t.uniformLocations[`offset${r}`],o=t.inShapesLocations[`${r}Shape`],l=t.inTexShapesLocations[`${r}TexShape`];if(o){const{uniformShape:s}=vI(t.program.packedInputs,n.shape,n.texData.texShape);switch(s.length){case 1:e.gl.uniform1iv(o,new Int32Array(s));break;case 2:e.gl.uniform2iv(o,new Int32Array(s));break;case 3:e.gl.uniform3iv(o,new Int32Array(s));break;case 4:e.gl.uniform4iv(o,new Int32Array(s))}}if(l&&e.gl.uniform2i(l,n.texData.texShape[0],n.texData.texShape[1]),null!=a)if(n.isUniform)if(Us.sizeFromShape(n.shape)<2)e.gl.uniform1f(a,n.uniformValues[0]);else{let t=n.uniformValues;t instanceof Float32Array||(t=new Float32Array(t)),e.gl.uniform1fv(a,t)}else null!=n.texData.slice&&null!=i&&e.gl.uniform1i(i,n.texData.slice.flatOffset),e.setInputMatrixTexture(n.texData.texture.texture,a,s)}));const o=t.outShapeLocation;if(o)switch(s.shape.length){case 1:e.gl.uniform1iv(o,new Int32Array(s.shape));break;case 2:e.gl.uniform2iv(o,new Int32Array(s.shape));break;case 3:e.gl.uniform3iv(o,new Int32Array(s.shape));break;case 4:e.gl.uniform4iv(o,new Int32Array(s.shape))}if(t.outShapeStridesLocation){const n=Us.computeStrides(s.shape);switch(s.shape.length){case 2:e.gl.uniform1iv(t.outShapeStridesLocation,new Int32Array(n));break;case 3:e.gl.uniform2iv(t.outShapeStridesLocation,new Int32Array(n));break;case 4:e.gl.uniform3iv(t.outShapeStridesLocation,new Int32Array(n))}}t.outTexShapeLocation&&e.gl.uniform2i(t.outTexShapeLocation,s.texData.texShape[0],s.texData.texShape[1]),t.program.customUniforms&&r&&t.program.customUniforms.forEach(((n,s)=>{const a=t.customUniformLocations[s],i=r[s];if("float"===n.type)e.gl.uniform1fv(a,i);else if("vec2"===n.type)e.gl.uniform2fv(a,i);else if("vec3"===n.type)e.gl.uniform3fv(a,i);else if("vec4"===n.type)e.gl.uniform4fv(a,i);else if("int"===n.type)e.gl.uniform1iv(a,i);else if("ivec2"===n.type)e.gl.uniform2iv(a,i);else if("ivec3"===n.type)e.gl.uniform3iv(a,i);else{if("ivec4"!==n.type)throw Error(`uniform type ${n.type} is not supported yet.`);e.gl.uniform4iv(a,i)}})),e.executeProgram()}(this.gpgpu,p,u,c,s),l.forEach((e=>this.disposeIntermediateTensorInfo(e))),d&&(f=this.endTimer(f),this.activeTimers.push({name:e.constructor.name,query:this.getQueryTime(f)}));const m=le().get("WEBGL_FLUSH_THRESHOLD");if(m>0){const e=Us.now();e-this.lastGlFlushTime>m&&(this.gpgpu.gl.flush(),this.lastGlFlushTime=e)}if(!le().getBool("WEBGL_LAZILY_UNPACK")&&o.isPacked&&!1===r){const e=this.unpackTensor(i);return this.disposeIntermediateTensorInfo(i),e}return i}compileAndRun(e,t,n,s,r=!1){n=n||t[0].dtype;return this.runWebGLProgram(e,t,n,s,r)}getAndSaveBinary(e,t){return e in this.binaryCache||(this.binaryCache[e]=t()),this.binaryCache[e]}getTextureManager(){return this.textureManager}dispose(){if(!this.disposed){if(!le().getBool("IS_TEST")){Object.keys(this.binaryCache).forEach((e=>{this.gpgpu.deleteProgram(this.binaryCache[e].webGLProgram),delete this.binaryCache[e]}))}this.textureManager.dispose(),null!=this.canvas&&"undefined"!=typeof HTMLCanvasElement&&this.canvas instanceof HTMLCanvasElement?this.canvas.remove():this.canvas=null,this.gpgpuCreatedLocally&&(this.gpgpu.program=null,this.gpgpu.dispose()),this.disposed=!0}}floatPrecision(){return null==this.floatPrecisionValue&&(this.floatPrecisionValue=th((()=>{if(!le().get("WEBGL_RENDER_FLOAT32_ENABLED")){const e=le().getBool("DEBUG");le().set("DEBUG",!1);const t=this.abs(bh(1e-8)).dataSync()[0];if(le().set("DEBUG",e),t>0)return 32}return 16}))),this.floatPrecisionValue}epsilon(){return 32===this.floatPrecision()?1e-7:1e-4}uploadToGPU(e){const t=this.texData.get(e),{shape:n,dtype:s,values:r,texture:a,usage:i,isPacked:o}=t;if(null!=a)return;const l=null!=this.activeTimers;let u;l&&(u=Us.now());let c=t.texShape;if(null==c&&(c=function(e,t=!1){let n=le().getNumber("WEBGL_MAX_TEXTURE_SIZE");if(t&&(n*=2,1===(e=e.map(((t,n)=>n>=e.length-2?Us.nearestLargerEven(e[n]):e[n]))).length&&(e=[2,e[0]])),2!==e.length){const t=Us.squeezeShape(e);e=t.newShape}let s=Us.sizeFromShape(e);if(e.length<=1&&s<=n)return[1,s];if(2===e.length&&e[0]<=n&&e[1]<=n)return e;if(3===e.length&&e[0]*e[1]<=n&&e[2]<=n)return[e[0]*e[1],e[2]];if(3===e.length&&e[0]<=n&&e[1]*e[2]<=n)return[e[0],e[1]*e[2]];if(4===e.length&&e[0]*e[1]*e[2]<=n&&e[3]<=n)return[e[0]*e[1]*e[2],e[3]];if(4===e.length&&e[0]<=n&&e[1]*e[2]*e[3]<=n)return[e[0],e[1]*e[2]*e[3]];if(t){const t=qI(e);let n=2,r=2;return e.length&&([n,r]=KI(e)),s=t*(n/2)*(r/2),Us.sizeToSquarishShape(s).map((e=>2*e))}return Us.sizeToSquarishShape(s)}(n,o),t.texShape=c),null!=r){const e=XI(n);let a,i=c[1],h=c[0];const p=r instanceof Uint8Array||r instanceof Uint8ClampedArray;!o&&p||([i,h]=FI(c[0],c[1])),a=o?new DR(e,p):new FR(e,p);const d=p?[h,i]:c,f=this.makeTensorInfo(d,s),m=this.texData.get(f.dataId);m.usage=p?$I.PIXELS:$I.UPLOAD,m.texShape=d,this.gpgpu.uploadDenseMatrixToTexture(this.getTexture(f.dataId),i,h,r);const g=[[h,i]],y=!0,b=this.runWebGLProgram(a,[f],s,g,y),x=this.texData.get(b.dataId);t.texture=x.texture,t.texShape=x.texShape,t.isPacked=x.isPacked,t.usage=x.usage,this.disposeIntermediateTensorInfo(f),this.texData.delete(b.dataId),t.values=null,l&&(this.uploadWaitMs+=Us.now()-u)}else{const e=this.acquireTexture(c,i,s,o);t.texture=e}}convertAndCacheOnCPU(e,t){const n=this.texData.get(e),{dtype:s}=n;return this.releaseGPUData(e),null!=t&&(n.values=function(e,t){if("float32"===t||"complex64"===t)return e;if("int32"===t||"bool"===t){const n="int32"===t?new Int32Array(e.length):new Uint8Array(e.length);for(let t=0;t<n.length;++t)n[t]=Math.round(e[t]);return n}throw new Error(`Unknown dtype ${t}`)}(t,s)),n.values}acquireTexture(e,t,n,s){if(this.numBytesInGPU+=this.computeBytes(e,n),!this.warnedAboutMemory&&this.numBytesInGPU>1048576*this.numMBBeforeWarning){const e=(this.numBytesInGPU/1024/1024).toFixed(2);this.warnedAboutMemory=!0,console.warn(`High memory usage in GPU: ${e} MB, most likely due to a memory leak`)}return this.textureManager.acquireTexture(e,t,s)}computeBytes(e,t){return e[0]*e[1]*Us.bytesPerElement(t)}}eF.nextDataId=0;xa.isBrowser()&&rh("webgl",(()=>new eF),2);let tF;function nF(){return null==tF&&(tF=ya.backend.epsilon()),tF}class sF extends Error{constructor(e){super(e),Object.setPrototypeOf(this,sF.prototype)}}class rF extends Error{constructor(e){super(e),Object.setPrototypeOf(this,rF.prototype)}}class aF extends Error{constructor(e){super(e),Object.setPrototypeOf(this,aF.prototype)}}class iF extends Error{constructor(e){super(e),Object.setPrototypeOf(this,iF.prototype)}}class oF extends Error{constructor(e){super(e),Object.setPrototypeOf(this,oF.prototype)}}Error;function lF(e,t){if(Array.isArray(e)){let n=[];for(let s=0;s<t;s++)n=n.concat(e);return n}{const n=new Array(t);return n.fill(e),n}}function uF(e,t){if(!e)throw new oF(t)}function cF(e,t){let n=0;for(const s of e)s===t&&n++;return n}function hF(e){return 1===e.length?e[0]:e}function pF(e){return Array.isArray(e)?e:[e]}function dF(e){const t=e.replace(/(.)([A-Z][a-z0-9]+)/g,"$1_$2").replace(/([a-z])([A-Z])/g,"$1_$2").toLowerCase();return"_"!==t[0]?t:"private"+t}function fF(e){return e.length<=1||-1===e.indexOf("_")?e:e.replace(/[_]+(\w|$)/g,((e,t)=>t.toUpperCase()))}let mF={};function gF(e){if(null==e)return null;const t={};return t.className=e.getClassName(),t.config=e.getConfig(),t}function yF(e){if(null!=e&&"object"==typeof e)if(Array.isArray(e))e.forEach((e=>yF(e)));else{const t=Object.keys(e);for(const n of t){const t=e[n];null!=t&&"object"==typeof t&&(Array.isArray(t)||"ndarray"!==t.type||"number"!=typeof t.value?yF(t):e[n]=t.value)}}}function bF(e,t={},n={},s="object",r=!1){if("string"==typeof e){const r=e;let a;if(r in n)a=n[r];else if(r in mF)a=mF[r];else if(a=t[r],null==a)throw new aF(`Unknown ${s}: ${e}. This may be due to one of the following reasons:\n1. The ${s} is defined in Python, in which case it needs to be ported to TensorFlow.js or your JavaScript code.\n2. The custom ${s} is defined in JavaScript, but is not registered properly with tf.serialization.registerClass().`);return a}{const a=e;if(null==a.className||null==a.config)throw new aF(`${s}: Improper config format: ${JSON.stringify(a)}.\n'className' and 'config' must set.`);const i=a.className;let o,l;if(i in n?[o,l]=n[i]:i in mF?[o,l]=mF.className:i in t&&([o,l]=t[i]),null==o)throw new aF(`Unknown ${s}: ${i}. This may be due to one of the following reasons:\n1. The ${s} is defined in Python, in which case it needs to be ported to TensorFlow.js or your JavaScript code.\n2. The custom ${s} is defined in JavaScript, but is not registered properly with tf.serialization.registerClass().`);if(null!=l){const e={};for(const t of Object.keys(mF))e[t]=mF[t];for(const t of Object.keys(n))e[t]=n[t];a.config.customObjects=e;const t=Object.assign({},mF);for(const e of Object.keys(n))mF[e]=n[e];yF(a.config);const s=l(o,a.config,n,r);return mF=Object.assign({},t),s}{const e=Object.assign({},mF);for(const e of Object.keys(n))mF[e]=n[e];const t=new o(a.config);return mF=Object.assign({},e),t}}}function xF(e,t){return-1*function(e,t){return e<t?-1:e>t?1:0}(e,t)}function wF(e){if(null==e)return e;const t=[];for(const n of e)-1===t.indexOf(n)&&t.push(n);return t}function vF(e){if(null==e)throw new aF(`Invalid value in obj: ${JSON.stringify(e)}`);for(const t in e)if(e.hasOwnProperty(t))return!1;return!0}function kF(e,t,n){if(null!=n&&e.indexOf(n)<0)throw new aF(`${n} is not a valid ${t}.  Valid values are ${e} or null/undefined.`)}function IF(e,t,n=0,s=1/0){return uF(n>=0),uF(s>=n),Array.isArray(e)&&e.length>=n&&e.length<=s&&e.every((e=>typeof e===t))}function SF(e,t){Array.isArray(e)?(Us.assert(e.length>0,(()=>`${t} is unexpectedly an empty array.`)),e.forEach(((e,n)=>SF(e,`element ${n+1} of ${t}`)))):Us.assert(Number.isInteger(e)&&e>0,(()=>`Expected ${t} to be a positive integer, but got ${NF(e)}.`))}function NF(e){return null===e?"null":Array.isArray(e)?"["+e.map((e=>NF(e))).join(",")+"]":"string"==typeof e?`"${e}"`:`${e}`}function TF(e){return"relu"===e?"relu":"linear"===e?"linear":"elu"===e?"elu":null}function CF(e,t){return th((()=>xp(Au(Iu(e,e),t,!0))))}class $F extends Ol.Serializable{getConfig(){return{}}}class EF extends $F{constructor(e){super(),this.defaultMaxValue=2,this.defaultAxis=0,this.maxValue=null!=e.maxValue?e.maxValue:this.defaultMaxValue,this.axis=null!=e.axis?e.axis:this.defaultAxis}apply(e){return th((()=>{const t=CF(e,this.axis),n=gd(t,0,this.maxValue);return Iu(e,np(n,vh(nF(),t)))}))}getConfig(){return{maxValue:this.maxValue,axis:this.axis}}}EF.className="MaxNorm",Ol.registerClass(EF);class AF extends $F{constructor(e){super(),this.defaultAxis=0,this.axis=null!=e.axis?e.axis:this.defaultAxis}apply(e){return th((()=>np(e,vh(nF(),CF(e,this.axis)))))}getConfig(){return{axis:this.axis}}}AF.className="UnitNorm",Ol.registerClass(AF);class RF extends $F{apply(e){return Nu(e)}}RF.className="NonNeg",Ol.registerClass(RF);class FF extends $F{constructor(e){super(),this.defaultMinValue=0,this.defaultMaxValue=1,this.defaultRate=1,this.defaultAxis=0,this.minValue=null!=e.minValue?e.minValue:this.defaultMinValue,this.maxValue=null!=e.maxValue?e.maxValue:this.defaultMaxValue,this.rate=null!=e.rate?e.rate:this.defaultRate,this.axis=null!=e.axis?e.axis:this.defaultAxis}apply(e){return th((()=>{const t=CF(e,this.axis),n=vh(Iu(this.rate,gd(t,this.minValue,this.maxValue)),Iu(1-this.rate,t));return Iu(e,np(n,vh(nF(),t)))}))}getConfig(){return{minValue:this.minValue,maxValue:this.maxValue,rate:this.rate,axis:this.axis}}}FF.className="MinMaxNorm",Ol.registerClass(FF);const DF={maxNorm:"MaxNorm",minMaxNorm:"MinMaxNorm",nonNeg:"NonNeg",unitNorm:"UnitNorm"};function _F(e){return gF(e)}function OF(e,t={}){return bF(e,Ol.SerializationMap.getMap().classNameMap,t,"constraint")}function MF(e){if(null==e)return null;if("string"==typeof e){return OF({className:e in DF?DF[e]:e,config:{}})}return e instanceof $F?e:OF(e)}const LF=["channelsFirst","channelsLast"],zF=["nearest","bilinear"],BF=["valid","same","causal"],PF=["max","avg"],WF=["sum","mul","concat","ave"],UF=new Map;function VF(e){kF(LF,"DataFormat",e)}function GF(e){kF(BF,"PaddingMode",e)}function HF(e){kF(PF,"PoolMode",e)}const jF=[];function qF(e,t){jF.push(e);try{const e=t();return jF.pop(),e}catch(e){throw jF.pop(),e}}function KF(e){if(!ZF(e))throw new Error("Not a valid tensor name: '"+e+"'");return(0===jF.length?"":jF.join("/")+"/")+e}function XF(e){if(!ZF(e))throw new Error("Not a valid tensor name: '"+e+"'");UF.has(e)||UF.set(e,0);const t=UF.get(e);if(UF.set(e,UF.get(e)+1),t>0){const n=`${e}_${t}`;return UF.set(n,1),n}return e}const YF=new RegExp(/^[A-Za-z0-9][-A-Za-z0-9\._\/]*$/);function ZF(e){return!!e.match(YF)}function JF(e,t,n){null==t&&(t=0),null==n&&(n=e.length);let s=1;for(let r=t;r<n;++r)s*=e[r];return s}function QF(e){if(0===e.length)return Number.NaN;let t=Number.POSITIVE_INFINITY;for(let n=0;n<e.length;n++){const s=e[n];s<t&&(t=s)}return t}function eD(e){if(0===e.length)return Number.NaN;let t=Number.NEGATIVE_INFINITY;for(let n=0;n<e.length;n++){const s=e[n];s>t&&(t=s)}return t}function tD(e,t){if(t<e)throw new aF(`end (${t}) < begin (${e}) is forbidden.`);const n=[];for(let s=e;s<t;++s)n.push(s);return n}function nD(e,t){return Po(e,t)}function sD(e,t=-1){const n=e.shape.slice();return t<0&&(t=n.length+t+1),n.splice(t,0,1),Cu(e,n)}function rD(e,t,n){return th((()=>{switch(e.rank){case 1:return Ef(e,t,n);case 2:return Af(e,[t,0],[n,e.shape[1]]);case 3:return Rf(e,[t,0,0],[n,e.shape[1],e.shape[2]]);case 4:return Ff(e,[t,0,0,0],[n,e.shape[1],e.shape[2],e.shape[3]]);case 5:return ch(e,[t,0,0,0,0],[n,e.shape[1],e.shape[2],e.shape[3],e.shape[4]]);case 6:return ch(e,[t,0,0,0,0,0],[n,e.shape[1],e.shape[2],e.shape[3],e.shape[4],e.shape[5]]);default:throw new aF(`sliceAlongFirstAxis() received an unsupported tensor rank: ${e.rank}`)}}))}function aD(e,t,n){return th((()=>{switch(e.rank){case 1:return Ef(e,t,n);case 2:return Af(e,[0,t],[e.shape[0],n]);case 3:return Rf(e,[0,0,t],[e.shape[0],e.shape[1],n]);case 4:return Ff(e,[0,0,0,t],[e.shape[0],e.shape[1],e.shape[2],n]);default:throw new aF(`sliceAlongLastAxis() received an unsupported tensor rank: ${e.rank}`)}}))}function iD(e,t,n,s){return th((()=>{switch(e.rank){case 1:return Ef(e,t,n);case 2:switch(s){case 1:return rD(e,t,n);case 2:return aD(e,t,n);default:throw new aF(`The axis is not within the rank of the tensor ${s}`)}case 3:switch(s){case 1:return rD(e,t,n);case 2:return Rf(e,[0,t,0],[e.shape[0],n,e.shape[2]]);case 3:return aD(e,t,n);default:throw new aF(`The axis is not within the rank of the tensor ${s}`)}case 4:switch(s){case 1:return rD(e,t,n);case 2:return Ff(e,[0,t,0,0],[e.shape[0],n,e.shape[2],e.shape[3]]);case 3:return Ff(e,[0,0,t,0],[e.shape[0],e.shape[1],n,e.shape[3]]);case 4:return aD(e,t,n);default:throw new aF(`The axis is not within the rank of the tensor ${s}`)}default:throw new aF(`sliceAlongLastAxis() received an unsupported tensor rank: ${e.rank}`)}}))}function oD(e,t=-1){let n;return t<0&&(n=e[0].rank,t=0!==n?n:0),t===e[0].rank&&(t=-1),oh(e,t)}function lD(e,t){switch(e.rank){case 1:return yd([e,t]);case 2:return bd([e,t],0);case 3:return xd([e,t],0);case 4:return wd([e,t],0);default:throw new aF(`concatAlongFirstAxis() received an unsupported tensor rank: ${e.rank}`)}}function uD(e,t){if(Array.isArray(t)||(t=[t]),e.rank!==t.length)throw new aF(`The length of input n (${t.length}) does not match the number of dimensions in input x (${e.rank})`);return Ph(e,t)}function cD(e,t=0,n=1,s,r){return xf(e,t,n,s,r)}function hD(e,t,n,s){if(e.rank<2||t.rank<2)throw new iF(`dot requires both inputs to be rank >= 2 but got x shape = ${e.shape} and y shape = ${t.shape}`);if(t.rank>=3){if(e.shape.slice(-1)[0]!==t.shape.slice(-2)[0])throw new iF(`If rank y >= 3, then the second last dim of y must equal the last dim of x but got x shape = ${e.shape} and  y shape = ${t.shape}`)}if(2===e.rank&&2===t.rank){const r=!1,a=!1;return wh.matMul({a:e,b:t,transposeA:r,transposeB:a,bias:s?fD(e.rank,s,"channelsLast"):null,activation:n})}{const r=e.shape.slice(),a=r.pop();e=Cu(e,[-1,a]);const i=t.shape.slice(),o=i.pop(),l=i.pop(),u=[...i,o],c=Array.from({length:t.rank},((e,n)=>0===n?t.rank-2:n<=t.rank-2?n-1:n));t=Cu($p(t,c),[l,-1]);const h=[...r,...u],p=!1,d=!1;return Cu(wh.matMul({a:e,b:t,transposeA:p,transposeB:d,bias:s?fD(e.rank,s,"channelsLast"):null,activation:n}),h)}}function pD(e,t,n){return th((()=>(t=Array.isArray(t)?Fh(t,"int32"):Po(t,"int32"),zd(e,t,n))))}function dD(e){return Iu(e,e)}function fD(e,t,n){const s=t.shape;if(1!==t.rank&&t.rank!==e)throw new aF(`Unexpected bias dimensions: ${t.rank}; expected it to be 1 or ${e}`);if(5===e){if("channelsFirst"===n)return 1===s.length?Cu(t,[1,s[0],1,1,1]):Cu(t,[1,s[3],s[0],s[1],s[2]]);if("channelsLast"===n)return 1===s.length?Cu(t,[1,1,1,1,s[0]]):Cu(t,[1].concat(s))}else if(4===e){if("channelsFirst"===n)return 1===s.length?Cu(t,[1,s[0],1,1]):Cu(t,[1,s[2],s[0],s[1]]);if("channelsLast"===n)return 1===s.length?Cu(t,[1,1,1,s[0]]):Cu(t,[1].concat(s))}else if(3===e){if("channelsFirst"===n)return 1===s.length?Cu(t,[1,s[0],1]):Cu(t,[1,s[1],s[0]]);if("channelsLast"===n)return 1===s.length?Cu(t,[1,1,s[0]]):Cu(t,[1].concat(s))}else if(e<3)return t;throw new aF(`Unsupported input rank by biasAdd: ${t.rank}`)}function mD(e,t,n){return th((()=>(null==n&&(n="channelsLast"),VF(n),vh(e,fD(e.rank,t,n)))))}function gD(e,t,n,s){return th((()=>Hf(e,t,n,s)))}function yD(e,t,n=!1){return n?e():t()}const bD=["fanIn","fanOut","fanAvg"],xD=["normal","uniform","truncatedNormal"];class wD extends Ol.Serializable{fromConfigUsesCustomObjects(){return!1}getConfig(){return{}}}class vD extends wD{apply(e,t){return ph(e,t)}}vD.className="Zeros",Ol.registerClass(vD);class kD extends wD{apply(e,t){return _p(e,t)}}kD.className="Ones",Ol.registerClass(kD);class ID extends wD{constructor(e){if(super(),"object"!=typeof e)throw new aF(`Expected argument of type ConstantConfig but got ${e}`);if(void 0===e.value)throw new aF(`config must have value set but got ${e}`);this.value=e.value}apply(e,t){return th((()=>Iu(bh(this.value),_p(e,t))))}getConfig(){return{value:this.value}}}ID.className="Constant",Ol.registerClass(ID);class SD extends wD{constructor(e){super(),this.DEFAULT_MINVAL=-.05,this.DEFAULT_MAXVAL=.05,this.minval=e.minval||this.DEFAULT_MINVAL,this.maxval=e.maxval||this.DEFAULT_MAXVAL,this.seed=e.seed}apply(e,t){return wf(e,this.minval,this.maxval,t)}getConfig(){return{minval:this.minval,maxval:this.maxval,seed:this.seed}}}SD.className="RandomUniform",Ol.registerClass(SD);class ND extends wD{constructor(e){super(),this.DEFAULT_MEAN=0,this.DEFAULT_STDDEV=.05,this.mean=e.mean||this.DEFAULT_MEAN,this.stddev=e.stddev||this.DEFAULT_STDDEV,this.seed=e.seed}apply(e,t){if("float32"!==(t=t||"float32")&&"int32"!==t)throw new iF(`randomNormal does not support dType ${t}.`);return cD(e,this.mean,this.stddev,t,this.seed)}getConfig(){return{mean:this.mean,stddev:this.stddev,seed:this.seed}}}ND.className="RandomNormal",Ol.registerClass(ND);class TD extends wD{constructor(e){super(),this.DEFAULT_MEAN=0,this.DEFAULT_STDDEV=.05,this.mean=e.mean||this.DEFAULT_MEAN,this.stddev=e.stddev||this.DEFAULT_STDDEV,this.seed=e.seed}apply(e,t){if("float32"!==(t=t||"float32")&&"int32"!==t)throw new iF(`truncatedNormal does not support dType ${t}.`);return Bf(e,this.mean,this.stddev,t,this.seed)}getConfig(){return{mean:this.mean,stddev:this.stddev,seed:this.seed}}}TD.className="TruncatedNormal",Ol.registerClass(TD);class CD extends wD{constructor(e){super(),this.gain=null!=e.gain?e.gain:1}apply(e,t){return th((()=>{if(2!==e.length||e[0]!==e[1])throw new aF("Identity matrix initializer can only be used for 2D square matrices.");return Iu(this.gain,Tp(e[0]))}))}getConfig(){return{gain:this.gain}}}CD.className="Identity",Ol.registerClass(CD);class $D extends wD{constructor(e){if(super(),e.scale<0)throw new aF(`scale must be a positive float. Got: ${e.scale}`);var t;this.scale=null==e.scale?1:e.scale,this.mode=null==e.mode?"fanIn":e.mode,t=this.mode,kF(bD,"FanMode",t),this.distribution=null==e.distribution?"normal":e.distribution,function(e){kF(xD,"Distribution",e)}(this.distribution),this.seed=e.seed}apply(e,t){const n=function(e,t="channelsLast"){let n,s;if(VF(t),2===e.length)n=e[0],s=e[1];else if(-1!==[3,4,5].indexOf(e.length)){if("channelsFirst"===t){const t=JF(e,2);n=e[1]*t,s=e[0]*t}else if("channelsLast"===t){const t=JF(e,0,e.length-2);n=e[e.length-2]*t,s=e[e.length-1]*t}}else{const t=JF(e);n=Math.sqrt(t),s=Math.sqrt(t)}return[n,s]}(e),s=n[0],r=n[1];let a=this.scale;if("fanIn"===this.mode?a/=Math.max(1,s):"fanOut"===this.mode?a/=Math.max(1,r):a/=Math.max(1,(s+r)/2),"normal"===this.distribution){const n=Math.sqrt(a);if("float32"!==(t=t||"float32")&&"int32"!==t)throw new iF(`${this.getClassName()} does not support dType ${t}.`);return Bf(e,0,n,t,this.seed)}{const n=Math.sqrt(3*a);return wf(e,-n,n,t)}}getConfig(){return{scale:this.scale,mode:this.mode,distribution:this.distribution,seed:this.seed}}}$D.className="VarianceScaling",Ol.registerClass($D);class ED extends $D{constructor(e){super({scale:1,mode:"fanAvg",distribution:"uniform",seed:null==e?null:e.seed})}getClassName(){return $D.className}}ED.className="GlorotUniform",Ol.registerClass(ED);class AD extends $D{constructor(e){super({scale:1,mode:"fanAvg",distribution:"normal",seed:null==e?null:e.seed})}getClassName(){return $D.className}}AD.className="GlorotNormal",Ol.registerClass(AD);class RD extends $D{constructor(e){super({scale:2,mode:"fanIn",distribution:"normal",seed:null==e?null:e.seed})}getClassName(){return $D.className}}RD.className="HeNormal",Ol.registerClass(RD);class FD extends $D{constructor(e){super({scale:2,mode:"fanIn",distribution:"uniform",seed:null==e?null:e.seed})}getClassName(){return $D.className}}FD.className="HeUniform",Ol.registerClass(FD);class DD extends $D{constructor(e){super({scale:1,mode:"fanIn",distribution:"normal",seed:null==e?null:e.seed})}getClassName(){return $D.className}}DD.className="LeCunNormal",Ol.registerClass(DD);class _D extends $D{constructor(e){super({scale:1,mode:"fanIn",distribution:"uniform",seed:null==e?null:e.seed})}getClassName(){return $D.className}}_D.className="LeCunNormal",Ol.registerClass(_D);class OD extends wD{constructor(e){if(super(),this.DEFAULT_GAIN=1,this.gain=null==e.gain?this.DEFAULT_GAIN:e.gain,this.seed=e.seed,null!=this.seed)throw new iF("Random seed is not implemented for Orthogonal Initializer yet.")}apply(e,t){return th((()=>{if(e.length<2)throw new iF("Shape must be at least 2D.");e[0]*e[1]>2e3&&console.warn(`Orthogonal initializer is being called on a matrix with more than 2000 (${e[0]*e[1]}) elements: Slowness may result.`);const t=cD(e[0]>e[1]?[e[1],e[0]]:e,0,1,"float32");let n=qf.gramSchmidt(t);return e[0]>e[1]&&(n=$p(n)),Iu(this.gain,n)}))}getConfig(){return{gain:this.gain,seed:this.seed}}}OD.className="Orthogonal",Ol.registerClass(OD);const MD={constant:"Constant",glorotNormal:"GlorotNormal",glorotUniform:"GlorotUniform",heNormal:"HeNormal",heUniform:"HeUniform",identity:"Identity",leCunNormal:"LeCunNormal",leCunUniform:"LeCunUniform",ones:"Ones",orthogonal:"Orthogonal",randomNormal:"RandomNormal",randomUniform:"RandomUniform",truncatedNormal:"TruncatedNormal",varianceScaling:"VarianceScaling",zeros:"Zeros"};function LD(e,t={}){return bF(e,Ol.SerializationMap.getMap().classNameMap,t,"initializer")}function zD(e){return gF(e)}function BD(e){if("string"==typeof e){const t=e in MD?MD[e]:e;if("GlorotNormal"===t)return new AD;if("GlorotUniform"===t)return new ED;if("HeNormal"===t)return new RD;if("HeUniform"===t)return new FD;if("LeCunNormal"===t)return new DD;if("LeCunUniform"===t)return new _D;{const e={};return e.className=t,e.config={},LD(e)}}return e instanceof wD?e:LD(e)}
/**
 * @license
 * Copyright 2018 Google LLC
 *
 * Use of this source code is governed by an MIT-style
 * license that can be found in the LICENSE file or at
 * https://opensource.org/licenses/MIT.
 * =============================================================================
 */
let PD=0;function WD(){return PD++}const UD={};function VD(e=""){return e in UD||(UD[e]=0),UD[e]+=1,e+UD[e].toString()}function GD(e){return Array.isArray(e)&&Array.isArray(e[0])}function HD(e){return 0===e.length?[]:Array.isArray(e[0])?e:[e]}function jD(e){let t;if(Array.isArray(e)){if(1!==e.length)throw new aF(`Expected Tensor length to be 1; got ${e.length}`);t=e[0]}else t=e;return t}function qD(e){if(Array.isArray(e)&&Array.isArray(e[0])){if(1===e.length)return e[0];throw new aF(`Expected exactly 1 Shape; got ${e.length}`)}return e}function KD(e){let t=0;for(const n of e)0===n.shape.length?t+=1:t+=n.shape.reduce(((e,t)=>e*t));return t}const XD="Variable";class YD{constructor(e,t="float32",n="Variable",s=!0,r=null){this.dtype=null==t?"float32":t,this.shape=e.shape,this.id=WD(),n=null==n?XD:n,this.originalName=KF(n),this.name=XF(this.originalName),this.trainable_=s,this.constraint=r,this.val=function(e,t=!0,n,s){return ya.makeVariable(e,t,n,s)}(e,this.trainable_,this.name,this.dtype)}read(){return this.assertNotDisposed(),this.val}write(e){return this.assertNotDisposed(),function(e,t){if(e.shape.toString()!==t.shape.toString())throw new Error("Shape mismatch: "+JSON.stringify(e.shape)+" vs. "+JSON.stringify(t.shape))}(this.val,e),this.val.id!==e.id&&(this.val.assign(e),null!=this.constraint&&this.val.assign(this.constraint.apply(this.val))),this}dispose(){this.assertNotDisposed(),this.val.dispose()}assertNotDisposed(){if(this.val.isDisposed)throw new Error(`LayersVariable ${this.name} is already disposed.`)}get trainable(){return this.trainable_}set trainable(e){this.trainable_=e,this.val.trainable=e}}function ZD(e){return e.map((e=>e.read()))}function JD(e){e.forEach((e=>{e[0].write(e[1])}))}class QD{constructor(e){this.dtype=e.dtype,this.shape=e.shape,null!=e.shape?this.ndim=e.shape.length:this.ndim=e.ndim,this.maxNDim=e.maxNDim,this.minNDim=e.minNDim,this.axes=e.axes||{}}}class e_{constructor(e,t,n,s,r,a,i){this.dtype=e,this.shape=t,this.sourceLayer=n,this.inputs=s,this.callArgs=r,this.outputTensorIndex=i,this.id=WD(),null!=a&&(this.originalName=KF(a),this.name=XF(this.originalName)),this.rank=t.length}}let t_=0;class n_{constructor(e,t){this.callArgs=t,this.id=t_++,this.outboundLayer=e.outboundLayer,this.inboundLayers=e.inboundLayers,this.nodeIndices=e.nodeIndices,this.tensorIndices=e.tensorIndices,this.inputTensors=e.inputTensors,this.outputTensors=e.outputTensors,this.inputMasks=e.inputMasks,this.outputMasks=e.outputMasks,this.inputShapes=e.inputShapes,this.outputShapes=e.outputShapes;for(const t of e.inboundLayers)null!=t&&t.outboundNodes.push(this);e.outboundLayer.inboundNodes.push(this)}getConfig(){const e=[];for(const t of this.inboundLayers)null!=t?e.push(t.name):e.push(null);return{outboundLayer:this.outboundLayer?this.outboundLayer.name:null,inboundLayers:e,nodeIndices:this.nodeIndices,tensorIndices:this.tensorIndices}}}let s_=0;class r_ extends Ol.Serializable{constructor(e={}){super(),this._callHook=null,this._addedWeightNames=[],this._stateful=!1,this.id=s_++,this.activityRegularizer=null,this.inputSpec=null,this.supportsMasking=!1,this._trainableWeights=[],this._nonTrainableWeights=[],this._losses=[],this._updates=[],this._built=!1,this.inboundNodes=[],this.outboundNodes=[];let t=e.name;if(!t){const e=this.getClassName();t=dF(e)+"_"+VD(e)}if(this.name=t,this.trainable_=null==e.trainable||e.trainable,null!=e.inputShape||null!=e.batchInputShape){let t;if(null!=e.batchInputShape)t=e.batchInputShape;else if(null!=e.inputShape){let n=null;null!=e.batchSize&&(n=e.batchSize),t=[n].concat(e.inputShape)}this.batchInputShape=t;let n=e.dtype;null==n&&(n=e.inputDType),null==n&&(n="float32"),this.dtype=n}null!=e.weights?this.initialWeights=e.weights:this.initialWeights=null,this._refCount=null,this.fastWeightInitDuringBuild=!1}static nodeKey(e,t){return e.name+"_ib-"+t.toString()}getNodeAtIndex(e,t){if(0===this.inboundNodes.length)throw new rF(`The layer has never been called and thus has no defined ${t}.`);if(this.inboundNodes.length<=e)throw new aF(`Asked to get ${t} at node ${e}, but the layer has only ${this.inboundNodes.length} inbound nodes.`);return this.inboundNodes[e]}getInputAt(e){return hF(this.getNodeAtIndex(e,"input").inputTensors)}getOutputAt(e){return hF(this.getNodeAtIndex(e,"output").outputTensors)}get input(){if(this.inboundNodes.length>1)throw new sF(`Layer ${this.name} has multiple inbound nodes, hence the notion of "layer input" is ill-defined. Use \`getInputAt(nodeIndex)\` instead.`);if(0===this.inboundNodes.length)throw new sF(`Layer ${this.name} is not connected, no input to return.`);return hF(this.getNodeAtIndex(0,"input").inputTensors)}get output(){if(0===this.inboundNodes.length)throw new sF(`Layer ${this.name} has no inbound nodes.`);if(this.inboundNodes.length>1)throw new sF(`Layer ${this.name} has multiple inbound nodes, hence the notion of "layer output" is ill-defined. Use \`getOutputAt(nodeIndex)\` instead.`);return hF(this.getNodeAtIndex(0,"output").outputTensors)}get losses(){return this._losses}calculateLosses(){return this.losses.map((e=>e()))}get updates(){return this._updates}get built(){return this._built}set built(e){this._built=e}get trainable(){return this.trainable_}set trainable(e){this._trainableWeights.forEach((t=>t.trainable=e)),this.trainable_=e}get trainableWeights(){return this.trainable_?this._trainableWeights.filter((e=>e.trainable)):[]}set trainableWeights(e){this._trainableWeights=e}get nonTrainableWeights(){return this.trainable?this._trainableWeights.filter((e=>!e.trainable)).concat(this._nonTrainableWeights):this._trainableWeights.concat(this._nonTrainableWeights)}set nonTrainableWeights(e){this._nonTrainableWeights=e}get weights(){return this.trainableWeights.concat(this.nonTrainableWeights)}get stateful(){return this._stateful}resetStates(){if(!this.stateful)throw new Error("Cannot call the resetStates() method of a non-stateful Layer object.")}assertInputCompatibility(e){if(e=pF(e),null==this.inputSpec||0===this.inputSpec.length)return;const t=pF(this.inputSpec);if(e.length!==t.length)throw new aF(`Layer ${this.name} expects ${t.length} inputs, but it received ${e.length} input tensors. Input received: ${e}`);for(let n=0;n<e.length;n++){const s=e[n],r=t[n];if(null==r)continue;const a=s.rank;if(null!=r.ndim&&a!==r.ndim)throw new aF(`Input ${n} is incompatible with layer ${this.name}: expected ndim=${r.ndim}, found ndim=${a}`);if(null!=r.maxNDim&&a>r.maxNDim)throw new aF(`Input ${n} is incompatible with layer ${this.name}: expected max_ndim=${r.maxNDim}, found ndim=${a}`);if(null!=r.minNDim&&a<r.minNDim)throw new aF(`Input ${n} is incompatible with layer ${this.name}: expected min_ndim=${r.minNDim}, found ndim=${a}.`);if(null!=r.dtype&&s.dtype!==r.dtype)throw new aF(`Input ${n} is incompatible with layer ${this.name} : expected dtype=${r.dtype}, found dtype=${s.dtype}.`);if(r.axes){const e=s.shape;for(const t in r.axes){const s=Number(t),a=r.axes[t],i=s>=0?e[s]:e[e.length+s];if(null!=a&&-1===[a,null].indexOf(i))throw new aF(`Input ${n} is incompatible with layer ${this.name}: expected axis ${s} of input shape to have value ${a} but got shape ${e}.`)}}if(null!=r.shape)for(let e=0;e<r.shape.length;++e){const t=r.shape[e],a=s.shape[e];if(null!=t&&null!=a&&t!==a)throw new aF(`Input ${n} is incompatible with layer ${this.name}: expected shape=${r.shape}, found shape=${s.shape}.`)}}}call(e,t){return e}invokeCallHook(e,t){null!=this._callHook&&this._callHook(e,t)}setCallHook(e){this._callHook=e}clearCallHook(){this._callHook=null}apply(e,t){t=t||{},this.assertNotDisposed();const n=pF(e);let s=!0;for(const e of n)if(!(e instanceof e_)){s=!1;break}let r=!0;for(const e of n)if(e instanceof e_){r=!1;break}if(s===r)throw new aF("Arguments to apply() must be all SymbolicTensors or all Tensors");return qF(this.name,(()=>{if(!this.built){this.assertInputCompatibility(e);const t=[];for(const n of pF(e))t.push(n.shape);this.build(hF(t)),this.built=!0,this.initialWeights&&this.setWeights(this.initialWeights),null===this._refCount&&r&&(this._refCount=1)}if(this.assertInputCompatibility(e),r){let s=this.call(e,t);const r=pF(s),a=[];for(let e of r)-1!==n.indexOf(e)&&(e=e.clone()),a.push(e);if(s=hF(a),null!=this.activityRegularizer)throw new iF("Layer invocation in the presence of activity regularizer(s) is not supported yet.");return s}{const n=function(e){e=pF(e);const t=[];for(const n of e)t.push(n.shape);return hF(t)}(e),s=this.computeOutputShape(n);let r;const a="float32";if(this.warnOnIncompatibleInputShape(Array.isArray(e)?n[0]:n),r=null!=s&&s.length>0&&Array.isArray(s[0])?s.map(((n,s)=>new e_(a,n,this,pF(e),t,this.name,s))):new e_(a,s,this,pF(e),t,this.name),this.addInboundNode(e,r,null,null,n,s,t),this._refCount++,null!=this.activityRegularizer)throw new iF("Layer invocation in the presence of activity regularizer(s) is not supported yet.");return r}}))}warnOnIncompatibleInputShape(e){if(null!=this.batchInputShape)if(e.length!==this.batchInputShape.length)console.warn(`The rank of the input tensor provided (shape: ${JSON.stringify(e)}) does not match that of the batchInputShape (${JSON.stringify(this.batchInputShape)}) of the layer ${this.name}`);else{let t=!1;this.batchInputShape.forEach(((n,s)=>{null!=n&&null!=e[s]&&e[s]!==n&&(t=!0)})),t&&console.warn(`The shape of the input tensor (${JSON.stringify(e)}) does not match the expectation of layer ${this.name}: ${JSON.stringify(this.batchInputShape)}`)}}get outputShape(){if(null==this.inboundNodes||0===this.inboundNodes.length)throw new sF(`The layer ${this.name} has never been called and thus has no defined output shape.`);const e=[];for(const t of this.inboundNodes){const n=JSON.stringify(t.outputShapes);-1===e.indexOf(n)&&e.push(n)}if(1===e.length){const e=this.inboundNodes[0].outputShapes;return Array.isArray(e)&&Array.isArray(e[0])&&1===e.length?e[0]:e}throw new sF(`The layer ${this.name} has multiple inbound nodes with different output shapes. Hence the notion of "output shape" is ill-defined for the layer.`)}countParams(){if(!this.built)throw new rF(`You tried to call countParams() on ${this.name}, but the layer is not built yet. Build it first by calling build(batchInputShape).`);return KD(this.weights)}build(e){this.built=!0}getWeights(e=!1){return ZD(e?this.trainableWeights:this.weights)}setWeights(e){th((()=>{const t=this.weights;if(t.length!==e.length)throw new aF(`You called setWeights(weights) on layer "${this.name}" with a weight list of length ${e.length}, but the layer was expecting ${t.length} weights. Provided weights: ${e}...`);if(0===t.length)return;const n=[],s=ZD(t);for(let r=0;r<s.length;++r){const a=s[r],i=t[r],o=e[r];if(!Us.arraysEqual(a.shape,o.shape))throw new aF(`Layer weight shape ${a.shape} not compatible with provided weight shape ${o.shape}`);n.push([i,o])}JD(n)}))}addWeight(e,t,n,s,r,a,i,o){if(-1!==this._addedWeightNames.indexOf(e))throw new aF(`Duplicate weight name ${e} for layer ${this.name}`);this._addedWeightNames.push(e),null==n&&(n="float32"),this.fastWeightInitDuringBuild&&(s=null!=o?o():BD("zeros"));const l=s.apply(t,n),u=new YD(l,n,e,a,i);return l.dispose(),null!=r&&this.addLoss((()=>r.apply(u.read()))),null==a&&(a=!0),a?this._trainableWeights.push(u):this._nonTrainableWeights.push(u),u}setFastWeightInitDuringBuild(e){this.fastWeightInitDuringBuild=e}addLoss(e){null==e||Array.isArray(e)&&0===e.length||(e=pF(e),void 0!==this._losses&&null!==this._losses&&this.losses.push(...e))}computeOutputShape(e){return e}computeMask(e,t){if(!this.supportsMasking){if(null!=t){if(!Array.isArray(t))throw new TypeError(`Layer ${this.name} does not support masking, but was passed an inputMask.`);t.forEach((e=>{if(null!=e)throw new TypeError(`Layer ${this.name} does not support masking, but was passed an inputMask.`)}))}return null}return t}addInboundNode(e,t,n,s,r,a,i=null){const o=pF(e);t=pF(t),n=pF(n),s=pF(s),r=HD(r),a=HD(a);const l=[],u=[],c=[];for(const e of o)l.push(e.sourceLayer),u.push(e.nodeIndex),c.push(e.tensorIndex);new n_({outboundLayer:this,inboundLayers:l,nodeIndices:u,tensorIndices:c,inputTensors:o,outputTensors:t,inputMasks:n,outputMasks:s,inputShapes:r,outputShapes:a},i);for(let e=0;e<t.length;e++)t[e].sourceLayer=this,t[e].nodeIndex=this.inboundNodes.length-1,t[e].tensorIndex=e}getConfig(){const e={name:this.name,trainable:this.trainable};return null!=this.batchInputShape&&(e.batchInputShape=this.batchInputShape),null!=this.dtype&&(e.dtype=this.dtype),e}disposeWeights(){return this.weights.forEach((e=>e.dispose())),this.weights.length}assertNotDisposed(){if(0===this._refCount)throw new Error(`Layer '${this.name}' is already disposed.`)}dispose(){if(!this.built)throw new Error(`Cannot dispose Layer ${this.name} because it has not been built yet.`);if(null===this._refCount)throw new Error(`Cannot dispose Layer ${this.name} because it has not been used yet.`);this.assertNotDisposed();let e=0;return 0==--this._refCount&&(e=this.disposeWeights()),{refCountAfterDispose:this._refCount,numDisposedVariables:e}}}function a_(e,t,n){if((null==t||null!=n&&n>0)&&(t=e.sourceLayer,n=e.nodeIndex),0===t.inboundNodes.length)return[e];{const e=t.inboundNodes[n];if(0===e.inboundLayers.length)return e.inputTensors;{const t=[];for(let n=0;n<e.inboundLayers.length;n++){const s=a_(e.inputTensors[n],e.inboundLayers[n],e.nodeIndices[n]);for(const e of s)-1===t.indexOf(e)&&t.push(e)}return t}}}class i_ extends r_{constructor(e){if(super({dtype:e.dtype,name:null!=e.name?e.name:VD("input").toString()}),null==e.batchSize&&(e.batchSize=null),null==e.sparse&&(e.sparse=!1),this.trainable=!1,this.built=!0,this.sparse=e.sparse,null!=e.inputShape&&null!=e.batchInputShape)throw new aF("Only provide the inputShape OR batchInputShape argument to inputLayer, not both at the same time.");let t=e.batchInputShape;if(null==t){if(null==e.inputShape)throw new aF("An InputLayer should be passed either a `batchInputShape` or an `inputShape`.");t=[e.batchSize].concat(e.inputShape)}else if(null!=e.batchSize)throw new aF("Cannot specify batchSize if batchInputShape is specified when creating an InputLayer.");const n=e.dtype||"float32";this.batchInputShape=t,this.dtype=n,this.inputSpec=[{shape:t}];const s=new e_(this.dtype,this.batchInputShape,this,[],{},this.name);s.nodeIndex=0,s.tensorIndex=0,new n_({outboundLayer:this,inboundLayers:[],nodeIndices:[],tensorIndices:[],inputTensors:[s],outputTensors:[s],inputMasks:[null],outputMasks:[null],inputShapes:[t],outputShapes:[t]})}apply(e,t){throw new aF(`Cannot pass any input to an InputLayer's apply() method. InputLayer name: ${this.name}`)}dispose(){return{refCountAfterDispose:this._refCount,numDisposedVariables:0}}getConfig(){return{batchInputShape:this.batchInputShape,dtype:this.dtype,sparse:this.sparse,name:this.name}}}function o_(e){if(null==e.batchShape&&null==e.shape)throw new Error("Please provide to Input either a `shape` or a `batchShape` argument. Note that `shape` does not include the batch dimension.");if(null!=e.batchShape&&null!=e.shape)throw new aF("Please provide either a `shape` or `batchShape` argument to Input, but not both.");let t=e.batchShape;null!=e.shape&&null==t&&(t=[null].concat(e.shape));let n=e.dtype;null==n&&(n="float32");return new i_({batchInputShape:t,name:e.name,dtype:n,sparse:e.sparse}).inboundNodes[0].outputTensors[0]}async function l_(e){if(null==e)return;const t=[],n=[],s=[];for(const r in e){const a=e[r];if("number"!=typeof a){const e=a;t.push(e.data()),n.push(r),s.push(e)}}if(t.length>0){const r=await Promise.all(t);for(let t=0;t<r.length;++t)e[n[t]]=r[t][0];nh(s)}}function u_(e){if(null!=e)for(const t in e){const n=e[t];"number"!=typeof n&&n.dispose()}}var c_;i_.className="InputLayer",Ol.registerClass(i_),function(e){e[e.SILENT=0]="SILENT",e[e.VERBOSE=1]="VERBOSE"}(c_||(c_={}));class h_{constructor(){this.validationData=null}setParams(e){this.params=e}async onEpochBegin(e,t){}async onEpochEnd(e,t){}async onBatchBegin(e,t){}async onBatchEnd(e,t){}async onTrainBegin(e){}async onTrainEnd(e){}setModel(e){}}class p_{constructor(e,t=10){null==e&&(e=[]),this.callbacks=e,this.queueLength=t}append(e){this.callbacks.push(e)}setParams(e){for(const t of this.callbacks)t.setParams(e)}setModel(e){for(const t of this.callbacks)t.setModel(e)}async onEpochBegin(e,t){null==t&&(t={});for(const n of this.callbacks)await n.onEpochBegin(e,t)}async onEpochEnd(e,t){null==t&&(t={});for(const n of this.callbacks)await n.onEpochEnd(e,t)}async onBatchBegin(e,t){null==t&&(t={});for(const n of this.callbacks)await n.onBatchBegin(e,t)}async onBatchEnd(e,t){null==t&&(t={});for(const n of this.callbacks)await n.onBatchEnd(e,t)}async onTrainBegin(e){null==e&&(e={});for(const t of this.callbacks)await t.onTrainBegin(e)}async onTrainEnd(e){null==e&&(e={});for(const t of this.callbacks)await t.onTrainEnd(e)}}class d_ extends h_{constructor(){super()}async onEpochBegin(e){this.seen=0,this.totals={}}async onBatchEnd(e,t){null==t&&(t={});const n=null==t.size?0:t.size;this.seen+=n;for(const e in t){const s=t[e];if("number"==typeof s)this.totals.hasOwnProperty(e)||(this.totals[e]=0),this.totals[e]=this.totals[e]+s*n;else{let t;e in this.totals?t=this.totals[e]:this.totals[e]=0;const r=th((()=>vh(this.totals[e],Iu(s,n))));this.totals[e]=r,null!=t&&t.dispose()}}}async onEpochEnd(e,t){if(null!=t)for(const e of this.params.metrics)null!=this.totals[e]&&("number"==typeof this.totals[e]?t[e]=this.totals[e]/this.seen:th((()=>{const n=Iu(np(1,this.seen),this.totals[e]);t[e]=n,this.totals[e].dispose(),sh(t[e])})))}}class f_ extends h_{async onTrainBegin(e){this.epoch=[],this.history={}}async onEpochEnd(e,t){null==t&&(t={}),this.epoch.push(e);for(const e in t)null==this.history[e]&&(this.history[e]=[]),this.history[e].push(t[e])}async syncData(){const e=[],t=[],n=[];for(const s in this.history){const r=this.history[s];for(let a=0;a<r.length;++a)if("number"!=typeof r[a]){const i=r[a];e.push(i.data()),t.push(s),n.push(a)}}const s=await Promise.all(e);for(let e=0;e<s.length;++e){this.history[t[e]][n[e]].dispose(),this.history[t[e]][n[e]]=s[e][0]}}}class m_ extends h_{constructor(e,t){if(super(),this.currentEpoch=0,this.nowFunc=e.nowFunc,this.nextFrameFunc=e.nextFrameFunc||om,this.yieldEvery=t||"auto","auto"===this.yieldEvery&&(this.yieldEvery=125),"never"===this.yieldEvery&&null!=e.onYield)throw new Error("yieldEvery is `never` but you provided an `onYield` callback. Either change `yieldEvery` or remove the callback");Us.isNumber(this.yieldEvery)&&(this.maybeWait=function(e,t,n){let s,r=null!=n?n():Us.now();return(...a)=>{const i=null!=n?n():Us.now();return i-r<t||(r=i,s=e(...a)),s}}(this.maybeWait.bind(this),this.yieldEvery,this.nowFunc)),this.trainBegin=e.onTrainBegin,this.trainEnd=e.onTrainEnd,this.epochBegin=e.onEpochBegin,this.epochEnd=e.onEpochEnd,this.batchBegin=e.onBatchBegin,this.batchEnd=e.onBatchEnd,this.yield=e.onYield}async maybeWait(e,t,n){const s=[];null!=this.yield&&(await l_(n),s.push(this.yield(e,t,n))),s.push(this.nextFrameFunc()),await Promise.all(s)}async onEpochBegin(e,t){this.currentEpoch=e,null!=this.epochBegin&&(await l_(t),await this.epochBegin(e,t))}async onEpochEnd(e,t){const n=[];null!=this.epochEnd&&(await l_(t),n.push(this.epochEnd(e,t))),"epoch"===this.yieldEvery&&n.push(this.nextFrameFunc()),await Promise.all(n)}async onBatchBegin(e,t){null!=this.batchBegin&&(await l_(t),await this.batchBegin(e,t))}async onBatchEnd(e,t){const n=[];null!=this.batchEnd&&(await l_(t),n.push(this.batchEnd(e,t))),"batch"===this.yieldEvery?n.push(this.nextFrameFunc()):Us.isNumber(this.yieldEvery)&&n.push(this.maybeWait(this.currentEpoch,e,t)),await Promise.all(n)}async onTrainBegin(e){null!=this.trainBegin&&(await l_(e),await this.trainBegin(e))}async onTrainEnd(e){null!=this.trainEnd&&(await l_(e),await this.trainEnd(e))}}function g_(e,t){if(null==e&&(e={}),e instanceof h_)return[e];if(Array.isArray(e)&&e[0]instanceof h_)return e;return pF(e).map((e=>new m_(e,t)))}class y_{constructor(){}static registerCallbackConstructor(e,t){Us.assert(e>=0&&Number.isInteger(e),(()=>`Verbosity level is expected to be an integer >= 0, but got ${e}`)),y_.checkForDuplicate(t),null==y_.constructors[e]&&(y_.constructors[e]=[]),y_.constructors[e].push(t)}static checkForDuplicate(e){for(const t in y_.constructors){y_.constructors[+t].forEach((t=>{if(t===e)throw new aF("Duplicate callback constructor.")}))}}static clear(){y_.constructors={}}static createCallbacks(e){const t=[];for(const n in y_.constructors){const s=+n;e>=s&&t.push(...y_.constructors[s])}return t.map((e=>new e))}}function b_(e,t,n,s,r,a,i,o,l){const u=new f_,c=[new d_,...y_.createCallbacks(t)];null!=e&&c.push(...e),c.push(u);const h=new p_(c);return h.setParams({epochs:n,initialEpoch:s,samples:r,steps:a,batchSize:i,verbose:t,doValidation:o,metrics:l}),{callbackList:h,history:u}}function x_(e,t={},n=!1){return bF(e,Ol.SerializationMap.getMap().classNameMap,t,"layer",n)}function w_(e,t){return th((()=>{"float32"!==e.dtype&&(e=Po(e,"float32"));const n=Au(dD(e),t,!0),s=Oh(n.shape,nF()),r=xp(Qd(n,s));return np(e,r)}))}function v_(e,t){return th((()=>Fp(dD(sp(t,e)),-1)))}function k_(e,t){return th((()=>Fp(mp(sp(t,e)),-1)))}function I_(e,t){return th((()=>{const n=sp(e,t),s=gd(mp(e),nF(),Number.MAX_VALUE),r=mp(np(n,s));return Iu(100,Fp(r,-1))}))}function S_(e,t){return th((()=>{const n=gd(t,nF(),Number.MAX_VALUE),s=Lp(vh(1,n)),r=gd(e,nF(),Number.MAX_VALUE),a=Lp(vh(1,r));return Fp(dD(sp(s,a)),-1)}))}function N_(e,t,n=!1){return th((()=>{if(n)t=Df(t);else{const e=Au(t,t.shape.length-1,!0);t=np(t,e)}return t=gd(t,nF(),1-nF()),Cp(Au(Iu(Po(e,"float32"),Lp(t)),t.shape.length-1))}))}function T_(e,t,n=!1){return th((()=>{const s=Po(Ld(function(e){const t=[JF(e.shape)];return Cu(e,t)}(e)),"int32"),r=(t=gd(t,nF(),1-nF())).shape;return N_(Cu(rf(s,r[r.length-1]),r),t,n)}))}function C_(e,t){return th((()=>{let n;return n=gd(t,nF(),1-nF()),n=Lp(np(n,sp(1,n))),Fp(function(e,t){if(!Us.arraysEqual(e.shape,t.shape))throw new aF(`logits and labels must have the same shape, but got shapes ${JSON.stringify(e.shape)} and ${JSON.stringify(t.shape)}`);return th((()=>{const n=Nu(t),s=Cp(mp(t));return vh(sp(n,Iu(t,e)),Pp(Bp(s)))}))}(e,n),-1)}))}function $_(e,t){return th((()=>{const n=gd(e,nF(),1),s=gd(t,nF(),1);return Au(Iu(e,Lp(np(n,s))),-1)}))}function E_(e,t){return th((()=>{const n=w_(e,-1),s=w_(t,-1),r=Iu(n,s);return Cp(Au(r,-1))}))}y_.constructors={};const A_={meanSquaredError:v_,meanAbsoluteError:k_,meanAbsolutePercentageError:I_,meanSquaredLogarithmicError:S_,squaredHinge:function(e,t){return th((()=>{const n=Qd(0,sp(1,Iu(e,t)));return Fp(dD(n),-1)}))},hinge:function(e,t){return th((()=>{const n=Qd(0,sp(1,Iu(e,t)));return Fp(n,-1)}))},categoricalHinge:function(e,t){return th((()=>{const n=Au(Iu(e,t),-1),s=gp(Iu(sp(1,e),t),-1);return Qd(0,vh(1,sp(s,n)))}))},logcosh:function(e,t){return th((()=>{const n=Math.log(2),s=sp(t,e),r=sp(vh(s,Hd(Iu(-2,s))),n);return Fp(r,-1)}))},categoricalCrossentropy:N_,sparseCategoricalCrossentropy:T_,binaryCrossentropy:C_,kullbackLeiblerDivergence:$_,poisson:function(e,t){return th((()=>{const n=Lp(vh(nF(),t));return Fp(sp(t,Iu(e,n)),-1)}))},cosineProximity:E_};function R_(e){if("string"==typeof e){if(e in A_)return A_[e];let t=`Unknown loss ${e}`;throw e.toLowerCase().includes("softmaxcrossentropy")&&(t=`Unknown loss ${e}. Use "categoricalCrossentropy" as the string name for tf.losses.softmaxCrossEntropy`),new aF(t)}return e}function F_(e,t){return th((()=>{const n=Iu(.5,af(t)),s=nD(ep(t,n),e.dtype);return Fp(Fd(e,s),-1)}))}function D_(e,t){return th((()=>nD(Fd(ed(e,-1),ed(t,-1)),"float32")))}function __(e,t){return th((()=>Po(Au(hp(Fd(e,1),Fd(t,1))),"float32")))}function O_(e,t){return th((()=>{const n=__(e,t),s=function(e,t){return th((()=>Po(Au(hp(Fd(e,0),Fd(t,1))),"float32")))}(e,t),r=vh(n,s);return Po(ip(ep(r,0),np(n,r),0),"float32")}))}function M_(e,t){return C_(e,t)}function L_(e,t){return e.rank===t.rank&&(e=Ip(e,[e.rank-1])),(t=ed(t,-1)).dtype!==e.dtype&&(t=Po(t,e.dtype)),Po(Fd(e,t),"float32")}const z_=N_,B_=T_,P_={binaryAccuracy:F_,categoricalAccuracy:D_,precision:O_,categoricalCrossentropy:z_,sparseCategoricalCrossentropy:B_,mse:v_,MSE:v_,mae:k_,MAE:k_,mape:I_,MAPE:I_,cosine:E_};function W_(e){if("string"==typeof e&&e in P_)return P_[e];if("string"!=typeof e&&null!=e)return e;throw new aF(`Unknown metric ${e}`)}function U_(e){if(uF(null!==e,`Unknown LossOrMetricFn ${e}`),"string"==typeof e)return e;{let t;for(const n of Object.keys(A_))if(A_[n]===e){t=n;break}if(void 0!==t)return t;for(const n of Object.keys(P_))if(P_[n]===e){t=n;break}return void 0!==t?t:e.name}}const V_=1048576;function G_(e,t,n=!1){if(null==e||"object"!=typeof e||Object.getPrototypeOf(e)!==Object.prototype||!H_(e))throw new Error("User-defined metadata is expected to be a JSON object, but is not.");if(n){const n=JSON.stringify(e);n.length>V_&&console.warn(`User-defined metadata of model "${t}" is too large in size (length=${n.length} when serialized). It is not recommended to store such large objects in user-defined metadata. Please make sure its serialized length is <= 1048576.`)}}function H_(e){if(null===e)return!0;if("object"==typeof e){if(Object.getPrototypeOf(e)===Object.prototype){const t=Object.keys(e);for(const n of t){if("string"!=typeof n)return!1;if(!H_(e[n]))return!1}return!0}if(Array.isArray(e)){for(const t of e)if(!H_(t))return!1;return!0}return!1}{const t=typeof e;return"string"===t||"number"===t||"boolean"===t}}function j_(e,t,n,s=console.log){const r=function(e){let t=!0;const n=[],s=[];for(const t in e.nodesByDepth)n.push(e.nodesByDepth[t]);for(const e of n){if(e.length>1||1===e.length&&e[0].inboundLayers.length>1){t=!1;break}s.push(...e)}if(t)for(const n of e.layers){let e=!1;for(const r of n.inboundNodes)if(-1!==s.indexOf(r)){if(e){t=!1;break}e=!0}if(!t)break}return t}(e),a=["Layer (type)","Output shape","Param #"];let i;if(r?(t=t||65,n=n||[.45,.85,1]):(t=t||98,n=n||[.33,.55,.67,1]),n[n.length-1]<=1&&(n=n.map((e=>Math.floor(t*e)))),!r){a.push("Receives inputs"),i=[];for(const t in e.nodesByDepth)i.push(...e.nodesByDepth[t])}s("_".repeat(t)),q_(a,n,s),s("=".repeat(t));const o=e.layers;for(let e=0;e<o.length;++e)r?K_(o[e],n,s):X_(o[e],n,i,s),s((e===o.length-1?"=":"_").repeat(t));e.checkTrainableWeightsConsistency();const l=function(e){let t;t=null!=e.collectedTrainableWeights?KD(e.collectedTrainableWeights):KD(e.trainableWeights);return t}(e),u=KD(e.nonTrainableWeights);s(`Total params: ${l+u}`),s(`Trainable params: ${l}`),s(`Non-trainable params: ${u}`),s("_".repeat(t))}function q_(e,t,n=console.log){let s="";for(let n=0;n<e.length;++n)n>0&&(s=s.slice(0,s.length-1)+" "),s+=e[n],s=s.slice(0,t[n]),s+=" ".repeat(t[n]-s.length);n(s)}function K_(e,t,n){let s;try{s=JSON.stringify(e.outputShape)}catch(e){s="multiple"}q_([`${e.name} (${e.getClassName()})`,s,e.countParams().toString()],t,n)}function X_(e,t,n,s){let r;try{r=JSON.stringify(e.outputShape)}catch(e){r="multiple"}const a=[];for(const t of e.inboundNodes)if(!(null!=n&&n.length>0&&-1===n.indexOf(t)))for(let e=0;e<t.inboundLayers.length;++e){const n=t.inboundLayers[e].name,s=t.nodeIndices[e],r=t.tensorIndices[e];a.push(`${n}[${s}][${r}]`)}const i=e.name,o=e.getClassName(),l=0===a.length?"":a[0];q_([`${i} (${o})`,r,e.countParams().toString(),l],t,s);for(let e=1;e<a.length;++e)q_(["","","",a[e]],t,s)}function Y_(e,t,n){return("inboundNodes"===e||"outputLayers"===e||"inputLayers"===e)&&0===t&&"string"==typeof n}function Z_(e,t){if(null===e)return null;if("string"==typeof e)return fF(e);if("number"==typeof e||"boolean"==typeof e)return e;if(e instanceof Array){const n=[],s=e.length;for(let r=0;r<s;++r){const s=e[r];Y_(t,r,s)?n.push(s):n.push(Z_(s,t))}return n}{const t={};for(const n of Object.keys(e)){const s=e[n];if("name"===n&&"string"==typeof s)t[n]=s;else{const e=fF(n);t[e]=Z_(s,e)}}return t}}function J_(e,t){if(null==e)return null;if("string"==typeof e)return dF(e);if("number"==typeof e||"boolean"==typeof e)return e;if(e instanceof Array){const n=[],s=e.length;for(let r=0;r<s;++r){const s=e[r];Y_(t,r,s)?n.push(s):n.push(J_(s,t))}return n}{const t={};for(const n of Object.keys(e)){const s=e[n],r=dF(n);t[r]="name"!==n&&"className"!==n||"string"!=typeof s?J_(s,n):s}return t}}
/** @license See the LICENSE file. */class Q_{constructor(e){if(this.id2Value={},this.id2Mask={},this.name2Id={},e instanceof Q_)for(const t in e.id2Value)this.id2Value[t]=e.id2Value[t],t in e.id2Mask&&(this.id2Mask[t]=e.id2Mask[t]);else{if(null==e)return;for(const t of e)this.add(t.key,t.value)}}add(e,t,n){if(null!=this.id2Value[e.id])throw new aF(`Duplicate key: name=${e.name}, id=${e.id}`);return this.id2Value[e.id]=function(e,t){if(null==e.dtype||e.dtype===t.dtype)return t;try{return Po(t,e.dtype)}catch(n){throw new aF(`The dtype of the feed (${t.dtype}) can not be cast to the dtype of the key '${e.name}' (${e.dtype}).`)}}(e,t),this.name2Id[e.name]=e.id,null!=n&&(this.id2Mask[e.id]=n),this}addFeed(e){this.add(e.key,e.value)}hasKey(e){return null!=this.id2Value[e.id]}names(){return Object.keys(this.name2Id)}getValue(e){if(e instanceof e_){if(null==this.id2Value[e.id])throw new aF(`Nonexistent key: ${e.name}`);return this.id2Value[e.id]}{const t=this.name2Id[e];if(null==t)throw new aF(`Feed dict has no SymbolicTensor name: ${e}`);return this.id2Value[t]}}getMask(e){if(e instanceof e_){if(null==this.id2Value[e.id])throw new aF(`Nonexistent key: ${e.name}`);return this.id2Mask[e.id]}{const t=this.name2Id[e];if(null==t)throw new aF(`Feed dict has no SymbolicTensor name: ${e}`);return this.id2Mask[t]}}disposeMasks(){null!=this.id2Mask&&nh(this.id2Mask)}}const eO={},tO={};function nO(e,t,n,s){const r=null!=n&&n.training,a=Array.isArray(e),i=a?e:[e],o=i.map((e=>e.name)),l=[],u=t.names();for(const e of o)-1!==u.indexOf(e)?l.push(t.getValue(e)):l.push(null);null!=s&&(s.maxNumTensors=-1/0,s.minNumTensors=1/0);const c=o.join(",")+"|"+t.names().join(",");let h,p;if(null==eO[c]){const e=function(e,t){Us.assert(null!=e&&e.length>0,(()=>"Expected at least one fetch, got none"));let n=[],s={};if(1===e.length){const r=rO(e[0],t);n=r.sorted,s=r.recipientMap}else{const r=new Set;for(const a of e){const{sorted:e,recipientMap:i}=rO(a,t);for(const t of e)r.has(t.name)||(n.push(t),r.add(t.name));for(const e in i)null==s[e]&&(s[e]=new Set),i[e].forEach((t=>s[e].add(t)))}}return{sorted:n,recipientCounts:sO(s)}}(i,t);h=e.sorted,p=e.recipientCounts,eO[c]=h,tO[c]=p}h=eO[c],p={},r||Object.assign(p,tO[c]);const d=new Q_(t);for(let e=0;e<h.length;++e){if(null!=s){const e=eh().numTensors;e>s.maxNumTensors&&(s.maxNumTensors=e),e<s.minNumTensors&&(s.minNumTensors=e)}const a=h[e],i=a.sourceLayer;if(i instanceof i_)continue;const u=[],c=[],f=[];let m=!1;for(const e of a.inputs){const n=d.getValue(e),s=d.getMask(e);u.push(n),c.push(s),null!=s&&(m=!0),r||(p[e.name]--,0!==p[e.name]||t.hasKey(e)||-1!==o.indexOf(e.name)||n.isDisposed||!0===e.sourceLayer.stateful||f.push(n))}m&&((n=n||{}).mask=c[0]);const g=pF(i.apply(u,n));let y=null;i.supportsMasking&&(y=i.computeMask(u,c));const b=aO(a),x=Array.isArray(b)?b:[b];for(let e=0;e<x.length;++e){d.hasKey(x[e])||d.add(x[e],g[e],Array.isArray(y)?y[0]:y);const t=o.indexOf(x[e].name);-1!==t&&(l[t]=g[e])}r||nh(f)}return d.disposeMasks(),a?l:l[0]}function sO(e){const t={};for(const n in e)t[n]=e[n].size;return t}function rO(e,t){const n=new Set,s=[],r={};for(const e of t.names())n.add(e);const a=[],i=[];for(a.push(e);a.length>0;){const e=a[a.length-1];if(n.has(e.name)){a.pop();continue}const t=i[i.length-1]===a.length-1;if(0===e.inputs.length||t)a.pop(),s.push(e),n.add(e.name),t&&i.pop();else{i.push(a.length-1);for(const t of e.inputs)null==r[t.name]&&(r[t.name]=new Set),r[t.name].add(e.name),n.has(t.name)||a.push(t)}}return{sorted:s,recipientMap:r}}function aO(e){let t;if(1===e.sourceLayer.inboundNodes.length)t=e.sourceLayer.output;else{let n=null;for(let t=0;t<e.sourceLayer.inboundNodes.length;++t)for(const s of e.sourceLayer.inboundNodes[t].outputTensors)if(s.id===e.id){n=t;break}t=e.sourceLayer.getOutputAt(n)}return t}class iO extends r_{constructor(e){if(super({}),this.containerNodes=new Set,this.name=e.name,null==this.name){const e=this.getClassName().toLowerCase();this.name=VD(e)}if(this.supportsMasking=!1,this.trainable_=!0,Array.isArray(e.inputs)?this.inputs=e.inputs.slice():this.inputs=[e.inputs],Array.isArray(e.outputs)?this.outputs=e.outputs.slice():this.outputs=[e.outputs],wF(this.inputs).length!==this.inputs.length)throw new aF(`The list of inputs passed to the model is redundant. All inputs should only appear once. Found: ${this.inputs.map((e=>e.name))}`);wF(this.outputs).length!==this.outputs.length&&console.warn(`The list of outputs passed to the model is redundant. All outputs should only appear once. Found: ${this.outputs.map((e=>e.name))}`),this.inputLayers=[],this.inputLayersNodeIndices=[],this.inputLayersTensorIndices=[],this.outputLayers=[],this.outputLayersNodeIndices=[],this.outputLayersTensorIndices=[],this.layers=[],this.internalContainerRefs=[];for(const e of this.outputs){const t=e.sourceLayer,n=e.nodeIndex,s=e.tensorIndex;this.outputLayers.push(t),this.outputLayersNodeIndices.push(n),this.outputLayersTensorIndices.push(s)}for(const e of this.inputs){const t=e.sourceLayer,n=e.nodeIndex,s=e.tensorIndex;uF(0===n,"input layer has >1 nodes"),uF(0===s,"input layer has >1 tensors"),this.inputLayers.push(t),this.inputLayersNodeIndices.push(n),this.inputLayersTensorIndices.push(s)}this.inputNames=[],this.outputNames=[],this.feedInputShapes=[],this.feedInputNames=[],this.feedOutputNames=[];for(let t=0;t<this.inputLayers.length;t++){const n=this.inputLayers[t];if(!(n instanceof i_))throw new TypeError(`Input layers to a LayersModel must be InputLayer objects. Received inputs: ${e.inputs}. Input ${t} (0-based) originates from layer type ${n.getClassName()}.`);this.inputNames.push(n.name),this.feedInputShapes.push(n.batchInputShape),this.feedInputNames.push(n.name)}for(const e of this.outputLayers)this.outputNames.push(e.name);this.internalInputShapes=this.inputs.map((e=>e.shape)),this.internalOutputShapes=this.outputs.map((e=>e.shape));const t={},n={},s={},r={},a={},i=[],o=(e,t,n,s,r,l)=>{null!=s&&null!=r&&null!=l||(s=e.sourceLayer,r=e.nodeIndex,l=e.tensorIndex);const u=s.inboundNodes[r];if(-1!==n.indexOf(u))throw new rF(`The tensor ${e.name} at layer "${s.name}" is part of a cycle.`);if(-1!==t.indexOf(u))return;this.containerNodes.add(iO.nodeKey(s,r)),s.id in a||(a[s.id]=Object.keys(a).length),-1===n.indexOf(u)&&n.push(u);const c=u.inboundLayers.length;for(let e=0;e<c;e++){const s=u.inputTensors[e],r=u.inboundLayers[e],a=u.nodeIndices[e],i=u.tensorIndices[e];o(s,t,n,r,a,i)}for(t.push(u);n.indexOf(u)>=0;)n.splice(n.indexOf(u),1);i.push(u)},l=[],u=[];for(const e of this.outputs)o(e,l,u);const c=i.slice().reverse();for(const e of c){n[e.id]=e,e.id in t||(t[e.id]=0);let a=t[e.id];const i=null==s[e.outboundLayer.id]?0:s[e.outboundLayer.id];a=Math.max(a,i),s[e.outboundLayer.id]=a,r[e.outboundLayer.id]=e.outboundLayer,t[e.id]=a;for(let s=0;s<e.inboundLayers.length;s++){const r=e.inboundLayers[s],i=e.nodeIndices[s],o=r.inboundNodes[i],l=null==t[o.id]?0:t[o.id];t[o.id]=Math.max(a+1,l),n[o.id]=o}}const h={};for(const e in t){const s=t[e];s in h||(h[s]=[]),h[s].push(n[e])}const p={};for(const e in s){const t=s[e];t in p||(p[t]=[]),p[t].push(r[e])}let d=Object.keys(p).map((e=>parseInt(e,10))).sort(xF);this.layers=[];for(const e of d){const t=p[e];t.sort(((e,t)=>{const n=a[e.id],s=a[t.id];return n<s?-1:n>s?1:0}));for(const e of t)e instanceof iO&&this.internalContainerRefs.push(e),this.layers.push(e)}this.layersByDepth=p,d=Object.keys(h).map((e=>parseInt(e,10))).sort(xF);const f=this.inputs.slice(),m=[];for(const e of d)for(const t of h[e]){const e=t.outboundLayer;if(null!=e){for(const n of t.inputTensors)if(-1===f.indexOf(n))throw new rF(`Graph disconnected: cannot obtain value for tensor ${n} at layer "${e.name}". The following previous layers were accessed without issue: ${m}`);for(const e of t.outputTensors)f.push(e);m.push(e.name)}}this.nodesByDepth=h;const g=this.layers.map((e=>e.name));for(const e of g){const t=g.filter((t=>t===e)).length;if(1!==t)throw new rF(`The name "${e}" is used ${t} times in the model. All layer names should be unique. Layer names: `+JSON.stringify(g))}this.outboundNodes=[],this.inboundNodes=[],new n_({outboundLayer:this,inboundLayers:[],nodeIndices:[],tensorIndices:[],inputTensors:this.inputs,outputTensors:this.outputs,inputMasks:this.inputs.map((e=>null)),outputMasks:this.outputs.map((e=>null)),inputShapes:this.inputs.map((e=>e.shape)),outputShapes:this.outputs.map((e=>e.shape))}),this.built=!0,this._refCount=1}assertNotDisposed(){if(0===this._refCount)throw new Error(`Container '${this.name}' is already disposed.`)}dispose(){this.assertNotDisposed();const e={refCountAfterDispose:null,numDisposedVariables:0};if(0==--this._refCount){for(const t of this.layers)e.numDisposedVariables+=t.dispose().numDisposedVariables;for(const t of this.internalContainerRefs)e.numDisposedVariables+=t.dispose().numDisposedVariables}return e.refCountAfterDispose=this._refCount,e}get trainable(){return this.trainable_}set trainable(e){this.layers.forEach((t=>{t._trainableWeights.forEach((t=>t.trainable=e))})),this.trainable_=e}get trainableWeights(){if(this._trainableWeights.length>0)throw new aF("Container instance unexpectedly contains _trainableWeights.The trainable weights of a Container are a union of the trainable weights of its consituent Layers. Its own _trainableWeights must remain an empty Array.");if(!this.trainable)return[];let e=[];for(const t of this.layers)e=e.concat(t.trainableWeights);return e}get nonTrainableWeights(){const e=[];for(const t of this.layers)e.push(...t.nonTrainableWeights);if(!this.trainable){const t=[];for(const e of this.layers)t.push(...e.trainableWeights);return t.concat(e)}return e}get weights(){return this.trainableWeights.concat(this.nonTrainableWeights)}loadWeights(e,t=!0){const n={};let s=0;for(const e of this.layers)for(const t of e.weights){if(null!=n[t.originalName])throw new aF(`Duplicate weight name: ${t.originalName}`);n[t.originalName]=t,s++}const r=[];for(const s in e){let a=s;if(null==n[s]){const e=s.split("/");a=e.slice(0,-2).concat([e[e.length-1]]).join("/")}if(null!=n[a])r.push([n[a],e[s]]);else if(t)throw new aF(`Provided weight data has no target variable: ${s}`);delete n[a]}if(t){const e=[];for(const t in n)e.push(t);if(e.length>0)throw new aF(`${e.length} of ${s} weights are not set: ${e}`)}JD(r)}updatedConfig(){const e=this.getConfig(),t={};return t.className=this.getClassName(),t.config=e,t.kerasVersion="tfjs-layers 3.13.0",t.backend="TensorFlow.js",t}toJSON(e,t=!0){const n=J_(this.updatedConfig());return t?JSON.stringify(n):n}call(e,t){return th((()=>{e=pF(e);const n=new Q_;for(let t=0;t<this.inputs.length;++t)n.add(this.inputs[t],e[t]);return nO(this.outputs,n,t)}))}computeMask(e,t){return th((()=>{let n;return e=pF(e),n=null==t?lF(null,e.length):pF(t),this.runInternalGraph(e,n)[1]}))}computeOutputShape(e){const t=HD(e);if(t.length!==this.inputLayers.length)throw new aF(`Invalid inputShape argument ${e}: model has ${this.inputLayers.length} tensor inputs.`);const n={};for(let e=0;e<t.length;e++){const s=this.inputLayers[e],r=t[e];n[s.name+"_0_0"]=r}const s=Object.keys(this.nodesByDepth).map((e=>parseInt(e,10))).sort(xF);if(s.length>1)for(const e of s){const t=this.nodesByDepth[e];for(const e of t){const t=e.outboundLayer;if(-1!==this.inputLayers.map((e=>e.id)).indexOf(t.id))continue;const s=[];for(let t=0;t<e.inboundLayers.length;t++){const r=e.inboundLayers[t],a=e.nodeIndices[t],i=e.tensorIndices[t],o=n[`${r.name}_${a}_${i}`];s.push(o)}const r=HD(t.computeOutputShape(hF(s))),a=t.inboundNodes.indexOf(e);for(let e=0;e<r.length;e++){n[`${t.name}_${a}_${e}`]=r[e]}}}const r=[],a=[];for(let e=0;e<this.outputLayers.length;e++){const t=this.outputLayers[e],n=this.outputLayersNodeIndices[e],s=this.outputLayersTensorIndices[e],r=`${t.name}_${n}_${s}`;a.push(r)}for(let e=0;e<a.length;e++){const t=a[e];uF(t in n),r.push(n[t])}return hF(r)}runInternalGraph(e,t){null==t&&(t=lF(null,e.length));const n={};for(let s=0;s<this.inputs.length;++s){const r=this.inputs[s],a=e[s],i=t[s];n[r.id]=[a,i]}const s=Object.keys(this.nodesByDepth).map((e=>parseInt(e,10))).sort(xF);for(const e of s){const t=this.nodesByDepth[e];for(const e of t){const t=e.outboundLayer,s=e.inputTensors,r=e.outputTensors,a=new Array;for(const e of s)e.id in n&&a.push(n[e.id]);if(a.length===s.length){let s,i,o,l,u={};if(null!=e.callArgs&&(u=e.callArgs),1===a.length){const[e,n]=a[0];null==u.mask&&(u.mask=n),o=pF(t.call(e,u)),l=pF(t.computeMask(e,n)),s=[e],i=[n]}else s=a.map((e=>e[0])),i=a.map((e=>e[1])),null==u.mask&&(u.mask=i),o=pF(t.call(s,u)),l=pF(t.computeMask(s,i));if(t.activityRegularizer)throw new iF("LayersModel invocation with concrete Tensor value(s) in the presence of activity regularizer(s) is not supported yet.");for(let e=0;e<r.length;++e){const t=r[e],s=o[e],a=l[e];n[t.id]=[s,a]}}}}const r=[],a=[],i=[];for(const e of this.outputs){uF(e.id in n,`Could not compute output ${e.name} : ${e.id}`);const[t,s]=n[e.id];i.push(t.shape),r.push(t),a.push(s)}return[r,a,i]}buildNodeConversionMap(e){const t={};let n;for(const e of this.layers){n=e instanceof iO?1:0;for(let s=0;s<e.inboundNodes.length;s++){const r=iO.nodeKey(e,s);this.containerNodes.has(r)&&(t[r]=n,n+=1)}}return t}getLayer(e,t){if(null!=t){if(this.layers.length<=t)throw new aF(`Was asked to retrieve layer at index ${t}, but model only has ${this.layers.length} layer(s).`);return this.layers[t]}if(null==e)throw new aF("Provide either a layer name or layer index");for(const t of this.layers)if(t.name===e)return t;throw new aF(`No such layer: ${e}`)}calculateLosses(){return th((()=>{const e=[];for(const t of this.layers)for(let n=0;n<t.inboundNodes.length;++n){const s=iO.nodeKey(t,n);this.containerNodes.has(s)&&e.push(...t.calculateLosses())}return e}))}getConfig(){const e={name:this.name},t=this.buildNodeConversionMap(this.layers),n=[];for(const e of this.layers){const s=e.getClassName(),r=e.getConfig(),a=[];for(let n=0;n<e.inboundNodes.length;n++){const s=e.inboundNodes[n],r=iO.nodeKey(e,n);let i={};if(this.containerNodes.has(r)){if(s.callArgs)try{JSON.stringify(s.callArgs),i=s.callArgs}catch(t){console.warn(`Layer ${e.name} was passed non-serializable keyword arguments: ${s.callArgs}. They will not be included in the serialized model (and thus will be missing at deserialization time).`),i={}}if(s.inboundLayers.length>0){const e=[];for(let n=0;n<s.inboundLayers.length;n++){const r=s.inboundLayers[n],a=s.nodeIndices[n],o=s.tensorIndices[n];let l=t[iO.nodeKey(r,a)];null==l&&(l=0),e.push([r.name,l,o,i])}a.push(e)}}}const i={};i.name=e.name,i.className=s,i.config=r,i.inboundNodes=a,n.push(i)}e.layers=n;const s=[];for(let e=0;e<this.inputLayers.length;e++){const n=this.inputLayers[e],r=this.inputLayersNodeIndices[e],a=iO.nodeKey(n,r);if(!this.containerNodes.has(a))continue;let i=t[a];null==i&&(i=0);const o=this.inputLayersTensorIndices[e];s.push([n.name,i,o])}e.inputLayers=s;const r=[];for(let e=0;e<this.outputLayers.length;e++){const n=this.outputLayers[e],s=this.outputLayersNodeIndices[e],a=iO.nodeKey(n,s);if(!this.containerNodes.has(a))continue;let i=t[a];null==i&&(i=0);const o=this.outputLayersTensorIndices[e];r.push([n.name,i,o])}return e.outputLayers=r,e}static fromConfig(e,t,n={},s=!1){const r={},a={};function i(e,t){e.name in a?a[e.name].push(t):a[e.name]=[t]}function o(e,t){const n=[];let s;for(const a of t){const o=a[0],l=a[1],u=a[2];if(s=null==a[3]?{}:a[3],!(o in r))return void i(e,t);const c=r[o];if(c.inboundNodes.length<=l)return void i(e,t);const h=c.inboundNodes[l];n.push(h.outputTensors[u])}n.length>0&&e.apply(hF(n),s)}function l(e){const n=e.name,a=x_(e,null!=t.customObjects?t.customObjects:{});a.setFastWeightInitDuringBuild(s),r[n]=a;e.inboundNodes.forEach((e=>{if(!(e instanceof Array))throw new aF(`Corrupted configuration, expected array for nodeData: ${e}`);i(a,e)}))}const u=t.name,c=t.layers;for(const e of c)l(e);for(;!vF(a);)for(const e of c){const t=r[e.name];if(t.name in a){const e=a[t.name];delete a[t.name];for(const n of e)o(t,n)}}const h=[],p=[],d=t.inputLayers;for(const e of d){const t=e[0],n=e[1],s=e[2];uF(t in r);const a=r[t].inboundNodes[n].outputTensors;h.push(a[s])}const f=t.outputLayers;for(const e of f){const t=e[0],n=e[1],s=e[2];uF(t in r);const a=r[t].inboundNodes[n].outputTensors;p.push(a[s])}return new e({inputs:h,outputs:p,name:u})}get stateful(){if(this._stateful)throw new aF("Container instance unexpectedly has _stateful = true. The statefulness of a Container is determined by the Layers it contains. Its _stateful property must remain the default false.");for(const e of this.layers)if(e.stateful)return!0;return!1}resetStates(){th((()=>{this.layers.forEach((e=>{e.stateful&&e.resetStates()}))}))}}function oO(e,t,n){const s=t.length;if(null==e||Array.isArray(e)&&0===e.length)return t.map((e=>null));if(1===s)return Array.isArray(e)&&1===e.length?e:"object"==typeof e&&t[0]in e?[e[t[0]]]:[e];if(Array.isArray(e)){if(e.length!==s)throw new Error(`Provided ${n} is an array of ${e.length} element(s), but the model has ${s} outputs. Make sure a set of weights is provided for each model output.`);return e}if("object"==typeof e&&Object.keys(e).length>0&&"object"==typeof e[Object.keys(e)[0]]){const n=[];return t.forEach((t=>{t in e?n.push(e[t]):n.push(null)})),n}throw new Error(`The model has multiple (${s}) outputs, so ${n} must be either an array with ${s} elements or an object with ${t} keys. Provided ${n} not understood: ${JSON.stringify(e)}`)}function lO(e,t){return oO(e,t,"classWeight")}async function uO(e,t,n,s){if(null!=t||null!=s)throw new Error("Support sampleWeight is not implemented yet");if(null!=n){const t=th((()=>{if(1===e.shape.length)return Wo(e);if(2===e.shape.length){if(e.shape[1]>1){return ed(e,1)}if(1===e.shape[1])return Cu(e,[e.shape[0]]);throw new Error(`Encountered unexpected last-dimension size (${e.shape[1]}) during handling of class weights. The size is expected to be >= 1.`)}throw new Error(`Unexpected rank of target (y) tensor (${e.rank}) during handling of class weights. The rank is expected to be 1 or 2.`)})),s=Array.from(await t.data());nh(t);const r=[];return s.forEach((e=>{if(null==n[e])throw new Error(`classWeight must contain all classes in the training data. The class ${e} exists in the data but not in classWeight`);r.push(n[e])})),Fh(r,"float32")}return null}function cO(e,t){return Iu(e,t)}function hO(e,t){let n,s;const r=t;n=r.xs,s=r.ys,Us.assert(null!=n&&null!=s,(()=>`A Dataset iterator for fitDataset() is expected to generate objects of the form \`{xs: xVal, ys: yVal}\`, where the two values may be \`tf.Tensor\`, an array of Tensors, or a map of string to Tensor.  The provided Dataset instead generates ${t}`));const a=pO("input",e.inputNames,n),i=pO("output",e.outputNames,s),o=a[0].shape[0];Us.assert(a.length===e.inputs.length,(()=>`LayersModel has ${e.inputs.length} inputs, but the dataset provides ${a.length} inputs.  (Expected input keys: ${JSON.stringify(e.inputNames)})`)),Us.assert(i.length===e.outputs.length,(()=>`LayersModel has ${e.outputs.length} outputs, but the dataset provides ${i.length} outputs.  (Expected output keys: ${JSON.stringify(e.outputNames)})`));for(let t=0;t<a.length;t++)Us.assert(a[t].shape[0]===o,(()=>`Batch size mismatch: input ${e.inputNames[t]} has ${a[t].shape[0]}; expected  ${o} based on input ${e.inputNames[0]}.`));for(let t=0;t<i.length;t++)Us.assert(i[t].shape[0]===o,(()=>`Batch size mismatch: output ${e.outputNames[t]} has ${i[t].shape[0]}; expected  ${o} based on input ${e.inputNames[0]}.`));return{xs:a,ys:i}}function pO(e,t,n){if(n instanceof jr)return[n];if(Array.isArray(n))return Us.assert(n.length===t.length,(()=>`Received an array of ${n.length} Tensors, but expected ${t.length} to match the ${e} keys ${t}.`)),n;{const s=[];for(const r of t){if(null==n[r])throw new aF(`The feature data generated by the dataset lacks the required ${e} key '${r}'.`);s.push(n[r])}return s}}async function dO(e,t,n){const s=null!=n.batchesPerEpoch;if(Us.assert(null!=e.optimizer,(()=>"You must compile a model before training/testing. Use LayersModel.compile(modelCompileConfig).")),Us.assert(null!=n,(()=>"For fitDataset(), the 2nd argument (config) is required, but it is not provided in this call.")),Us.assert(null!=n.epochs&&n.epochs>0&&Number.isInteger(n.epochs),(()=>`For fitDataset(), config.epochs is expected to be a positive integer, but got ${n.epochs}`)),Us.assert(!s||n.batchesPerEpoch>0&&Number.isInteger(n.batchesPerEpoch),(()=>`For fitDataset(), config.batchesPerEpoch is expected to be a positive integer if specified, but got ${n.batchesPerEpoch}`)),Us.assert(null==n.validationSplit,(()=>"`validationSplit` is not supported by `fitDataset()`. Use validationData instead.")),e.isTraining)throw new Error("Cannot start training because another fit() call is ongoing.");e.isTraining=!0;try{const r=null!=n.validationData;let a,i;if(r)if(fO(n.validationData))Us.assert(null==n.validationBatches||n.validationBatches>0&&Number.isInteger(n.validationBatches),(()=>`For fitDataset() with dataset-based validation, config.validationBatches is expected not to be provided, or to be a positive integer, but got ${n.validationBatches}`));else{const e=function(e){if(3===e.length)throw new iF("Validation with sample weights is not implemented yet.");return{xs:e[0],ys:e[1]}}(n.validationData);a=e.xs,i=e.ys}const o=e.makeTrainFunction(),l=e.getDedupedMetricsNames();let u;u=r?l.slice().concat(l.map((e=>"val_"+e))):l.slice();const c=g_(n.callbacks,n.yieldEvery),h=null==n.verbose?1:n.verbose,{callbackList:p,history:d}=b_(c,h,n.epochs,null,null,function(e,t){let n=null;null!=t.batchesPerEpoch?n=t.batchesPerEpoch:Number.isFinite(e.size)&&(n=e.size);return n}(t,n),null,r,u);p.setModel(e),e.history=d,await p.onTrainBegin(),e.stopTraining_=!1;let f=null==n.initialEpoch?0:n.initialEpoch,m=await t.iterator();for(;f<n.epochs;){const u={};await p.onEpochBegin(f);let c=0,h=0;for(s||(m=await t.iterator());!s||c<n.batchesPerEpoch;){const t=await m.next();if(s&&t.done){console.warn(`You provided \`batchesPerEpoch\` as ${n.batchesPerEpoch}, but your dataset iterator ran out of data after ${c} batches; interrupting training. Make sure that your dataset can generate at least \`batchesPerEpoch * epochs\` batches (in this case, `+n.batchesPerEpoch*n.epochs+" batches). You may need to use the repeat() function when building your dataset.");break}if(null!=t.value){const{xs:s,ys:r}=hO(e,t.value),a={};a.batch=h,a.size=s[0].shape[0],await p.onBatchBegin(h,a);const i=[];if(null!=n.classWeight){const t=lO(n.classWeight,e.outputNames);for(let e=0;e<t.length;++e)i.push(await uO(r[e],null,t[e]))}const u=s.concat(r).concat(i),d=o(u);nh(u);for(let e=0;e<l.length;++e){const t=l[e],n=d[e];a[t]=n,sh(n)}await p.onBatchEnd(h,a),u_(a),h++,c++}if(s?c>=n.batchesPerEpoch:t.done){if(r){let t;t=fO(n.validationData)?pF(await e.evaluateDataset(n.validationData,{batches:n.validationBatches})):pF(e.evaluate(a,i,{batchSize:null==n.validationBatchSize?32:n.validationBatchSize,verbose:0}));for(let n=0;n<e.metricsNames.length;++n)u[`val_${e.metricsNames[n]}`]=t[n]}break}if(e.stopTraining_)break}if(await p.onEpochEnd(f,u),f++,e.stopTraining_)break}return await p.onTrainEnd(),await e.history.syncData(),e.history}finally{e.isTraining=!1}}function fO(e){return"function"==typeof e.iterator}function mO(e){Us.assert(e>0&&Number.isInteger(e),(()=>`batchSize is required to be a positive integer, but got ${e}`))}function gO(e,t,n){return null==e?[null]:Array.isArray(e)?e.map((e=>rD(e,t,n-t))):rD(e,t,n-t)}function yO(e,t){return th((()=>null==e?null:Array.isArray(e)?e.map((e=>yO(e,t))):pD(e,"int32"===t.dtype?t:Po(t,"int32"))))}function bO(e,t){const n=[];let s=0,r=null;for(;s<e;)r=s+t,r>=e&&(r=e),n.push([s,r]),s=r;return n}async function xO(e,t,n,s={}){if(e.isTraining)throw new Error("Cannot start training because another fit() call is ongoing.");let r,a,i,o,l,u,c,h,p;e.isTraining=!0;try{const d=null==s.batchSize?32:s.batchSize;mO(d);const f=!1,m=await e.standardizeUserData(t,n,s.sampleWeight,s.classWeight,f,d);r=m[0],a=m[1],p=m[2];let g,y=!1;if(null!=s.validationData&&s.validationData.length>0){if(y=!0,2!==s.validationData.length)throw 3===s.validationData.length?new iF("validationData including sample weights is not supported yet."):new aF(`When passing validation data, it must contain 2 (valX, valY) or 3 (valX, valY, valSampleWeight) items; ${s.validationData} is invalid.`);l=s.validationData[0],u=s.validationData[1];const t=!0,n=await e.standardizeUserData(l,u,null,null,t,d);c=n[0],h=n[1],g=c.concat(h)}else if(null!=s.validationSplit&&s.validationSplit>0&&s.validationSplit<1){y=!0;const e=Math.floor(r[0].shape[0]*(1-s.validationSplit)),t=r[0].shape[0];c=gO(r,e,t),i=r,r=gO(r,0,e),h=gO(a,e,t),o=a,a=gO(a,0,e),g=c.concat(h)}else null!=s.validationSteps&&(y=!0);const b=r.concat(a).concat(p);e.checkTrainableWeightsConsistency();const x=e.makeTrainFunction(),w=e.getDedupedMetricsNames();let v,k;y?(e.makeTestFunction(),v=e.testFunction,k=w.slice().concat(w.map((e=>"val_"+e)))):(v=null,g=[],k=w.slice());const I=g_(s.callbacks,s.yieldEvery),S=await async function(e,t,n,s,r,a,i,o,l,u,c,h,p,d,f){null==r&&(r=32),null==a&&(a=1),null==c&&(c=!0),null==p&&(p=0);let m=!1;if(null!=l&&null!=u&&(m=!0),null!=f&&(m=!0,null==d))throw new aF("Can only use `validationSteps` when doing step-wise training, i.e., `stepsPerEpoch` must be set.");const g=e.checkNumSamples(n,r,d,"steps_per_epoch");let y;null!=g&&(y=tD(0,g)),null==i&&(i=1);const{callbackList:b,history:x}=b_(o,i,a,p,g,d,r,m,h);b.setModel(e),e.history=x,await b.onTrainBegin(),e.stopTraining_=!1;for(let i=p;i<a;++i){await b.onEpochBegin(i);const a={};if(null!=d)throw new iF("stepsPerEpoch mode is not implemented yet.");{if("batch"===c)throw new iF("batch shuffling is not implemneted yet");c&&Us.shuffle(y);const i=Fh(y),o=bO(g,r);for(let c=0;c<o.length;++c){const h={};if(await b.onBatchBegin(c,h),th((()=>{const p=o[c][0],d=o[c][1],f=rD(i,p,d-p);h.batch=c,h.size=d-p;const g=yO(n,f),y=t(g);for(let e=0;e<s.length;++e){const t=s[e],n=y[e];h[t]=n,sh(n)}if(c===o.length-1&&m){const t=e.testLoop(l,u,r);for(let e=0;e<s.length;++e){const n=s[e],r=t[e];sh(r),a["val_"+n]=r}}})),await b.onBatchEnd(c,h),u_(h),e.stopTraining_)break}i.dispose()}if(await b.onEpochEnd(i,a),e.stopTraining_)break}return await b.onTrainEnd(),await e.history.syncData(),e.history}(e,x,b,w,d,s.epochs,s.verbose,I,v,g,s.shuffle,k,s.initialEpoch,null,null);return S}finally{e.isTraining=!1,vO(r,t),vO(a,n),vO(i,t),vO(o,n),vO(c,l),vO(h,u),null!=p&&nh(p)}}function wO(e){const t=[];e instanceof jr&&(e=[e]);for(let n=0;n<e.length;++n){const s=e[n];if(1===s.rank)t.push(sD(s,1));else{if(0===s.rank)throw new Error("Expected tensor to be at least 1D, but received a 0D tensor (scalar).");t.push(s)}}return t}function vO(e,t){if(null==e)return;const n=[];if(t instanceof jr)n.push(t.id);else if(Array.isArray(t))t.forEach((e=>n.push(e.id)));else if(null!=t)for(const e in t){const s=t[e];n.push(s.id)}const s=[];if(e instanceof jr)-1===n.indexOf(e.id)&&s.push(e);else if(Array.isArray(e))e.forEach((e=>{-1===n.indexOf(e.id)&&s.push(e)}));else if(null!=e)for(const t in e){const r=e[t];-1===n.indexOf(r.id)&&s.push(r)}s.forEach((e=>{e.isDisposed||e.dispose()}))}function kO(e){return Array.isArray(e)}function IO(e){return!function(e){return e instanceof jr}(e)&&!kO(e)}function SO(e,t,n,s=!0,r=""){if(null==t||0===t.length){if(null!=e){let t=!1;if(kO(e)&&e.length>0)t=!0;else if(IO(e)){for(const n in e)if(e.hasOwnProperty(n)){t=!0;break}}else t=!0;if(t)throw new aF(`Error when checking model ${r} expected no data, but got ${e}`)}return[]}if(null==e)return t.map((e=>null));let a;if(IO(e)){a=[];for(const n of t){if(null==e[n])throw new aF(`No data provided for "${n}". Need data for each key in: ${t}`);a.push(e[n])}}else if(kO(e)){if(e.length!==t.length)throw new aF(`Error when checking model ${r}: the Array of Tensors that you are passing to your model is not the size the model expected. Expected to see ${t.length} Tensor(s), but instead got the following list of Tensor(s): ${e}`);a=e}else{if(t.length>1)throw new aF(`The model ${r} expects ${t.length} Tensor(s), but only received one Tensor. Found: Tensor with shape ${e.shape}`);a=[e]}if(a=wO(a),null!=n)for(let e=0;e<t.length;++e){if(null==n[e])continue;const i=a[e];if(i.shape.length!==n[e].length)throw new aF(`Error when checking ${r}: expected ${t[e]} to have ${n[e].length} dimension(s). but got array with shape ${i.shape}`);for(let t=0;t<n[e].length;++t){if(0===t&&!s)continue;const a=i.shape[t],o=n[e][t];if(null!=o&&o>=0&&a!==o)throw new aF(`${r} expected a batch of elements where each example has shape [${n[e].slice(1,n[e].length)}] (i.e.,tensor shape [*,${n[e].slice(1,n[e].length)}]) but the ${r} received an input with ${i.shape[0]} examples, each with shape [${i.shape.slice(1,i.shape.length)}] (tensor shape [${i.shape}])`)}}return a}function NO(e,t,n,s=!0,r=""){let a;if(Array.isArray(e)){if(e.length!==t.length)throw new aF(`Error when checking model ${r}: the Array of Tensors that you are passing to your model is not the size the the model expected. Expected to see ${t.length} Tensor(s), but instead got ${e.length} Tensors(s).`);a=e}else{if(t.length>1)throw new aF(`The model expects ${t.length} ${r} Tensors, but only received one Tensor. Found: array with shape ${JSON.stringify(e.shape)}.`);a=[e]}if(null!=n)for(let e=0;e<t.length;++e){if(null==n[e])continue;const i=a[e];if(i.shape.length!==n[e].length)throw new aF(`Error when checking ${r}: expected ${t[e]} to have ${n[e].length} dimension(s), but got array with shape ${JSON.stringify(i.shape)}`);for(let a=0;a<n[e].length;++a){if(0===a&&!s)continue;const o=i.shape[a],l=n[e][a];if(null!=l&&l!==o)throw new aF(`Error when checking ${r}: expected ${t[e]} to have shape ${JSON.stringify(n[e])} but got array with shape ${JSON.stringify(i.shape)}.`)}}}class TO extends iO{constructor(e){super(e),this.isTraining=!1}summary(e,t,n=console.log){if(!this.built)throw new aF("This model has never been called, thus its weights have not been created yet. So no summary can be displayed. Build the model first (e.g., by calling it on some test data).");j_(this,e,t,n)}compile(e){if(null==e.loss&&(e.loss=[]),this.loss=e.loss,"string"==typeof e.optimizer)this.optimizer_=function(e){const t={Adagrad:()=>am.adagrad(.01),Adadelta:()=>am.adadelta(1,.95,nF()),Adam:()=>am.adam(.001,.9,.999,nF()),Adamax:()=>am.adamax(.002,.9,.999,nF(),0),RMSProp:()=>am.rmsprop(.001,.9,0,nF()),SGD:()=>am.sgd(.01)};if(t.adagrad=t.Adagrad,t.adadelta=t.Adadelta,t.adam=t.Adam,t.adamax=t.Adamax,t.rmsprop=t.RMSProp,t.sgd=t.SGD,e in t)return t[e]();throw new aF(`Unknown Optimizer ${e}`)}(e.optimizer),this.isOptimizerOwned=!0;else{if(!(e.optimizer instanceof Yf))throw new aF("User-defined optimizer must be an instance of tf.Optimizer.");this.optimizer_=e.optimizer,this.isOptimizerOwned=!1}let t=[];if(Array.isArray(e.loss)||"string"==typeof e.loss||"function"==typeof e.loss)if(Array.isArray(e.loss)){if(e.loss.length!==this.outputs.length)throw new aF(`When passing an Array as loss, it should have one entry per model output. The model has ${this.outputs.length} output(s), but you passed loss=${e.loss}.`);const n=e.loss;t=n.map((e=>R_(e)))}else{const n=R_(e.loss);this.outputs.forEach((e=>{t.push(n)}))}else{e.loss=e.loss;for(const t in e.loss)if(-1===this.outputNames.indexOf(t))throw new aF(`Unknown entry in loss dictionary: "${t}". Only expected the following keys: ${this.outputNames}`);for(const n of this.outputNames)null==e.loss[n]&&console.warn(`Output "${n}" is missing from loss dictionary. We assume this was done on purpose, and we will not be expecting data to be passed to ${n} during training`),t.push(R_(e.loss[n]))}this.lossFunctions=t,this.feedOutputNames=[],this.feedOutputShapes=[],this.feedLossFns=[];for(let e=0;e<this.outputs.length;++e){const t=this.internalOutputShapes[e],n=this.outputNames[e];this.feedOutputNames.push(n),this.feedOutputShapes.push(t),this.feedLossFns.push(this.lossFunctions[e])}const n=[];this.metrics=e.metrics,this.metricsNames=["loss"],this.metricsTensors=[],qF("loss",(()=>{for(let e=0;e<this.outputs.length;++e){if(-1!==n.indexOf(e))continue;const t=this.lossFunctions[e];this.outputs.length>1&&(this.metricsTensors.push([t,e]),this.metricsNames.push(this.outputNames[e]+"_loss"))}}));const s=function(e,t){if(null==e||Array.isArray(e)&&0===e.length)return t.map((e=>[]));let n;if("string"==typeof e||"function"==typeof e)n=[e];else{if(!Array.isArray(e)&&"object"!=typeof e)throw new TypeError(`Type of metrics argument not understood. Expected an string,function, Array, or Object, found: ${e}`);n=e}if(Array.isArray(n))return t.map((e=>n));{const e=[];for(const s of t){let t=n.hasOwnProperty(s)?n[s]:[];Array.isArray(t)||(t=[t]),e.push(t)}return e}}(e.metrics,this.outputNames),r=(e,t,n)=>{this.outputNames.length>1&&(t=this.outputNames[e]+"_"+t),this.metricsNames.push(t),this.metricsTensors.push([n,e])};qF("metric",(()=>{for(let e=0;e<this.outputs.length;++e){if(-1!==n.indexOf(e))continue;(t=>{let n,s,a;for(const i of t){if("string"==typeof i&&-1!==["accuracy","acc","crossentropy","ce"].indexOf(i)){const t=this.internalOutputShapes[e];let r;1===t[t.length-1]||this.lossFunctions[e]===C_?-1!==["accuracy","acc"].indexOf(i)?s=F_:-1!==["crossentropy","ce"].indexOf(i)&&(s=M_):this.lossFunctions[e]===T_?-1!==["accuracy","acc"].indexOf(i)?s=L_:-1!==["crossentropy","ce"].indexOf(i)&&(s=B_):-1!==["accuracy","acc"].indexOf(i)?s=D_:-1!==["crossentropy","ce"].indexOf(i)&&(s=z_),-1!==["accuracy","acc"].indexOf(i)?r="acc":-1!==["crossentropy","ce"].indexOf(i)&&(r="ce"),a=s,n=""+r}else{const e=W_(i);a=e,n=""+U_(i)}let t;qF(n,(()=>{t=a})),r(e,n,t)}})(s[e])}})),this.collectedTrainableWeights=this.trainableWeights}checkTrainableWeightsConsistency(){null!=this.collectedTrainableWeights&&this.trainableWeights.length!==this.collectedTrainableWeights.length&&console.warn("Discrepancy between trainableweights and collected trainable weights. Did you set `model.trainable` without calling `model.compile()` afterwards?")}evaluate(e,t,n={}){const s=null==n.batchSize?32:n.batchSize;mO(s);const r=this.standardizeUserDataXY(e,t,!0,s);try{const a=r[0].concat(r[1]);this.makeTestFunction();const i=this.testFunction;return hF(this.testLoop(i,a,s,n.verbose,n.steps))}finally{vO(r[0],e),vO(r[1],t)}}async evaluateDataset(e,t){return this.makeTestFunction(),async function(e,t,n){const s=null!=(n=n||{}).batches,r=e.testFunction;let a=[];if(n.verbose>0)throw new iF("Verbose mode is not implemented yet.");Us.assert(!s||n.batches>0&&Number.isInteger(n.batches),(()=>`Test loop expects \`batches\` to be a positive integer, but received ${JSON.stringify(n.batches)}`));const i="function"==typeof t.next?t:await t.iterator();let o=0,l=0;for(;!s||l<n.batches;){const t=await i.next();if(a=th((()=>{if(t.value){const{xs:n,ys:s}=hO(e,t.value),i=n.concat(s),u=th((()=>r(i)));if(nh(i),0===l)for(let e=0;e<u.length;++e)a.push(bh(0));const c=i[0].shape[0];for(let e=0;e<u.length;++e){const t=u[e],n=a[e];a[e]=th((()=>vh(a[e],Iu(c,t)))),l>0&&nh(n)}nh(u),o+=c,++l}return a})),t.done){s&&console.warn(`Your dataset iterator ran out of data during evaluateDataset(). Interrupting evalution. Make sure that your dataset can generate at least \`batches\` batches (in this case, ${n.batches} batches). You may need to use the repeat() function when building your dataset.`);break}}for(let e=0;e<a.length;++e){const t=a[e];a[e]=np(a[e],o),nh(t)}return hF(a)}(this,e,t)}checkNumSamples(e,t,n,s="steps"){let r;if(null!=n){if(r=null,null!=t)throw new aF(`If ${s} is set, batchSize must be null or undefined.Got batchSize = ${t}`)}else{if(null==e)throw new aF(`Either the input data should have a defined shape, or ${s} shoud be specified.`);r=Array.isArray(e)?e[0].shape[0]:e.shape[0]}return r}execute(e,t){if(Array.isArray(t)&&0===t.length)throw new aF("`outputs` is an empty Array, which is not allowed.");const n=Array.isArray(t),s=n?t:[t],r=this.retrieveSymbolicTensors(s),a=new Q_;if(e instanceof jr&&(e=[e]),Array.isArray(e)){if(e.length!==this.inputs.length)throw new aF(`The number of inputs provided (${e.length}) does not match the number of inputs of this model (${this.inputs.length}).`);for(let t=0;t<this.inputs.length;++t)a.add(this.inputs[t],e[t])}else for(const t of this.inputs){const n=e[t.name];if(null==n)throw new aF(`No value is provided for the model's input ${t.name}`);a.add(t,n)}const i=nO(r,a);return n?i:i[0]}retrieveSymbolicTensors(e){const t=lF(null,e.length);let n=e.length;for(const s of this.layers){const r=Array.isArray(s.output)?s.output:[s.output],a=r.map((e=>e.name));for(let s=0;s<e.length;++s){const i=a.indexOf(e[s]);if(-1!==i&&(t[s]=r[i],n--),0===n)break}if(0===n)break}if(n>0){const n=[];throw t.forEach(((t,s)=>{null==t&&n.push(e[s])})),new aF(`Cannot find SymbolicTensors for output name(s): ${JSON.stringify(n)}`)}return t}predictLoop(e,t=32,n=!1){return th((()=>{const s=this.checkNumSamples(e);if(n)throw new iF("Verbose predictLoop() is not implemented yet.");const r=bO(s,t),a=this.outputs.map((e=>[]));for(let t=0;t<r.length;++t){th((()=>{const n=r[t][0],s=r[t][1],a=gO(e,n,s),i=[];if(Array.isArray(a))for(let e=0;e<a.length;++e)i.push({key:this.inputs[e],value:a[e]});else i.push({key:this.inputs[0],value:a});const o=new Q_(i);return nO(this.outputs,o)})).forEach(((e,t)=>a[t].push(e)))}return hF(a.map((e=>oh(e,0))))}))}predict(e,t={}){const n=wO(e);NO(n,this.inputNames,this.feedInputShapes,!1);try{const s=null==t.batchSize?32:t.batchSize;return mO(s),this.predictLoop(n,s)}finally{vO(n,e)}}predictOnBatch(e){NO(e,this.inputNames,this.feedInputShapes,!0);const t=(Array.isArray(e)?e[0]:e).shape[0];return this.predictLoop(e,t)}standardizeUserDataXY(e,t,n=!0,s){if(null==this.optimizer_)throw new rF("You must compile a model before training/testing. Use LayersModel.compile(modelCompileArgs).");const r=[];for(let e=0;e<this.feedOutputShapes.length;++e){const t=this.feedOutputShapes[e];this.feedLossFns[e]===T_?r.push(t.slice(0,t.length-1).concat([1])):r.push(t)}if(function(e,t,n){const s=wF(e.map((e=>e.shape[0])));s.sort();const r=wF(t.map((e=>e.shape[0])));if(r.sort(),s.length>1)throw new aF(`All input Tensors (x) should have the same number of samples. Got array shapes: ${JSON.stringify(e.map((e=>e.shape)))}`);if(r.length>1)throw new aF(`All target Tensors (y) should have the same number of samples. Got array shapes: ${JSON.stringify(t.map((e=>e.shape)))}`);if(s.length>0&&r.length>0&&!Us.arraysEqual(s,r))throw new aF(`Input Tensors should have the same number of samples as target Tensors. Found ${s[0]} input sample(s) and ${r[0]} target sample(s).`)}(e=SO(e,this.feedInputNames,this.feedInputShapes,!1,"input"),t=SO(t,this.feedOutputNames,r,!1,"target")),function(e,t,n){const s=[v_,C_,N_];for(let r=0;r<e.length;++r){const a=e[r],i=t[r],o=n[r];if(null!=i){if(i===N_&&1===a.shape[a.shape.length-1])throw new aF(`You are passing a target array of shape ${a.shape} while using a loss 'categorical_crossentropy'. 'categorical_crossentropy'expects targets to be binary matrices (1s and 0s) of shape [samples, classes].`);if(-1!==s.indexOf(i)){const e=a.shape.slice(1),t=o.slice(1);for(let n=0;n<e.length;++n){const s=e[n],r=t[n];if(null!=r&&s!==r)throw new aF(`A target Tensor with shape ${a.shape} was passed for an output of shape ${o}, while using a loss function that expects targets to have the same shape as the output.`)}}}}}(t,this.feedLossFns,this.feedOutputShapes),this.stateful&&null!=s&&s>0&&e[0].shape[0]%s!=0)throw new aF(`In a stateful network, you should only pass inputs with a number of samples that is divisible by the batch size ${s}. Found: ${e[0].shape[0]} sample(s).`);return[e,t]}async standardizeUserData(e,t,n,s,r=!0,a){const[i,o]=this.standardizeUserDataXY(e,t,r,a);if(null!=n)throw new Error("sample weight is not supported yet.");let l=null;if(null!=s){const e=lO(s,this.outputNames);l=[];for(let t=0;t<e.length;++t)l.push(await uO(o[t],null,e[t]))}return[i,o,l]}testLoop(e,t,n,s=0,r){return th((()=>{const a=this.checkNumSamples(t,n,r,"steps"),i=[];if(s>0)throw new iF("Verbose mode is not implemented yet.");if(null!=r)throw new iF("steps mode in testLoop() is not implemented yet");{const s=bO(a,n),r=Fh(tD(0,a));for(let n=0;n<s.length;++n){const a=s[n][0],o=s[n][1],l=rD(r,a,o-a),u=yO(t,l),c=e(u);if(0===n)for(let e=0;e<c.length;++e)i.push(bh(0));for(let e=0;e<c.length;++e){const t=c[e];i[e]=vh(i[e],Iu(o-a,t))}}for(let e=0;e<i.length;++e)i[e]=np(i[e],a)}return i}))}getDedupedMetricsNames(){const e=this.metricsNames,t=[];for(let n=0;n<e.length;++n){const s=e[n];let r=s;if(cF(e,s)>1){r+=`_${cF(e.slice(0,n),s)}`}t.push(r)}return t}makeTrainFunction(){return e=>{const t=[],n=e.slice(0,this.inputs.length),s=e.slice(this.inputs.length,this.inputs.length+this.outputs.length),r=e.slice(this.inputs.length+this.outputs.length,this.inputs.length+2*this.outputs.length),a=[],i=this.collectedTrainableWeights.map((e=>e.read()));return[this.optimizer_.minimize((()=>{const e=[];for(let t=0;t<this.inputs.length;++t)e.push({key:this.inputs[t],value:n[t]});const i=new Q_(e),o=nO(this.outputs,i,{training:!0});let l;for(let e=0;e<this.lossFunctions.length;++e){let n=(0,this.lossFunctions[e])(s[e],o[e]);null!=r[e]&&(n=cO(n,r[e]));const a=Fp(n);t.push(a),l=0===e?n:vh(l,n)}for(let e=0;e<this.metricsTensors.length;++e){let n;if(this.outputs.length>1&&e<this.outputs.length)n=t[e];else{const t=this.metricsTensors[e][0],r=this.metricsTensors[e][1];n=Fp(t(s[r],o[r]))}sh(n),a.push(n)}return l=Fp(l),this.calculateLosses().forEach((e=>{l=vh(l,e)})),l}),!0,i)].concat(a)}}makeTestFunction(){this.testFunction=e=>th((()=>{const t=[];let n;const s=e.slice(0,this.inputs.length),r=e.slice(this.inputs.length,this.inputs.length+this.outputs.length),a=[];for(let e=0;e<this.inputs.length;++e)a.push({key:this.inputs[e],value:s[e]});const i=new Q_(a),o=nO(this.outputs,i);for(let e=0;e<this.lossFunctions.length;++e){const s=this.lossFunctions[e],a=Fp(s(r[e],o[e]));n=0===e?a:vh(n,a),t.push(n)}for(let e=0;e<this.metricsTensors.length;++e){const n=this.metricsTensors[e][0],s=this.metricsTensors[e][1],a=Fp(n(r[s],o[s]));t.push(a)}return t}))}async fit(e,t,n={}){return xO(this,e,t,n)}async fitDataset(e,t){return dO(this,e,t)}async trainOnBatch(e,t){const n=await this.standardizeUserData(e,t),s=n[0],r=n[1],a=this.makeTrainFunction()(s.concat(r)),i=[];for(const e of a){const t=await e.data();i.push(t[0])}return nh(a),vO(n[0],e),vO(n[1],t),hF(i)}getNamedWeights(e){const t=[],n=null!=e&&e.trainableOnly,s=n?this.trainableWeights:this.weights,r=this.getWeights(n);for(let e=0;e<s.length;++e)n&&!s[e].trainable||t.push({name:s[e].originalName,tensor:r[e]});return t}set stopTraining(e){this.stopTraining_=e}get stopTraining(){return this.stopTraining_}get optimizer(){return this.optimizer_}set optimizer(e){this.optimizer_!==e&&(this.optimizer_=e,this.isOptimizerOwned=!1)}dispose(){const e=super.dispose();if(0===e.refCountAfterDispose&&null!=this.optimizer&&this.isOptimizerOwned){const t=eh().numTensors;this.optimizer_.dispose(),e.numDisposedVariables+=t-eh().numTensors}return e}getLossIdentifiers(){let e;if("string"==typeof this.loss)e=dF(this.loss);else if(Array.isArray(this.loss)){for(const e of this.loss)if("string"!=typeof e)throw new Error("Serialization of non-string loss is not supported.");e=this.loss.map((e=>dF(e)))}else{const t=Object.keys(this.loss);e={};const n=this.loss;for(const s of t){if("string"!=typeof n[s])throw new Error("Serialization of non-string loss is not supported.");e[s]=dF(n[s])}}return e}getMetricIdentifiers(){if("string"==typeof this.metrics||"function"==typeof this.metrics)return[dF(U_(this.metrics))];if(Array.isArray(this.metrics))return this.metrics.map((e=>dF(U_(e))));{const e={};for(const t in this.metrics)e[t]=dF(U_(this.metrics[t]));return e}}getTrainingConfig(){return{loss:this.getLossIdentifiers(),metrics:this.getMetricIdentifiers(),optimizer_config:{class_name:this.optimizer.getClassName(),config:this.optimizer.getConfig()}}}loadTrainingConfig(e){if(null!=e.weighted_metrics)throw new Error("Loading weight_metrics is not supported yet.");if(null!=e.loss_weights)throw new Error("Loading loss_weights is not supported yet.");if(null!=e.sample_weight_mode)throw new Error("Loading sample_weight_mode is not supported yet.");const t=x_(Z_(e.optimizer_config));let n,s;if("string"==typeof e.loss)n=fF(e.loss);else if(Array.isArray(e.loss))n=e.loss.map((e=>fF(e)));else if(null!=e.loss){n={};for(const t in e.loss)n[t]=fF(e.loss[t])}if(Array.isArray(e.metrics))s=e.metrics.map((e=>fF(e)));else if(null!=e.metrics){s={};for(const t in e.metrics)s[t]=fF(e.metrics[t])}this.compile({loss:n,metrics:s,optimizer:t})}async save(e,t){if("string"==typeof e){const t=Uo.getSaveHandlers(e);if(0===t.length)throw new aF(`Cannot find any save handlers for URL '${e}'`);if(t.length>1)throw new aF(`Found more than one (${t.length}) save handlers for URL '${e}'`);e=t[0]}if(null==e.save)throw new aF("LayersModel.save() cannot proceed because the IOHandler provided does not have the `save` attribute defined.");const n=await Uo.encodeWeights(this.getNamedWeights(t)),s={modelTopology:this.toJSON(null,!1),format:"layers-model",generatedBy:"TensorFlow.js tfjs-layers v3.13.0",convertedBy:null};if(null!=t&&t.includeOptimizer&&null!=this.optimizer){s.trainingConfig=this.getTrainingConfig();const e="optimizer",{data:t,specs:r}=await Uo.encodeWeights(await this.optimizer.getWeights(),e);n.specs.push(...r),n.data=Uo.concatenateArrayBuffers([n.data,t])}if(null!=this.userDefinedMetadata){const e=!0;G_(this.userDefinedMetadata,this.name,e),s.userDefinedMetadata=this.userDefinedMetadata}return s.weightData=n.data,s.weightSpecs=n.specs,e.save(s)}setUserDefinedMetadata(e){G_(e,this.name),this.userDefinedMetadata=e}getUserDefinedMetadata(){return this.userDefinedMetadata}}TO.className="Model",Ol.registerClass(TO);class CO extends TO{}CO.className="Functional",Ol.registerClass(CO);class $O extends TO{constructor(e){if(super({inputs:[],outputs:[]}),e=e||{},this.trainable=!0,this.built=!1,this.name=null!=e.name?e.name:VD("sequential_"),null!=e.layers)for(const t of e.layers)this.add(t)}checkShape(e){if(e.inboundNodes[0].outputTensors[0].shape.some((e=>e<0)))throw new aF(`Negative dimension size caused by adding layer ${e.name} with input shape [${e.inboundNodes[0].inputTensors[0].shape}]`)}add(e){const t=e instanceof $O||e instanceof TO;let n;if(t){if(n=e,1!==n.outputs.length)throw new aF("All layers in a Sequential model should have a single output tensor. For multi-output layers, use the functional API.");if(1!==n.inputs.length)throw new aF("All layers in a Sequential model should have a single input tensor. For multi-input layers, use the functional API.")}if(0===this.outputs.length){if(0===e.inboundNodes.length){if(null==e.batchInputShape)throw new aF("The first layer in a Sequential model must get an `inputShape` or `batchInputShape` argument.");const t=o_({batchShape:e.batchInputShape,dtype:e.dtype,name:e.name+"_input"});e.apply(t)}if(t)this.outputs=n.outputs,this.inputs=n.inputs;else{if(1!==e.inboundNodes.length)throw new aF(`A layer added to a Sequential model must not already be connected somewhere else. LayersModel received layer ${e.name} which has ${e.inboundNodes.length} pre-existing inbound connections.`);if(1!==e.inboundNodes[0].outputTensors.length)throw new aF("All layers in a Sequential model should have a single output tensor. For multi-output layers, use the functional API.");this.checkShape(e),this.outputs=[e.inboundNodes[0].outputTensors[0]],this.inputs=a_(this.outputs[0])}this.inboundNodes=[],new n_({outboundLayer:this,inboundLayers:[],nodeIndices:[],tensorIndices:[],inputTensors:this.inputs,outputTensors:this.outputs,inputMasks:lF(null,this.inputs.length),outputMasks:[null],inputShapes:this.inputs.map((e=>e.shape)),outputShapes:this.outputs[0].shape})}else{const t=e.apply(this.outputs[0]);if(Array.isArray(t))throw new TypeError("All layers in a Sequential model should have a single output tensor. For multi-output layers, use the functional API.");this.checkShape(e),this.outputs=[t],this.inboundNodes[0].outputTensors=this.outputs,this.inboundNodes[0].outputShapes=[this.outputs[0].shape]}this.layers.push(e),this.built=!1}pop(){if(0===this.layers.length)throw new TypeError("There are no layers in the model.");if(this.layers.pop(),0===this.layers.length)this.outputs=[],this.inboundNodes=[],this.outboundNodes=[];else{const e=this.layers.length-1;this.layers[e].outboundNodes=[],this.outputs=[this.layers[e].output],this.inboundNodes[0].outputTensors=this.outputs,this.inboundNodes[0].outputShapes=[this.outputs[0].shape]}}call(e,t){return null==this.model&&this.build(),this.model.call(e,t)}build(e){if(qD(e),0===this.inputs.length||0===this.outputs.length)throw new TypeError("Sequential model cannot be built: model is empty. Add some layers first.");this.model=new TO({inputs:this.inputs,outputs:this.outputs[0],name:this.name+"_model"}),this.model.trainable=this.trainable,this.supportsMasking=this.model.supportsMasking,this.inputLayers=this.model.inputLayers,this.inputLayersNodeIndices=this.model.inputLayersNodeIndices,this.inputLayersTensorIndices=this.model.inputLayersTensorIndices,this.outputLayers=this.model.outputLayers,this.outputLayersNodeIndices=this.model.outputLayersNodeIndices,this.outputLayersTensorIndices=this.model.outputLayersTensorIndices,this.nodesByDepth=this.model.nodesByDepth,this.containerNodes=this.model.containerNodes,this.outputNames=this.model.outputNames,this.inputNames=this.model.inputNames,this.built=!0}countParams(){return this.built||this.build(),super.countParams()}summary(e,t,n=console.log){this.built||this.build(),super.summary(e,t,n)}setWeights(e){null==this.model&&this.build(),this.model.setWeights(e)}evaluate(e,t,n={}){if(!this.built)throw new rF("The model needs to be compiled before being used.");return this.model.evaluate(e,t,n)}async evaluateDataset(e,t){if(!this.built)throw new rF("The model needs to be compiled before being used.");return this.model.evaluateDataset(e,t)}predict(e,t={}){return null==this.model&&this.build(),this.model.predict(e,t)}predictOnBatch(e){return null==this.model&&this.build(),this.model.predictOnBatch(e)}compile(e){this.build(),this.model.compile(e),this.optimizer_=this.model.optimizer,this.isOptimizerOwned=this.model.isOptimizerOwned,this.loss=this.model.loss,this.metrics=this.model.metrics,this.metricsTensors=this.model.metricsTensors,this.metricsNames=this.model.metricsNames}get optimizer(){return null==this.model?void 0:this.model.optimizer}set optimizer(e){this.model.optimizer=e}async fit(e,t,n={}){if(!this.built)throw new rF("The model needs to be compiled before being used.");return this.model.fit(e,t,n)}async fitDataset(e,t){if(!this.built)throw new rF("The model needs to be compiled before being used.");return this.model.fitDataset(e,t)}async trainOnBatch(e,t){return this.model.trainOnBatch(e,t)}static fromConfig(e,t,n={},s=!1){let r,a={};if(t instanceof Array){if(null==t[0].className||"Merge"===t[0].className)throw new aF("Legacy serialization format not supported yet.");r=t}else Us.assert(null!=t.layers,(()=>"When the config data for a Sequential model is not an Array, it must be an Object that contains the 'layers' field.")),r=t.layers,delete t.layers,a=t;const i=new e(a);if(!(i instanceof $O))throw new iF(`Sequential.fromConfig called on non-Sequential input: ${i}`);for(const e of r){const t=x_(e,void 0,s);s&&t.setFastWeightInitDuringBuild(!0),i.add(t)}return i}set stopTraining(e){if(null==this.model)throw new aF("Cannot set the stopTraining property of a sequential model before it is compiled.");this.model.stopTraining=e}get stopTraining(){if(null==this.model)throw new aF("Cannot get the stopTraining property of a sequential model before it is compiled.");return this.model.stopTraining}getConfig(){const e=[];for(const t of this.layers){const n={};n.className=t.getClassName(),n.config=t.getConfig(),e.push(n)}return{name:this.name,layers:e}}}$O.className="Sequential",Ol.registerClass($O);class EO extends Ol.Serializable{getConfig(){return{}}}class AO extends EO{apply(e,t=1){return function(e,t=1){if(1!==t)throw new iF(`Support for alpha values other than 1 (${t}) is not implemented yet.`);return vu(e)}(e,t)}}AO.className="elu",Ol.registerClass(AO);class RO extends EO{apply(e){return If(e)}}RO.className="selu",Ol.registerClass(RO);class FO extends EO{apply(e){return Nu(e)}}FO.className="relu",Ol.registerClass(FO);class DO extends EO{apply(e){return th((()=>Mp(6,Nu(e))))}}DO.className="relu6",Ol.registerClass(DO);class _O extends EO{apply(e){return e}}_O.className="linear",Ol.registerClass(_O);class OO extends EO{apply(e){return $u(e)}}OO.className="sigmoid",Ol.registerClass(OO);class MO extends EO{apply(e){return function(e){return th((()=>{const t=vh(.5,Iu(.2,e));return gd(t,0,1)}))}(e)}}MO.className="hardSigmoid",Ol.registerClass(MO);class LO extends EO{apply(e){return Hd(e)}}LO.className="softplus",Ol.registerClass(LO);class zO extends EO{apply(e){return function(e){return th((()=>np(e,vh(mp(e),1))))}(e)}}zO.className="softsign",Ol.registerClass(zO);class BO extends EO{apply(e){return Lf(e)}}BO.className="tanh",Ol.registerClass(BO);class PO extends EO{apply(e,t=-1){return Df(e,t)}}PO.className="softmax",Ol.registerClass(PO);class WO extends EO{apply(e,t=-1){return qd(e,t)}}WO.className="logSoftmax",Ol.registerClass(WO);class UO extends EO{apply(e,t=1){return th((()=>Iu($u(Iu(e,t)),e)))}}UO.className="swish",Ol.registerClass(UO);class VO extends EO{apply(e){return th((()=>Iu(e,Lf(Hd(e)))))}}function GO(e){return e.getClassName()}function HO(e,t={}){return bF(e,Ol.SerializationMap.getMap().classNameMap,t,"activation")}function jO(e){if(null==e){const e={className:"linear",config:{}};return HO(e)}if("string"==typeof e){const t={};return t.className=e,t.config={},HO(t)}return e instanceof EO?e:HO(e)}function qO(e){if(null!=e&&"object"!=typeof e)throw new Error(`Argument to L1L2 regularizer's constructor is expected to be an object, but received: ${e}`)}VO.className="mish",Ol.registerClass(VO);class KO extends Ol.Serializable{}class XO extends KO{constructor(e){super(),qO(e),this.l1=null==e||null==e.l1?.01:e.l1,this.l2=null==e||null==e.l2?.01:e.l2,this.hasL1=0!==this.l1,this.hasL2=0!==this.l2}apply(e){return th((()=>{let t=ph([1]);return this.hasL1&&(t=vh(t,Au(Iu(this.l1,mp(e))))),this.hasL2&&(t=vh(t,Au(Iu(this.l2,dD(e))))),Cu(t,[])}))}getConfig(){return{l1:this.l1,l2:this.l2}}static fromConfig(e,t){return new e({l1:t.l1,l2:t.l2})}}XO.className="L1L2",Ol.registerClass(XO);const YO={l1l2:"L1L2"};function ZO(e){return gF(e)}function JO(e,t={}){return bF(e,Ol.SerializationMap.getMap().classNameMap,t,"regularizer")}function QO(e){if(null==e)return null;if("string"==typeof e){return JO({className:e in YO?YO[e]:e,config:{}})}return e instanceof KO?e:JO(e)}class eM extends r_{constructor(e){super(null==e?{}:e),this.supportsMasking=!0,null!=e&&(this.maxValue=e.maxValue)}call(e,t){e=jD(e);let n=Nu(e);return null!=this.maxValue&&(n=gd(n,0,this.maxValue)),n}computeOutputShape(e){return e}getConfig(){const e={maxValue:this.maxValue},t=super.getConfig();return Object.assign(e,t),e}}eM.className="ReLU",Ol.registerClass(eM);class tM extends r_{constructor(e){super(null==e?{}:e),this.DEFAULT_ALPHA=.3,null==e&&(e={}),this.alpha=null==e.alpha?this.DEFAULT_ALPHA:e.alpha}call(e,t){const n=jD(e);return ku(n,this.alpha)}computeOutputShape(e){return e}getConfig(){const e={alpha:this.alpha},t=super.getConfig();return Object.assign(e,t),e}}tM.className="LeakyReLU",Ol.registerClass(tM);class nM extends r_{constructor(e){if(super(null==e?{}:e),this.DEFAULT_ALPHA_INITIALIZER="zeros",null==e&&(e={}),this.supportsMasking=!0,this.alphaInitializer=BD(e.alphaInitializer||this.DEFAULT_ALPHA_INITIALIZER),this.alphaRegularizer=QO(e.alphaRegularizer),this.alphaConstraint=MF(e.alphaConstraint),null==e.sharedAxes)this.sharedAxes=null;else if(Array.isArray(e.sharedAxes))this.sharedAxes=e.sharedAxes;else{if("number"!=typeof e.sharedAxes)throw new aF(`Expected sharedAxes to be a number or an array of numbers, but got ${e.sharedAxes}`);this.sharedAxes=[e.sharedAxes]}}build(e){const t=(e=qD(e)).slice(1);if(null!=this.sharedAxes)for(const e of this.sharedAxes)t[e-1]=1;this.alpha=this.addWeight("alpha",t,"float32",this.alphaInitializer,this.alphaRegularizer,!0,this.alphaConstraint);const n={};if(null!=this.sharedAxes)for(let t=1;t<e.length;++t)n[t]=e[t];this.inputSpec=[new QD({ndim:e.length,axes:n})],this.built=!0}call(e,t){return e=jD(e),Su(e,this.alpha.read())}getConfig(){const e={alphaInitializer:zD(this.alphaInitializer),alphaRegularizer:ZO(this.alphaRegularizer),alphaConstraint:_F(this.alphaConstraint),sharedAxes:this.sharedAxes},t=super.getConfig();return Object.assign(e,t),e}}nM.className="PReLU",Ol.registerClass(nM);class sM extends r_{constructor(e){if(super(null==e?{}:e),this.DEFAULT_ALPHA=1,null==e&&(e={}),null!=e.alpha&&e.alpha!==this.DEFAULT_ALPHA)throw new iF(`Non-default alpha value (${e.alpha}) is not supported by the ELU layer yet.`);this.alpha=null==e.alpha?this.DEFAULT_ALPHA:e.alpha}call(e,t){const n=jD(e);return vu(n)}computeOutputShape(e){return e}getConfig(){const e={alpha:this.alpha},t=super.getConfig();return Object.assign(e,t),e}}sM.className="ELU",Ol.registerClass(sM);class rM extends r_{constructor(e){super(null==e?{}:e),this.DEFAULT_THETA=1,null==e&&(e={}),this.theta=null==e.theta?this.DEFAULT_THETA:e.theta}call(e,t){const n=jD(e);return Iu(n,Po(ep(n,this.theta),"float32"))}computeOutputShape(e){return e}getConfig(){const e={theta:this.theta},t=super.getConfig();return Object.assign(e,t),e}}rM.className="ThresholdedReLU",Ol.registerClass(rM);class aM extends r_{constructor(e){super(null==e?{}:e),this.DEFAULT_AXIS=1,null==e&&(e={}),this.softmax=(new PO).apply,this.axis=null==e.axis?this.DEFAULT_AXIS:e.axis}call(e,t){const n=jD(e);return this.softmax(n,this.axis)}computeOutputShape(e){return e}getConfig(){const e={axis:this.axis},t=super.getConfig();return Object.assign(e,t),e}}function iM(e,t,n){if("number"==typeof e)return lF(e,t);if(e.length!==t)throw new aF(`The ${n} argument must be an integer or tuple of ${t} integers. Received: ${e.length} elements.`);for(let r=0;r<t;++r){const a=e[r];if((s=a)!==parseInt(s.toString(),10))throw new aF(`The ${n} argument must be an integer or tuple of ${t} integers. Received: ${JSON.stringify(e)} including a non-integer number ${a}`)}return e;var s}function oM(e,t,n,s,r=1){if(null==e)return e;let a;return a="same"===n?e:e-(t+(t-1)*(r-1))+1,Math.floor((a+s-1)/s)}function lM(e,t,n,s){if(null==e)return null;if("valid"===s)e=e*t+eD([n-t,0]);else{if("same"!==s)throw new aF(`Unsupport padding mode: ${s}.`);e*=t}return e}function uM(e,t){return th((()=>(VF(t),"channelsFirst"===t?$p(e,[0,2,3,1]):e)))}function cM(e,t){return th((()=>(VF(t),"channelsFirst"===t?$p(e,[0,2,3,4,1]):e)))}function hM(e,t,n,s=1,r="valid",a,i=1){return th((()=>{if(null==a&&(a="channelsLast"),VF(a),3!==e.shape.length)throw new aF(`The input of a conv1dWithBias operation should be 3, but is ${e.shape.length} instead.`);if(3!==t.shape.length)throw new aF(`The kernel for a conv1dWithBias operation should be 3, but is ${t.shape.length} instead`);if(null!=n&&1!==n.shape.length)throw new aF(`The bias for a conv1dWithBias operation should be 1, but is ${t.shape.length} instead`);if("channelsFirst"===a&&(e=$p(e,[0,2,1])),"causal"===r)throw new iF("The support for CAUSAL padding mode in conv1dWithBias is not implemented yet.");let o=vd(e,t,s,"same"===r?"same":"valid","NWC",i);return null!=n&&(o=mD(o,n)),o}))}function pM(e,t,n,s=[1,1],r="valid",a,i,o=null){return th((()=>{if(null==a&&(a="channelsLast"),VF(a),3!==e.rank&&4!==e.rank)throw new aF(`conv2dWithBiasActivation expects input to be of rank 3 or 4, but received ${e.rank}.`);if(3!==t.rank&&4!==t.rank)throw new aF(`conv2dWithBiasActivation expects kernel to be of rank 3 or 4, but received ${e.rank}.`);let l=uM(e,a);if("causal"===r)throw new iF("The support for CAUSAL padding mode in conv1dWithBias is not implemented yet.");return l=wh.conv2d({x:l,filter:t,strides:s,pad:"same"===r?"same":"valid",dilations:i,dataFormat:"NHWC",bias:n,activation:o}),"channelsFirst"===a&&(l=$p(l,[0,3,1,2])),l}))}function dM(e,t,n,s=[1,1,1],r="valid",a,i){return th((()=>{if(null==a&&(a="channelsLast"),VF(a),4!==e.rank&&5!==e.rank)throw new aF(`conv3dWithBias expects input to be of rank 4 or 5, but received ${e.rank}.`);if(4!==t.rank&&5!==t.rank)throw new aF(`conv3dWithBias expects kernel to be of rank 4 or 5, but received ${e.rank}.`);let o=cM(e,a);if("causal"===r)throw new iF("The support for CAUSAL padding mode in conv3dWithBias is not implemented yet.");return o=Id(o,t,s,"same"===r?"same":"valid","NDHWC",i),null!=n&&(o=mD(o,n)),"channelsFirst"===a&&(o=$p(o,[0,4,1,2,3])),o}))}aM.className="Softmax",Ol.registerClass(aM);class fM extends r_{constructor(e,t){if(super(t),this.bias=null,this.DEFAULT_KERNEL_INITIALIZER="glorotNormal",this.DEFAULT_BIAS_INITIALIZER="zeros",fM.verifyArgs(t),this.rank=e,SF(this.rank,"rank"),1!==this.rank&&2!==this.rank&&3!==this.rank)throw new iF(`Convolution layer for rank other than 1, 2, or 3 (${this.rank}) is not implemented yet.`);if(this.kernelSize=iM(t.kernelSize,e,"kernelSize"),this.strides=iM(null==t.strides?1:t.strides,e,"strides"),this.padding=null==t.padding?"valid":t.padding,GF(this.padding),this.dataFormat=null==t.dataFormat?"channelsLast":t.dataFormat,VF(this.dataFormat),this.activation=jO(t.activation),this.useBias=null==t.useBias||t.useBias,this.biasInitializer=BD(t.biasInitializer||this.DEFAULT_BIAS_INITIALIZER),this.biasConstraint=MF(t.biasConstraint),this.biasRegularizer=QO(t.biasRegularizer),this.activityRegularizer=QO(t.activityRegularizer),this.dilationRate=iM(null==t.dilationRate?1:t.dilationRate,e,"dilationRate"),1===this.rank&&Array.isArray(this.dilationRate)&&1!==this.dilationRate.length)throw new aF(`dilationRate must be a number or an array of a single number for 1D convolution, but received ${JSON.stringify(this.dilationRate)}`);if(2===this.rank){if("number"==typeof this.dilationRate)this.dilationRate=[this.dilationRate,this.dilationRate];else if(2!==this.dilationRate.length)throw new aF(`dilationRate must be a number or array of two numbers for 2D convolution, but received ${JSON.stringify(this.dilationRate)}`)}else if(3===this.rank)if("number"==typeof this.dilationRate)this.dilationRate=[this.dilationRate,this.dilationRate,this.dilationRate];else if(3!==this.dilationRate.length)throw new aF(`dilationRate must be a number or array of three numbers for 3D convolution, but received ${JSON.stringify(this.dilationRate)}`)}static verifyArgs(e){if(uF("kernelSize"in e,"required key 'kernelSize' not in config"),"number"!=typeof e.kernelSize&&!IF(e.kernelSize,"number",1,3))throw new aF(`BaseConv expects config.kernelSize to be number or number[] with length 1, 2, or 3, but received ${JSON.stringify(e.kernelSize)}.`)}getConfig(){const e={kernelSize:this.kernelSize,strides:this.strides,padding:this.padding,dataFormat:this.dataFormat,dilationRate:this.dilationRate,activation:GO(this.activation),useBias:this.useBias,biasInitializer:zD(this.biasInitializer),biasRegularizer:ZO(this.biasRegularizer),activityRegularizer:ZO(this.activityRegularizer),biasConstraint:_F(this.biasConstraint)},t=super.getConfig();return Object.assign(e,t),e}}class mM extends fM{constructor(e,t){super(e,t),this.kernel=null,mM.verifyArgs(t),this.filters=t.filters,SF(this.filters,"filters"),this.kernelInitializer=BD(t.kernelInitializer||this.DEFAULT_KERNEL_INITIALIZER),this.kernelConstraint=MF(t.kernelConstraint),this.kernelRegularizer=QO(t.kernelRegularizer)}build(e){e=qD(e);const t="channelsFirst"===this.dataFormat?1:e.length-1;if(null==e[t])throw new aF(`The channel dimension of the input should be defined. Found ${e[t]}`);const n=e[t],s=this.kernelSize.concat([n,this.filters]);this.kernel=this.addWeight("kernel",s,null,this.kernelInitializer,this.kernelRegularizer,!0,this.kernelConstraint),this.useBias&&(this.bias=this.addWeight("bias",[this.filters],null,this.biasInitializer,this.biasRegularizer,!0,this.biasConstraint)),this.inputSpec=[{ndim:this.rank+2,axes:{[t]:n}}],this.built=!0}call(e,t){return th((()=>{let t;e=jD(e);const n=null==this.bias?null:this.bias.read(),s=TF(this.activation.getClassName());if(null!=s&&2===this.rank)t=pM(e,this.kernel.read(),n,this.strides,this.padding,this.dataFormat,this.dilationRate,s);else{if(1===this.rank)t=hM(e,this.kernel.read(),n,this.strides[0],this.padding,this.dataFormat,this.dilationRate[0]);else if(2===this.rank)t=pM(e,this.kernel.read(),n,this.strides,this.padding,this.dataFormat,this.dilationRate);else{if(3!==this.rank)throw new iF("convolutions greater than 3D are not implemented yet.");t=dM(e,this.kernel.read(),n,this.strides,this.padding,this.dataFormat,this.dilationRate)}null!=this.activation&&(t=this.activation.apply(t))}return t}))}computeOutputShape(e){e=qD(e);const t=[],n="channelsLast"===this.dataFormat?e.slice(1,e.length-1):e.slice(2);for(let e=0;e<n.length;++e){const s=oM(n[e],this.kernelSize[e],this.padding,this.strides[e],"number"==typeof this.dilationRate?this.dilationRate:this.dilationRate[e]);t.push(s)}let s=[e[0]];return"channelsLast"===this.dataFormat?(s=s.concat(t),s.push(this.filters)):(s.push(this.filters),s=s.concat(t)),s}getConfig(){const e={filters:this.filters,kernelInitializer:zD(this.kernelInitializer),kernelRegularizer:ZO(this.kernelRegularizer),kernelConstraint:_F(this.kernelConstraint)},t=super.getConfig();return Object.assign(e,t),e}static verifyArgs(e){if(!("filters"in e)||"number"!=typeof e.filters||e.filters<1)throw new aF(`Convolution layer expected config.filters to be a 'number' > 0 but got ${JSON.stringify(e.filters)}`)}}class gM extends mM{constructor(e){super(2,e),gM.verifyArgs(e)}getConfig(){const e=super.getConfig();return delete e.rank,e}static verifyArgs(e){if("number"!=typeof e.kernelSize&&!IF(e.kernelSize,"number",1,2))throw new aF(`Conv2D expects config.kernelSize to be number or number[] with length 1 or 2, but received ${JSON.stringify(e.kernelSize)}.`)}}gM.className="Conv2D",Ol.registerClass(gM);class yM extends mM{constructor(e){super(3,e),yM.verifyArgs(e)}getConfig(){const e=super.getConfig();return delete e.rank,e}static verifyArgs(e){if("number"!=typeof e.kernelSize&&(!Array.isArray(e.kernelSize)||1!==e.kernelSize.length&&3!==e.kernelSize.length))throw new aF(`Conv3D expects config.kernelSize to be number or [number, number, number], but received ${JSON.stringify(e.kernelSize)}.`)}}yM.className="Conv3D",Ol.registerClass(yM);class bM extends gM{constructor(e){if(super(e),this.inputSpec=[new QD({ndim:4})],"same"!==this.padding&&"valid"!==this.padding)throw new aF(`Conv2DTranspose currently supports only padding modes 'same' and 'valid', but received padding mode ${this.padding}`)}build(e){if(4!==(e=qD(e)).length)throw new aF("Input should have rank 4; Received input shape: "+JSON.stringify(e));const t="channelsFirst"===this.dataFormat?1:e.length-1;if(null==e[t])throw new aF("The channel dimension of the inputs should be defined. Found `None`.");const n=e[t],s=this.kernelSize.concat([this.filters,n]);this.kernel=this.addWeight("kernel",s,"float32",this.kernelInitializer,this.kernelRegularizer,!0,this.kernelConstraint),this.useBias&&(this.bias=this.addWeight("bias",[this.filters],"float32",this.biasInitializer,this.biasRegularizer,!0,this.biasConstraint)),this.inputSpec=[new QD({ndim:4,axes:{[t]:n}})],this.built=!0}call(e,t){return th((()=>{let t=jD(e);if(4!==t.shape.length)throw new aF(`Conv2DTranspose.call() expects input tensor to be rank-4, but received a tensor of rank-${t.shape.length}`);const n=t.shape,s=n[0];let r,a;"channelsFirst"===this.dataFormat?(r=2,a=3):(r=1,a=2);const i=n[r],o=n[a],l=this.kernelSize[0],u=this.kernelSize[1],c=this.strides[0],h=this.strides[1],p=[s,lM(i,c,l,this.padding),lM(o,h,u,this.padding),this.filters];"channelsLast"!==this.dataFormat&&(t=$p(t,[0,2,3,1]));let d=kd(t,this.kernel.read(),p,this.strides,this.padding);return"channelsLast"!==this.dataFormat&&(d=$p(d,[0,3,1,2])),null!=this.bias&&(d=mD(d,this.bias.read(),this.dataFormat)),null!=this.activation&&(d=this.activation.apply(d)),d}))}computeOutputShape(e){const t=(e=qD(e)).slice();let n,s,r;"channelsFirst"===this.dataFormat?(n=1,s=2,r=3):(n=3,s=1,r=2);const a=this.kernelSize[0],i=this.kernelSize[1],o=this.strides[0],l=this.strides[1];return t[n]=this.filters,t[s]=lM(t[s],o,a,this.padding),t[r]=lM(t[r],l,i,this.padding),t}getConfig(){const e=super.getConfig();return delete e.dilationRate,e}}bM.className="Conv2DTranspose",Ol.registerClass(bM);class xM extends yM{constructor(e){if(super(e),this.inputSpec=[new QD({ndim:5})],"same"!==this.padding&&"valid"!==this.padding)throw new aF(`Conv3DTranspose currently supports only padding modes 'same' and 'valid', but received padding mode ${this.padding}`)}build(e){if(5!==(e=qD(e)).length)throw new aF("Input should have rank 5; Received input shape: "+JSON.stringify(e));const t="channelsFirst"===this.dataFormat?1:e.length-1;if(null==e[t])throw new aF("The channel dimension of the inputs should be defined. Found `None`.");const n=e[t],s=this.kernelSize.concat([this.filters,n]);this.kernel=this.addWeight("kernel",s,"float32",this.kernelInitializer,this.kernelRegularizer,!0,this.kernelConstraint),this.useBias&&(this.bias=this.addWeight("bias",[this.filters],"float32",this.biasInitializer,this.biasRegularizer,!0,this.biasConstraint)),this.inputSpec=[new QD({ndim:5,axes:{[t]:n}})],this.built=!0}call(e,t){return th((()=>{let t=jD(e);if(5!==t.shape.length)throw new aF(`Conv3DTranspose.call() expects input tensor to be rank-4, but received a tensor of rank-${t.shape.length}`);const n=t.shape,s=n[0];let r,a,i;"channelsFirst"===this.dataFormat?(i=2,r=3,a=4):(i=1,r=2,a=3);const o=n[i],l=n[r],u=n[a],c=this.kernelSize[0],h=this.kernelSize[1],p=this.kernelSize[2],d=this.strides[0],f=this.strides[1],m=this.strides[2],g=[s,lM(o,d,c,this.padding),lM(l,f,h,this.padding),lM(u,m,p,this.padding),this.filters];"channelsLast"!==this.dataFormat&&(t=$p(t,[0,2,3,4,1]));let y=Nd(t,this.kernel.read(),g,this.strides,this.padding);return"channelsLast"!==this.dataFormat&&(y=$p(y,[0,4,1,2,3])),null!==this.bias&&(y=mD(y,this.bias.read(),this.dataFormat)),null!==this.activation&&(y=this.activation.apply(y)),y}))}computeOutputShape(e){const t=(e=qD(e)).slice();let n,s,r,a;"channelsFirst"===this.dataFormat?(n=1,s=2,r=3,a=4):(n=4,s=1,r=2,a=3);const i=this.kernelSize[0],o=this.kernelSize[1],l=this.kernelSize[2],u=this.strides[0],c=this.strides[1],h=this.strides[2];return t[n]=this.filters,t[s]=lM(t[s],u,i,this.padding),t[r]=lM(t[r],c,o,this.padding),t[a]=lM(t[a],h,l,this.padding),t}getConfig(){const e=super.getConfig();return delete e.dilationRate,e}}xM.className="Conv3DTranspose",Ol.registerClass(xM);class wM extends mM{constructor(e,t){if(super(e,t),this.DEFAULT_DEPTHWISE_INITIALIZER="glorotUniform",this.DEFAULT_POINTWISE_INITIALIZER="glorotUniform",this.depthwiseKernel=null,this.pointwiseKernel=null,null==t.filters)throw new aF("The `filters` configuration field is required by SeparableConv, but is unspecified.");if(null!=t.kernelInitializer||null!=t.kernelRegularizer||null!=t.kernelConstraint)throw new aF("Fields kernelInitializer, kernelRegularizer and kernelConstraint are invalid for SeparableConv2D. Use depthwiseInitializer, depthwiseRegularizer, depthwiseConstraint, pointwiseInitializer, pointwiseRegularizer and pointwiseConstraint instead.");if(null!=t.padding&&"same"!==t.padding&&"valid"!==t.padding)throw new aF(`SeparableConv${this.rank}D supports only padding modes: 'same' and 'valid', but received ${JSON.stringify(t.padding)}`);this.depthMultiplier=null==t.depthMultiplier?1:t.depthMultiplier,this.depthwiseInitializer=BD(t.depthwiseInitializer||this.DEFAULT_DEPTHWISE_INITIALIZER),this.depthwiseRegularizer=QO(t.depthwiseRegularizer),this.depthwiseConstraint=MF(t.depthwiseConstraint),this.pointwiseInitializer=BD(t.depthwiseInitializer||this.DEFAULT_POINTWISE_INITIALIZER),this.pointwiseRegularizer=QO(t.pointwiseRegularizer),this.pointwiseConstraint=MF(t.pointwiseConstraint)}build(e){if((e=qD(e)).length<this.rank+2)throw new aF(`Inputs to SeparableConv${this.rank}D should have rank ${this.rank+2}, but received input shape: ${JSON.stringify(e)}`);const t="channelsFirst"===this.dataFormat?1:e.length-1;if(null==e[t]||e[t]<0)throw new aF(`The channel dimension of the inputs should be defined, but found ${JSON.stringify(e[t])}`);const n=e[t],s=this.kernelSize.concat([n,this.depthMultiplier]),r=[];for(let e=0;e<this.rank;++e)r.push(1);r.push(n*this.depthMultiplier,this.filters);const a=!0;this.depthwiseKernel=this.addWeight("depthwise_kernel",s,"float32",this.depthwiseInitializer,this.depthwiseRegularizer,a,this.depthwiseConstraint),this.pointwiseKernel=this.addWeight("pointwise_kernel",r,"float32",this.pointwiseInitializer,this.pointwiseRegularizer,a,this.pointwiseConstraint),this.useBias?this.bias=this.addWeight("bias",[this.filters],"float32",this.biasInitializer,this.biasRegularizer,a,this.biasConstraint):this.bias=null,this.inputSpec=[new QD({ndim:this.rank+2,axes:{[t]:n}})],this.built=!0}call(e,t){return th((()=>{let t;if(e=jD(e),1===this.rank)throw new iF("1D separable convolution is not implemented yet.");return 2===this.rank&&("channelsFirst"===this.dataFormat&&(e=$p(e,[0,2,3,1])),t=Sf(e,this.depthwiseKernel.read(),this.pointwiseKernel.read(),this.strides,this.padding,this.dilationRate,"NHWC")),this.useBias&&(t=mD(t,this.bias.read(),this.dataFormat)),null!=this.activation&&(t=this.activation.apply(t)),"channelsFirst"===this.dataFormat&&(t=$p(t,[0,3,1,2])),t}))}getConfig(){const e=super.getConfig();return delete e.rank,delete e.kernelInitializer,delete e.kernelRegularizer,delete e.kernelConstraint,e.depthwiseInitializer=zD(this.depthwiseInitializer),e.pointwiseInitializer=zD(this.pointwiseInitializer),e.depthwiseRegularizer=ZO(this.depthwiseRegularizer),e.pointwiseRegularizer=ZO(this.pointwiseRegularizer),e.depthwiseConstraint=_F(this.depthwiseConstraint),e.pointwiseConstraint=_F(this.pointwiseConstraint),e}}wM.className="SeparableConv";class vM extends wM{constructor(e){super(2,e)}}vM.className="SeparableConv2D",Ol.registerClass(vM);class kM extends mM{constructor(e){super(1,e),kM.verifyArgs(e),this.inputSpec=[{ndim:3}]}getConfig(){const e=super.getConfig();return delete e.rank,delete e.dataFormat,e}static verifyArgs(e){if("number"!=typeof e.kernelSize&&!IF(e.kernelSize,"number",1,1))throw new aF(`Conv1D expects config.kernelSize to be number or number[] with length 1, but received ${JSON.stringify(e.kernelSize)}.`)}}kM.className="Conv1D",Ol.registerClass(kM);class IM extends r_{constructor(e){super(e),"number"==typeof e.cropping?this.cropping=[[e.cropping,e.cropping],[e.cropping,e.cropping]]:"number"==typeof e.cropping[0]?this.cropping=[[e.cropping[0],e.cropping[0]],[e.cropping[1],e.cropping[1]]]:this.cropping=e.cropping,this.dataFormat=void 0===e.dataFormat?"channelsLast":e.dataFormat,this.inputSpec=[{ndim:4}]}computeOutputShape(e){return"channelsFirst"===this.dataFormat?[e[0],e[1],e[2]-this.cropping[0][0]-this.cropping[0][1],e[3]-this.cropping[1][0]-this.cropping[1][1]]:[e[0],e[1]-this.cropping[0][0]-this.cropping[0][1],e[2]-this.cropping[1][0]-this.cropping[1][1],e[3]]}call(e,t){return th((()=>{if(e=jD(e),"channelsLast"===this.dataFormat){const t=iD(e,this.cropping[0][0],e.shape[1]-this.cropping[0][0]-this.cropping[0][1],2);return iD(t,this.cropping[1][0],e.shape[2]-this.cropping[1][1]-this.cropping[1][0],3)}{const t=iD(e,this.cropping[0][0],e.shape[2]-this.cropping[0][0]-this.cropping[0][1],3);return iD(t,this.cropping[1][0],e.shape[3]-this.cropping[1][1]-this.cropping[1][0],4)}}))}getConfig(){const e={cropping:this.cropping,dataFormat:this.dataFormat},t=super.getConfig();return Object.assign(e,t),e}}IM.className="Cropping2D",Ol.registerClass(IM);class SM extends r_{constructor(e){var t;super(e),this.DEFAULT_SIZE=[2,2],this.inputSpec=[{ndim:4}],this.size=null==e.size?this.DEFAULT_SIZE:e.size,this.dataFormat=null==e.dataFormat?"channelsLast":e.dataFormat,VF(this.dataFormat),this.interpolation=null==e.interpolation?"nearest":e.interpolation,t=this.interpolation,kF(zF,"InterpolationFormat",t)}computeOutputShape(e){if("channelsFirst"===this.dataFormat){const t=null==e[2]?null:this.size[0]*e[2],n=null==e[3]?null:this.size[1]*e[3];return[e[0],e[1],t,n]}{const t=null==e[1]?null:this.size[0]*e[1],n=null==e[2]?null:this.size[1]*e[2];return[e[0],t,n,e[3]]}}call(e,t){return th((()=>{let t=jD(e);const n=t.shape;if("channelsFirst"===this.dataFormat){t=$p(t,[0,2,3,1]);const e=this.size[0]*n[2],s=this.size[1]*n[3],r="nearest"===this.interpolation?jf.resizeNearestNeighbor(t,[e,s]):jf.resizeBilinear(t,[e,s]);return $p(r,[0,3,1,2])}{const e=this.size[0]*n[1],s=this.size[1]*n[2];return"nearest"===this.interpolation?jf.resizeNearestNeighbor(t,[e,s]):jf.resizeBilinear(t,[e,s])}}))}getConfig(){const e={size:this.size,dataFormat:this.dataFormat},t=super.getConfig();return Object.assign(e,t),e}}SM.className="UpSampling2D",Ol.registerClass(SM);class NM extends fM{constructor(e){super(2,e),this.depthwiseKernel=null,this.depthMultiplier=null==e.depthMultiplier?1:e.depthMultiplier,this.depthwiseInitializer=BD(e.depthwiseInitializer||this.DEFAULT_KERNEL_INITIALIZER),this.depthwiseConstraint=MF(e.depthwiseConstraint),this.depthwiseRegularizer=QO(e.depthwiseRegularizer)}build(e){if((e=qD(e)).length<4)throw new aF(`Inputs to DepthwiseConv2D should have rank 4. Received input shape: ${JSON.stringify(e)}.`);const t="channelsFirst"===this.dataFormat?1:3;if(null==e[t]||e[t]<0)throw new aF(`The channel dimension of the inputs to DepthwiseConv2D should be defined, but is not (${e[t]}).`);const n=e[t],s=[this.kernelSize[0],this.kernelSize[1],n,this.depthMultiplier];this.depthwiseKernel=this.addWeight("depthwise_kernel",s,null,this.depthwiseInitializer,this.depthwiseRegularizer,!0,this.depthwiseConstraint),this.useBias?this.bias=this.addWeight("bias",[n*this.depthMultiplier],null,this.biasInitializer,this.biasRegularizer,!0,this.biasConstraint):this.bias=null,this.built=!0}call(e,t){return th((()=>{let t=function(e,t,n=[1,1],s="valid",r,a){return th((()=>{null==r&&(r="channelsLast"),VF(r);let i=uM(e,r);if(4!==e.rank)throw new aF(`Input for depthwiseConv2d is required to be 4-D, but is instead ${e.rank}-D`);if(4!==t.rank)throw new aF(`depthwiseKernel is required to be 4-D, but is instead ${t.rank}-D`);return i=Th(i,t,n,"same"===s?"same":"valid","NHWC",a),"channelsFirst"===r&&(i=$p(i,[0,3,1,2])),i}))}(e=jD(e),this.depthwiseKernel.read(),this.strides,this.padding,this.dataFormat,null);return this.useBias&&(t=mD(t,this.bias.read(),this.dataFormat)),null!=this.activation&&(t=this.activation.apply(t)),t}))}computeOutputShape(e){e=qD(e);const t="channelsFirst"===this.dataFormat?e[2]:e[1],n="channelsFirst"===this.dataFormat?e[3]:e[2],s="channelsFirst"===this.dataFormat?e[1]*this.depthMultiplier:e[3]*this.depthMultiplier,r=oM(t,this.kernelSize[0],this.padding,this.strides[0]),a=oM(n,this.kernelSize[1],this.padding,this.strides[1]);return"channelsFirst"===this.dataFormat?[e[0],s,r,a]:[e[0],r,a,s]}getConfig(){const e=super.getConfig();return e.depthMultiplier=this.depthMultiplier,e.depthwiseInitializer=zD(this.depthwiseInitializer),e.depthwiseRegularizer=ZO(this.depthwiseRegularizer),e.depthwiseConstraint=_F(this.depthwiseRegularizer),e}}NM.className="DepthwiseConv2D",Ol.registerClass(NM);var TM={};function CM(e,t,n,s){if(Array.isArray(e)){if(null!=t||null!=n)throw new aF("When inputs is an array, neither initialState or constants should be provided");null!=s&&(n=e.slice(e.length-s,e.length),e=e.slice(0,e.length-s)),e.length>1&&(t=e.slice(1,e.length)),e=e[0]}function r(e){return null==e||Array.isArray(e)?e:[e]}return{inputs:e,initialState:t=r(t),constants:n=r(n)}}function $M(e,t,n,s=!1,r,a,i=!1,o=!1){return th((()=>{const l=t.shape.length;if(l<3)throw new aF(`Input should be at least 3D, but is ${l}D.`);const u=[1,0].concat(tD(2,l));if(t=$p(t,u),null!=a)throw new iF("The rnn() functoin of the deeplearn.js backend does not support constants yet.");i&&console.warn("Backend rnn(): the unroll = true option is not applicable to the imperative deeplearn.js backend."),null!=r&&((r=Po(Po(r,"bool"),"float32")).rank===l-1&&(r=Np(r,-1)),r=$p(r,u)),s&&(t=yh(t,0),null!=r&&(r=yh(r,0)));const c=[];let h,p=n;const d=t.shape[0],f=dp(t);let m,g;null!=r&&(m=dp(r));for(let t=0;t<d;++t){const n=f[t],s=th((()=>e(n,p)));if(null==r)h=s[0],p=s[1];else{const e=th((()=>{const e=m[t],n=sp(af(e),e);return{output:vh(Iu(s[0],e),Iu(p[0],n)),newStates:p.map(((t,r)=>vh(Iu(s[1][r],e),Iu(t,n))))}}));h=e.output,p=e.newStates}o&&c.push(h)}if(o){g=pp(c,1)}return[h,g,p]}))}t(TM,"ConvLSTM2DCell",(()=>WM),(e=>WM=e)),t(TM,"ConvLSTM2D",(()=>UM),(e=>UM=e));class EM extends r_{constructor(e){let t;if(super(e),null==e.cell)throw new aF("cell property is missing for the constructor of RNN.");if(t=Array.isArray(e.cell)?new LM({cells:e.cell}):e.cell,null==t.stateSize)throw new aF("The RNN cell should have an attribute `stateSize` (tuple of integers, one integer per RNN state).");this.cell=t,this.returnSequences=null!=e.returnSequences&&e.returnSequences,this.returnState=null!=e.returnState&&e.returnState,this.goBackwards=null!=e.goBackwards&&e.goBackwards,this._stateful=null!=e.stateful&&e.stateful,this.unroll=null!=e.unroll&&e.unroll,this.supportsMasking=!0,this.inputSpec=[new QD({ndim:3})],this.stateSpec=null,this.states_=null,this.numConstants=null,this.keptStates=[]}getStates(){if(null==this.states_){return tD(0,Array.isArray(this.cell.stateSize)?this.cell.stateSize.length:1).map((e=>null))}return this.states_}setStates(e){this.states_=e}computeOutputShape(e){GD(e)&&(e=e[0]);let t=this.cell.stateSize;Array.isArray(t)||(t=[t]);const n=t[0];let s;if(s=this.returnSequences?[e[0],e[1],n]:[e[0],n],this.returnState){const n=[];for(const s of t)n.push([e[0],s]);return[s].concat(n)}return s}computeMask(e,t){return th((()=>{Array.isArray(t)&&(t=t[0]);const e=this.returnSequences?t:null;if(this.returnState){const t=this.states.map((e=>null));return[e].concat(t)}return e}))}get states(){if(null==this.states_){const e=Array.isArray(this.cell.stateSize)?this.cell.stateSize.length:1,t=[];for(let n=0;n<e;++n)t.push(null);return t}return this.states_}set states(e){this.states_=e}build(e){if(null!=this.numConstants)throw new iF("Constants support is not implemented in RNN yet.");GD(e)&&(e=e[0]);const t=this.stateful?e[0]:null,n=e.slice(2);this.inputSpec[0]=new QD({shape:[t,null,...n]});const s=[e[0]].concat(e.slice(2));let r;if(this.cell.build(s),r=Array.isArray(this.cell.stateSize)?this.cell.stateSize:[this.cell.stateSize],null!=this.stateSpec){if(!Us.arraysEqual(this.stateSpec.map((e=>e.shape[e.shape.length-1])),r))throw new aF(`An initialState was passed that is not compatible with cell.stateSize. Received stateSpec=${this.stateSpec}; However cell.stateSize is ${this.cell.stateSize}`)}else this.stateSpec=r.map((e=>new QD({shape:[null,e]})));this.stateful&&this.resetStates()}resetStates(e,t=!1){th((()=>{if(!this.stateful)throw new sF("Cannot call resetStates() on an RNN Layer that is not stateful.");const n=this.inputSpec[0].shape[0];if(null==n)throw new aF("If an RNN is stateful, it needs to know its batch size. Specify the batch size of your input tensors: \n- If using a Sequential model, specify the batch size by passing a `batchInputShape` option to your first layer.\n- If using the functional API, specify the batch size by passing a `batchShape` option to your Input layer.");if(null==this.states_)Array.isArray(this.cell.stateSize)?this.states_=this.cell.stateSize.map((e=>ph([n,e]))):this.states_=[ph([n,this.cell.stateSize])];else if(null==e)nh(this.states_),null!=this.keptStates&&(nh(this.keptStates),this.keptStates=[]),Array.isArray(this.cell.stateSize)?this.states_=this.cell.stateSize.map((e=>ph([n,e]))):this.states_[0]=ph([n,this.cell.stateSize]);else{if(Array.isArray(e)||(e=[e]),e.length!==this.states_.length)throw new aF(`Layer ${this.name} expects ${this.states_.length} state(s), but it received ${e.length} state value(s). Input received: ${e}`);!0===t?this.keptStates.push(this.states_.slice()):nh(this.states_);for(let t=0;t<this.states_.length;++t){const s=e[t],r=Array.isArray(this.cell.stateSize)?this.cell.stateSize[t]:this.cell.stateSize,a=[n,r];if(!Us.arraysEqual(s.shape,a))throw new aF(`State ${t} is incompatible with layer ${this.name}: expected shape=${a}, received shape=${s.shape}`);this.states_[t]=s}}this.states_=this.states_.map((e=>sh(e.clone())))}))}apply(e,t){let n=null==t?null:t.initialState,s=null==t?null:t.constants;null==t&&(t={});const r=CM(e,n,s,this.numConstants);e=r.inputs,n=r.initialState,s=r.constants;let a=[],i=[];if(null!=n){t.initialState=n,a=a.concat(n),this.stateSpec=[];for(const e of n)this.stateSpec.push(new QD({shape:e.shape}));i=i.concat(this.stateSpec)}null!=s&&(t.constants=s,a=a.concat(s),this.numConstants=s.length);if(a[0]instanceof e_){const n=[e].concat(a),s=this.inputSpec.concat(i),r=this.inputSpec;this.inputSpec=s;const o=super.apply(n,t);return this.inputSpec=r,o}return super.apply(e,t)}call(e,t){return th((()=>{const n=null==t?null:t.mask,s=null==t?null:t.training;let r=null==t?null:t.initialState;e=jD(e),null==r&&(r=this.stateful?this.states_:this.getInitialState(e));const a=Array.isArray(this.cell.stateSize)?this.cell.stateSize.length:1;if(r.length!==a)throw new aF(`RNN Layer has ${a} state(s) but was passed ${r.length} initial state(s).`);this.unroll&&console.warn("Ignoring unroll = true for RNN layer, due to imperative backend.");const i={training:s},o=$M(((e,t)=>{const n=this.cell.call([e].concat(t),i);return[n[0],n.slice(1)]}),e,r,this.goBackwards,n,null,this.unroll,this.returnSequences),l=o[0],u=o[1],c=o[2];this.stateful&&this.resetStates(c,s);const h=this.returnSequences?u:l;return this.returnState?[h].concat(c):h}))}getInitialState(e){return th((()=>{let t=ph(e.shape);return t=Au(t,[1,2]),t=sD(t),Array.isArray(this.cell.stateSize)?this.cell.stateSize.map((e=>e>1?uD(t,[1,e]):t)):this.cell.stateSize>1?[uD(t,[1,this.cell.stateSize])]:[t]}))}get trainableWeights(){return this.trainable?this.cell.trainableWeights:[]}get nonTrainableWeights(){return this.trainable?this.cell.nonTrainableWeights:this.cell.weights}setFastWeightInitDuringBuild(e){super.setFastWeightInitDuringBuild(e),null!=this.cell&&this.cell.setFastWeightInitDuringBuild(e)}getConfig(){const e=super.getConfig(),t={returnSequences:this.returnSequences,returnState:this.returnState,goBackwards:this.goBackwards,stateful:this.stateful,unroll:this.unroll};null!=this.numConstants&&(t.numConstants=this.numConstants);const n=this.cell.getConfig();return this.getClassName()===EM.className&&(t.cell={className:this.cell.getClassName(),config:n}),Object.assign({},n,e,t)}static fromConfig(e,t,n={}){const s=x_(t.cell,n);return new e(Object.assign(t,{cell:s}))}}EM.className="RNN",Ol.registerClass(EM);class AM extends r_{}class RM extends AM{constructor(e){super(e),this.DEFAULT_ACTIVATION="tanh",this.DEFAULT_KERNEL_INITIALIZER="glorotNormal",this.DEFAULT_RECURRENT_INITIALIZER="orthogonal",this.DEFAULT_BIAS_INITIALIZER="zeros",this.units=e.units,SF(this.units,"units"),this.activation=jO(null==e.activation?this.DEFAULT_ACTIVATION:e.activation),this.useBias=null==e.useBias||e.useBias,this.kernelInitializer=BD(e.kernelInitializer||this.DEFAULT_KERNEL_INITIALIZER),this.recurrentInitializer=BD(e.recurrentInitializer||this.DEFAULT_RECURRENT_INITIALIZER),this.biasInitializer=BD(e.biasInitializer||this.DEFAULT_BIAS_INITIALIZER),this.kernelRegularizer=QO(e.kernelRegularizer),this.recurrentRegularizer=QO(e.recurrentRegularizer),this.biasRegularizer=QO(e.biasRegularizer),this.kernelConstraint=MF(e.kernelConstraint),this.recurrentConstraint=MF(e.recurrentConstraint),this.biasConstraint=MF(e.biasConstraint),this.dropout=QF([1,eD([0,null==e.dropout?0:e.dropout])]),this.recurrentDropout=QF([1,eD([0,null==e.recurrentDropout?0:e.recurrentDropout])]),this.dropoutFunc=e.dropoutFunc,this.stateSize=this.units,this.dropoutMask=null,this.recurrentDropoutMask=null}build(e){e=qD(e),this.kernel=this.addWeight("kernel",[e[e.length-1],this.units],null,this.kernelInitializer,this.kernelRegularizer,!0,this.kernelConstraint),this.recurrentKernel=this.addWeight("recurrent_kernel",[this.units,this.units],null,this.recurrentInitializer,this.recurrentRegularizer,!0,this.recurrentConstraint),this.useBias?this.bias=this.addWeight("bias",[this.units],null,this.biasInitializer,this.biasRegularizer,!0,this.biasConstraint):this.bias=null,this.built=!0}call(e,t){return th((()=>{if(2!==e.length)throw new aF(`SimpleRNNCell expects 2 input Tensors, got ${e.length}.`);let n=e[1];e=e[0];const s=null!=t.training&&t.training;let r;0<this.dropout&&this.dropout<1&&null==this.dropoutMask&&(this.dropoutMask=zM({ones:()=>af(e),rate:this.dropout,training:s,dropoutFunc:this.dropoutFunc})),0<this.recurrentDropout&&this.recurrentDropout<1&&null==this.recurrentDropoutMask&&(this.recurrentDropoutMask=zM({ones:()=>af(n),rate:this.recurrentDropout,training:s,dropoutFunc:this.dropoutFunc}));const a=this.dropoutMask,i=this.recurrentDropoutMask;r=hD(null!=a?Iu(e,a):e,this.kernel.read()),null!=this.bias&&(r=mD(r,this.bias.read())),null!=i&&(n=Iu(n,i));let o=vh(r,hD(n,this.recurrentKernel.read()));return null!=this.activation&&(o=this.activation.apply(o)),[o,o]}))}getConfig(){const e=super.getConfig(),t={units:this.units,activation:GO(this.activation),useBias:this.useBias,kernelInitializer:zD(this.kernelInitializer),recurrentInitializer:zD(this.recurrentInitializer),biasInitializer:zD(this.biasInitializer),kernelRegularizer:ZO(this.kernelRegularizer),recurrentRegularizer:ZO(this.recurrentRegularizer),biasRegularizer:ZO(this.biasRegularizer),activityRegularizer:ZO(this.activityRegularizer),kernelConstraint:_F(this.kernelConstraint),recurrentConstraint:_F(this.recurrentConstraint),biasConstraint:_F(this.biasConstraint),dropout:this.dropout,recurrentDropout:this.recurrentDropout};return Object.assign({},e,t)}}RM.className="SimpleRNNCell",Ol.registerClass(RM);class FM extends EM{constructor(e){e.cell=new RM(e),super(e)}call(e,t){return th((()=>{null!=this.cell.dropoutMask&&(nh(this.cell.dropoutMask),this.cell.dropoutMask=null),null!=this.cell.recurrentDropoutMask&&(nh(this.cell.recurrentDropoutMask),this.cell.recurrentDropoutMask=null);const n=null==t?null:t.mask,s=null==t?null:t.training,r=null==t?null:t.initialState;return super.call(e,{mask:n,training:s,initialState:r})}))}static fromConfig(e,t){return new e(t)}}FM.className="SimpleRNN",Ol.registerClass(FM);class DM extends AM{constructor(e){if(super(e),this.DEFAULT_ACTIVATION="tanh",this.DEFAULT_RECURRENT_ACTIVATION="hardSigmoid",this.DEFAULT_KERNEL_INITIALIZER="glorotNormal",this.DEFAULT_RECURRENT_INITIALIZER="orthogonal",this.DEFAULT_BIAS_INITIALIZER="zeros",e.resetAfter)throw new aF("GRUCell does not support reset_after parameter set to true.");this.units=e.units,SF(this.units,"units"),this.activation=jO(void 0===e.activation?this.DEFAULT_ACTIVATION:e.activation),this.recurrentActivation=jO(void 0===e.recurrentActivation?this.DEFAULT_RECURRENT_ACTIVATION:e.recurrentActivation),this.useBias=null==e.useBias||e.useBias,this.kernelInitializer=BD(e.kernelInitializer||this.DEFAULT_KERNEL_INITIALIZER),this.recurrentInitializer=BD(e.recurrentInitializer||this.DEFAULT_RECURRENT_INITIALIZER),this.biasInitializer=BD(e.biasInitializer||this.DEFAULT_BIAS_INITIALIZER),this.kernelRegularizer=QO(e.kernelRegularizer),this.recurrentRegularizer=QO(e.recurrentRegularizer),this.biasRegularizer=QO(e.biasRegularizer),this.kernelConstraint=MF(e.kernelConstraint),this.recurrentConstraint=MF(e.recurrentConstraint),this.biasConstraint=MF(e.biasConstraint),this.dropout=QF([1,eD([0,null==e.dropout?0:e.dropout])]),this.recurrentDropout=QF([1,eD([0,null==e.recurrentDropout?0:e.recurrentDropout])]),this.dropoutFunc=e.dropoutFunc,this.implementation=e.implementation,this.stateSize=this.units,this.dropoutMask=null,this.recurrentDropoutMask=null}build(e){const t=(e=qD(e))[e.length-1];this.kernel=this.addWeight("kernel",[t,3*this.units],null,this.kernelInitializer,this.kernelRegularizer,!0,this.kernelConstraint),this.recurrentKernel=this.addWeight("recurrent_kernel",[this.units,3*this.units],null,this.recurrentInitializer,this.recurrentRegularizer,!0,this.recurrentConstraint),this.useBias?this.bias=this.addWeight("bias",[3*this.units],null,this.biasInitializer,this.biasRegularizer,!0,this.biasConstraint):this.bias=null,this.built=!0}call(e,t){return th((()=>{if(2!==e.length)throw new aF(`GRUCell expects 2 input Tensors (inputs, h, c), got ${e.length}.`);const n=null!=t.training&&t.training;let s=e[1];e=e[0],0<this.dropout&&this.dropout<1&&null==this.dropoutMask&&(this.dropoutMask=zM({ones:()=>af(e),rate:this.dropout,training:n,count:3,dropoutFunc:this.dropoutFunc})),0<this.recurrentDropout&&this.recurrentDropout<1&&null==this.recurrentDropoutMask&&(this.recurrentDropoutMask=zM({ones:()=>af(s),rate:this.recurrentDropout,training:n,count:3,dropoutFunc:this.dropoutFunc}));const r=this.dropoutMask,a=this.recurrentDropoutMask;let i,o,l;0<this.dropout&&this.dropout<1&&(e=Iu(e,r[0]));let u=hD(e,this.kernel.read());this.useBias&&(u=mD(u,this.bias.read())),0<this.recurrentDropout&&this.recurrentDropout<1&&(s=Iu(s,a[0]));const c=this.recurrentKernel.read(),[h,p]=hh(c,[2*this.units,this.units],c.rank-1),d=hD(s,h),[f,m,g]=hh(u,3,u.rank-1),[y,b]=hh(d,2,d.rank-1);i=this.recurrentActivation.apply(vh(f,y)),o=this.recurrentActivation.apply(vh(m,b));const x=hD(Iu(o,s),p);l=this.activation.apply(vh(g,x));const w=vh(Iu(i,s),Iu(vh(1,Cp(i)),l));return[w,w]}))}getConfig(){const e=super.getConfig(),t={units:this.units,activation:GO(this.activation),recurrentActivation:GO(this.recurrentActivation),useBias:this.useBias,kernelInitializer:zD(this.kernelInitializer),recurrentInitializer:zD(this.recurrentInitializer),biasInitializer:zD(this.biasInitializer),kernelRegularizer:ZO(this.kernelRegularizer),recurrentRegularizer:ZO(this.recurrentRegularizer),biasRegularizer:ZO(this.biasRegularizer),activityRegularizer:ZO(this.activityRegularizer),kernelConstraint:_F(this.kernelConstraint),recurrentConstraint:_F(this.recurrentConstraint),biasConstraint:_F(this.biasConstraint),dropout:this.dropout,recurrentDropout:this.recurrentDropout,implementation:this.implementation,resetAfter:!1};return Object.assign({},e,t)}}DM.className="GRUCell",Ol.registerClass(DM);class _M extends EM{constructor(e){0===e.implementation&&console.warn("`implementation=0` has been deprecated, and now defaults to `implementation=1`. Please update your layer call."),e.cell=new DM(e),super(e)}call(e,t){return th((()=>{null!=this.cell.dropoutMask&&(nh(this.cell.dropoutMask),this.cell.dropoutMask=null),null!=this.cell.recurrentDropoutMask&&(nh(this.cell.recurrentDropoutMask),this.cell.recurrentDropoutMask=null);const n=null==t?null:t.mask,s=null==t?null:t.training,r=null==t?null:t.initialState;return super.call(e,{mask:n,training:s,initialState:r})}))}static fromConfig(e,t){return 0===t.implmentation&&(t.implementation=1),new e(t)}}_M.className="GRU",Ol.registerClass(_M);class OM extends AM{constructor(e){super(e),this.DEFAULT_ACTIVATION="tanh",this.DEFAULT_RECURRENT_ACTIVATION="hardSigmoid",this.DEFAULT_KERNEL_INITIALIZER="glorotNormal",this.DEFAULT_RECURRENT_INITIALIZER="orthogonal",this.DEFAULT_BIAS_INITIALIZER="zeros",this.units=e.units,SF(this.units,"units"),this.activation=jO(void 0===e.activation?this.DEFAULT_ACTIVATION:e.activation),this.recurrentActivation=jO(void 0===e.recurrentActivation?this.DEFAULT_RECURRENT_ACTIVATION:e.recurrentActivation),this.useBias=null==e.useBias||e.useBias,this.kernelInitializer=BD(e.kernelInitializer||this.DEFAULT_KERNEL_INITIALIZER),this.recurrentInitializer=BD(e.recurrentInitializer||this.DEFAULT_RECURRENT_INITIALIZER),this.biasInitializer=BD(e.biasInitializer||this.DEFAULT_BIAS_INITIALIZER),this.unitForgetBias=e.unitForgetBias,this.kernelRegularizer=QO(e.kernelRegularizer),this.recurrentRegularizer=QO(e.recurrentRegularizer),this.biasRegularizer=QO(e.biasRegularizer),this.kernelConstraint=MF(e.kernelConstraint),this.recurrentConstraint=MF(e.recurrentConstraint),this.biasConstraint=MF(e.biasConstraint),this.dropout=QF([1,eD([0,null==e.dropout?0:e.dropout])]),this.recurrentDropout=QF([1,eD([0,null==e.recurrentDropout?0:e.recurrentDropout])]),this.dropoutFunc=e.dropoutFunc,this.implementation=e.implementation,this.stateSize=[this.units,this.units],this.dropoutMask=null,this.recurrentDropoutMask=null}build(e){var t;const n=(e=qD(e))[e.length-1];let s;if(this.kernel=this.addWeight("kernel",[n,4*this.units],null,this.kernelInitializer,this.kernelRegularizer,!0,this.kernelConstraint),this.recurrentKernel=this.addWeight("recurrent_kernel",[this.units,4*this.units],null,this.recurrentInitializer,this.recurrentRegularizer,!0,this.recurrentConstraint),this.useBias){if(this.unitForgetBias){const e=this.biasInitializer,n=this.units;s=new((t=class extends wD{apply(t,s){const r=e.apply([n]),a=(new kD).apply([n]),i=e.apply([2*n]);return lD(lD(r,a),i)}}).className="CustomInit",t)}else s=this.biasInitializer;this.bias=this.addWeight("bias",[4*this.units],null,s,this.biasRegularizer,!0,this.biasConstraint)}else this.bias=null;this.built=!0}call(e,t){return th((()=>{const n=null!=t.training&&t.training;if(3!==e.length)throw new aF(`LSTMCell expects 3 input Tensors (inputs, h, c), got ${e.length}.`);let s=e[1];const r=e[2];e=e[0],0<this.dropout&&this.dropout<1&&null==this.dropoutMask&&(this.dropoutMask=zM({ones:()=>af(e),rate:this.dropout,training:n,count:4,dropoutFunc:this.dropoutFunc})),0<this.recurrentDropout&&this.recurrentDropout<1&&null==this.recurrentDropoutMask&&(this.recurrentDropoutMask=zM({ones:()=>af(s),rate:this.recurrentDropout,training:n,count:4,dropoutFunc:this.dropoutFunc}));const a=this.dropoutMask,i=this.recurrentDropoutMask;let o,l,u,c;0<this.dropout&&this.dropout<1&&(e=Iu(e,a[0]));let h=hD(e,this.kernel.read());0<this.recurrentDropout&&this.recurrentDropout<1&&(s=Iu(s,i[0])),h=vh(h,hD(s,this.recurrentKernel.read())),this.useBias&&(h=mD(h,this.bias.read()));const[p,d,f,m]=hh(h,4,h.rank-1);o=this.recurrentActivation.apply(p),l=this.recurrentActivation.apply(d),u=vh(Iu(l,r),Iu(o,this.activation.apply(f))),c=this.recurrentActivation.apply(m);const g=Iu(c,this.activation.apply(u));return[g,g,u]}))}getConfig(){const e=super.getConfig(),t={units:this.units,activation:GO(this.activation),recurrentActivation:GO(this.recurrentActivation),useBias:this.useBias,kernelInitializer:zD(this.kernelInitializer),recurrentInitializer:zD(this.recurrentInitializer),biasInitializer:zD(this.biasInitializer),unitForgetBias:this.unitForgetBias,kernelRegularizer:ZO(this.kernelRegularizer),recurrentRegularizer:ZO(this.recurrentRegularizer),biasRegularizer:ZO(this.biasRegularizer),activityRegularizer:ZO(this.activityRegularizer),kernelConstraint:_F(this.kernelConstraint),recurrentConstraint:_F(this.recurrentConstraint),biasConstraint:_F(this.biasConstraint),dropout:this.dropout,recurrentDropout:this.recurrentDropout,implementation:this.implementation};return Object.assign({},e,t)}}OM.className="LSTMCell",Ol.registerClass(OM);class MM extends EM{constructor(e){0===e.implementation&&console.warn("`implementation=0` has been deprecated, and now defaults to `implementation=1`. Please update your layer call."),e.cell=new OM(e),super(e)}call(e,t){return th((()=>{null!=this.cell.dropoutMask&&(nh(this.cell.dropoutMask),this.cell.dropoutMask=null),null!=this.cell.recurrentDropoutMask&&(nh(this.cell.recurrentDropoutMask),this.cell.recurrentDropoutMask=null);const n=null==t?null:t.mask,s=null==t?null:t.training,r=null==t?null:t.initialState;return super.call(e,{mask:n,training:s,initialState:r})}))}static fromConfig(e,t){return 0===t.implmentation&&(t.implementation=1),new e(t)}}MM.className="LSTM",Ol.registerClass(MM);class LM extends AM{constructor(e){super(e),this.cells=e.cells}get stateSize(){const e=[];for(const t of this.cells.slice().reverse())Array.isArray(t.stateSize)?e.push(...t.stateSize):e.push(t.stateSize);return e}call(e,t){return th((()=>{let n=e.slice(1);const s=[];for(const e of this.cells.slice().reverse())Array.isArray(e.stateSize)?s.push(n.splice(0,e.stateSize.length)):s.push(n.splice(0,1));s.reverse();const r=[];let a;for(let i=0;i<this.cells.length;++i){const o=this.cells[i];n=s[i],a=0===i?[e[0]].concat(n):[a[0]].concat(n),a=o.call(a,t),r.push(a.slice(1))}n=[];for(const e of r.slice().reverse())n.push(...e);return[a[0]].concat(n)}))}build(e){let t;GD(e)&&(e=e[0]),this.cells.forEach(((n,s)=>{qF(`RNNCell_${s}`,(()=>{n.build(e),t=Array.isArray(n.stateSize)?n.stateSize[0]:n.stateSize,e=[e[0],t]}))})),this.built=!0}getConfig(){const e=super.getConfig(),t={cells:this.cells.map((e=>({className:e.getClassName(),config:e.getConfig()})))};return Object.assign({},e,t)}static fromConfig(e,t,n={}){const s=[];for(const e of t.cells)s.push(x_(e,n));return new e({cells:s})}get trainableWeights(){if(!this.trainable)return[];const e=[];for(const t of this.cells)e.push(...t.trainableWeights);return e}get nonTrainableWeights(){const e=[];for(const t of this.cells)e.push(...t.nonTrainableWeights);if(!this.trainable){const t=[];for(const e of this.cells)t.push(...e.trainableWeights);return t.concat(e)}return e}getWeights(){const e=[];for(const t of this.cells)e.push(...t.weights);return ZD(e)}setWeights(e){const t=[];for(const n of this.cells){const s=n.weights.length,r=e.splice(s);for(let e=0;e<n.weights.length;++e)t.push([n.weights[e],r[e]])}JD(t)}}function zM(e){const{ones:t,rate:n,training:s=!1,count:r=1,dropoutFunc:a}=e,i=()=>null!=a?a(t(),n):gD(t(),n),o=()=>yD(i,t,s);if(!r||r<=1)return sh(o().clone());return Array(r).fill(void 0).map(o).map((e=>sh(e.clone())))}
/**
 * @license
 * Copyright 2020 Google LLC
 *
 * Use of this source code is governed by an MIT-style
 * license that can be found in the LICENSE file or at
 * https://opensource.org/licenses/MIT.
 * =============================================================================
 */LM.className="StackedRNNCells",Ol.registerClass(LM);var BM=function(e,t){var n={};for(var s in e)Object.prototype.hasOwnProperty.call(e,s)&&t.indexOf(s)<0&&(n[s]=e[s]);if(null!=e&&"function"==typeof Object.getOwnPropertySymbols){var r=0;for(s=Object.getOwnPropertySymbols(e);r<s.length;r++)t.indexOf(s[r])<0&&Object.prototype.propertyIsEnumerable.call(e,s[r])&&(n[s[r]]=e[s[r]])}return n};class PM extends EM{constructor(e){if(e.unroll)throw new iF("Unrolling is not possible with convolutional RNNs.");if(Array.isArray(e.cell))throw new iF("It is not possible at the moment to stack convolutional cells.");super(e),this.inputSpec=[new QD({ndim:5})]}call(e,t){return th((()=>{if(null!=this.cell.dropoutMask&&(nh(this.cell.dropoutMask),this.cell.dropoutMask=null),null!=this.cell.recurrentDropoutMask&&(nh(this.cell.recurrentDropoutMask),this.cell.recurrentDropoutMask=null),t&&t.constants)throw new aF("ConvRNN2D cell does not support constants");const n=null==t?null:t.mask,s=null==t?null:t.training,r=null==t?null:t.initialState;return super.call(e,{mask:n,training:s,initialState:r})}))}computeOutputShape(e){let t=this.computeSingleOutputShape(e);return this.returnSequences||(t=[t[0],...t.slice(2)]),this.returnState&&(t=[t,...Array(2).fill([e[0],...t.slice(-3)])]),t}getInitialState(e){return th((()=>{const{stateSize:t}=this.cell,n=e.shape,s=this.computeSingleOutputShape(n),r=ph([s[0],...s.slice(2)]);return Array.isArray(t)?Array(t.length).fill(r):[r]}))}resetStates(e,t=!1){th((()=>{if(!this.stateful)throw new sF("Cannot call resetStates() on an RNN Layer that is not stateful.");const n=this.inputSpec[0].shape,s=this.computeSingleOutputShape(n),r=[s[0],...s.slice(2)];if(null==n[0])throw new aF("If an RNN is stateful, it needs to know its batch size. Specify the batch size of your input tensors: \n- If using a Sequential model, specify the batch size by passing a `batchInputShape` option to your first layer.\n- If using the functional API, specify the batch size by passing a `batchShape` option to your Input layer.");if(null==this.getStates())Array.isArray(this.cell.stateSize)?this.states_=this.cell.stateSize.map((()=>ph(r))):this.states_=[ph(r)];else if(null==e)nh(this.states_),null!=this.keptStates&&(nh(this.keptStates),this.keptStates=[]),Array.isArray(this.cell.stateSize)?this.states_=this.cell.stateSize.map((()=>ph(r))):this.states_[0]=ph(r);else{if(Array.isArray(e)||(e=[e]),e.length!==this.states_.length)throw new aF(`Layer ${this.name} expects ${this.states_.length} state(s), but it received ${e.length} state value(s). Input received: ${e}`);t?this.keptStates.push(this.states_.slice()):nh(this.states_);for(let t=0;t<this.states_.length;++t){const n=e[t],s=r;if(!Us.arraysEqual(n.shape,s))throw new aF(`State ${t} is incompatible with layer ${this.name}: expected shape=${s}, received shape=${n.shape}`);this.states_[t]=n}}this.states_=this.states_.map((e=>sh(e.clone())))}))}computeSingleOutputShape(e){const{dataFormat:t,filters:n,kernelSize:s,padding:r,strides:a,dilationRate:i}=this.cell,o="channelsFirst"===t,l=e[o?3:2],u=e[o?4:3],c=oM(l,s[0],r,a[0],i[0]),h=oM(u,s[1],r,a[1],i[1]);return[...e.slice(0,2),...o?[n,c,h]:[c,h,n]]}}PM.className="ConvRNN2D";class WM extends OM{constructor(e){const{filters:t,kernelSize:n,strides:s,padding:r,dataFormat:a,dilationRate:i}=e;super(Object.assign({},e,{units:t})),this.filters=t,SF(this.filters,"filters"),this.kernelSize=iM(n,2,"kernelSize"),this.kernelSize.forEach((e=>SF(e,"kernelSize"))),this.strides=iM(s||1,2,"strides"),this.strides.forEach((e=>SF(e,"strides"))),this.padding=r||"valid",GF(this.padding),this.dataFormat=a||"channelsLast",VF(this.dataFormat),this.dilationRate=iM(i||1,2,"dilationRate"),this.dilationRate.forEach((e=>SF(e,"dilationRate")))}build(e){var t;e=qD(e);const n="channelsFirst"===this.dataFormat?1:e.length-1;if(null==e[n])throw new aF(`The channel dimension of the input should be defined. Found ${e[n]}`);const s=e[n],r=this.kernelSize.concat([s,4*this.filters]);this.kernel=this.addWeight("kernel",r,null,this.kernelInitializer,this.kernelRegularizer,!0,this.kernelConstraint);const a=this.kernelSize.concat([this.filters,4*this.filters]);if(this.recurrentKernel=this.addWeight("recurrent_kernel",a,null,this.recurrentInitializer,this.recurrentRegularizer,!0,this.recurrentConstraint),this.useBias){let e;if(this.unitForgetBias){const n=this.biasInitializer,s=this.filters;e=new((t=class extends wD{apply(e,t){return oD([n.apply([s]),_p([s]),n.apply([2*s])])}}).className="CustomInit",t)}else e=this.biasInitializer;this.bias=this.addWeight("bias",[4*this.filters],null,e,this.biasRegularizer,!0,this.biasConstraint)}this.built=!0}call(e,t){return th((()=>{if(3!==e.length)throw new aF(`ConvLSTM2DCell expects 3 input Tensors (inputs, h, c), got ${e.length}.`);const n=t.training||!1,s=e[0],r=e[1],a=e[2];0<this.dropout&&this.dropout<1&&null==this.dropoutMask&&(this.dropoutMask=zM({ones:()=>af(s),rate:this.dropout,training:n,count:4,dropoutFunc:this.dropoutFunc}));const i=this.dropoutMask,o=(e,t,n)=>t&&t[n]?Iu(t[n],e):e;let l=o(s,i,0),u=o(s,i,1),c=o(s,i,2),h=o(s,i,3);0<this.recurrentDropout&&this.recurrentDropout<1&&null==this.recurrentDropoutMask&&(this.recurrentDropoutMask=zM({ones:()=>af(r),rate:this.recurrentDropout,training:n,count:4,dropoutFunc:this.dropoutFunc}));const p=this.recurrentDropoutMask;let d=o(r,p,0),f=o(r,p,1),m=o(r,p,2),g=o(r,p,3);const[y,b,x,w]=hh(this.kernel.read(),4,3),[v,k,I,S]=this.useBias?hh(this.bias.read(),4):[null,null,null,null];l=this.inputConv(l,y,v,this.padding),u=this.inputConv(u,b,k,this.padding),c=this.inputConv(c,x,I,this.padding),h=this.inputConv(h,w,S,this.padding);const[N,T,C,$]=hh(this.recurrentKernel.read(),4,3);d=this.recurrentConv(d,N),f=this.recurrentConv(f,T),m=this.recurrentConv(m,C),g=this.recurrentConv(g,$);const E=this.recurrentActivation.apply(vh(l,d)),A=this.recurrentActivation.apply(vh(u,f)),R=vh(Iu(A,a),Iu(E,this.activation.apply(vh(c,m)))),F=Iu(this.recurrentActivation.apply(vh(h,g)),this.activation.apply(R));return[F,F,R]}))}getConfig(){const e=super.getConfig(),{units:t}=e,n=BM(e,["units"]),s={filters:this.filters,kernelSize:this.kernelSize,padding:this.padding,dataFormat:this.dataFormat,dilationRate:this.dilationRate,strides:this.strides};return Object.assign({},n,s)}inputConv(e,t,n,s){const r=kh(e,t,this.strides,s||"valid","channelsFirst"===this.dataFormat?"NCHW":"NHWC",this.dilationRate);return n?mD(r,n,this.dataFormat):r}recurrentConv(e,t){return kh(e,t,1,"same","channelsFirst"===this.dataFormat?"NCHW":"NHWC")}}WM.className="ConvLSTM2DCell",Ol.registerClass(WM);class UM extends PM{constructor(e){const t=new WM(e);super(Object.assign({},e,{cell:t}))}static fromConfig(e,t){return new e(t)}}UM.className="ConvLSTM2D",Ol.registerClass(UM);class VM extends r_{constructor(e){super(e),this.rate=Math.max(Math.min(e.rate,1),0),this.noiseShape=e.noiseShape,this.seed=e.seed,this.supportsMasking=!0}getNoiseShape(e){if(null==this.noiseShape)return this.noiseShape;const t=e.shape,n=[];for(let e=0;e<this.noiseShape.length;++e)n.push(null==this.noiseShape[e]?t[e]:this.noiseShape[e]);return n}call(e,t){return th((()=>{this.invokeCallHook(e,t);const n=jD(e);if(0<this.rate&&this.rate<1){const e=null!=t.training&&t.training,s=this.getNoiseShape(n);return yD((()=>gD(n,this.rate,s,this.seed)),(()=>n),e)}return e}))}getConfig(){const e={rate:this.rate,noiseShape:this.noiseShape,seed:this.seed},t=super.getConfig();return Object.assign(e,t),e}dispose(){return super.dispose()}}VM.className="Dropout",Ol.registerClass(VM);class GM extends VM{constructor(e){super(e),this.inputSpec=[{ndim:3}]}getNoiseShape(e){const t=e.shape;return[t[0],1,t[2]]}}GM.className="SpatialDropout1D",Ol.registerClass(GM);class HM extends r_{constructor(e){if(super(e),this.activation=null,this.useBias=!0,this.kernel=null,this.bias=null,this.DEFAULT_KERNEL_INITIALIZER="glorotNormal",this.DEFAULT_BIAS_INITIALIZER="zeros",null==e.batchInputShape&&null==e.inputShape&&null!=e.inputDim){let t=null;null!=e.batchSize&&(t=e.batchSize),this.batchInputShape=[t,e.inputDim]}this.units=e.units,SF(this.units,"units"),this.activation=jO(e.activation),null!=e.useBias&&(this.useBias=e.useBias),this.kernelInitializer=BD(e.kernelInitializer||this.DEFAULT_KERNEL_INITIALIZER),this.biasInitializer=BD(e.biasInitializer||this.DEFAULT_BIAS_INITIALIZER),this.kernelConstraint=MF(e.kernelConstraint),this.biasConstraint=MF(e.biasConstraint),this.kernelRegularizer=QO(e.kernelRegularizer),this.biasRegularizer=QO(e.biasRegularizer),this.activityRegularizer=QO(e.activityRegularizer),this.supportsMasking=!0,this.inputSpec=[{minNDim:2}]}build(e){const t=(e=qD(e))[e.length-1];null==this.kernel&&(this.kernel=this.addWeight("kernel",[t,this.units],null,this.kernelInitializer,this.kernelRegularizer,!0,this.kernelConstraint),this.useBias&&(this.bias=this.addWeight("bias",[this.units],null,this.biasInitializer,this.biasRegularizer,!0,this.biasConstraint))),this.inputSpec=[{minNDim:2,axes:{[-1]:t}}],this.built=!0}computeOutputShape(e){const t=(e=qD(e)).slice();return t[t.length-1]=this.units,t}call(e,t){return th((()=>{this.invokeCallHook(e,t);const n=jD(e),s=TF(this.activation.getClassName());let r;return null!=s?r=hD(n,this.kernel.read(),s,this.bias?this.bias.read():null):(r=hD(n,this.kernel.read()),null!=this.bias&&(r=mD(r,this.bias.read())),null!=this.activation&&(r=this.activation.apply(r))),r}))}getConfig(){const e={units:this.units,activation:GO(this.activation),useBias:this.useBias,kernelInitializer:zD(this.kernelInitializer),biasInitializer:zD(this.biasInitializer),kernelRegularizer:ZO(this.kernelRegularizer),biasRegularizer:ZO(this.biasRegularizer),activityRegularizer:ZO(this.activityRegularizer),kernelConstraint:_F(this.kernelConstraint),biasConstraint:_F(this.biasConstraint)},t=super.getConfig();return Object.assign(e,t),e}}HM.className="Dense",Ol.registerClass(HM);class jM extends r_{constructor(e){super(e=e||{}),this.inputSpec=[{minNDim:3}],this.dataFormat=e.dataFormat}computeOutputShape(e){e=qD(e);for(const t of e.slice(1))if(null==t)throw new aF(`The shape of the input to "Flatten" is not fully defined (got ${e.slice(1)}). Make sure to pass a complete "input_shape" or "batch_input_shape" argument to the first layer in your model.`);return[e[0],JF(e,1)]}call(e,t){return th((()=>{this.invokeCallHook(e,t);let n=jD(e);if("channelsFirst"===this.dataFormat&&n.rank>1){const e=[0];for(let t=2;t<n.rank;++t)e.push(t);e.push(1),n=$p(n,e)}return function(e){if(e.rank<=1)throw new aF(`batchFlatten requires a minimum rank of 2. Got rank: ${e.rank}.`);const t=[e.shape[0],JF(e.shape,1)];return Cu(e,t)}(n)}))}getConfig(){const e={};null!=this.dataFormat&&(e.dataFormat=this.dataFormat);const t=super.getConfig();return Object.assign(e,t),e}}jM.className="Flatten",Ol.registerClass(jM);class qM extends r_{constructor(e){super(e),this.supportsMasking=!0,this.activation=jO(e.activation)}call(e,t){return th((()=>{this.invokeCallHook(e,t);const n=jD(e);return this.activation.apply(n)}))}getConfig(){const e={activation:GO(this.activation)},t=super.getConfig();return Object.assign(e,t),e}}qM.className="Activation",Ol.registerClass(qM);class KM extends r_{constructor(e){super(e),this.n=e.n,this.inputSpec=[{ndim:2}]}computeOutputShape(e){return[e[0],this.n,e[1]]}call(e,t){return th((()=>{return e=jD(e),t=e,n=this.n,th((()=>{if(2!==t.shape.length)throw new aF(`repeat() expects a rank-2 tensor, but received a rank-${t.shape.length} tensor.`);return uD(sD(t,1),[1,n,1])}));var t,n}))}getConfig(){const e={n:this.n},t=super.getConfig();return Object.assign(e,t),e}}KM.className="RepeatVector",Ol.registerClass(KM);class XM extends r_{constructor(e){super(e),this.targetShape=e.targetShape;for(let e=0;e<this.targetShape.length;++e)this.isUnknown(this.targetShape[e])&&(this.targetShape[e]=null)}isUnknown(e){return e<0||null==e}fixUnknownDimension(e,t){const n="Total size of new array must be unchanged.",s=t.slice();let r=1,a=null;for(let e=0;e<s.length;++e){const t=s[e];if(this.isUnknown(t)){if(null!==a)throw new aF("Can only specifiy one unknown dimension.");a=e}else r*=t}const i=JF(e);if(null!==a){if(0===r||i%r!=0)throw new aF(n);s[a]=i/r}else if(i!==r)throw new aF(n);return s}computeOutputShape(e){let t=!1;for(let n=0;n<e.length;++n)if(this.isUnknown(e[n])){t=!0;break}return t?e.slice(0,1).concat(this.targetShape):e.slice(0,1).concat(this.fixUnknownDimension(e.slice(1),this.targetShape))}call(e,t){return th((()=>{this.invokeCallHook(e,t);const n=jD(e),s=n.shape,r=s.slice(0,1).concat(this.fixUnknownDimension(s.slice(1),this.targetShape));return Cu(n,r)}))}getConfig(){const e={targetShape:this.targetShape},t=super.getConfig();return Object.assign(e,t),e}}XM.className="Reshape",Ol.registerClass(XM);class YM extends r_{constructor(e){if(super(e),null==e.dims)throw new Error("Required configuration field `dims` is missing during Permute constructor call.");if(!Array.isArray(e.dims))throw new Error(`Permute constructor requires \`dims\` to be an Array, but received ${e.dims} instead.`);const t=tD(1,e.dims.length+1);if(!Us.arraysEqual(e.dims.slice().sort(),t))throw new Error("Invalid permutation `dims`: "+JSON.stringify(e.dims)+" `dims` must contain consecutive integers starting from 1.");this.dims=e.dims,this.dimsIncludingBatch=[0].concat(this.dims),this.inputSpec=[new QD({ndim:this.dims.length+1})]}computeOutputShape(e){const t=(e=qD(e)).slice();return this.dims.forEach(((n,s)=>{t[s+1]=e[n]})),t}call(e,t){return $p(jD(e),this.dimsIncludingBatch)}getConfig(){const e={dims:this.dims},t=super.getConfig();return Object.assign(e,t),e}}YM.className="Permute",Ol.registerClass(YM);class ZM extends r_{constructor(e){super(null==e?{}:e),this.supportsMasking=!0,this.maskValue=null!=e?null==e.maskValue?0:e.maskValue:0}computeOutputShape(e){return e}getConfig(){const e=super.getConfig(),t={maskValue:this.maskValue};return Object.assign(t,e),t}computeMask(e,t){const n=jD(e);return Qp(Dp(n,this.maskValue),-1)}call(e,t){return th((()=>{this.invokeCallHook(e,t);const n=jD(e),s=Qp(Dp(n,this.maskValue),-1,!0);return Iu(n,Po(s,n.dtype))}))}}ZM.className="Masking",Ol.registerClass(ZM);class JM extends r_{constructor(e){if(super(e),this.embeddings=null,this.DEFAULT_EMBEDDINGS_INITIALIZER="randomUniform",null==e.batchInputShape&&null==e.inputShape){let t=null;null!=e.batchSize&&(t=e.batchSize),null==e.inputLength?this.batchInputShape=[t,null]:this.batchInputShape=[t].concat(pF(e.inputLength))}this.inputDim=e.inputDim,SF(this.inputDim,"inputDim"),this.outputDim=e.outputDim,SF(this.outputDim,"outputDim"),this.embeddingsInitializer=BD(e.embeddingsInitializer||this.DEFAULT_EMBEDDINGS_INITIALIZER),this.embeddingsRegularizer=QO(e.embeddingsRegularizer),this.activityRegularizer=QO(e.activityRegularizer),this.embeddingsConstraint=MF(e.embeddingsConstraint),this.maskZero=e.maskZero,this.supportsMasking=e.maskZero,this.inputLength=e.inputLength}build(e){this.embeddings=this.addWeight("embeddings",[this.inputDim,this.outputDim],this.dtype,this.embeddingsInitializer,this.embeddingsRegularizer,!0,this.embeddingsConstraint),this.built=!0}warnOnIncompatibleInputShape(e){}computeMask(e,t){return th((()=>this.maskZero?(e=jD(e),Dp(e,dh(e))):null))}computeOutputShape(e){if(e=qD(e),null==this.inputLength)return[...e,this.outputDim];const t=pF(this.inputLength);if(t.length!==e.length-1)throw new aF(`"inputLength" is ${this.inputLength}, but received input shape has shape ${e}`);{let n=0;for(let s=0;s<t.length;++s){const r=t[s],a=e[s+1];if(null!=r&&null!=a&&r!==a)throw new aF(`"inputLength" is ${this.inputLength}, but received input shape has shape ${e}`);null==r&&(t[n]=a),n++}}return[e[0],...t,this.outputDim]}call(e,t){return th((()=>{this.invokeCallHook(e,t);let n=jD(e);"int32"!==n.dtype&&(n=nD(n,"int32"));const s=pD(this.embeddings.read(),Cu(n,[n.size]));return Cu(s,qD(this.computeOutputShape(n.shape)))}))}getConfig(){const e={inputDim:this.inputDim,outputDim:this.outputDim,embeddingsInitializer:zD(this.embeddingsInitializer),embeddingsRegularizer:ZO(this.embeddingsRegularizer),activityRegularizer:ZO(this.activityRegularizer),embeddingsConstraint:_F(this.embeddingsConstraint),maskZero:this.maskZero,inputLength:this.inputLength},t=super.getConfig();return Object.assign(e,t),e}}JM.className="Embedding",Ol.registerClass(JM);class QM extends r_{constructor(e){super(e||{}),this.supportsMasking=!0}mergeFunction(e){throw new iF}computeElementwiseOpOutputShape(e,t){if(null==e||null==t)return null;if(e.length<t.length)return this.computeElementwiseOpOutputShape(t,e);if(0===t.length)return e;const n=e.slice(0,e.length-t.length);for(let s=0;s<t.length;++s){const r=e[e.length-t.length+s],a=t[s];if(null==r||null==a||r<0||a<0)n.push(null);else if(1===r)n.push(a);else if(1===a)n.push(r);else{if(r!==a)throw new aF("Operands could not be broadcast together with shapes "+JSON.stringify(e)+" "+JSON.stringify(t));n.push(r)}}return n}build(e){if(Array.isArray(e)&&!Array.isArray(e[0])&&(e=[qD(e)]),e.length<2)throw new aF(`A merge layer should be called on an Array of at least 2 inputs. Got ${e.length} input(s).`);let t=[];for(const n of e)null!=n&&null!==n[0]&&t.push(n[0]);if(t=wF(t),t.length>1)throw new aF(`Can not merge tensors with different batch sizes. Got tensors with shapes: ${JSON.stringify(e)}.`);let n=null==e[0]?null:e[0].slice(1);for(let t=1;t<e.length;++t){const s=null==e[t]?null:e[t].slice(1);n=this.computeElementwiseOpOutputShape(n,s)}const s=e.map((e=>e.length));-1===e.indexOf(null)&&1===wF(s).length?this.reshapeRequired=!1:this.reshapeRequired=!0}call(e,t){return th((()=>{if(this.reshapeRequired){const t=[],n=e.map((e=>e.rank));if(-1===n.indexOf(null)){const s=eD(n);for(let n of e){const e=n.rank;for(let t=0;t<s-e;++t)n=sD(n,1);t.push(n)}return this.mergeFunction(t)}{let n=!1;for(const s of e){const e=s.rank;if(null==e){const e=s.shape,r=e[0],a=e.slice(1).concat([r]);let i=Cu(s,[r].concat(JF(e.slice(1))));i=$p(i,[1,0]),i=Cu(i,a),t.push(i),n=!0}else if(e>1){const r=tD(1,e).concat([0]);t.push($p(s,r)),n=!0}else t.push(s)}let s=this.mergeFunction(t);const r=s.rank;if(n)if(null==r){const e=s.shape,t=e[e.length-1],n=[t].concat(e.slice(0,e.length-1));s=Cu($p(Cu(s,[-1,t]),[1,0]),n)}else if(r>1){const e=[r-1].concat(tD(0,r-1));s=$p(s,e)}return s}}return this.mergeFunction(e)}))}computeOutputShape(e){let t;t=null==e[0]?null:e[0].slice(1);for(let n=1;n<e.length;++n){const s=null==e[n]?null:e[n].slice(1);t=this.computeElementwiseOpOutputShape(t,s)}let n=[];for(const t of e)null!=t&&null!==t[0]&&n.push(t[0]);return n=wF(n),t=1===n.length?n.concat(t):[null].concat(t),t}computeMask(e,t){return th((()=>{if(null==t)return null;if(!Array.isArray(t))throw new aF("`mask` should be an Array");if(!Array.isArray(e))throw new aF("`inputs` should be an Array");if(t.length!==e.length)throw new aF(`The Array 'inputs' and 'mask' are expected to have the same length, but have different lengths (${e.length} vs ${t.length})`);if(t.every((e=>null==e)))return null;let n=(t=t.map((e=>null==e?e:Np(e,0))))[0];for(let e=1;e<t.length-1;++e)n=hp(n,t[e]);return n}))}}class eL extends QM{constructor(e){super(e)}mergeFunction(e){return th((()=>{let t=e[0].clone();for(let n=1;n<e.length;++n)t=vh(t,e[n]);return t}))}}eL.className="Add",Ol.registerClass(eL);class tL extends QM{constructor(e){super(e)}mergeFunction(e){return th((()=>{let t=e[0].clone();for(let n=1;n<e.length;++n)t=Iu(t,e[n]);return t}))}}tL.className="Multiply",Ol.registerClass(tL);class nL extends QM{constructor(e){super(e)}mergeFunction(e){return th((()=>{let t=e[0].clone();for(let n=1;n<e.length;++n)t=vh(t,e[n]);return Iu(1/e.length,t)}))}}nL.className="Average",Ol.registerClass(nL);class sL extends QM{constructor(e){super(e)}mergeFunction(e){return th((()=>{let t=e[0];for(let n=1;n<e.length;++n)t=Qd(t,e[n]);return t}))}}sL.className="Maximum",Ol.registerClass(sL);class rL extends QM{constructor(e){super(e)}mergeFunction(e){return th((()=>{let t=e[0];for(let n=1;n<e.length;++n)t=Mp(t,e[n]);return t}))}}rL.className="Minimum",Ol.registerClass(rL);class aL extends QM{constructor(e){super(e),this.DEFAULT_AXIS=-1,null==e&&(e={}),this.axis=null==e.axis?this.DEFAULT_AXIS:e.axis,this.supportsMasking=!0,this.reshapeRequired=!1}build(e){if(!Array.isArray(e)||!Array.isArray(e[0])||1===e.length)throw new aF("A `Concatenate` layer should be called on a list of at least 2 inputs");let t=!0;for(const n of e)if(null!=n){t=!1;break}if(t)return;const n=[];for(let t=0;t<e.length;++t){const s=e[t].slice();s.splice(this.axis,1);let r=!1;for(const e of n)if(Us.arraysEqual(e,s)){r=!0;break}r||n.push(s)}if(n.length>1)throw new aF("A `Concatenate` layer requires inputs with matching shapes except for the concat axis. Got input shapes: "+JSON.stringify(e))}mergeFunction(e){return th((()=>oD(e,this.axis)))}computeOutputShape(e){if(!Array.isArray(e)||!Array.isArray(e[0]))throw new aF("A `Concatenate` layer should be called on a list of inputs.");const t=e,n=t[0].slice(),s=this.axis<0?n.length+this.axis:this.axis;for(const e of t.slice(1)){if(null==n[s]||null==e[s]){n[s]=null;break}n[s]+=e[s]}return n}computeMask(e,t){if(null==t)return null;if(!Array.isArray(t))throw new aF("`mask` should be an array for Concatenate");if(!Array.isArray(e))throw new aF("`inputs` should be an array for Concatenate");if(t.length!==e.length)throw new aF(`Mismatch in the length of mask (${t.length}) and the legnth of inputs (${e.length})`);return th((()=>{let n=!0;if(t.forEach((e=>{null==e||(n=!1)})),n)return null;const s=[];for(let n=0;n<e.length;++n)null==t[n]?s.push(Po(af(e[n]),"bool")):t[n].rank<e[n].rank?s.push(Np(t[n],-1)):s.push(t[n]);const r=oh(s,this.axis);return Jp(r,-1,!1)}))}getConfig(){const e={axis:this.axis},t=super.getConfig();return Object.assign(e,t),e}}function iL(e,t){for(;e<0;)e+=t;return e}aL.className="Concatenate",Ol.registerClass(aL);class oL extends QM{constructor(e){super(e),this.axes=e.axes,this.normalize=null!=e.normalize&&e.normalize,this.supportsMasking=!0,this.reshapeRequired=!1}build(e){Us.assert(Array.isArray(e)&&2===e.length&&Array.isArray(e[0])&&Array.isArray(e[1]),(()=>"A `Dot` layer should be called on a list of exactly 2 inputs."));const t=e[0],n=e[1];if(t.length>3||n.length>3)throw new iF("Dot layer does not support tensors of 4D or higher rank yet.");const s=this.interpretAxes(t,n);if(t[s[0]]!==n[s[1]])throw new aF(`Dimension incompatibility: ${t[s[0]]} !== ${n[s[1]]}`)}mergeFunction(e){if(2!==e.length)throw new aF(`A \`Dot\` layer must be called on exactly 2 inputs, but received ${e.length} input(s).`);let t,n=e[0],s=e[1];return t=Array.isArray(this.axes)?this.axes.map(((t,n)=>iL(t,e[n].shape.length))):[iL(this.axes,n.shape.length),iL(this.axes,s.shape.length)],this.normalize&&(n=w_(n,t[0]),s=w_(s,t[1])),function(e,t,n){if(e.shape.length>3||t.shape.length>3)throw new iF("batchDot is not implemented for tensors of 4D or higher rank yet");if(Us.assert(e.shape.length>=2,(()=>`batchDot requires the rank of x to be >= 2, but got ${e.shape.length}`)),Us.assert(e.shape.length>=2,(()=>`batchDot requires the rank of y to be >= 2, but got ${t.shape.length}`)),"number"==typeof n&&(n=[n,n]),"complex64"===e.dtype||"complex64"===t.dtype)throw new iF("batchDot is not implemented for complex64-type Tensors yet.");const s=e.shape.length,r=t.shape.length;null==n&&(n=[s-1,r-2]);const a=n;return th((()=>{let n,i;if(s>r){n=s-r;const e=[];for(let t=0;t<n;++t)e.push(1);t=Cu(t,t.shape.concat(e))}else if(r>s){n=r-s;const t=[];for(let e=0;e<n;++e)t.push(1);e=Cu(e,e.shape.concat(t))}else n=0;if(2===e.shape.length&&2===t.shape.length)i=a[0]===a[1]?Au(Iu(e,t),a[0]):Au(Iu($p(e,[1,0]),t),a[1]);else{const n=a[0]!==e.shape.length-1,s=a[1]===t.shape.length-1;i=Ah(e,t,n,s)}if(n>0){let e;e=s>r?s+r-3:s-1;const t=[];for(let s=e;s<e+n;++s)t.push(s);i=Ip(i,t)}return 1===i.shape.length&&(i=Np(i,1)),i}))}(n,s,t)}interpretAxes(e,t){let n;return n=Array.isArray(this.axes)?this.axes:[iL(this.axes,e.length),iL(this.axes,t.length)],n}computeOutputShape(e){Us.assert(Array.isArray(e)&&2===e.length&&Array.isArray(e[0])&&Array.isArray(e[1]),(()=>"A `Dot` layer should be called on a list of exactly 2 inputs."));const t=e[0].slice(),n=e[1].slice();if(t.length>3||n.length>3)throw new iF("Dot layer does not support tensors of 4D or higher rank yet.");const s=this.interpretAxes(t,n);t.splice(s[0],1),n.splice(s[1],1),n.splice(0,1);const r=t.concat(n);return 1===r.length&&r.push(1),r}computeMask(e,t){return null}getConfig(){const e={axes:this.axes,normalize:this.normalize},t=super.getConfig();return Object.assign(e,t),e}}oL.className="Dot",Ol.registerClass(oL);class lL extends r_{constructor(e){super(e),this.supportsMasking=!0,this.stddev=e.stddev}computeOutputShape(e){return e}getConfig(){const e=super.getConfig(),t={stddev:this.stddev};return Object.assign(t,e),t}call(e,t){return th((()=>{this.invokeCallHook(e,t);const n=jD(e);return yD((()=>vh(cD(n.shape,0,this.stddev),n)),(()=>n),t.training||!1)}))}}lL.className="GaussianNoise",Ol.registerClass(lL);class uL extends r_{constructor(e){super(e),this.supportsMasking=!0,this.rate=e.rate}computeOutputShape(e){return e}getConfig(){const e=super.getConfig(),t={rate:this.rate};return Object.assign(t,e),t}call(e,t){return th((()=>{this.invokeCallHook(e,t);const n=jD(e);if(this.rate>0&&this.rate<1){return yD((()=>{const e=Math.sqrt(this.rate/(1-this.rate));return Iu(n,cD(n.shape,1,e))}),(()=>n),t.training||!1)}return n}))}}uL.className="GaussianDropout",Ol.registerClass(uL);class cL extends r_{constructor(e){super(e),this.supportsMasking=!0,this.rate=e.rate,this.noiseShape=e.noiseShape}_getNoiseShape(e){return this.noiseShape||jD(e).shape}computeOutputShape(e){return e}getConfig(){const e=super.getConfig(),t={rate:this.rate};return Object.assign(t,e),t}call(e,t){return th((()=>{if(this.rate<1&&this.rate>0){const n=this._getNoiseShape(e);return yD((()=>{const t=jD(e),s=-1.7580993408473766;let r=cp(wf(n),this.rate);r=nD(r,"float32");const a=((1-this.rate)*(1+this.rate*s**2))**-.5,i=-a*s*this.rate,o=vh(Iu(t,r),Iu(vh(r,-1),s));return vh(Iu(o,a),i)}),(()=>jD(e)),t.training||!1)}return e}))}}function hL(e,t,n,s,r,a=.001){let i;if(2===e.rank)i=hd(e,t,n,s,r,a);else if(3===e.rank)i=pd(e,t,n,s,r,a);else{if(4!==e.rank)throw new iF(`batchNormalization is not implemented for array of rank ${e.rank} yet`);i=dd(e,t,n,s,r,a)}return i}function pL(e,t,n,s,r=.001){return Us.arraysEqual(s.slice().sort(),tD(0,e.rank-1))?function(e,t,n,s,r=.001){return th((()=>{const a=nf(e,s),i=a.mean,o=a.variance;return[hL(e,i,o,n,t,r),i,o]}))}(e,t,n,s,r):function(e,t,n,s,r=.001){return th((()=>{const a=nf(e,s),i=a.mean,o=a.variance,l=[];for(const t of tD(0,e.rank))-1!==s.indexOf(t)?l.push(1):l.push(e.shape[t]);const u=Cu(i,l),c=Cu(o,l),h=null==t?null:Cu(t,l),p=null==n?null:Cu(n,l);return[hL(e,u,c,p,h,r),i,o]}))}(e,t,n,s,r)}cL.className="AlphaDropout",Ol.registerClass(cL);class dL extends r_{constructor(e){null==e&&(e={}),super(e),this.supportsMasking=!0,this.axis=null==e.axis?-1:e.axis,this.momentum=null==e.momentum?.99:e.momentum,this.epsilon=null==e.epsilon?.001:e.epsilon,this.center=null==e.center||e.center,this.scale=null==e.scale||e.scale,this.betaInitializer=BD(e.betaInitializer||"zeros"),this.gammaInitializer=BD(e.gammaInitializer||"ones"),this.movingMeanInitializer=BD(e.movingMeanInitializer||"zeros"),this.movingVarianceInitializer=BD(e.movingVarianceInitializer||"ones"),this.betaConstraint=MF(e.betaConstraint),this.gammaConstraint=MF(e.gammaConstraint),this.betaRegularizer=QO(e.betaRegularizer),this.gammaRegularizer=QO(e.gammaRegularizer)}build(e){e=qD(e);const t=this.axis>=0?this.axis:this.axis+e.length,n=e[t];if(null==n)throw new aF(`Axis ${t} of input tensor should have a defined dimension but the layer received an input with shape ${JSON.stringify(e)}.`);this.inputSpec=[new QD({ndim:e.length,axes:{[t]:n}})];const s=[n];this.scale&&(this.gamma=this.addWeight("gamma",s,null,this.gammaInitializer,this.gammaRegularizer,!0,this.gammaConstraint)),this.center&&(this.beta=this.addWeight("beta",s,null,this.betaInitializer,this.betaRegularizer,!0,this.betaConstraint)),this.movingMean=this.addWeight("moving_mean",s,null,this.movingMeanInitializer,null,!1),this.movingVariance=this.addWeight("moving_variance",s,null,this.movingVarianceInitializer,null,!1),this.built=!0}call(e,t){return th((()=>{const n=null!=t.training&&t.training,s=jD(e),r=s.shape,a=r.length,i=tD(0,a),o=this.axis>=0?this.axis:this.axis+a;i.splice(o,1);const l=lF(1,a);l[o]=r[o];const u=i.slice();u.sort();const c=!Us.arraysEqual(u,tD(0,a).slice(0,a-1));if(!n)return(()=>{if(c){const e=Cu(this.movingMean.read(),l),t=Cu(this.movingVariance.read(),l),n=this.center?Cu(this.beta.read(),l):null,r=this.scale?Cu(this.gamma.read(),l):null;return hL(s,e,t,n,r,this.epsilon)}return hL(s,this.movingMean.read(),this.movingVariance.read(),null==this.beta?null:this.beta.read(),null==this.gamma?null:this.gamma.read(),this.epsilon)})();const[h,p,d]=pL(s,this.gamma.read(),this.beta.read(),i,this.epsilon),f=(e,t,n)=>{th((()=>{const s=1-n,r=e.read(),a=Iu(sp(r,t),s);e.write(sp(r,a))}))};return(()=>{f(this.movingMean,p,this.momentum),f(this.movingVariance,d,this.momentum)})(),h}))}getConfig(){const e={axis:this.axis,momentum:this.momentum,epsilon:this.epsilon,center:this.center,scale:this.scale,betaInitializer:zD(this.betaInitializer),gammaInitializer:zD(this.gammaInitializer),movingMeanInitializer:zD(this.movingMeanInitializer),movingVarianceInitializer:zD(this.movingVarianceInitializer),betaRegularizer:ZO(this.betaRegularizer),gammaRegularizer:ZO(this.gammaRegularizer),betaConstraint:_F(this.betaConstraint),gammaConstraint:_F(this.gammaConstraint)},t=super.getConfig();return Object.assign(e,t),e}}dL.className="BatchNormalization",Ol.registerClass(dL);class fL extends r_{constructor(e){if(null==e&&(e={}),super(e),this.axis=null==e.axis?-1:e.axis,"number"==typeof this.axis){if(!Number.isInteger(this.axis))throw new Error(`Expected axis to be an integer, but received ${this.axis}`)}else{if(!Array.isArray(this.axis))throw new Error(`Expected axis to be an integer or an array of integers, but received ${JSON.stringify(this.axis)}`);for(const e of this.axis)if(!Number.isInteger(e))throw new Error(`Expected axis to be an array of integers, but received ${JSON.stringify(this.axis)}`)}this.epsilon=null==e.epsilon?.001:e.epsilon,this.center=null==e.center||e.center,this.scale=null==e.scale||e.scale,this.betaInitializer=BD(e.betaInitializer||"zeros"),this.gammaInitializer=BD(e.gammaInitializer||"ones"),this.betaRegularizer=QO(e.betaRegularizer),this.gammaRegularizer=QO(e.gammaRegularizer),this.supportsMasking=!0}build(e){const t=(e=qD(e)).length;"number"==typeof this.axis&&(this.axis=[this.axis]);for(let e=0;e<this.axis.length;++e)this.axis[e]<0&&(this.axis[e]+=t);for(const e of this.axis)if(e<0||e>=t)throw new Error(`Invalid axis: ${e}`);if(this.axis.length!==wF(this.axis).length)throw new Error(`Found duplicate axes in: ${this.axis}`);const n=this.axis.map((t=>e[t]));this.scale?this.gamma=this.addWeight("gamma",n,"float32",this.gammaInitializer,this.gammaRegularizer,true):this.gamma=null,this.center?this.beta=this.addWeight("beta",n,"float32",this.betaInitializer,this.betaRegularizer,true):this.beta=null,this.built=!0}call(e,t){const n=jD(e),s=n.shape,r=s.length;return th((()=>{let{mean:e,variance:t}=nf(n,this.axis,!0);const a=lF(1,r);for(const e of this.axis)a[e]=s[e];const i=e=>null!=e&&e.shape.length!==r?Cu(e,a):e;let o=i(this.gamma.read()),l=i(this.beta.read());const u=[],c=[];for(let e=0;e<r;++e)-1!==this.axis.indexOf(e)?(u.push(s[e]),c.push(1)):(u.push(1),c.push(s[e]));return e=Ph(e,u),t=Ph(t,u),o=Ph(o,c),l=Ph(l,c),hL(n,e,t,l,o,this.epsilon)}))}getConfig(){const e={axis:this.axis,epsilon:this.epsilon,center:this.center,scale:this.scale,betaInitializer:zD(this.betaInitializer),gammaInitializer:zD(this.gammaInitializer),betaRegularizer:ZO(this.betaRegularizer),gammaRegularizer:ZO(this.gammaRegularizer)},t=super.getConfig();return Object.assign(e,t),e}}fL.className="LayerNormalization",Ol.registerClass(fL);class mL extends r_{constructor(e){if(null==e&&(e={}),super(e),this.dataFormat=null==e.dataFormat?"channelsLast":e.dataFormat,null==e.padding)this.padding=[[1,1],[1,1]];else if("number"==typeof e.padding)this.padding=[[e.padding,e.padding],[e.padding,e.padding]];else{if(e.padding=e.padding,2!==e.padding.length)throw new aF(`ZeroPadding2D expects padding to be a length-2 array, but received a length-${e.padding.length} array.`);let t,n;if("number"==typeof e.padding[0])t=[e.padding[0],e.padding[0]],n=[e.padding[1],e.padding[1]];else{if(e.padding=e.padding,2!==e.padding[0].length)throw new aF(`ZeroPadding2D expects height padding to be a length-2 array, but received a length-${e.padding[0].length} array.`);if(t=e.padding[0],2!==e.padding[1].length)throw new aF(`ZeroPadding2D expects width padding to be a length-2 array, but received a length-${e.padding[1].length} array.`);n=e.padding[1]}this.padding=[t,n]}this.inputSpec=[new QD({ndim:4})]}computeOutputShape(e){let t,n;return e=qD(e),"channelsFirst"===this.dataFormat?(t=null!=e[2]&&e[2]>=0?e[2]+this.padding[0][0]+this.padding[0][1]:null,n=null!=e[3]&&e[3]>=0?e[3]+this.padding[1][0]+this.padding[1][1]:null,[e[0],e[1],t,n]):(t=null!=e[1]&&e[1]>=0?e[1]+this.padding[0][0]+this.padding[0][1]:null,n=null!=e[2]&&e[2]>=0?e[2]+this.padding[1][0]+this.padding[1][1]:null,[e[0],t,n,e[3]])}call(e,t){return th((()=>{return t=jD(e),n=this.padding,s=this.dataFormat,th((()=>{if(4!==t.rank)throw new aF(`temporalPadding expects input tensor to be 4-D, but received a ${t.rank}-D tensor.`);if(null==n&&(n=[[1,1],[1,1]]),2!==n.length||2!==n[0].length||2!==n[1].length)throw new aF("spatial2dPadding expects `padding` to be an Array of two Arrays, each of which is an Array of two integers.");if(null==s&&(s="channelsLast"),"channelsLast"!==s&&"channelsFirst"!==s)throw new aF(`Unknown data format: ${s}. Supported data formats are 'channelsLast' and 'channelsFirst.`);let e;return e="channelsFirst"===s?[[0,0],[0,0],n[0],n[1]]:[[0,0],n[0],n[1],[0,0]],of(t,e)}));var t,n,s}))}getConfig(){const e={padding:this.padding,dataFormat:this.dataFormat},t=super.getConfig();return Object.assign(e,t),e}}function gL(e,t,n,s,r,a){return th((()=>{let i;VF(r),HF(a),GF(s),null==n&&(n=[1,1]),null==s&&(s="valid"),null==r&&(r="channelsLast"),null==a&&(a="max"),e=uM(e,r);const o="same"===s?"same":"valid";return i="max"===a?Yd(e,t,n,o):od(e,t,n,o),"channelsFirst"===r&&(i=$p(i,[0,3,1,2])),i}))}function yL(e,t,n,s,r,a){return th((()=>{let i;VF(r),HF(a),GF(s),null==n&&(n=[1,1,1]),null==s&&(s="valid"),null==r&&(r="channelsLast"),null==a&&(a="max"),e=cM(e,r);const o="same"===s?"same":"valid";return i="max"===a?Zd(e,t,n,o):ld(e,t,n,o),"channelsFirst"===r&&(i=$p(i,[0,4,1,2,3])),i}))}mL.className="ZeroPadding2D",Ol.registerClass(mL);class bL extends r_{constructor(e){if(null==e.poolSize&&(e.poolSize=2),super(e),"number"==typeof e.poolSize)this.poolSize=[e.poolSize];else{if(!Array.isArray(e.poolSize)||1!==e.poolSize.length||"number"!=typeof e.poolSize[0])throw new aF(`poolSize for 1D convolutional layer must be a number or an Array of a single number, but received ${JSON.stringify(e.poolSize)}`);this.poolSize=e.poolSize}if(SF(this.poolSize,"poolSize"),null==e.strides)this.strides=this.poolSize;else if("number"==typeof e.strides)this.strides=[e.strides];else{if(!Array.isArray(e.strides)||1!==e.strides.length||"number"!=typeof e.strides[0])throw new aF(`strides for 1D convolutional layer must be a number or an Array of a single number, but received ${JSON.stringify(e.strides)}`);this.strides=e.strides}SF(this.strides,"strides"),this.padding=null==e.padding?"valid":e.padding,GF(this.padding),this.inputSpec=[new QD({ndim:3})]}computeOutputShape(e){const t=oM((e=qD(e))[1],this.poolSize[0],this.padding,this.strides[0]);return[e[0],t,e[2]]}call(e,t){return th((()=>{this.invokeCallHook(e,t),e=sD(jD(e),2);const n=this.poolingFunction(jD(e),[this.poolSize[0],1],[this.strides[0],1],this.padding,"channelsLast");return Ip(n,[2])}))}getConfig(){const e={poolSize:this.poolSize,padding:this.padding,strides:this.strides},t=super.getConfig();return Object.assign(e,t),e}}class xL extends bL{constructor(e){super(e)}poolingFunction(e,t,n,s,r){return VF(r),GF(s),gL(e,t,n,s,r,"max")}}xL.className="MaxPooling1D",Ol.registerClass(xL);class wL extends bL{constructor(e){super(e)}poolingFunction(e,t,n,s,r){return VF(r),GF(s),gL(e,t,n,s,r,"avg")}}wL.className="AveragePooling1D",Ol.registerClass(wL);class vL extends r_{constructor(e){if(null==e.poolSize&&(e.poolSize=[2,2]),super(e),this.poolSize=Array.isArray(e.poolSize)?e.poolSize:[e.poolSize,e.poolSize],null==e.strides)this.strides=this.poolSize;else if(Array.isArray(e.strides)){if(2!==e.strides.length)throw new aF(`If the strides property of a 2D pooling layer is an Array, it is expected to have a length of 2, but received length ${e.strides.length}.`);this.strides=e.strides}else this.strides=[e.strides,e.strides];SF(this.poolSize,"poolSize"),SF(this.strides,"strides"),this.padding=null==e.padding?"valid":e.padding,this.dataFormat=null==e.dataFormat?"channelsLast":e.dataFormat,VF(this.dataFormat),GF(this.padding),this.inputSpec=[new QD({ndim:4})]}computeOutputShape(e){e=qD(e);let t="channelsFirst"===this.dataFormat?e[2]:e[1],n="channelsFirst"===this.dataFormat?e[3]:e[2];return t=oM(t,this.poolSize[0],this.padding,this.strides[0]),n=oM(n,this.poolSize[1],this.padding,this.strides[1]),"channelsFirst"===this.dataFormat?[e[0],e[1],t,n]:[e[0],t,n,e[3]]}call(e,t){return th((()=>(this.invokeCallHook(e,t),this.poolingFunction(jD(e),this.poolSize,this.strides,this.padding,this.dataFormat))))}getConfig(){const e={poolSize:this.poolSize,padding:this.padding,strides:this.strides,dataFormat:this.dataFormat},t=super.getConfig();return Object.assign(e,t),e}}class kL extends vL{constructor(e){super(e)}poolingFunction(e,t,n,s,r){return VF(r),GF(s),gL(e,t,n,s,r,"max")}}kL.className="MaxPooling2D",Ol.registerClass(kL);class IL extends vL{constructor(e){super(e)}poolingFunction(e,t,n,s,r){return VF(r),GF(s),gL(e,t,n,s,r,"avg")}}IL.className="AveragePooling2D",Ol.registerClass(IL);class SL extends r_{constructor(e){if(null==e.poolSize&&(e.poolSize=[2,2,2]),super(e),this.poolSize=Array.isArray(e.poolSize)?e.poolSize:[e.poolSize,e.poolSize,e.poolSize],null==e.strides)this.strides=this.poolSize;else if(Array.isArray(e.strides)){if(3!==e.strides.length)throw new aF(`If the strides property of a 3D pooling layer is an Array, it is expected to have a length of 3, but received length ${e.strides.length}.`);this.strides=e.strides}else this.strides=[e.strides,e.strides,e.strides];SF(this.poolSize,"poolSize"),SF(this.strides,"strides"),this.padding=null==e.padding?"valid":e.padding,this.dataFormat=null==e.dataFormat?"channelsLast":e.dataFormat,VF(this.dataFormat),GF(this.padding),this.inputSpec=[new QD({ndim:5})]}computeOutputShape(e){e=qD(e);let t="channelsFirst"===this.dataFormat?e[2]:e[1],n="channelsFirst"===this.dataFormat?e[3]:e[2],s="channelsFirst"===this.dataFormat?e[4]:e[3];return t=oM(t,this.poolSize[0],this.padding,this.strides[0]),n=oM(n,this.poolSize[1],this.padding,this.strides[1]),s=oM(s,this.poolSize[2],this.padding,this.strides[2]),"channelsFirst"===this.dataFormat?[e[0],e[1],t,n,s]:[e[0],t,n,s,e[4]]}call(e,t){return th((()=>(this.invokeCallHook(e,t),this.poolingFunction(jD(e),this.poolSize,this.strides,this.padding,this.dataFormat))))}getConfig(){const e={poolSize:this.poolSize,padding:this.padding,strides:this.strides,dataFormat:this.dataFormat},t=super.getConfig();return Object.assign(e,t),e}}class NL extends SL{constructor(e){super(e)}poolingFunction(e,t,n,s,r){return VF(r),GF(s),yL(e,t,n,s,r,"max")}}NL.className="MaxPooling3D",Ol.registerClass(NL);class TL extends SL{constructor(e){super(e)}poolingFunction(e,t,n,s,r){return VF(r),GF(s),yL(e,t,n,s,r,"avg")}}TL.className="AveragePooling3D",Ol.registerClass(TL);class CL extends r_{constructor(e){super(e),this.inputSpec=[new QD({ndim:3})]}computeOutputShape(e){return[e[0],e[2]]}call(e,t){throw new iF}}class $L extends CL{constructor(e){super(e||{})}call(e,t){return th((()=>{const t=jD(e);return Fp(t,1)}))}}$L.className="GlobalAveragePooling1D",Ol.registerClass($L);class EL extends CL{constructor(e){super(e||{})}call(e,t){return th((()=>{const t=jD(e);return gp(t,1)}))}}EL.className="GlobalMaxPooling1D",Ol.registerClass(EL);class AL extends r_{constructor(e){super(e),this.dataFormat=null==e.dataFormat?"channelsLast":e.dataFormat,VF(this.dataFormat),this.inputSpec=[new QD({ndim:4})]}computeOutputShape(e){return"channelsLast"===this.dataFormat?[e[0],e[3]]:[e[0],e[1]]}call(e,t){throw new iF}getConfig(){const e={dataFormat:this.dataFormat},t=super.getConfig();return Object.assign(e,t),e}}class RL extends AL{call(e,t){return th((()=>{const t=jD(e);return"channelsLast"===this.dataFormat?Fp(t,[1,2]):Fp(t,[2,3])}))}}RL.className="GlobalAveragePooling2D",Ol.registerClass(RL);class FL extends AL{call(e,t){return th((()=>{const t=jD(e);return"channelsLast"===this.dataFormat?gp(t,[1,2]):gp(t,[2,3])}))}}FL.className="GlobalMaxPooling2D",Ol.registerClass(FL);class DL extends r_{constructor(e){super(e),this.layer=e.layer}build(e){this.built=!0}get trainable(){return null!=this.layer&&this.layer.trainable}set trainable(e){null!=this.layer&&(this.layer.trainable=e)}get trainableWeights(){return this.layer.trainableWeights}get nonTrainableWeights(){return this.layer.nonTrainableWeights}get updates(){return this.layer._updates}get losses(){return this.layer.losses}getWeights(){return this.layer.getWeights()}setWeights(e){this.layer.setWeights(e)}getConfig(){const e={layer:{className:this.layer.getClassName(),config:this.layer.getConfig()}},t=super.getConfig();return Object.assign(e,t),e}setFastWeightInitDuringBuild(e){super.setFastWeightInitDuringBuild(e),null!=this.layer&&this.layer.setFastWeightInitDuringBuild(e)}static fromConfig(e,t,n={}){const s=x_(t.layer,n);delete t.layer;const r={layer:s};return Object.assign(r,t),new e(r)}}class _L extends DL{constructor(e){super(e),this.supportsMasking=!0}build(e){if((e=qD(e)).length<3)throw new aF(`TimeDistributed layer expects an input shape >= 3D, but received input shape ${JSON.stringify(e)}`);this.inputSpec=[{shape:e}];const t=[e[0]].concat(e.slice(2));this.layer.built||(this.layer.build(t),this.layer.built=!0),super.build(e)}computeOutputShape(e){const t=[(e=qD(e))[0]].concat(e.slice(2)),n=this.layer.computeOutputShape(t),s=e[1];return[n[0],s].concat(n.slice(1))}call(e,t){return th((()=>$M(((e,n)=>[jD(this.layer.call(e,t)),[]]),e=jD(e),[],!1,null,null,!1,!0)[1]))}}_L.className="TimeDistributed",Ol.registerClass(_L);class OL extends DL{constructor(e){super(e);const t=e.layer.getConfig(),n={};n.className=e.layer.getClassName(),n.config=t,this.forwardLayer=x_(n),t.goBackwards=!0!==t.goBackwards;const s={};var r;if(s.className=e.layer.getClassName(),s.config=t,this.backwardLayer=x_(s),this.forwardLayer.name="forward_"+this.forwardLayer.name,this.backwardLayer.name="backward_"+this.backwardLayer.name,this.mergeMode=void 0===e.mergeMode?"concat":e.mergeMode,r=this.mergeMode,kF(WF,"BidirectionalMergeMode",r),e.weights)throw new iF("weights support is not implemented for Bidirectional layer yet.");this._stateful=e.layer.stateful,this.returnSequences=e.layer.returnSequences,this.returnState=e.layer.returnState,this.supportsMasking=!0,this._trainable=!0,this.inputSpec=e.layer.inputSpec,this.numConstants=null}get trainable(){return this._trainable}set trainable(e){this._trainable=e,null!=this.forwardLayer&&(this.forwardLayer.trainable=e),null!=this.backwardLayer&&(this.backwardLayer.trainable=e)}getWeights(){return this.forwardLayer.getWeights().concat(this.backwardLayer.getWeights())}setWeights(e){const t=e.length,n=Math.floor(t/2);this.forwardLayer.setWeights(e.slice(0,n)),this.backwardLayer.setWeights(e.slice(n))}computeOutputShape(e){let t,n,s,r=this.forwardLayer.computeOutputShape(e);return Array.isArray(r)&&Array.isArray(r[0])||(r=[r]),this.returnState?(s=r.slice(1),t=r[0]):t=r[0],"concat"===this.mergeMode?(t[t.length-1]*=2,n=[t]):n=null==this.mergeMode?[t,t.slice()]:[t],this.returnState?null==this.mergeMode?n.concat(s).concat(s.slice()):[t].concat(s).concat(s.slice()):hF(n)}apply(e,t){let n=null==t?null:t.initialState,s=null==t?null:t.constants;null==t&&(t={});const r=CM(e,n,s,this.numConstants);if(e=r.inputs,n=r.initialState,s=r.constants,Array.isArray(e)&&(n=e.slice(1),e=e[0]),(null==n||0===n.length)&&null==s)return super.apply(e,t);const a=[],i=[];if(null!=n){const e=n.length;if(e%2>0)throw new aF("When passing `initialState` to a Bidrectional RNN, the state should be an Array containing the states of the underlying RNNs.");t.initialState=n,a.push(...n);const s=n.map((e=>new QD({shape:e.shape})));this.forwardLayer.stateSpec=s.slice(0,e/2),this.backwardLayer.stateSpec=s.slice(e/2),i.push(...s)}if(null!=s)throw new iF("Support for constants in Bidirectional layers is not implemented yet.");const o=a[0]instanceof e_;for(const e of a)if(e instanceof e_!==o)throw new aF("The initial state of a Bidirectional layer cannot be specified as a mix of symbolic and non-symbolic tensors");if(o){const n=[e].concat(a),s=this.inputSpec.concat(i),r=this.inputSpec;this.inputSpec=s;const o=super.apply(n,t);return this.inputSpec=r,o}return super.apply(e,t)}call(e,t){return th((()=>{const n=t.initialState;let s,r,a,i;if(null==n)s=this.forwardLayer.call(e,t),r=this.backwardLayer.call(e,t);else{const a=n.slice(0,n.length/2),i=n.slice(n.length/2);s=this.forwardLayer.call(e,Object.assign(t,{initialState:a})),r=this.backwardLayer.call(e,Object.assign(t,{initialState:i}))}return this.returnState&&(Array.isArray(s)&&(a=s.slice(1).concat(r.slice(1))),s=s[0],r=r[0]),this.returnSequences&&(r=yh(r,1)),"concat"===this.mergeMode?i=oD([s,r]):"sum"===this.mergeMode?i=vh(s,r):"ave"===this.mergeMode?i=Iu(.5,vh(s,r)):"mul"===this.mergeMode?i=Iu(s,r):null==this.mergeMode&&(i=[s,r]),this.returnState?null==this.mergeMode?i.concat(a):[i].concat(a):i}))}resetStates(e){this.forwardLayer.resetStates(),this.backwardLayer.resetStates()}build(e){qF(this.forwardLayer.name,(()=>{this.forwardLayer.build(e)})),qF(this.backwardLayer.name,(()=>{this.backwardLayer.build(e)})),this.built=!0}computeMask(e,t){let n;if(Array.isArray(t)&&(t=t[0]),n=this.returnSequences?null==this.mergeMode?[t,t]:t:null==this.mergeMode?[null,null]:null,this.returnState){const e=this.forwardLayer.states.map((e=>null));return Array.isArray(n)?n.concat(e).concat(e):[n].concat(e).concat(e)}return n}get trainableWeights(){return this.forwardLayer.trainableWeights.concat(this.backwardLayer.trainableWeights)}get nonTrainableWeights(){return this.forwardLayer.nonTrainableWeights.concat(this.backwardLayer.nonTrainableWeights)}setFastWeightInitDuringBuild(e){super.setFastWeightInitDuringBuild(e),null!=this.forwardLayer&&this.forwardLayer.setFastWeightInitDuringBuild(e),null!=this.backwardLayer&&this.backwardLayer.setFastWeightInitDuringBuild(e)}getConfig(){const e={mergeMode:this.mergeMode},t=super.getConfig();return Object.assign(e,t),e}static fromConfig(e,t){const n=x_(t.layer);if(delete t.layer,null!=t.numConstants)throw new iF("Deserialization of a Bidirectional layer with numConstants present is not supported yet.");const s=t;return s.layer=n,new e(s)}}OL.className="Bidirectional",Ol.registerClass(OL);var ML,LL;le().registerFlag("KEEP_INTERMEDIATE_TENSORS",(()=>!1),(e=>{e&&console.warn("Keep intermediate tensors is ON. This will print the values of all intermediate tensors during model inference. Not all models support this mode. For details, check e2e/benchmarks/ model_config.js. This significantly impacts performance.")})),function(e){e[e.DT_INVALID=0]="DT_INVALID",e[e.DT_FLOAT=1]="DT_FLOAT",e[e.DT_DOUBLE=2]="DT_DOUBLE",e[e.DT_INT32=3]="DT_INT32",e[e.DT_UINT8=4]="DT_UINT8",e[e.DT_INT16=5]="DT_INT16",e[e.DT_INT8=6]="DT_INT8",e[e.DT_STRING=7]="DT_STRING",e[e.DT_COMPLEX64=8]="DT_COMPLEX64",e[e.DT_INT64=9]="DT_INT64",e[e.DT_BOOL=10]="DT_BOOL",e[e.DT_QINT8=11]="DT_QINT8",e[e.DT_QUINT8=12]="DT_QUINT8",e[e.DT_QINT32=13]="DT_QINT32",e[e.DT_BFLOAT16=14]="DT_BFLOAT16",e[e.DT_QINT16=15]="DT_QINT16",e[e.DT_QUINT16=16]="DT_QUINT16",e[e.DT_UINT16=17]="DT_UINT16",e[e.DT_COMPLEX128=18]="DT_COMPLEX128",e[e.DT_HALF=19]="DT_HALF",e[e.DT_RESOURCE=20]="DT_RESOURCE",e[e.DT_VARIANT=21]="DT_VARIANT",e[e.DT_UINT32=22]="DT_UINT32",e[e.DT_UINT64=23]="DT_UINT64",e[e.DT_FLOAT_REF=101]="DT_FLOAT_REF",e[e.DT_DOUBLE_REF=102]="DT_DOUBLE_REF",e[e.DT_INT32_REF=103]="DT_INT32_REF",e[e.DT_UINT8_REF=104]="DT_UINT8_REF",e[e.DT_INT16_REF=105]="DT_INT16_REF",e[e.DT_INT8_REF=106]="DT_INT8_REF",e[e.DT_STRING_REF=107]="DT_STRING_REF",e[e.DT_COMPLEX64_REF=108]="DT_COMPLEX64_REF",e[e.DT_INT64_REF=109]="DT_INT64_REF",e[e.DT_BOOL_REF=110]="DT_BOOL_REF",e[e.DT_QINT8_REF=111]="DT_QINT8_REF",e[e.DT_QUINT8_REF=112]="DT_QUINT8_REF",e[e.DT_QINT32_REF=113]="DT_QINT32_REF",e[e.DT_BFLOAT16_REF=114]="DT_BFLOAT16_REF",e[e.DT_QINT16_REF=115]="DT_QINT16_REF",e[e.DT_QUINT16_REF=116]="DT_QUINT16_REF",e[e.DT_UINT16_REF=117]="DT_UINT16_REF",e[e.DT_COMPLEX128_REF=118]="DT_COMPLEX128_REF",e[e.DT_HALF_REF=119]="DT_HALF_REF",e[e.DT_RESOURCE_REF=120]="DT_RESOURCE_REF",e[e.DT_VARIANT_REF=121]="DT_VARIANT_REF",e[e.DT_UINT32_REF=122]="DT_UINT32_REF",e[e.DT_UINT64_REF=123]="DT_UINT64_REF"}(ML||(ML={})),function(e){let t;var n;(n=t=e.CheckpointFormatVersion||(e.CheckpointFormatVersion={}))[n.LEGACY=0]="LEGACY",n[n.V1=1]="V1",n[n.V2=2]="V2"}(LL||(LL={}));
/**
 * @license
 * Copyright 2019 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const zL={};function BL(e){return zL[e]}function PL(e,t,n,s,r){const a=t.inputParams[e];if(a&&void 0!==a.inputIndexStart){const e=a.inputIndexStart,i=0===a.inputIndexEnd?void 0:void 0===a.inputIndexEnd?e+1:a.inputIndexEnd;if("tensor"===a.type)return WL(t.inputNames[a.inputIndexStart],n,s,r);if("tensors"===a.type){return t.inputNames.slice(e,i).map((e=>WL(e,n,s,r)))}const o=WL(t.inputNames.slice(e)[0],n,s,r),l=o.dataSync();return"number"===a.type?l[0]:Us.toNestedArray(o.shape,l)}const i=t.attrParams[e];return i&&i.value}function WL(e,t,n,s){const[r,a]=GL(e);if(null!=s){const e=s.getHashTableHandleByName(r);if(null!=e)return e}const i=n.currentContextIds.find((e=>!!t[VL(r,e)]));return void 0!==i?t[VL(r,i)][a]:void 0}function UL(e,t){const[n,s,r]=GL(e);return[VL(n,t&&t.currentContextId),s,r]}function VL(e,t){return t?`${e}-${t}`:e}function GL(e){const t=e.split(":");if(1===t.length)return[e,0,void 0];const n=t[0],s=3===t.length?t[1]:void 0;return[n,Number(t[t.length-1]),s]}function HL(e,t,n){let s=PL("pad",e,t,n);if("explicit"===s){s=PL("explicitPaddings",e,t,n);const r=[[0,0],[0,0],[0,0],[0,0]];for(let e=0;e<4;e++)r[e][0]=s[2*e],r[e][1]=s[2*e+1];return r}return s}function jL(e){return e.kept?e:Wo(e)}var qL={};t(qL,"json",(()=>KL));const KL=[{tfOpName:"Add",category:"arithmetic",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"AddV2",category:"arithmetic",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"AddN",category:"arithmetic",inputs:[{start:0,end:0,name:"tensors",type:"tensors"}]},{tfOpName:"BiasAdd",category:"arithmetic",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0},{tfName:"data_format",name:"dataFormat",type:"string",notSupported:!0}]},{tfOpName:"Sub",category:"arithmetic",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"RealDiv",category:"arithmetic",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Div",category:"arithmetic",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"DivNoNan",category:"arithmetic",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"FloorDiv",category:"arithmetic",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Mul",category:"arithmetic",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Maximum",category:"arithmetic",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Minimum",category:"arithmetic",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Pow",category:"arithmetic",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"SquaredDifference",category:"arithmetic",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Mod",category:"arithmetic",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"FloorMod",category:"arithmetic",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]}];var XL={};t(XL,"json",(()=>YL));const YL=[{tfOpName:"Abs",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Acos",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Asin",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Atan",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Atan2",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"y",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Ceil",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"ClipByValue",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"clipValueMin",type:"number"},{start:2,name:"clipValueMax",type:"number"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Complex",category:"basic_math",inputs:[{start:0,name:"real",type:"tensor"},{start:1,name:"imag",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"ComplexAbs",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Cos",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Cosh",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Elu",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Exp",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Floor",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Log",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Imag",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0},{tfName:"Tout",name:"outputType",type:"dtype",notSupported:!0}]},{tfOpName:"Neg",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Real",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0},{tfName:"Tout",name:"outputType",type:"dtype",notSupported:!0}]},{tfOpName:"Prelu",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"alpha",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Relu",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Relu6",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Selu",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Sigmoid",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Sin",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Sinh",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Sqrt",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Rsqrt",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Square",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Tan",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Tanh",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Sign",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Round",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Expm1",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Log1p",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Reciprocal",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Softplus",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Asinh",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Acosh",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Atanh",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Erf",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Prod",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"axes",type:"number[]"}],attrs:[{tfName:"keep_dims",name:"keepDims",type:"bool",notSupported:!0},{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"LeakyRelu",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"alpha",name:"alpha",type:"number",defaultValue:.2},{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"IsNan",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]}];var ZL={};t(ZL,"json",(()=>JL));const JL=[{tfOpName:"EmptyTensorList",category:"control",inputs:[{start:0,name:"elementShape",type:"shape"},{start:1,name:"maxNumElements",type:"number"}],attrs:[{tfName:"element_dtype",name:"elementDType",type:"dtype"}]},{tfOpName:"LoopCond",category:"control",inputs:[{start:0,name:"pred",type:"tensor"}]},{tfOpName:"Switch",category:"control",inputs:[{start:0,name:"data",type:"tensor"},{start:1,name:"pred",type:"tensor"}]},{tfOpName:"Merge",category:"control",inputs:[{start:0,end:0,name:"tensors",type:"tensors"}]},{tfOpName:"Enter",category:"control",inputs:[{start:0,name:"tensor",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0},{tfName:"frame_name",name:"frameName",type:"string"},{tfName:"is_constant",name:"isConstant",type:"bool"}]},{tfOpName:"Exit",category:"control",inputs:[{start:0,name:"tensor",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"NextIteration",category:"control",inputs:[{start:0,name:"tensor",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"TensorArrayV3",category:"control",inputs:[{start:0,name:"size",type:"number"}],attrs:[{tfName:"dtype",name:"dtype",type:"dtype"},{tfName:"element_shape",name:"elementShape",type:"shape"},{tfName:"dynamic_size",name:"dynamicSize",type:"bool"},{tfName:"clear_after_read",name:"clearAfterRead",type:"bool"},{tfName:"identical_element_shapes",name:"identicalElementShapes",type:"bool"},{tfName:"tensor_array_name",name:"name",type:"string"}]},{tfOpName:"TensorArrayWriteV3",category:"control",inputs:[{start:0,name:"tensorArrayId",type:"tensor"},{start:1,name:"index",type:"number"},{start:2,name:"tensor",type:"tensor"},{start:3,name:"flowIn",type:"number"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"TensorArrayReadV3",category:"control",inputs:[{start:0,name:"tensorArrayId",type:"tensor"},{start:1,name:"index",type:"number"},{start:2,name:"flowIn",type:"number"}],attrs:[{tfName:"dtype",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"TensorArrayGatherV3",category:"control",inputs:[{start:0,name:"tensorArrayId",type:"tensor"},{start:1,name:"indices",type:"number[]"},{start:2,name:"flowIn",type:"number"}],attrs:[{tfName:"dtype",name:"dtype",type:"dtype"},{tfName:"element_shape",name:"elementShape",type:"shape"}]},{tfOpName:"TensorArrayScatterV3",category:"control",inputs:[{start:0,name:"tensorArrayId",type:"tensor"},{start:1,name:"indices",type:"number[]"},{start:2,name:"tensor",type:"tensor"},{start:3,name:"flowIn",type:"number"}],attrs:[{tfName:"T",name:"dtype",type:"dtype"}]},{tfOpName:"TensorArrayConcatV3",category:"control",inputs:[{start:0,name:"tensorArrayId",type:"tensor"},{start:1,name:"flowIn",type:"number"}],attrs:[{tfName:"dtype",name:"dtype",type:"dtype"},{tfName:"element_shape_except0",name:"elementShapeExcept0",type:"shape",notSupported:!0}]},{tfOpName:"TensorArraySplitV3",category:"control",inputs:[{start:0,name:"tensorArrayId",type:"tensor"},{start:1,name:"tensor",type:"tensor"},{start:2,name:"lengths",type:"number[]"},{start:3,name:"flowIn",type:"number"}],attrs:[{tfName:"T",name:"dtype",type:"dtype"}]},{tfOpName:"TensorArraySizeV3",category:"control",inputs:[{start:0,name:"tensorArrayId",type:"tensor"},{start:1,name:"flowIn",type:"number"}]},{tfOpName:"TensorArrayCloseV3",category:"control",inputs:[{start:0,name:"tensorArrayId",type:"tensor"}]},{tfOpName:"StatelessIf",category:"control",inputs:[{start:0,name:"cond",type:"tensor"},{start:1,end:0,name:"args",type:"tensors"}],attrs:[{tfName:"then_branch",name:"thenBranch",type:"func"},{tfName:"else_branch",name:"elseBranch",type:"func"}]},{tfOpName:"If",category:"control",inputs:[{start:0,name:"cond",type:"tensor"},{start:1,end:0,name:"args",type:"tensors"}],attrs:[{tfName:"then_branch",name:"thenBranch",type:"func"},{tfName:"else_branch",name:"elseBranch",type:"func"}]},{tfOpName:"StatelessWhile",category:"control",inputs:[{start:0,end:0,name:"args",type:"tensors"}],attrs:[{tfName:"cond",name:"cond",type:"func"},{tfName:"body",name:"body",type:"func"}]},{tfOpName:"While",category:"control",inputs:[{start:0,end:0,name:"args",type:"tensors"}],attrs:[{tfName:"cond",name:"cond",type:"func"},{tfName:"body",name:"body",type:"func"}]},{tfOpName:"TensorListScatter",category:"control",inputs:[{start:0,name:"tensor",type:"tensor"},{start:1,name:"indices",type:"number[]"},{start:2,name:"elementShape",type:"shape"}],attrs:[{tfName:"element_dtype",name:"elementDType",type:"dtype"}]},{tfOpName:"TensorListScatterV2",category:"control",inputs:[{start:0,name:"tensor",type:"tensor"},{start:1,name:"indices",type:"number[]"},{start:2,name:"elementShape",type:"shape"},{start:3,name:"numElements",type:"number"}],attrs:[{tfName:"element_dtype",name:"elementDType",type:"dtype"}]},{tfOpName:"TensorListGather",category:"control",inputs:[{start:0,name:"tensorListId",type:"tensor"},{start:1,name:"indices",type:"number[]"},{start:2,name:"elementShape",type:"shape"}],attrs:[{tfName:"element_dtype",name:"elementDType",type:"dtype"}]},{tfOpName:"TensorListGetItem",category:"control",inputs:[{start:0,name:"tensorListId",type:"tensor"},{start:1,name:"index",type:"number"},{start:2,name:"elementShape",type:"shape"}],attrs:[{tfName:"element_dtype",name:"elementDType",type:"dtype"}]},{tfOpName:"TensorListSetItem",category:"control",inputs:[{start:0,name:"tensorListId",type:"tensor"},{start:1,name:"index",type:"number"},{start:2,name:"tensor",type:"tensor"}],attrs:[{tfName:"element_dtype",name:"elementDType",type:"dtype"}]},{tfOpName:"TensorListReserve",category:"control",inputs:[{start:0,name:"elementShape",type:"shape"},{start:1,name:"numElements",type:"number"}],attrs:[{tfName:"element_dtype",name:"elementDType",type:"dtype"}]},{tfOpName:"TensorListFromTensor",category:"control",inputs:[{start:0,name:"tensor",type:"tensor"},{start:1,name:"elementShape",type:"shape"}],attrs:[{tfName:"element_dtype",name:"elementDType",type:"dtype"}]},{tfOpName:"TensorListStack",category:"control",inputs:[{start:0,name:"tensorListId",type:"tensor"},{start:1,name:"elementShape",type:"shape"}],attrs:[{tfName:"element_dtype",name:"elementDType",type:"dtype"},{tfName:"num_elements",name:"numElements",type:"dtype"}]},{tfOpName:"TensorListSplit",category:"control",inputs:[{start:0,name:"tensor",type:"tensor"},{start:1,name:"elementShape",type:"shape"},{start:2,name:"lengths",type:"number[]"}],attrs:[{tfName:"element_dtype",name:"elementDType",type:"dtype"}]},{tfOpName:"TensorListConcat",category:"control",inputs:[{start:0,name:"tensorListId",type:"tensor"}],attrs:[{tfName:"element_shape",name:"elementShape",type:"shape"},{tfName:"element_dtype",name:"elementDType",type:"dtype"}]},{tfOpName:"TensorListPopBack",category:"control",inputs:[{start:0,name:"tensorListId",type:"tensor"},{start:1,name:"elementShape",type:"shape"}],attrs:[{tfName:"element_dtype",name:"elementDType",type:"dtype"}]},{tfOpName:"TensorListPushBack",category:"control",inputs:[{start:0,name:"tensorListId",type:"tensor"},{start:1,name:"tensor",type:"tensor"}],attrs:[{tfName:"element_dtype",name:"elementDType",type:"dtype"}]}];var QL={};t(QL,"json",(()=>ez));const ez=[{tfOpName:"AvgPool",category:"convolution",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"strides",name:"strides",type:"number[]"},{tfName:"padding",name:"pad",type:"string"},{tfName:"data_format",name:"dataFormat",type:"string",notSupported:!0},{tfName:"ksize",name:"kernelSize",type:"number[]"},{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"MaxPool",category:"convolution",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"strides",name:"strides",type:"number[]"},{tfName:"padding",name:"pad",type:"string"},{tfName:"data_format",name:"dataFormat",type:"string",notSupported:!0},{tfName:"ksize",name:"kernelSize",type:"number[]"},{tfName:"explicit_paddings",name:"explicitPaddings",type:"number[]",defaultValue:[],notSupported:!0},{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"MaxPoolWithArgmax",category:"convolution",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"strides",name:"strides",type:"number[]"},{tfName:"padding",name:"pad",type:"string"},{tfName:"ksize",name:"kernelSize",type:"number[]"},{tfName:"include_batch_in_index",name:"includeBatchInIndex",type:"bool"},{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"AvgPool3D",category:"convolution",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"strides",name:"strides",type:"number[]"},{tfName:"padding",name:"pad",type:"string"},{tfName:"data_format",name:"dataFormat",type:"string",notSupported:!0},{tfName:"ksize",name:"kernelSize",type:"number[]"},{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"MaxPool3D",category:"convolution",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"strides",name:"strides",type:"number[]"},{tfName:"padding",name:"pad",type:"string"},{tfName:"data_format",name:"dataFormat",type:"string",notSupported:!0},{tfName:"ksize",name:"kernelSize",type:"number[]"},{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Conv1D",category:"convolution",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"filter",type:"tensor"}],attrs:[{tfName:"stride",name:"stride",type:"number"},{tfName:"padding",name:"pad",type:"string"},{tfName:"data_format",name:"dataFormat",type:"string",defaultValue:"NWC"},{tfName:"T",name:"dtype",type:"dtype",notSupported:!0},{tfName:"dilation",name:"dilation",type:"number",defaultValue:1}]},{tfOpName:"Conv2D",category:"convolution",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"filter",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0},{tfName:"strides",name:"strides",type:"number[]"},{tfName:"padding",name:"pad",type:"string"},{tfName:"useCudnnOnGpu",name:"useCudnnOnGpu",type:"bool"},{tfName:"data_format",name:"dataFormat",type:"string",defaultValue:"NHWC"},{tfName:"explicit_paddings",name:"explicitPaddings",type:"number[]",defaultValue:[]},{tfName:"dilations",name:"dilations",type:"number[]"}]},{tfOpName:"_FusedConv2D",category:"convolution",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"filter",type:"tensor"},{start:2,end:0,name:"args",type:"tensors"}],attrs:[{tfName:"num_args",name:"numArgs",type:"number"},{tfName:"T",name:"dtype",type:"dtype",notSupported:!0},{tfName:"strides",name:"strides",type:"number[]"},{tfName:"padding",name:"pad",type:"string"},{tfName:"explicit_paddings",name:"explicitPaddings",type:"number[]",defaultValue:[]},{tfName:"use_cudnn_on_gpu",name:"useCudnnOnGpu",type:"bool",defaultValue:!0},{tfName:"data_format",name:"dataFormat",type:"string",defaultValue:"NHWC"},{tfName:"dilations",name:"dilations",type:"number[]",defaultValue:[1,1,1,1]},{tfName:"fused_ops",name:"fusedOps",type:"string[]",defaultValue:[]},{tfName:"epsilon",name:"epsilon",type:"number",defaultValue:1e-4},{tfName:"leakyrelu_alpha",name:"leakyreluAlpha",type:"number"}]},{tfOpName:"Conv2DBackpropInput",category:"convolution",inputs:[{start:2,name:"x",type:"tensor"},{start:1,name:"filter",type:"tensor"},{start:0,name:"outputShape",type:"number[]"}],attrs:[{tfName:"strides",name:"strides",type:"number[]"},{tfName:"padding",name:"pad",type:"string"},{tfName:"data_format",name:"dataFormat",type:"string",notSupported:!0},{tfName:"explicit_paddings",name:"explicitPaddings",type:"number[]",defaultValue:[]},{tfName:"dilations",name:"dilations",type:"number[]",notSupported:!0}]},{tfOpName:"DepthwiseConv2d",category:"convolution",inputs:[{start:0,name:"input",type:"tensor"},{start:1,name:"filter",type:"tensor"}],attrs:[{tfName:"strides",name:"strides",type:"number[]"},{tfName:"padding",name:"pad",type:"string"},{tfName:"data_format",name:"dataFormat",type:"string",defaultValue:"NHWC"},{tfName:"explicit_paddings",name:"explicitPaddings",type:"number[]",defaultValue:[]},{tfName:"dilations",name:"dilations",type:"number[]"}]},{tfOpName:"DepthwiseConv2dNative",category:"convolution",inputs:[{start:0,name:"input",type:"tensor"},{start:1,name:"filter",type:"tensor"}],attrs:[{tfName:"strides",name:"strides",type:"number[]"},{tfName:"padding",name:"pad",type:"string"},{tfName:"data_format",name:"dataFormat",type:"string",defaultValue:"NHWC"},{tfName:"explicit_paddings",name:"explicitPaddings",type:"number[]",defaultValue:[]},{tfName:"dilations",name:"dilations",type:"number[]"}]},{tfOpName:"FusedDepthwiseConv2dNative",category:"convolution",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"filter",type:"tensor"},{start:2,end:0,name:"args",type:"tensors"}],attrs:[{tfName:"num_args",name:"numArgs",type:"number"},{tfName:"T",name:"dtype",type:"dtype",notSupported:!0},{tfName:"strides",name:"strides",type:"number[]"},{tfName:"padding",name:"pad",type:"string"},{tfName:"data_format",name:"dataFormat",type:"string",defaultValue:"NHWC"},{tfName:"dilations",name:"dilations",type:"number[]",defaultValue:[1,1,1,1]},{tfName:"fused_ops",name:"fusedOps",type:"string[]",defaultValue:[]},{tfName:"explicit_paddings",name:"explicitPaddings",type:"number[]",defaultValue:[]}]},{tfOpName:"Conv3D",category:"convolution",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"filter",type:"tensor"}],attrs:[{tfName:"strides",name:"strides",type:"number[]"},{tfName:"padding",name:"pad",type:"string"},{tfName:"data_format",name:"dataFormat",type:"string",defaultValue:"NHWC"},{tfName:"dilations",name:"dilations",type:"number[]"}]},{tfOpName:"Dilation2D",category:"convolution",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"filter",type:"tensor"}],attrs:[{tfName:"strides",name:"strides",type:"number[]"},{tfName:"rates",name:"dilations",type:"number[]"},{tfName:"padding",name:"pad",type:"string"}]}];var tz={};t(tz,"json",(()=>nz));const nz=[{tfOpName:"Fill",category:"creation",inputs:[{start:0,name:"shape",type:"number[]"},{start:1,name:"value",type:"number"}],attrs:[{tfName:"T",name:"dtype",type:"dtype"}]},{tfOpName:"LinSpace",category:"creation",inputs:[{start:0,name:"start",type:"number"},{start:1,name:"stop",type:"number"},{start:2,name:"num",type:"number"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"OneHot",category:"creation",inputs:[{start:0,name:"indices",type:"tensor"},{start:1,name:"depth",type:"number"},{start:2,name:"onValue",type:"number",defaultValue:1},{start:3,name:"offValue",type:"number",defaultValue:0}],attrs:[{tfName:"axis",name:"axis",type:"number",notSupported:!0},{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Ones",category:"creation",inputs:[{start:0,name:"shape",type:"number[]"}],attrs:[{tfName:"T",name:"dtype",type:"dtype"}]},{tfOpName:"OnesLike",category:"creation",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"dtype",name:"dtype",type:"dtype"}]},{tfOpName:"RandomUniform",category:"creation",inputs:[{start:0,name:"shape",type:"number[]"}],attrs:[{tfName:"minval",name:"minval",type:"number",defaultValue:0},{tfName:"maxval",name:"maxval",type:"number",defaultValue:1},{tfName:"dtype",name:"dtype",type:"dtype"},{tfName:"seed",name:"seed",type:"number",defaultValue:0},{tfName:"seed2",name:"seed2",type:"number",defaultValue:0,notSupported:!0},{tfName:"T",name:"T",type:"number",notSupported:!0}]},{tfOpName:"Range",category:"creation",inputs:[{start:0,name:"start",type:"number"},{start:1,name:"stop",type:"number"},{start:2,name:"step",type:"number",defaultValue:0}],attrs:[{tfName:"Tidx",name:"dtype",type:"dtype"}]},{tfOpName:"TruncatedNormal",category:"creation",inputs:[{start:0,name:"shape",type:"number[]"}],attrs:[{tfName:"means",name:"mean",type:"number",defaultValue:0},{tfName:"stddev",name:"stdDev",type:"number",defaultValue:1},{tfName:"seed",name:"seed",type:"number"},{tfName:"seed2",name:"seed2",type:"number",defaultValue:0,notSupported:!0},{tfName:"dtype",name:"dtype",type:"dtype"},{tfName:"T",name:"T",type:"number",notSupported:!0}]},{tfOpName:"Zeros",category:"creation",inputs:[{start:0,name:"shape",type:"number[]"}],attrs:[{tfName:"T",name:"dtype",type:"dtype"}]},{tfOpName:"ZerosLike",category:"creation",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype"}]},{tfOpName:"Multinomial",category:"creation",inputs:[{start:0,name:"logits",type:"tensor"},{start:1,name:"numSamples",type:"number"}],attrs:[{tfName:"seed",name:"seed",type:"number"},{tfName:"seed2",name:"seed2",type:"number"},{tfName:"T",name:"dtype",type:"dtype"},{tfName:"output_dtype",name:"output_dtype",type:"dtype"}]}];var sz={};t(sz,"json",(()=>rz));const rz=[{tfOpName:"NonMaxSuppressionV2",category:"dynamic",inputs:[{start:0,name:"boxes",type:"tensor"},{start:1,name:"scores",type:"tensor"},{start:2,name:"maxOutputSize",type:"number"},{start:3,name:"iouThreshold",type:"number"}]},{tfOpName:"NonMaxSuppressionV3",category:"dynamic",inputs:[{start:0,name:"boxes",type:"tensor"},{start:1,name:"scores",type:"tensor"},{start:2,name:"maxOutputSize",type:"number"},{start:3,name:"iouThreshold",type:"number"},{start:4,name:"scoreThreshold",type:"number"}]},{tfOpName:"NonMaxSuppressionV4",category:"dynamic",inputs:[{start:0,name:"boxes",type:"tensor"},{start:1,name:"scores",type:"tensor"},{start:2,name:"maxOutputSize",type:"number"},{start:3,name:"iouThreshold",type:"number"},{start:4,name:"scoreThreshold",type:"number"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0},{tfName:"T_threshold",name:"threshold",type:"dtype",notSupported:!0},{tfName:"pad_to_max_output_size",name:"padToMaxOutputSize",type:"bool"}]},{tfOpName:"NonMaxSuppressionV5",category:"dynamic",inputs:[{start:0,name:"boxes",type:"tensor"},{start:1,name:"scores",type:"tensor"},{start:2,name:"maxOutputSize",type:"number"},{start:3,name:"iouThreshold",type:"number"},{start:4,name:"scoreThreshold",type:"number"},{start:5,name:"softNmsSigma",type:"number"}]},{tfOpName:"Where",category:"dynamic",inputs:[{start:0,name:"condition",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"ListDiff",category:"dynamic",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"y",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]}];var az={};t(az,"json",(()=>iz));const iz=[{tfOpName:"TopKV2",category:"evaluation",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"k",type:"number"}],attrs:[{tfName:"sorted",name:"sorted",type:"bool"}]},{tfOpName:"Unique",category:"evaluation",inputs:[{start:0,name:"x",type:"tensor"}]},{tfOpName:"UniqueV2",category:"evaluation",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"axis",type:"number"}]}];var oz={};t(oz,"json",(()=>lz));const lz=[{tfOpName:"PlaceholderWithDefault",category:"graph",inputs:[{start:0,name:"default",type:"tensor"}],attrs:[{tfName:"shape",name:"shape",type:"shape"},{tfName:"dtype",name:"dtype",type:"dtype"}]},{tfOpName:"Placeholder",category:"graph",attrs:[{tfName:"shape",name:"shape",type:"shape"},{tfName:"dtype",name:"dtype",type:"dtype"}]},{tfOpName:"Const",category:"graph"},{tfOpName:"Identity",category:"graph",inputs:[{start:0,name:"x",type:"tensor"}]},{tfOpName:"IdentityN",category:"graph",inputs:[{start:0,end:0,name:"x",type:"tensors"}]},{tfOpName:"Snapshot",category:"graph",inputs:[{start:0,name:"x",type:"tensor"}]},{tfOpName:"Rank",category:"graph",inputs:[{start:0,name:"x",type:"tensor"}]},{tfOpName:"Size",category:"graph",inputs:[{start:0,name:"x",type:"tensor"}]},{tfOpName:"Shape",category:"graph",inputs:[{start:0,name:"x",type:"tensor"}]},{tfOpName:"ShapeN",category:"graph",inputs:[{start:0,end:0,name:"x",type:"tensors"}]},{tfOpName:"Print",category:"graph",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"data",type:"tensors"}],attrs:[{tfName:"message",name:"message",type:"string"},{tfName:"first_n",name:"firstN",type:"number",notSupported:!0},{tfName:"summarize",name:"summarize",type:"number",defaultValue:3}]},{tfOpName:"NoOp",category:"graph",inputs:[]},{tfOpName:"StopGradient",category:"graph",inputs:[{start:0,name:"x",type:"tensor"}]},{tfOpName:"FakeQuantWithMinMaxVars",category:"graph",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"min",name:"min",type:"number"},{tfName:"max",name:"max",type:"number"}]}];var uz={};t(uz,"json",(()=>cz));const cz=[{tfOpName:"HashTable",category:"hash_table",inputs:[],attrs:[{tfName:"shared_name",name:"sharedName",type:"string"},{tfName:"use_node_name_sharing",name:"useNodeNameSharing",type:"bool"},{tfName:"key_dtype",name:"keyDType",type:"dtype"},{tfName:"value_dtype",name:"valueDType",type:"dtype"}]},{tfOpName:"HashTableV2",category:"hash_table",inputs:[],attrs:[{tfName:"shared_name",name:"sharedName",type:"string"},{tfName:"use_node_name_sharing",name:"useNodeNameSharing",type:"bool"},{tfName:"key_dtype",name:"keyDType",type:"dtype"},{tfName:"value_dtype",name:"valueDType",type:"dtype"}]},{tfOpName:"LookupTableImport",category:"hash_table",inputs:[{start:0,name:"tableHandle",type:"tensor"},{start:1,name:"keys",type:"tensor"},{start:2,name:"values",type:"tensor"}],attrs:[{tfName:"Tin",name:"tIn",type:"dtype",notSupported:!0},{tfName:"Tout",name:"tOut",type:"dtype",notSupported:!0}]},{tfOpName:"LookupTableImportV2",category:"hash_table",inputs:[{start:0,name:"tableHandle",type:"tensor"},{start:1,name:"keys",type:"tensor"},{start:2,name:"values",type:"tensor"}],attrs:[{tfName:"Tin",name:"tIn",type:"dtype",notSupported:!0},{tfName:"Tout",name:"tOut",type:"dtype",notSupported:!0}]},{tfOpName:"LookupTableFind",category:"hash_table",inputs:[{start:0,name:"tableHandle",type:"tensor"},{start:1,name:"keys",type:"tensor"},{start:2,name:"defaultValue",type:"tensor"}],attrs:[{tfName:"Tin",name:"tIn",type:"dtype",notSupported:!0},{tfName:"Tout",name:"tOut",type:"dtype",notSupported:!0}]},{tfOpName:"LookupTableFindV2",category:"hash_table",inputs:[{start:0,name:"tableHandle",type:"tensor"},{start:1,name:"keys",type:"tensor"},{start:2,name:"defaultValue",type:"tensor"}],attrs:[{tfName:"Tin",name:"tIn",type:"dtype",notSupported:!0},{tfName:"Tout",name:"tOut",type:"dtype",notSupported:!0}]},{tfOpName:"LookupTableSize",category:"hash_table",inputs:[{start:0,name:"tableHandle",type:"tensor"}]},{tfOpName:"LookupTableSizeV2",category:"hash_table",inputs:[{start:0,name:"tableHandle",type:"tensor"}]}];var hz={};t(hz,"json",(()=>pz));const pz=[{tfOpName:"ResizeBilinear",category:"image",inputs:[{start:0,name:"images",type:"tensor"},{start:1,name:"size",type:"number[]"}],attrs:[{tfName:"align_corners",name:"alignCorners",type:"bool"},{tfName:"half_pixel_centers",name:"halfPixelCenters",type:"bool"},{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"ResizeNearestNeighbor",category:"image",inputs:[{start:0,name:"images",type:"tensor"},{start:1,name:"size",type:"number[]"}],attrs:[{tfName:"align_corners",name:"alignCorners",type:"bool"},{tfName:"half_pixel_centers",name:"halfPixelCenters",type:"bool"},{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"CropAndResize",category:"image",inputs:[{start:0,name:"image",type:"tensor"},{start:1,name:"boxes",type:"tensor"},{start:2,name:"boxInd",type:"tensor"},{start:3,name:"cropSize",type:"number[]"}],attrs:[{tfName:"method",name:"method",type:"string"},{tfName:"extrapolation_value",name:"extrapolationValue",type:"number"}]}];var dz={};t(dz,"json",(()=>fz));const fz=[{tfOpName:"Equal",category:"logical",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"NotEqual",category:"logical",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Greater",category:"logical",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"GreaterEqual",category:"logical",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Less",category:"logical",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"LessEqual",category:"logical",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"LogicalAnd",category:"logical",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"LogicalNot",category:"logical",inputs:[{start:0,name:"a",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"LogicalOr",category:"logical",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Select",category:"logical",inputs:[{start:0,name:"condition",type:"tensor"},{start:1,name:"a",type:"tensor"},{start:2,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"SelectV2",category:"logical",inputs:[{start:0,name:"condition",type:"tensor"},{start:1,name:"a",type:"tensor"},{start:2,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]}];var mz={};t(mz,"json",(()=>gz));const gz=[{tfOpName:"_FusedMatMul",category:"matrices",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"},{start:2,end:0,name:"args",type:"tensors"}],attrs:[{tfName:"num_args",name:"numArgs",type:"number"},{tfName:"fused_ops",name:"fusedOps",type:"string[]",defaultValue:[]},{tfName:"epsilon",name:"epsilon",type:"number",defaultValue:1e-4},{tfName:"transpose_a",name:"transposeA",type:"bool",defaultValue:!1},{tfName:"transpose_b",name:"transposeB",type:"bool",defaultValue:!1},{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"MatMul",category:"matrices",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"transpose_a",name:"transposeA",type:"bool",defaultValue:!1},{tfName:"transpose_b",name:"transposeB",type:"bool",defaultValue:!1},{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"BatchMatMul",category:"matrices",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"adj_x",name:"transposeA",type:"bool",defaultValue:!1},{tfName:"adj_y",name:"transposeB",type:"bool",defaultValue:!1},{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"BatchMatMulV2",category:"matrices",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"adj_x",name:"transposeA",type:"bool",defaultValue:!1},{tfName:"adj_y",name:"transposeB",type:"bool",defaultValue:!1},{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Transpose",category:"matrices",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"perm",type:"number[]"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Einsum",category:"matrices",inputs:[{start:0,end:0,name:"tensors",type:"tensors"}],attrs:[{tfName:"equation",name:"equation",type:"string"},{tfName:"N",name:"n",type:"number",defaultValue:2},{tfName:"T",name:"dtype",type:"dtype"}]}];var yz={};t(yz,"json",(()=>bz));const bz=[{tfOpName:"FusedBatchNorm",category:"normalization",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"scale",type:"tensor"},{start:2,name:"offset",type:"tensor"},{start:3,name:"mean",type:"tensor"},{start:4,name:"variance",type:"tensor"}],attrs:[{tfName:"epsilon",name:"epsilon",type:"number",defaultValue:.001},{tfName:"data_format",name:"dataFormat",type:"string",notSupported:!0}]},{tfOpName:"FusedBatchNormV2",category:"normalization",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"scale",type:"tensor"},{start:2,name:"offset",type:"tensor"},{start:3,name:"mean",type:"tensor"},{start:4,name:"variance",type:"tensor"}],attrs:[{tfName:"epsilon",name:"epsilon",type:"number",defaultValue:.001},{tfName:"data_format",name:"dataFormat",type:"string",notSupported:!0}]},{tfOpName:"FusedBatchNormV3",category:"normalization",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"scale",type:"tensor"},{start:2,name:"offset",type:"tensor"},{start:3,name:"mean",type:"tensor"},{start:4,name:"variance",type:"tensor"}],attrs:[{tfName:"epsilon",name:"epsilon",type:"number",defaultValue:.001},{tfName:"data_format",name:"dataFormat",type:"string",notSupported:!0}]},{tfOpName:"LRN",category:"normalization",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"depth_radius",name:"radius",type:"number",defaultValue:5},{tfName:"bias",name:"bias",type:"number",defaultValue:1},{tfName:"alpha",name:"alpha",type:"number",defaultValue:1},{tfName:"beta",name:"beta",type:"number",defaultValue:.5}]},{tfOpName:"Softmax",category:"normalization",inputs:[{start:0,name:"x",type:"tensor"}]},{tfOpName:"LogSoftmax",category:"normalization",inputs:[{start:0,name:"x",type:"tensor"}]},{tfOpName:"SparseToDense",category:"normalization",inputs:[{start:0,name:"sparseIndices",type:"tensor"},{start:1,name:"outputShape",type:"number[]"},{start:2,name:"sparseValues",type:"tensor"},{start:3,name:"defaultValue",type:"tensor"}],attrs:[{tfName:"validate_indices",name:"validateIndices",type:"bool",defaultValue:!0,notSupported:!0}]}];var xz={};t(xz,"json",(()=>wz));const wz=[{tfOpName:"Bincount",category:"reduction",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"size",type:"number"},{start:2,name:"weights",type:"tensor"}]},{tfOpName:"DenseBincount",category:"reduction",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"size",type:"number"},{start:2,name:"weights",type:"tensor"}],attrs:[{tfName:"binary_output",name:"binaryOutput",type:"bool"}]},{tfOpName:"Max",category:"reduction",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"axis",type:"number[]"}],attrs:[{tfName:"keep_dims",name:"keepDims",type:"bool"}]},{tfOpName:"Mean",category:"reduction",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"axis",type:"number[]"}],attrs:[{tfName:"keep_dims",name:"keepDims",type:"bool"}]},{tfOpName:"Min",category:"reduction",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"axis",type:"number[]"}],attrs:[{tfName:"keep_dims",name:"keepDims",type:"bool"}]},{tfOpName:"Sum",category:"reduction",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"axis",type:"number[]"}],attrs:[{tfName:"keep_dims",name:"keepDims",type:"bool"}]},{tfOpName:"All",category:"reduction",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"axis",type:"number[]"}],attrs:[{tfName:"keep_dims",name:"keepDims",type:"bool"}]},{tfOpName:"Any",category:"reduction",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"axis",type:"number[]"}],attrs:[{tfName:"keep_dims",name:"keepDims",type:"bool"}]},{tfOpName:"ArgMax",category:"reduction",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"axis",type:"number"}]},{tfOpName:"ArgMin",category:"reduction",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"axis",type:"number"}]},{tfOpName:"Prod",category:"reduction",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"axis",type:"number[]"}],attrs:[{tfName:"keep_dims",name:"keepDims",type:"bool"}]},{tfOpName:"Cumsum",category:"reduction",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"axis",type:"number"}],attrs:[{tfName:"exclusive",name:"exclusive",type:"bool"},{tfName:"reverse",name:"reverse",type:"bool"}]}];var vz={};t(vz,"json",(()=>kz));const kz=[{tfOpName:"ConcatV2",category:"slice_join",inputs:[{start:0,end:-1,name:"tensors",type:"tensors"},{start:-1,name:"axis",type:"number"}],attrs:[{tfName:"N",name:"n",type:"number",defaultValue:2}]},{tfOpName:"Concat",category:"slice_join",inputs:[{start:1,end:0,name:"tensors",type:"tensors"},{start:0,name:"axis",type:"number"}],attrs:[{tfName:"N",name:"n",type:"number",defaultValue:2}]},{tfOpName:"GatherV2",category:"slice_join",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"indices",type:"tensor"},{start:2,name:"axis",type:"number",defaultValue:0}],attrs:[{tfName:"batch_dims",name:"batchDims",type:"number",defaultValue:0}]},{tfOpName:"Gather",category:"slice_join",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"indices",type:"tensor"}],attrs:[{tfName:"validate_indices",name:"validateIndices",type:"bool",notSupported:!0}]},{tfOpName:"Reverse",category:"slice_join",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"dims",type:"bool[]"}]},{tfOpName:"ReverseV2",category:"slice_join",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"axis",type:"number[]"}]},{tfOpName:"Slice",category:"slice_join",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"begin",type:"number[]"},{start:2,name:"size",type:"number[]"}]},{tfOpName:"StridedSlice",category:"slice_join",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"begin",type:"number[]"},{start:2,name:"end",type:"number[]"},{start:3,name:"strides",type:"number[]"}],attrs:[{tfName:"begin_mask",name:"beginMask",type:"number",defaultValue:0},{tfName:"end_mask",name:"endMask",type:"number",defaultValue:0},{tfName:"new_axis_mask",name:"newAxisMask",type:"number",defaultValue:0},{tfName:"ellipsis_mask",name:"ellipsisMask",type:"number",defaultValue:0},{tfName:"shrink_axis_mask",name:"shrinkAxisMask",type:"number",defaultValue:0}]},{tfOpName:"Pack",category:"slice_join",inputs:[{start:0,end:0,name:"tensors",type:"tensors"}],attrs:[{tfName:"axis",name:"axis",type:"number",defaultValue:0}]},{tfOpName:"Unpack",category:"slice_join",inputs:[{start:0,name:"tensor",type:"tensor"}],attrs:[{tfName:"axis",name:"axis",type:"number",defaultValue:0},{tfName:"num",name:"num",type:"number",defaultValue:0,notSupported:!0}]},{tfOpName:"Tile",category:"slice_join",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"reps",type:"number[]"}]},{tfOpName:"Split",category:"slice_join",inputs:[{start:0,name:"axis",type:"number",defaultValue:0},{start:1,name:"x",type:"tensor"}],attrs:[{tfName:"num_split",name:"numOrSizeSplits",type:"number",defaultValue:1}]},{tfOpName:"SplitV",category:"slice_join",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"numOrSizeSplits",type:"number[]"},{start:2,name:"axis",type:"number",defaultValue:0}]},{tfOpName:"ScatterNd",category:"slice_join",inputs:[{start:0,name:"indices",type:"tensor"},{start:1,name:"values",type:"tensor"},{start:2,name:"shape",type:"number[]"}]},{tfOpName:"GatherNd",category:"slice_join",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"indices",type:"tensor"}]},{tfOpName:"SparseToDense",category:"slice_join",inputs:[{start:0,name:"sparseIndices",type:"tensor"},{start:1,name:"outputShape",type:"number[]"},{start:2,name:"sparseValues",type:"tensor"},{start:3,name:"defaultValue",type:"tensor"}],attrs:[{tfName:"validate_indices",name:"validateIndices",type:"bool",defaultValue:!1,notSupported:!0}]}];var Iz={};t(Iz,"json",(()=>Sz));const Sz=[{tfOpName:"SparseFillEmptyRows",category:"sparse",inputs:[{start:0,name:"indices",type:"tensor"},{start:1,name:"values",type:"tensor"},{start:2,name:"denseShape",type:"tensor"},{start:3,name:"defaultValue",type:"tensor"}]},{tfOpName:"SparseReshape",category:"sparse",inputs:[{start:0,name:"inputIndices",type:"tensor"},{start:1,name:"inputShape",type:"tensor"},{start:2,name:"newShape",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"SparseSegmentMean",category:"sparse",inputs:[{start:0,name:"data",type:"tensor"},{start:1,name:"indices",type:"tensor"},{start:2,name:"segmentIds",type:"tensor"}]},{tfOpName:"SparseSegmentSum",category:"sparse",inputs:[{start:0,name:"data",type:"tensor"},{start:1,name:"indices",type:"tensor"},{start:2,name:"segmentIds",type:"tensor"}]}];var Nz={};t(Nz,"json",(()=>Tz));const Tz=[{tfOpName:"FFT",category:"spectral",inputs:[{start:0,name:"x",type:"tensor"}]},{tfOpName:"IFFT",category:"spectral",inputs:[{start:0,name:"x",type:"tensor"}]},{tfOpName:"RFFT",category:"spectral",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"fft_length",type:"number",notSupported:!0}]},{tfOpName:"IRFFT",category:"spectral",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"fft_length",type:"number",notSupported:!0}]}];var Cz={};t(Cz,"json",(()=>$z));const $z=[{tfOpName:"StringNGrams",category:"string",inputs:[{start:0,name:"data",type:"tensor"},{start:1,name:"dataSplits",type:"tensor"}],attrs:[{tfName:"separator",name:"separator",type:"string"},{tfName:"ngram_widths",name:"nGramWidths",type:"number[]"},{tfName:"left_pad",name:"leftPad",type:"string"},{tfName:"right_pad",name:"rightPad",type:"string"},{tfName:"pad_width",name:"padWidth",type:"number"},{tfName:"preserve_short_sequences",name:"preserveShortSequences",type:"bool"}],outputs:["ngrams","ngrams_splits"]},{tfOpName:"StringSplit",category:"string",inputs:[{start:0,name:"input",type:"tensor"},{start:1,name:"delimiter",type:"tensor"}],attrs:[{tfName:"skip_empty",name:"skipEmpty",type:"bool"}],outputs:["indices","values","shape"]},{tfOpName:"StringToHashBucketFast",category:"string",inputs:[{start:0,name:"input",type:"tensor"}],attrs:[{tfName:"num_buckets",name:"numBuckets",type:"number"}]}];var Ez={};t(Ez,"json",(()=>Az));const Az=[{tfOpName:"Cast",category:"transformation",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"SrcT",name:"sdtype",type:"dtype",notSupported:!0},{tfName:"DstT",name:"dtype",type:"dtype"}]},{tfOpName:"ExpandDims",category:"transformation",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"axis",type:"number"}]},{tfOpName:"MirrorPad",category:"transformation",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"padding",type:"number[]"}],attrs:[{tfName:"mode",name:"mode",type:"string"}]},{tfOpName:"Pad",category:"transformation",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"padding",type:"number[]"}],attrs:[{tfName:"constant_value",name:"constantValue",type:"number",defaultValue:0}]},{tfOpName:"PadV2",category:"transformation",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"padding",type:"number[]"},{start:2,name:"constantValue",type:"number",defaultValue:0}]},{tfOpName:"Reshape",category:"transformation",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"shape",type:"number[]"}]},{tfOpName:"Squeeze",category:"transformation",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"axis",tfDeprecatedName:"squeeze_dims",name:"axis",type:"number[]"}]},{tfOpName:"SpaceToBatchND",category:"transformation",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"blockShape",type:"number[]"},{start:2,name:"paddings",type:"number[]"}]},{tfOpName:"BatchToSpaceND",category:"transformation",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"blockShape",type:"number[]"},{start:2,name:"crops",type:"number[]"}]},{tfOpName:"DepthToSpace",category:"transformation",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"block_size",name:"blockSize",type:"number"},{tfName:"data_format",name:"dataFormat",type:"string"}]},{tfOpName:"BroadcastTo",category:"transformation",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"shape",type:"number[]"}],attrs:[]},{tfOpName:"BroadcastArgs",category:"transformation",inputs:[{start:0,name:"s0",type:"tensor"},{start:1,name:"s1",type:"tensor"}],attrs:[]}];var Rz=Oa;class Fz{static get Instance(){return this._instance||(this._instance=new this)}constructor(){const e=[].concat(...[qL,XL,ZL,QL,tz,sz,az,oz,uz,hz,dz,mz,yz,xz,vz,Iz,Nz,Cz,Ez].map((e=>e.json)));this.opMappers=e.reduce(((e,t)=>(e[t.tfOpName]=t,e)),{})}transformGraph(e,t={}){const n=e.node,s=[],r=[],a=[],i=n.reduce(((e,t)=>(e[t.name]=this.mapNode(t),t.op.startsWith("Placeholder")?s.push(e[t.name]):"Const"===t.op?r.push(e[t.name]):null!=t.input&&0!==t.input.length||a.push(e[t.name]),e)),{});let o=[];const l=[];let u={},c={};null!=t&&(u=this.mapSignatureEntries(t.inputs),c=this.mapSignatureEntries(t.outputs));const h=Object.keys(i);h.forEach((e=>{const t=i[e];t.inputNames.forEach(((e,n)=>{const[s,,r]=UL(e),a=i[s];if(null!=a.outputs){const e=a.outputs.indexOf(r);if(-1!==e){const r=`${s}:${e}`;t.inputNames[n]=r}}t.inputs.push(a),a.children.push(t)}))})),0===Object.keys(c).length?h.forEach((e=>{const t=i[e];0===t.children.length&&l.push(t)})):Object.keys(c).forEach((e=>{const[t]=UL(e),n=i[t];null!=n&&(n.signatureKey=c[e],l.push(n))})),Object.keys(u).length>0?Object.keys(u).forEach((e=>{const[t]=UL(e),n=i[t];n&&(n.signatureKey=u[e],o.push(n))})):o=s;let p={};null!=e.library&&null!=e.library.function&&(p=e.library.function.reduce(((e,t)=>(e[t.signature.name]=this.mapFunction(t),e)),{}));const d={nodes:i,inputs:o,outputs:l,weights:r,placeholders:s,signature:t,functions:p};return a.length>0&&(d.initNodes=a),d}mapSignatureEntries(e){return Object.keys(e||{}).reduce(((t,n)=>(t[e[n].name]=n,t)),{})}mapNode(e){const t=BL(e.op)||this.opMappers[e.op]||{};null==e.attr&&(e.attr={});const n={name:e.name,op:e.op,category:t.category,inputNames:(e.input||[]).map((e=>e.startsWith("^")?e.substr(1):e)),inputs:[],children:[],inputParams:{},attrParams:{},rawAttrs:e.attr,outputs:t.outputs};return null!=t.inputs&&(n.inputParams=t.inputs.reduce(((e,t)=>(e[t.name]={type:t.type,inputIndexStart:t.start,inputIndexEnd:t.end},e)),{})),null!=t.attrs&&(n.attrParams=t.attrs.reduce(((t,n)=>{const s=n.type;let r;switch(n.type){case"string":r=_z(e.attr,n.tfName,n.defaultValue),void 0===r&&n.tfDeprecatedName&&(r=_z(e.attr,n.tfDeprecatedName,n.defaultValue));break;case"string[]":r=Gz(e.attr,n.tfName,n.defaultValue),void 0===r&&n.tfDeprecatedName&&(r=Gz(e.attr,n.tfDeprecatedName,n.defaultValue));break;case"number":r=Mz(e.attr,n.tfName,n.defaultValue||0),void 0===r&&n.tfDeprecatedName&&(r=Mz(e.attr,n.tfDeprecatedName,n.defaultValue));break;case"number[]":r=Vz(e.attr,n.tfName,n.defaultValue),void 0===r&&n.tfDeprecatedName&&(r=Vz(e.attr,n.tfDeprecatedName,n.defaultValue));break;case"bool":r=Oz(e.attr,n.tfName,n.defaultValue),void 0===r&&n.tfDeprecatedName&&(r=Oz(e.attr,n.tfDeprecatedName,n.defaultValue));break;case"bool[]":r=jz(e.attr,n.tfName,n.defaultValue),void 0===r&&n.tfDeprecatedName&&(r=jz(e.attr,n.tfDeprecatedName,n.defaultValue));break;case"shape":r=Uz(e.attr,n.tfName,n.defaultValue),void 0===r&&n.tfDeprecatedName&&(r=Uz(e.attr,n.tfDeprecatedName,n.defaultValue));break;case"shape[]":r=Hz(e.attr,n.tfName,n.defaultValue),void 0===r&&n.tfDeprecatedName&&(r=Hz(e.attr,n.tfDeprecatedName,n.defaultValue));break;case"dtype":r=Bz(e.attr,n.tfName,n.defaultValue),void 0===r&&n.tfDeprecatedName&&(r=Bz(e.attr,n.tfDeprecatedName,n.defaultValue));break;case"dtype[]":r=Pz(e.attr,n.tfName,n.defaultValue),void 0===r&&n.tfDeprecatedName&&(r=Pz(e.attr,n.tfDeprecatedName,n.defaultValue));break;case"func":r=zz(e.attr,n.tfName,n.defaultValue),void 0===r&&n.tfDeprecatedName&&(r=zz(e.attr,n.tfDeprecatedName,n.defaultValue));break;case"tensor":case"tensors":break;default:throw new Error(`Unsupported param type: ${n.type} for op: ${e.op}`)}return t[n.name]={value:r,type:s},t}),{})),n}mapFunction(e){const t=e.nodeDef,n=[];let s={};null!=t&&(s=t.reduce(((e,t)=>(e[t.name]=this.mapNode(t),"Const"===t.op&&n.push(e[t.name]),e)),{}));const r=[],a=[];e.signature.inputArg.forEach((e=>{const[t]=UL(e.name),n={name:t,op:"Placeholder",inputs:[],inputNames:[],category:"graph",inputParams:{},attrParams:{dtype:{value:Lz(e.type),type:"dtype"}},children:[]};n.signatureKey=e.name,r.push(n),s[t]=n}));Object.keys(s).forEach((e=>{const t=s[e];t.inputNames.forEach(((e,n)=>{const[r,,a]=UL(e),i=s[r];if(null!=i.outputs){const e=i.outputs.indexOf(a);if(-1!==e){const s=`${r}:${e}`;t.inputNames[n]=s}}t.inputs.push(i),i.children.push(t)}))}));const i=e.ret;e.signature.outputArg.forEach((e=>{const[t,n]=UL(i[e.name]),r=s[t];null!=r&&(r.defaultOutput=n,a.push(r))}));const o=this.mapArgsToSignature(e);return{nodes:s,inputs:r,outputs:a,weights:n,placeholders:[],signature:o}}mapArgsToSignature(e){return{methodName:e.signature.name,inputs:e.signature.inputArg.reduce(((e,t)=>(e[t.name]=this.mapArgToTensorInfo(t),e)),{}),outputs:e.signature.outputArg.reduce(((t,n)=>(t[n.name]=this.mapArgToTensorInfo(n,e.ret),t)),{})}}mapArgToTensorInfo(e,t){let n=e.name;return null!=t&&(n=t[n]),{name:n,dtype:e.type}}}function Dz(e,t){const n=Array.isArray(e)?String.fromCharCode.apply(null,e):function(e){const t=le().global;if(void 0!==t.atob)return t.atob(e);if(void 0!==Rz)return new Rz(e,"base64").toString();throw new Error("Unable to decode base64 in this environment. Missing built-in atob() or Buffer()")}(e);return t?n:n.toLowerCase()}function _z(e,t,n,s=!1){const r=e[t];return null!=r?Dz(r.s,s):n}function Oz(e,t,n){const s=e[t];return s?s.b:n}function Mz(e,t,n){const s=e[t]||{},r=null!=s.i?s.i:null!=s.f?s.f:n;return"number"==typeof r?r:parseInt(r,10)}function Lz(e){switch("string"==typeof e&&(e=ML[e]),e){case ML.DT_FLOAT:case ML.DT_HALF:return"float32";case ML.DT_INT32:case ML.DT_INT64:case ML.DT_INT8:case ML.DT_UINT8:return"int32";case ML.DT_BOOL:return"bool";case ML.DT_DOUBLE:return"float32";case ML.DT_STRING:return"string";default:return null}}function zz(e,t,n){const s=e[t];return s&&s.func?s.func.name:n}function Bz(e,t,n){const s=e[t];return s&&s.type?Lz(s.type):n}function Pz(e,t,n){const s=e[t];return s&&s.list&&s.list.type?s.list.type.map((e=>Lz(e))):n}function Wz(e){if(!e.unknownRank)return null!=e.dim?e.dim.map((e=>"number"==typeof e.size?e.size:parseInt(e.size,10))):[]}function Uz(e,t,n){const s=e[t];return s&&s.shape?Wz(s.shape):n}function Vz(e,t,n){const s=e[t];return s?((s.list.f&&s.list.f.length?s.list.f:s.list.i)||[]).map((e=>"number"==typeof e?e:parseInt(e,10))):n}function Gz(e,t,n,s=!1){const r=e[t];return r&&r.list&&r.list.s?r.list.s.map((e=>Dz(e,s))):n}function Hz(e,t,n){const s=e[t];return s&&s.list&&s.list.shape?s.list.shape.map((e=>Wz(e))):n}function jz(e,t,n){const s=e[t];return s&&s.list&&s.list.b?s.list.b:n}class qz{constructor(e,t,n){this.node=e,this.tensorMap=t,this.context=n,this.inputs=[],this.attrs={},this.inputs=e.inputNames.map((e=>this.getInput(e))),null!=e.rawAttrs&&(this.attrs=Object.keys(e.rawAttrs).reduce(((e,t)=>(e[t]=this.getAttr(t),e)),{}))}getInput(e){return WL(e,this.tensorMap,this.context)}getAttr(e,t){const n=this.node.rawAttrs[e];if(null!=n.tensor)return WL(e,this.tensorMap,this.context);if(null!=n.i||null!=n.f)return Mz(this.node.rawAttrs,e,t);if(null!=n.s)return _z(this.node.rawAttrs,e,t);if(null!=n.b)return Oz(this.node.rawAttrs,e,t);if(null!=n.shape)return Uz(this.node.rawAttrs,e,t);if(null!=n.type)return Bz(this.node.rawAttrs,e,t);if(null!=n.list){if(null!=n.list.i||null!=n.list.f)return Vz(this.node.rawAttrs,e,t);if(null!=n.list.s)return Gz(this.node.rawAttrs,e,t);if(null!=n.list.shape)return Hz(this.node.rawAttrs,e,t);if(null!=n.list.b)return jz(this.node.rawAttrs,e,t);if(null!=n.list.type)return Pz(this.node.rawAttrs,e,t)}return t}}function Kz(e,t,n=""){if("number"!=typeof e&&"number"!=typeof t){Us.assert(e.length===t.length,(()=>n+` Shapes ${e} and ${t} must match`));for(let s=0;s<e.length;s++){const r=e[s],a=t[s];Us.assert(r<0||a<0||r===a,(()=>n+` Shapes ${e} and ${t} must match`))}}}function Xz(e){return"number"!=typeof e&&!e.some((e=>e<0))}function Yz(e,t,n){let s=Zz(e,n);const r=!Xz(s);if(r&&0===t.length)throw new Error(`Tried to calculate elements of an empty list with non-fully-defined elementShape: ${s}`);if(r&&t.forEach((e=>{s=Zz(e.shape,s)})),!Xz(s))throw new Error(`Non-fully-defined elementShape: ${s}`);return s}function Zz(e,t){if("number"==typeof e)return t;if("number"==typeof t)return e;if(e.length!==t.length)throw new Error(`Incompatible ranks during merge: ${e} vs. ${t}`);const n=[];for(let s=0;s<e.length;++s){const r=e[s],a=t[s];if(r>=0&&a>=0&&r!==a)throw new Error(`Incompatible shape during merge: ${e} vs. ${t}`);n[s]=r>=0?r:a}return n}class Jz{constructor(e,t,n,s,r,a,i){this.name=e,this.dtype=t,this.maxSize=n,this.elementShape=s,this.identicalElementShapes=r,this.dynamicSize=a,this.clearAfterRead=i,this.tensors=[],this.closed_=!1,this.idTensor=bh(0),sh(this.idTensor)}get id(){return this.idTensor.id}get closed(){return this.closed_}clearAndClose(e){this.tensors.forEach((t=>{null!=e&&e.has(t.tensor.id)||t.tensor.dispose()})),this.tensors=[],this.closed_=!0,this.idTensor.dispose()}size(){return this.tensors.length}read(e){if(this.closed_)throw new Error(`TensorArray ${this.name} has already been closed.`);if(e<0||e>=this.size())throw new Error(`Tried to read from index ${e}, but array size is: ${this.size()}`);const t=this.tensors[e];if(t.cleared)throw new Error(`TensorArray ${this.name}: Could not read index ${e} twice because it was cleared after a previous read (perhaps try setting clear_after_read = false?).`);return this.clearAfterRead&&(t.cleared=!0),t.read=!0,t.tensor}readMany(e){return e.map((e=>this.read(e)))}write(e,t){if(this.closed_)throw new Error(`TensorArray ${this.name} has already been closed.`);if(e<0||!this.dynamicSize&&e>=this.maxSize)throw new Error(`Tried to write to index ${e}, but array is not resizeable and size is: ${this.maxSize}`);const n=this.tensors[e]||{};if(t.dtype!==this.dtype)throw new Error(`TensorArray ${this.name}: Could not write to TensorArray index ${e},\n          because the value dtype is ${t.dtype}, but TensorArray dtype is ${this.dtype}.`);if(0!==this.size()||null!=this.elementShape&&0!==this.elementShape.length||(this.elementShape=t.shape),Kz(this.elementShape,t.shape,`TensorArray ${this.name}: Could not write to TensorArray index ${e}.`),n.read)throw new Error(`TensorArray ${this.name}: Could not write to TensorArray index ${e}, because it has already been read.`);if(n.written)throw new Error(`TensorArray ${this.name}: Could not write to TensorArray index ${e}, because it has already been written.`);n.tensor=t,sh(t),n.written=!0,this.tensors[e]=n}writeMany(e,t){if(e.length!==t.length)throw new Error(`TensorArray ${this.name}: could not write multiple tensors,because the index size: ${e.length} is not the same as tensors size: ${t.length}.`);e.forEach(((e,n)=>this.write(e,t[n])))}gather(e,t){if(t&&t!==this.dtype)throw new Error(`TensorArray dtype is ${this.dtype} but gather requested dtype ${t}`);if(e)e=e.slice(0,this.size());else{e=[];for(let t=0;t<this.size();t++)e.push(t)}if(0===e.length)return Da([],[0].concat(this.elementShape));const n=this.readMany(e);return Kz(this.elementShape,n[0].shape,"TensorArray shape mismatch: "),pp(n,0)}concat(e){if(e&&e!==this.dtype)throw new Error(`TensorArray dtype is ${this.dtype} but concat requested dtype ${e}`);if(0===this.size())return Da([],[0].concat(this.elementShape));const t=[];for(let e=0;e<this.size();e++)t.push(e);const n=this.readMany(t);return Kz(this.elementShape,n[0].shape,`TensorArray shape mismatch: tensor array shape (${this.elementShape}) vs first tensor shape (${n[0].shape})`),oh(n,0)}scatter(e,t){if(t.dtype!==this.dtype)throw new Error(`TensorArray dtype is ${this.dtype} but tensor has dtype ${t.dtype}`);if(e.length!==t.shape[0])throw new Error(`Expected len(indices) == tensor.shape[0], but saw: ${e.length} vs. ${t.shape[0]}`);const n=Math.max(...e);if(!this.dynamicSize&&n>=this.maxSize)throw new Error(`Max index must be < array size (${n}  vs. ${this.maxSize})`);this.writeMany(e,dp(t,0))}split(e,t){if(t.dtype!==this.dtype)throw new Error(`TensorArray dtype is ${this.dtype} but tensor has dtype ${t.dtype}`);let n=0;const s=e.map((e=>(n+=e,n)));if(n!==t.shape[0])throw new Error(`Expected sum of lengths to be equal to\n          tensor.shape[0], but sum of lengths is\n        ${n}, and tensor's shape is: ${t.shape}`);if(!this.dynamicSize&&e.length!==this.maxSize)throw new Error(`TensorArray's size is not equal to the size of lengths (${this.maxSize} vs. ${e.length}), and the TensorArray is not marked as dynamically resizeable`);const r=0===n?0:t.size/n,a=[];th((()=>{t=Cu(t,[1,n,r]);for(let n=0;n<e.length;++n){const i=[0,0===n?0:s[n-1],0],o=[1,e[n],r];a[n]=Cu(ch(t,i,o),this.elementShape)}return a}));const i=[];for(let t=0;t<e.length;t++)i[t]=t;this.writeMany(i,a)}}class Qz{constructor(e,t,n,s=-1){this.tensors=e,this.elementShape=t,this.elementDtype=n,null!=e&&e.forEach((e=>{if(n!==e.dtype)throw new Error(`Invalid data types; op elements ${n}, but list elements ${e.dtype}`);Kz(t,e.shape,"TensorList shape mismatch: "),sh(e)})),this.idTensor=bh(0),this.maxNumElements=s,sh(this.idTensor)}get id(){return this.idTensor.id}copy(){return new Qz([...this.tensors],this.elementShape,this.elementDtype)}clearAndClose(e){this.tensors.forEach((t=>{null!=e&&e.has(t.id)||t.dispose()})),this.tensors.length=0,this.idTensor.dispose()}size(){return this.tensors.length}stack(e,t,n=-1){if(t!==this.elementDtype)throw new Error(`Invalid data types; op elements ${t}, but list elements ${this.elementDtype}`);if(-1!==n&&this.tensors.length!==n)throw new Error(`Operation expected a list with ${n} elements but got a list with ${this.tensors.length} elements.`);Kz(e,this.elementShape,"TensorList shape mismatch: ");const s=Yz(this.elementShape,this.tensors,e);return th((()=>{const e=this.tensors.map((e=>Cu(e,s)));return pp(e,0)}))}popBack(e,t){if(t!==this.elementDtype)throw new Error(`Invalid data types; op elements ${t}, but list elements ${this.elementDtype}`);if(0===this.size())throw new Error("Trying to pop from an empty list.");const n=Yz(this.elementShape,this.tensors,e),s=this.tensors.pop();return Kz(s.shape,e,"TensorList shape mismatch: "),Cu(s,n)}pushBack(e){if(e.dtype!==this.elementDtype)throw new Error(`Invalid data types; op elements ${e.dtype}, but list elements ${this.elementDtype}`);if(Kz(e.shape,this.elementShape,"TensorList shape mismatch: "),this.maxNumElements===this.size())throw new Error("Trying to push element into a full list.");sh(e),this.tensors.push(e)}resize(e){if(e<0)throw new Error(`TensorListResize expects size to be non-negative. Got: ${e}`);if(-1!==this.maxNumElements&&e>this.maxNumElements)throw new Error(`TensorListResize input size ${e} is greater maxNumElement ${this.maxNumElements}.`);this.tensors.length=e}getItem(e,t,n){if(n!==this.elementDtype)throw new Error(`Invalid data types; op elements ${n}, but list elements ${this.elementDtype}`);if(e<0||e>this.tensors.length)throw new Error(`Trying to access element ${e} in a list with ${this.tensors.length} elements.`);if(null==this.tensors[e])throw new Error(`element at index ${e} is null.`);Kz(this.tensors[e].shape,t,"TensorList shape mismatch: ");const s=Yz(this.elementShape,this.tensors,t);return Cu(this.tensors[e],s)}setItem(e,t){if(t.dtype!==this.elementDtype)throw new Error(`Invalid data types; op elements ${t.dtype}, but list elements ${this.elementDtype}`);if(e<0||-1!==this.maxNumElements&&e>=this.maxNumElements)throw new Error(`Trying to set element ${e} in a list with max ${this.maxNumElements} elements.`);Kz(this.elementShape,t.shape,"TensorList shape mismatch: "),sh(t),this.tensors[e]=t}gather(e,t,n){if(t!==this.elementDtype)throw new Error(`Invalid data types; op elements ${t}, but list elements ${this.elementDtype}`);Kz(this.elementShape,n,"TensorList shape mismatch: "),e=e.slice(0,this.size());const s=Yz(this.elementShape,this.tensors,n);return 0===e.length?Da([],[0].concat(s)):th((()=>{const t=e.map((e=>Cu(this.tensors[e],s)));return pp(t,0)}))}concat(e,t){if(e&&e!==this.elementDtype)throw new Error(`TensorList dtype is ${this.elementDtype} but concat requested dtype ${e}`);Kz(this.elementShape,t,"TensorList shape mismatch: ");const n=Yz(this.elementShape,this.tensors,t);return 0===this.size()?Da([],[0].concat(n)):th((()=>{const e=this.tensors.map((e=>Cu(e,n)));return oh(e,0)}))}}const eB=async(e,t,n)=>{switch(e.op){case"If":case"StatelessIf":{const s=PL("thenBranch",e,t,n),r=PL("elseBranch",e,t,n),a=PL("cond",e,t,n),i=PL("args",e,t,n);return(await a.data())[0]?n.functionMap[s].executeFunctionAsync(i,n.tensorArrayMap,n.tensorListMap):n.functionMap[r].executeFunctionAsync(i,n.tensorArrayMap,n.tensorListMap)}case"While":case"StatelessWhile":{const s=PL("body",e,t,n),r=PL("cond",e,t,n),a=PL("args",e,t,n),i=await n.functionMap[r].executeFunctionAsync(a,n.tensorArrayMap,n.tensorListMap),o=a.map((e=>e.id));let l=await i[0].data();i.forEach((e=>{e.kept||-1!==o.indexOf(e.id)||e.dispose()}));let u=a;for(;l[0];){const e=u;u=await n.functionMap[s].executeFunctionAsync(u,n.tensorArrayMap,n.tensorListMap);const t=u.map((e=>e.id));e.forEach((e=>{e.kept||-1!==o.indexOf(e.id)||-1!==t.indexOf(e.id)||e.dispose()}));const a=await n.functionMap[r].executeFunctionAsync(u,n.tensorArrayMap,n.tensorListMap);l=await a[0].data(),a.forEach((e=>{e.kept||-1!==o.indexOf(e.id)||-1!==t.indexOf(e.id)||e.dispose()}))}return u}case"LoopCond":return[jL(PL("pred",e,t,n))];case"Switch":{const s=PL("pred",e,t,n);let r=PL("data",e,t,n);return r.kept||(r=jL(r)),(await s.data())[0]?[void 0,r]:[r,void 0]}case"Merge":{const s=e.inputNames.find((e=>void 0!==WL(e,t,n)));if(s){return[jL(WL(s,t,n))]}return}case"Enter":{const s=PL("frameName",e,t,n),r=PL("tensor",e,t,n);return n.enterFrame(s),[jL(r)]}case"Exit":{const s=PL("tensor",e,t,n);return n.exitFrame(),[jL(s)]}case"NextIteration":{const s=PL("tensor",e,t,n);return n.nextIteration(),[jL(s)]}case"TensorArrayV3":{const s=PL("size",e,t,n),r=PL("dtype",e,t,n),a=PL("elementShape",e,t,n),i=PL("dynamicSize",e,t,n),o=PL("clearAfterRead",e,t,n),l=PL("identicalElementShapes",e,t,n),u=PL("name",e,t,n),c=new Jz(u,r,s,a,l,i,o);return n.addTensorArray(c),[c.idTensor,bh(1)]}case"TensorArrayWriteV3":{const s=PL("tensorArrayId",e,t,n),r=PL("index",e,t,n),a=PL("tensor",e,t,n),i=n.getTensorArray(s.id);return i.write(r,a),[i.idTensor]}case"TensorArrayReadV3":{const s=PL("tensorArrayId",e,t,n),r=PL("index",e,t,n);return[n.getTensorArray(s.id).read(r)]}case"TensorArrayGatherV3":{const s=PL("tensorArrayId",e,t,n),r=PL("indices",e,t,n),a=PL("dtype",e,t,n);return[n.getTensorArray(s.id).gather(r,a)]}case"TensorArrayScatterV3":{const s=PL("tensorArrayId",e,t,n),r=PL("indices",e,t,n),a=PL("tensor",e,t,n),i=n.getTensorArray(s.id);return i.scatter(r,a),[i.idTensor]}case"TensorArrayConcatV3":{const s=PL("tensorArrayId",e,t,n),r=n.getTensorArray(s.id),a=PL("dtype",e,t,n);return[r.concat(a)]}case"TensorArraySplitV3":{const s=PL("tensorArrayId",e,t,n),r=PL("tensor",e,t,n),a=PL("lengths",e,t,n),i=n.getTensorArray(s.id);return i.split(a,r),[i.idTensor]}case"TensorArraySizeV3":{const s=PL("tensorArrayId",e,t,n);return[bh(n.getTensorArray(s.id).size(),"int32")]}case"TensorArrayCloseV3":{const s=PL("tensorArrayId",e,t,n),r=n.getTensorArray(s.id);return r.clearAndClose(),[r.idTensor]}case"TensorListSetItem":{const s=PL("tensorListId",e,t,n),r=PL("index",e,t,n),a=PL("tensor",e,t,n),i=n.getTensorList(s.id);return i.setItem(r,a),[i.idTensor]}case"TensorListGetItem":{const s=PL("tensorListId",e,t,n),r=PL("index",e,t,n),a=PL("elementShape",e,t,n),i=PL("elementDType",e,t,n);return[n.getTensorList(s.id).getItem(r,a,i)]}case"TensorListScatterV2":case"TensorListScatter":{const s=PL("indices",e,t,n),r=function(e,t,n,s){if(t.length!==e.shape[0])throw new Error(`Expected len(indices) == tensor.shape[0], but saw: ${t.length} vs. ${e.shape[0]}`);const r=Math.max(...t);if(null!=s&&-1!==s&&r>=s)throw new Error(`Max index must be < array size (${r}  vs. ${s})`);const a=new Qz([],n,e.dtype,s),i=dp(e,0);return t.forEach(((e,t)=>{a.setItem(e,i[t])})),a}(PL("tensor",e,t,n),s,PL("elementShape",e,t,n),PL("numElements",e,t,n));return n.addTensorList(r),[r.idTensor]}case"TensorListReserve":case"EmptyTensorList":{const s=PL("elementShape",e,t,n),r=PL("elementDType",e,t,n);let a;a="TensorListReserve"===e.op?"numElements":"maxNumElements";const i=function(e,t,n){return new Qz([],e,t,n)}(s,r,PL(a,e,t,n));return n.addTensorList(i),[i.idTensor]}case"TensorListGather":{const s=PL("tensorListId",e,t,n),r=PL("indices",e,t,n),a=PL("elementShape",e,t,n),i=PL("elementDType",e,t,n);return[n.getTensorList(s.id).gather(r,i,a)]}case"TensorListStack":{const s=PL("tensorListId",e,t,n),r=PL("elementShape",e,t,n),a=PL("elementDType",e,t,n),i=PL("numElements",e,t,n);return[n.getTensorList(s.id).stack(r,a,i)]}case"TensorListFromTensor":{const s=function(e,t,n){const s=e.dtype;if(e.shape.length<1)throw new Error(`Tensor must be at least a vector, but saw shape: ${e.shape}`);if(e.dtype!==n)throw new Error(`Invalid data types; op elements ${e.dtype}, but list elements ${n}`);Kz(e.shape.slice(1),t,"TensorList shape mismatch: ");const r=dp(e);return new Qz(r,t,s)}(PL("tensor",e,t,n),PL("elementShape",e,t,n),PL("elementDType",e,t,n));return n.addTensorList(s),[s.idTensor]}case"TensorListConcat":{const s=PL("tensorListId",e,t,n),r=n.getTensorList(s.id),a=PL("dtype",e,t,n),i=PL("elementShape",e,t,n);return[r.concat(a,i)]}case"TensorListPushBack":{const s=PL("tensorListId",e,t,n),r=PL("tensor",e,t,n),a=n.getTensorList(s.id);return a.pushBack(r),[a.idTensor]}case"TensorListPopBack":{const s=PL("tensorListId",e,t,n),r=PL("elementShape",e,t,n),a=PL("elementDType",e,t,n);return[n.getTensorList(s.id).popBack(r,a)]}case"TensorListSplit":{const s=PL("tensor",e,t,n),r=PL("elementShape",e,t,n),a=function(e,t,n){let s=0;const r=t.map((e=>(s+=e,s)));if(s!==e.shape[0])throw new Error(`Expected sum of lengths to be equal to\n          tensor.shape[0], but sum of lengths is\n        ${s}, and tensor's shape is: ${e.shape}`);const a=Zz(e.shape.slice(1),n),i=0===s?0:e.size/s,o=th((()=>{const n=[];e=Cu(e,[1,s,i]);for(let s=0;s<t.length;++s){const o=[0,0===s?0:r[s-1],0],l=[1,t[s],i];n[s]=Cu(ch(e,o,l),a)}return e.dispose(),n})),l=new Qz([],n,e.dtype,t.length);for(let e=0;e<o.length;e++)l.setItem(e,o[e]);return l}(s,PL("lengths",e,t,n),r);return n.addTensorList(a),[a.idTensor]}default:throw TypeError(`Node type ${e.op} is not implemented`)}};function tB(e,t,n){const[s,r]=PL("fusedOps",e,t,n),a="biasadd"===s,i=!a,o="prelu"===r,l="fusedbatchnorm"===s,u=PL("numArgs",e,t,n);if(a){if(o&&2!==u)throw new Error("FusedConv2d and DepthwiseConv2d with BiasAdd and Prelu must have two extra arguments: bias and alpha.");if(!o&&a&&1!==u)throw new Error("FusedConv2d and DepthwiseConv2d with BiasAdd must have one extra argument: bias.")}if(l)throw new Error("FusedConv2d and DepthwiseConv2d with FusedBatchNorm is not supported");const c=PL("strides",e,t,n),h=HL(e,t,n),p=PL("dataFormat",e,t,n).toUpperCase(),d=PL("dilations",e,t,n);let[f,m]=PL("args",e,t,n);i&&(m=f,f=void 0);return{stride:c,pad:h,dataFormat:p,dilations:d,biasArg:f,preluArg:m,activationFunc:r,leakyreluAlpha:PL("leakyreluAlpha",e,t,n)}}function nB(e,t,n){return{boxes:PL("boxes",e,t,n),scores:PL("scores",e,t,n),maxOutputSize:PL("maxOutputSize",e,t,n),iouThreshold:PL("iouThreshold",e,t,n),scoreThreshold:PL("scoreThreshold",e,t,n),softNmsSigma:PL("softNmsSigma",e,t,n)}}class sB{constructor(e,t){this.keyDType=e,this.valueDType=t,this.handle=bh(0),this.tensorMap=new Map,sh(this.handle)}get id(){return this.handle.id}clearAndClose(){this.tensorMap.forEach((e=>e.dispose())),this.tensorMap.clear(),this.handle.dispose()}size(){return this.tensorMap.size}tensorSize(){return bh(this.size(),"int32")}async import(e,t){this.checkKeyAndValueTensor(e,t);const n=await e.data();return this.tensorMap.forEach((e=>e.dispose())),this.tensorMap.clear(),th((()=>{const e=dp(t),s=n.length,r=e.length;Us.assert(s===r,(()=>`The number of elements doesn't match, keys has ${s} elements, the values has ${r} elements.`));for(let t=0;t<s;t++){const s=n[t],r=e[t];sh(r),this.tensorMap.set(s,r)}return this.handle}))}async find(e,t){this.checkKeyAndValueTensor(e,t);const n=await e.data();return th((()=>{const e=[];for(let s=0;s<n.length;s++){const r=n[s],a=this.findWithDefault(r,t);e.push(a)}return pp(e)}))}findWithDefault(e,t){const n=this.tensorMap.get(e);return null!=n?n:t}checkKeyAndValueTensor(e,t){if(e.dtype!==this.keyDType)throw new Error(`Expect key dtype ${this.keyDType}, but got ${e.dtype}`);if(t.dtype!==this.valueDType)throw new Error(`Expect value dtype ${this.valueDType}, but got ${t.dtype}`)}}function rB(e,t,n,s){const r=((e,t,n)=>{switch(e.category){case"arithmetic":return th((()=>((e,t,n)=>{switch(e.op){case"BiasAdd":case"AddV2":case"Add":return[vh(PL("a",e,t,n),PL("b",e,t,n))];case"AddN":return[Zp(PL("tensors",e,t,n))];case"FloorMod":case"Mod":return[tf(PL("a",e,t,n),PL("b",e,t,n))];case"Mul":return[Iu(PL("a",e,t,n),PL("b",e,t,n))];case"RealDiv":case"Div":return[np(PL("a",e,t,n),PL("b",e,t,n))];case"DivNoNan":return[Dd(PL("a",e,t,n),PL("b",e,t,n))];case"FloorDiv":return[tp(PL("a",e,t,n),PL("b",e,t,n))];case"Sub":return[sp(PL("a",e,t,n),PL("b",e,t,n))];case"Minimum":return[Mp(PL("a",e,t,n),PL("b",e,t,n))];case"Maximum":return[Qd(PL("a",e,t,n),PL("b",e,t,n))];case"Pow":return[bp(PL("a",e,t,n),PL("b",e,t,n))];case"SquaredDifference":return[zp(PL("a",e,t,n),PL("b",e,t,n))];default:throw TypeError(`Node type ${e.op} is not implemented`)}})(e,t,n)));case"basic_math":return th((()=>((e,t,n)=>{switch(e.op){case"Abs":case"ComplexAbs":return[mp(PL("x",e,t,n))];case"Acos":return[Xp(PL("x",e,t,n))];case"Acosh":return[Yp(PL("x",e,t,n))];case"Asin":return[nd(PL("x",e,t,n))];case"Asinh":return[sd(PL("x",e,t,n))];case"Atan":return[rd(PL("x",e,t,n))];case"Atan2":return[ad(PL("x",e,t,n),PL("y",e,t,n))];case"Atanh":return[id(PL("x",e,t,n))];case"Ceil":return[md(PL("x",e,t,n))];case"Complex":return[Ra(PL("real",e,t,n),PL("imag",e,t,n))];case"Cos":return[Td(PL("x",e,t,n))];case"Cosh":return[Cd(PL("x",e,t,n))];case"Elu":return[vu(PL("x",e,t,n))];case"Erf":return[Od(PL("x",e,t,n))];case"Exp":return[Bp(PL("x",e,t,n))];case"Expm1":return[Md(PL("x",e,t,n))];case"Floor":return[Ld(PL("x",e,t,n))];case"Log":return[Lp(PL("x",e,t,n))];case"Log1p":return[Pp(PL("x",e,t,n))];case"Imag":return[lh(PL("x",e,t,n))];case"Neg":return[Cp(PL("x",e,t,n))];case"Reciprocal":return[vf(PL("x",e,t,n))];case"Real":return[uh(PL("x",e,t,n))];case"Relu":return[Nu(PL("x",e,t,n))];case"Round":return[rp(PL("x",e,t,n))];case"Selu":return[If(PL("x",e,t,n))];case"Sigmoid":return[$u(PL("x",e,t,n))];case"Sin":return[Cf(PL("x",e,t,n))];case"Sign":return[Tf(PL("x",e,t,n))];case"Sinh":return[$f(PL("x",e,t,n))];case"Softplus":return[Hd(PL("x",e,t,n))];case"Sqrt":return[xp(PL("x",e,t,n))];case"Square":return[wp(PL("x",e,t,n))];case"Tanh":return[Lf(PL("x",e,t,n))];case"Tan":return[Mf(PL("x",e,t,n))];case"ClipByValue":return[gd(PL("x",e,t,n),PL("clipValueMin",e,t,n),PL("clipValueMax",e,t,n))];case"Relu6":return[Tu(PL("x",e,t,n))];case"Rsqrt":return[kf(WL(e.inputNames[0],t,n))];case"Prod":return[lf(PL("x",e,t,n),PL("axes",e,t,n))];case"LeakyRelu":return[ku(PL("x",e,t,n),PL("alpha",e,t,n))];case"Prelu":return[Su(PL("x",e,t,n),PL("alpha",e,t,n))];case"IsNan":return[Wd(WL(e.inputNames[0],t,n))];default:throw TypeError(`Node type ${e.op} is not implemented`)}})(e,t,n)));case"control":return eB(e,t,n);case"convolution":return th((()=>((e,t,n)=>{switch(e.op){case"Conv1D":{const s=PL("stride",e,t,n),r=PL("pad",e,t,n),a=PL("dataFormat",e,t,n).toUpperCase(),i=PL("dilation",e,t,n);return[vd(PL("x",e,t,n),PL("filter",e,t,n),s,r,a,i)]}case"Conv2D":{const s=PL("strides",e,t,n),r=HL(e,t,n),a=PL("dataFormat",e,t,n).toUpperCase(),i=PL("dilations",e,t,n);return[kh(PL("x",e,t,n),PL("filter",e,t,n),[s[1],s[2]],r,a,[i[1],i[2]])]}case"_FusedConv2D":{const{stride:s,pad:r,dataFormat:a,dilations:i,biasArg:o,preluArg:l,activationFunc:u,leakyreluAlpha:c}=tB(e,t,n);return[wh.conv2d({x:PL("x",e,t,n),filter:PL("filter",e,t,n),strides:[s[1],s[2]],pad:r,dataFormat:a,dilations:[i[1],i[2]],bias:o,activation:u,preluActivationWeights:l,leakyreluAlpha:c})]}case"FusedDepthwiseConv2dNative":{const{stride:s,pad:r,dataFormat:a,dilations:i,biasArg:o,preluArg:l,activationFunc:u,leakyreluAlpha:c}=tB(e,t,n);return[wh.depthwiseConv2d({x:PL("x",e,t,n),filter:PL("filter",e,t,n),strides:[s[1],s[2]],pad:r,dataFormat:a,dilations:[i[1],i[2]],bias:o,activation:u,preluActivationWeights:l,leakyreluAlpha:c})]}case"Conv2DBackpropInput":case"Conv2dTranspose":{const s=PL("outputShape",e,t,n),r=PL("strides",e,t,n),a=HL(e,t,n);return[kd(PL("x",e,t,n),PL("filter",e,t,n),s,[r[1],r[2]],a)]}case"DepthwiseConv2dNative":case"DepthwiseConv2d":{const s=PL("strides",e,t,n),r=HL(e,t,n),a=PL("dilations",e,t,n),i=PL("dataFormat",e,t,n).toUpperCase();return[Th(PL("input",e,t,n),PL("filter",e,t,n),[s[1],s[2]],r,i,[a[1],a[2]])]}case"Conv3D":{const s=PL("strides",e,t,n),r=PL("pad",e,t,n),a=PL("dataFormat",e,t,n).toUpperCase(),i=PL("dilations",e,t,n);return[Id(PL("x",e,t,n),PL("filter",e,t,n),[s[1],s[2],s[3]],r,a,[i[1],i[2],i[3]])]}case"AvgPool":{const s=PL("strides",e,t,n),r=PL("pad",e,t,n),a=PL("kernelSize",e,t,n);return[od(PL("x",e,t,n),[a[1],a[2]],[s[1],s[2]],r)]}case"MaxPool":{const s=PL("strides",e,t,n),r=PL("pad",e,t,n),a=PL("kernelSize",e,t,n);return[Yd(PL("x",e,t,n),[a[1],a[2]],[s[1],s[2]],r)]}case"MaxPoolWithArgmax":{const s=PL("strides",e,t,n),r=PL("pad",e,t,n),a=PL("kernelSize",e,t,n),i=PL("includeBatchInIndex",e,t,n),{result:o,indexes:l}=Jd(PL("x",e,t,n),[a[1],a[2]],[s[1],s[2]],r,i);return[o,l]}case"AvgPool3D":{const s=PL("strides",e,t,n),r=PL("pad",e,t,n),a=PL("kernelSize",e,t,n);return[ld(PL("x",e,t,n),[a[1],a[2],a[3]],[s[1],s[2],s[3]],r)]}case"MaxPool3D":{const s=PL("strides",e,t,n),r=PL("pad",e,t,n),a=PL("kernelSize",e,t,n);return[Zd(PL("x",e,t,n),[a[1],a[2],a[3]],[s[1],s[2],s[3]],r)]}case"Dilation2D":{const s=PL("strides",e,t,n),r=PL("pad",e,t,n),a=PL("dilations",e,t,n),i=s[1],o=s[2],l=a[1],u=a[2];return[Rd(PL("x",e,t,n),PL("filter",e,t,n),[i,o],r,[l,u],"NHWC")]}default:throw TypeError(`Node type ${e.op} is not implemented`)}})(e,t,n)));case"creation":return th((()=>((e,t,n)=>{switch(e.op){case"Fill":{const s=PL("shape",e,t,n),r=PL("dtype",e,t,n);return[Oh(s,PL("value",e,t,n),r)]}case"LinSpace":return[Vd(PL("start",e,t,n),PL("stop",e,t,n),PL("num",e,t,n))];case"Multinomial":{const s=PL("logits",e,t,n),r=PL("numSamples",e,t,n),a=PL("seed",e,t,n);return[sf(s,r,a)]}case"OneHot":{const s=PL("indices",e,t,n),r=PL("depth",e,t,n),a=PL("onValue",e,t,n),i=PL("offValue",e,t,n);return[rf(s,r,a,i)]}case"Ones":return[_p(PL("shape",e,t,n),PL("dtype",e,t,n))];case"OnesLike":return[af(PL("x",e,t,n))];case"RandomUniform":return[wf(PL("shape",e,t,n),PL("minval",e,t,n),PL("maxval",e,t,n),PL("dtype",e,t,n))];case"Range":return[op(PL("start",e,t,n),PL("stop",e,t,n),PL("step",e,t,n),PL("dtype",e,t,n))];case"TruncatedNormal":{const s=PL("shape",e,t,n),r=PL("mean",e,t,n),a=PL("stdDev",e,t,n),i=PL("seed",e,t,n);return[Bf(s,r,a,PL("dtype",e,t,n),i)]}case"Zeros":return[ph(PL("shape",e,t,n),PL("dtype",e,t,n))];case"ZerosLike":return[dh(PL("x",e,t,n))];default:throw TypeError(`Node type ${e.op} is not implemented`)}})(e,t,n)));case"dynamic":return(async(e,t,n)=>{switch(e.op){case"NonMaxSuppressionV5":{const{boxes:s,scores:r,maxOutputSize:a,iouThreshold:i,scoreThreshold:o,softNmsSigma:l}=nB(e,t,n),u=await jf.nonMaxSuppressionWithScoreAsync(s,r,a,i,o,l);return[u.selectedIndices,u.selectedScores]}case"NonMaxSuppressionV4":{const{boxes:s,scores:r,maxOutputSize:a,iouThreshold:i,scoreThreshold:o}=nB(e,t,n),l=PL("padToMaxOutputSize",e,t,n),u=await jf.nonMaxSuppressionPaddedAsync(s,r,a,i,o,l);return[u.selectedIndices,u.validOutputs]}case"NonMaxSuppressionV3":case"NonMaxSuppressionV2":{const{boxes:s,scores:r,maxOutputSize:a,iouThreshold:i,scoreThreshold:o}=nB(e,t,n);return[await jf.nonMaxSuppressionAsync(s,r,a,i,o)]}case"Where":{const s=Po(PL("condition",e,t,n),"bool"),r=[await Wf(s)];return s.dispose(),r}case"ListDiff":return Nf(PL("x",e,t,n),PL("y",e,t,n));default:throw TypeError(`Node type ${e.op} is not implemented`)}})(e,t,n);case"evaluation":return th((()=>((e,t,n)=>{switch(e.op){case"TopKV2":{const s=PL("x",e,t,n),r=PL("k",e,t,n),a=PL("sorted",e,t,n),i=zf(s,r,a);return[i.values,i.indices]}case"Unique":{const s=PL("x",e,t,n),r=Pf(s);return[r.values,r.indices]}case"UniqueV2":{const s=PL("x",e,t,n),r=PL("axis",e,t,n),a=Pf(s,r);return[a.values,a.indices]}default:throw TypeError(`Node type ${e.op} is not implemented`)}})(e,t,n)));case"image":return th((()=>((e,t,n)=>{switch(e.op){case"ResizeBilinear":{const s=PL("images",e,t,n),r=PL("size",e,t,n),a=PL("alignCorners",e,t,n),i=PL("halfPixelCenters",e,t,n);return[jf.resizeBilinear(s,[r[0],r[1]],a,i)]}case"ResizeNearestNeighbor":{const s=PL("images",e,t,n),r=PL("size",e,t,n),a=PL("alignCorners",e,t,n),i=PL("halfPixelCenters",e,t,n);return[jf.resizeNearestNeighbor(s,[r[0],r[1]],a,i)]}case"CropAndResize":{const s=PL("image",e,t,n),r=PL("boxes",e,t,n),a=PL("boxInd",e,t,n),i=PL("cropSize",e,t,n),o=PL("method",e,t,n),l=PL("extrapolationValue",e,t,n);return[jf.cropAndResize(s,r,a,i,o,l)]}default:throw TypeError(`Node type ${e.op} is not implemented`)}})(e,t,n)));case"graph":return th((()=>((e,t,n)=>{switch(e.op){case"Const":return t[e.name];case"PlaceholderWithDefault":const s=PL("default",e,t,n);return[WL(e.name,t,n)||s];case"Placeholder":return[WL(e.name,t,n)];case"Identity":case"StopGradient":case"FakeQuantWithMinMaxVars":case"Snapshot":return[jL(PL("x",e,t,n))];case"IdentityN":return PL("x",e,t,n).map((e=>jL(e)));case"Shape":return[Fh(PL("x",e,t,n).shape,"int32")];case"ShapeN":return PL("x",e,t,n).map((e=>Fh(e.shape)));case"Size":return[bh(PL("x",e,t,n).size,"int32")];case"Rank":return[bh(PL("x",e,t,n).rank,"int32")];case"NoOp":return[bh(1)];case"Print":const r=PL("x",e,t,n),a=PL("data",e,t,n),i=PL("message",e,t,n),o=PL("summarize",e,t,n);console.warn("The graph has a tf.print() operation,usually used for debugging, which slows down performance."),console.log(i);for(let e=0;e<a.length;e++)console.log(Array.prototype.slice.call(a[e].dataSync()).slice(0,o));return[r];default:throw TypeError(`Node type ${e.op} is not implemented`)}})(e,t,n)));case"logical":return th((()=>((e,t,n)=>{switch(e.op){case"Equal":return[Fd(PL("a",e,t,n),PL("b",e,t,n))];case"NotEqual":return[Dp(PL("a",e,t,n),PL("b",e,t,n))];case"Greater":return[ep(PL("a",e,t,n),PL("b",e,t,n))];case"GreaterEqual":return[cp(PL("a",e,t,n),PL("b",e,t,n))];case"Less":return[Ud(PL("a",e,t,n),PL("b",e,t,n))];case"LessEqual":return[Qh(PL("a",e,t,n),PL("b",e,t,n))];case"LogicalAnd":return[hp(PL("a",e,t,n),PL("b",e,t,n))];case"LogicalNot":return[Kd(PL("a",e,t,n))];case"LogicalOr":return[Xd(PL("a",e,t,n),PL("b",e,t,n))];case"Select":case"SelectV2":return[ip(PL("condition",e,t,n),PL("a",e,t,n),PL("b",e,t,n))];default:throw TypeError(`Node type ${e.op} is not implemented`)}})(e,t,n)));case"matrices":return th((()=>((e,t,n)=>{switch(e.op){case"BatchMatMul":case"BatchMatMulV2":case"MatMul":return[Ah(PL("a",e,t,n),PL("b",e,t,n),PL("transposeA",e,t,n),PL("transposeB",e,t,n))];case"Einsum":return[_d(PL("equation",e,t,n),...PL("tensors",e,t,n))];case"Transpose":return[$p(PL("x",e,t,n),PL("perm",e,t,n))];case"_FusedMatMul":const[s,r]=PL("fusedOps",e,t,n),a="biasadd"===s,i="prelu"===r,o=PL("numArgs",e,t,n),l=PL("leakyreluAlpha",e,t,n);if(a){if(i&&2!==o)throw new Error("Fused MatMul with BiasAdd and Prelu must have two extra arguments: bias and alpha.");if(!i&&1!==o)throw new Error("Fused MatMul with BiasAdd must have one extra argument: bias.")}const[u,c]=PL("args",e,t,n);return[wh.matMul({a:PL("a",e,t,n),b:PL("b",e,t,n),transposeA:PL("transposeA",e,t,n),transposeB:PL("transposeB",e,t,n),bias:u,activation:r,preluActivationWeights:c,leakyreluAlpha:l})];default:throw TypeError(`Node type ${e.op} is not implemented`)}})(e,t,n)));case"normalization":return th((()=>((e,t,n)=>{switch(e.op){case"FusedBatchNorm":case"FusedBatchNormV2":case"FusedBatchNormV3":return[cd(PL("x",e,t,n),PL("mean",e,t,n),PL("variance",e,t,n),PL("offset",e,t,n),PL("scale",e,t,n),PL("epsilon",e,t,n))];case"LRN":return[Gd(PL("x",e,t,n),PL("radius",e,t,n),PL("bias",e,t,n),PL("alpha",e,t,n),PL("beta",e,t,n))];case"Softmax":return[Df(PL("x",e,t,n))];case"LogSoftmax":return[qd(PL("x",e,t,n))];case"SparseToDense":return[Vf(PL("sparseIndices",e,t,n),PL("outputShape",e,t,n),PL("sparseValues",e,t,n),PL("defaultValue",e,t,n))];default:throw TypeError(`Node type ${e.op} is not implemented`)}})(e,t,n)));case"reduction":return th((()=>((e,t,n)=>{switch(e.op){case"Max":{const s=PL("axis",e,t,n),r=PL("keepDims",e,t,n);return[gp(PL("x",e,t,n),s,r)]}case"Mean":{const s=PL("axis",e,t,n),r=PL("keepDims",e,t,n);return[Fp(PL("x",e,t,n),s,r)]}case"Min":{const s=PL("axis",e,t,n),r=PL("keepDims",e,t,n);return[yp(PL("x",e,t,n),s,r)]}case"Sum":{const s=PL("axis",e,t,n),r=PL("keepDims",e,t,n);return[Au(PL("x",e,t,n),s,r)]}case"All":{const s=PL("axis",e,t,n),r=PL("keepDims",e,t,n);return[Jp(PL("x",e,t,n),s,r)]}case"Any":{const s=PL("axis",e,t,n),r=PL("keepDims",e,t,n);return[Qp(PL("x",e,t,n),s,r)]}case"ArgMax":{const s=PL("axis",e,t,n);return[ed(PL("x",e,t,n),s)]}case"ArgMin":{const s=PL("axis",e,t,n);return[td(PL("x",e,t,n),s)]}case"Prod":{const s=PL("axis",e,t,n),r=PL("keepDims",e,t,n);return[lf(PL("x",e,t,n),s,r)]}case"Cumsum":{const s=PL("axis",e,t,n),r=PL("exclusive",e,t,n),a=PL("reverse",e,t,n);return[$d(PL("x",e,t,n),s,r,a)]}case"Bincount":const s=PL("x",e,t,n),r=PL("weights",e,t,n),a=PL("size",e,t,n);return[Jh(s,r,a)];case"DenseBincount":{const s=PL("x",e,t,n),r=PL("weights",e,t,n),a=PL("size",e,t,n),i=PL("binaryOutput",e,t,n);return[Ed(s,r,a,i)]}default:throw TypeError(`Node type ${e.op} is not implemented`)}})(e,t,n)));case"slice_join":return th((()=>((e,t,n)=>{switch(e.op){case"ConcatV2":case"Concat":{const s=PL("n",e,t,n),r=PL("axis",e,t,n);let a=PL("tensors",e,t,n);return a=a.slice(0,s),[oh(a,r)]}case"Gather":{const s=PL("x",e,t,n),r=PL("indices",e,t,n);return[zd(s,Po(r,"int32"),0)]}case"GatherV2":{const s=PL("axis",e,t,n),r=PL("batchDims",e,t,n),a=PL("x",e,t,n),i=PL("indices",e,t,n);return[zd(a,Po(i,"int32"),s,r)]}case"Reverse":{const s=PL("dims",e,t,n),r=[];for(let e=0;e<s.length;e++)s[e]&&r.push(e);const a=PL("x",e,t,n);return[yh(a,r)]}case"ReverseV2":{const s=PL("axis",e,t,n),r=PL("x",e,t,n);return[yh(r,s)]}case"Slice":{const s=PL("begin",e,t,n),r=PL("size",e,t,n);return[ch(PL("x",e,t,n),s,r)]}case"StridedSlice":{const s=PL("begin",e,t,n),r=PL("end",e,t,n),a=PL("strides",e,t,n),i=PL("beginMask",e,t,n),o=PL("endMask",e,t,n),l=PL("ellipsisMask",e,t,n),u=PL("newAxisMask",e,t,n),c=PL("shrinkAxisMask",e,t,n),h=PL("x",e,t,n);return[Of(h,s,r,a,i,o,l,u,c)]}case"Pack":return th((()=>{const s=PL("axis",e,t,n),r=PL("tensors",e,t,n),a=r[0].shape,i=Ip(r[0]).shape,o=r.map((e=>{const t=Us.arraysEqual(e.shape,a);if(!t&&!Us.arraysEqual(Ip(e).shape,i))throw new Error("the input tensors shape does not match");return t?e:Cu(e,a)}));return[pp(o,s)]}));case"Unpack":{const s=PL("axis",e,t,n),r=PL("tensor",e,t,n);return dp(r,s)}case"Tile":{const s=PL("reps",e,t,n);return[Ph(PL("x",e,t,n),s)]}case"Split":case"SplitV":{const s=PL("axis",e,t,n),r=PL("numOrSizeSplits",e,t,n),a=PL("x",e,t,n);return hh(a,r,s)}case"ScatterNd":{const s=PL("indices",e,t,n),r=PL("values",e,t,n),a=PL("shape",e,t,n);return[Uf(s,r,a)]}case"GatherNd":{const s=PL("x",e,t,n),r=PL("indices",e,t,n);return[Gf(s,r)]}case"SparseToDense":{const s=PL("sparseIndices",e,t,n),r=PL("outputShape",e,t,n),a=PL("sparseValues",e,t,n),i=PL("defaultValue",e,t,n);return[Vf(s,a,r,a.dtype===i.dtype?i:Po(i,a.dtype))]}default:throw TypeError(`Node type ${e.op} is not implemented`)}})(e,t,n)));case"sparse":return th((()=>((e,t,n)=>{switch(e.op){case"SparseFillEmptyRows":{const{outputIndices:s,outputValues:r,emptyRowIndicator:a,reverseIndexMap:i}=Kf.sparseFillEmptyRows(PL("indices",e,t,n),PL("values",e,t,n),PL("denseShape",e,t,n),PL("defaultValue",e,t,n));return[s,r,a,i]}case"SparseReshape":{const{outputIndices:s,outputShape:r}=Kf.sparseReshape(PL("inputIndices",e,t,n),PL("inputShape",e,t,n),PL("newShape",e,t,n));return[s,r]}case"SparseSegmentMean":return[Kf.sparseSegmentMean(PL("data",e,t,n),PL("indices",e,t,n),PL("segmentIds",e,t,n))];case"SparseSegmentSum":return[Kf.sparseSegmentSum(PL("data",e,t,n),PL("indices",e,t,n),PL("segmentIds",e,t,n))];default:throw TypeError(`Node type ${e.op} is not implemented`)}})(e,t,n)));case"spectral":return th((()=>((e,t,n)=>{switch(e.op){case"FFT":return[fh(PL("x",e,t,n))];case"IFFT":return[gh(PL("x",e,t,n))];case"RFFT":return[mh(PL("x",e,t,n))];case"IRFFT":return[xh(PL("x",e,t,n))];default:throw TypeError(`Node type ${e.op} is not implemented`)}})(e,t,n)));case"string":return th((()=>((e,t,n)=>{switch(e.op){case"StringNGrams":{const{nGrams:s,nGramsSplits:r}=Xf.stringNGrams(PL("data",e,t,n),PL("dataSplits",e,t,n),PL("separator",e,t,n),PL("nGramWidths",e,t,n),PL("leftPad",e,t,n),PL("rightPad",e,t,n),PL("padWidth",e,t,n),PL("preserveShortSequences",e,t,n));return[s,r]}case"StringSplit":{const{indices:s,values:r,shape:a}=Xf.stringSplit(PL("input",e,t,n),PL("delimiter",e,t,n),PL("skipEmpty",e,t,n));return[s,r,a]}case"StringToHashBucketFast":return[Xf.stringToHashBucketFast(PL("input",e,t,n),PL("numBuckets",e,t,n))];default:throw TypeError(`Node type ${e.op} is not implemented`)}})(e,t,n)));case"transformation":return th((()=>((e,t,n)=>{switch(e.op){case"Cast":return[Po(PL("x",e,t,n),PL("dtype",e,t,n))];case"ExpandDims":{const s=PL("axis",e,t,n);return[Np(PL("x",e,t,n),s)]}case"Squeeze":{const s=PL("axis",e,t,n);return[Ip(PL("x",e,t,n),s)]}case"Reshape":return[Cu(PL("x",e,t,n),PL("shape",e,t,n))];case"MirrorPad":return[ef(PL("x",e,t,n),PL("padding",e,t,n),PL("mode",e,t,n))];case"PadV2":case"Pad":return[of(PL("x",e,t,n),PL("padding",e,t,n),PL("constantValue",e,t,n))];case"SpaceToBatchND":{const s=PL("blockShape",e,t,n),r=PL("paddings",e,t,n);return[_f(PL("x",e,t,n),s,r)]}case"BatchToSpaceND":{const s=PL("blockShape",e,t,n),r=PL("crops",e,t,n);return[ud(PL("x",e,t,n),s,r)]}case"DepthToSpace":{const s=PL("blockSize",e,t,n),r=PL("dataFormat",e,t,n).toUpperCase();return[Ad(PL("x",e,t,n),s,r)]}case"BroadcastTo":return[ap(PL("x",e,t,n),PL("shape",e,t,n))];case"BroadcastArgs":return[fd(PL("s0",e,t,n),PL("s1",e,t,n))];default:throw TypeError(`Node type ${e.op} is not implemented`)}})(e,t,n)));case"hash_table":return(async(e,t,n,s)=>{switch(e.op){case"HashTable":case"HashTableV2":{const r=PL("keyDType",e,t,n),a=PL("valueDType",e,t,n),i=new sB(r,a);return s.addHashTable(e.name,i),[i.handle]}case"LookupTableImport":case"LookupTableImportV2":{const r=PL("tableHandle",e,t,n,s),a=PL("keys",e,t,n),i=PL("values",e,t,n),o=s.getHashTableById(r.id);return[await o.import(a,i)]}case"LookupTableFind":case"LookupTableFindV2":{const r=PL("tableHandle",e,t,n,s),a=PL("keys",e,t,n),i=PL("defaultValue",e,t,n),o=s.getHashTableById(r.id);return[await o.find(a,i)]}case"LookupTableSize":case"LookupTableSizeV2":{const r=PL("tableHandle",e,t,n,s);return[s.getHashTableById(r.id).tensorSize()]}default:throw TypeError(`Node type ${e.op} is not implemented`)}})(e,t,n,s);case"custom":const r=BL(e.op);if(r&&r.customExecutor)return r.customExecutor(new qz(e,t,n));throw TypeError(`Custom op ${e.op} is not registered.`);default:throw TypeError(`Unknown op '${e.op}'. File an issue at https://github.com/tensorflow/tfjs/issues so we can add it, or register a custom execution with tf.registerOp()`)}})(e,t,n);return Us.isPromise(r)?r.then((e=>[].concat(e))):[].concat(r)}class aB{constructor(e={},t={},n={},s={}){this.weightMap=e,this.tensorArrayMap=t,this.tensorListMap=n,this.functionMap=s,this.rootContext={id:0,frameName:"",iterationId:0},this.contexts=[this.rootContext],this.lastId=0,this.generateCurrentContextIds()}newFrame(e,t){return{id:e,frameName:t,iterationId:0}}set currentContext(e){this.contexts!==e&&(this.contexts=e,this.generateCurrentContextIds())}get currentContext(){return this.contexts}get currentContextId(){return this._currentContextIds[0]}get currentContextIds(){return this._currentContextIds}generateCurrentContextIds(){const e=[];for(let t=0;t<this.contexts.length-1;t++){const n=this.contexts.slice(0,this.contexts.length-t);e.push(this.contextIdforContexts(n))}e.push(""),this._currentContextIds=e}contextIdforContexts(e){return e?e.map((e=>0===e.id&&0===e.iterationId?"":`${e.frameName}-${e.iterationId}`)).join("/"):""}enterFrame(e){this.contexts&&(this.lastId++,this.contexts=this.contexts.slice(),this.contexts.push(this.newFrame(this.lastId,e)),this._currentContextIds.unshift(this.contextIdforContexts(this.contexts)))}exitFrame(){if(!(this.contexts&&this.contexts.length>1))throw new Error("Cannot exit frame, the context is empty");this.contexts=this.contexts.slice(),this.contexts.splice(-1),this.currentContextIds.shift()}nextIteration(){if(!(this.contexts&&this.contexts.length>0))throw new Error("Cannot increase frame iteration, the context is empty");{this.contexts=this.contexts.slice(),this.lastId++;const e=Object.assign({},this.contexts[this.contexts.length-1]);e.iterationId+=1,e.id=this.lastId,this.contexts.splice(-1,1,e),this._currentContextIds.splice(0,1,this.contextIdforContexts(this.contexts))}}getWeight(e){return this.weightMap[e]}addTensorArray(e){this.tensorArrayMap[e.id]=e}getTensorArray(e){return this.tensorArrayMap[e]}addTensorList(e){this.tensorListMap[e.id]=e}getTensorList(e){return this.tensorListMap[e]}dispose(e){for(const t in this.tensorArrayMap)this.tensorArrayMap[t].clearAndClose(e);for(const t in this.tensorListMap)this.tensorListMap[t].clearAndClose(e)}}function iB(e,t,n,s){const r=new Set,a=[];let i=null,o=null;const l=new Set,u=Object.keys(e).map((e=>GL(e)[0]));let c=[];null!=s&&(c=s.map((e=>GL(e.name)[0])));const h=[...t];for(;h.length>0;){const e=h.pop();(cB(e)||hB(e)||pB(e))&&null==i&&(i=e,o=i.children.map((e=>e.name)).filter((e=>r.has(e)))),r.add(e.name),null==n[e.name]&&(-1===u.indexOf(e.name)&&-1===c.indexOf(e.name)&&(0!==e.inputs.length?e.inputs.forEach((e=>{l.has(e.name)||(l.add(e.name),h.push(e))})):a.push(e.name)))}return{inputs:e,outputs:t,usedNodes:r,missingInputs:a,dynamicNode:i,syncInputs:o}}const oB=["Switch","Merge","Enter","Exit","NextIteration","StatelessIf","StatelessWhile","if","While"],lB=["NonMaxSuppressionV2","NonMaxSuppressionV3","NonMaxSuppressionV5","Where"],uB=["HashTable","HashTableV2","LookupTableImport","LookupTableImportV2","LookupTableFind","LookupTableFindV2","LookupTableSize","LookupTableSizeV2"];function cB(e){return oB.indexOf(e.op)>=0}function hB(e){return lB.indexOf(e.op)>=0}function pB(e){return uB.indexOf(e.op)>=0}class dB{constructor(e,t){this.graph=e,this.parent=t,this.compiledMap=new Map,this._weightMap={},this.SEPERATOR=",",this._functions={},this._functionExecutorMap={},this.intermediateTensors={},this.keepTensorForDebug=!1,this._outputs=e.outputs,this._inputs=e.inputs,this._initNodes=e.initNodes,this._signature=e.signature,this._functions=e.functions,null!=e.functions&&Object.keys(e.functions).forEach((t=>{this._functionExecutorMap[t]=new dB(e.functions[t],this)}))}get weightIds(){return this.parent?this.parent.weightIds:this._weightIds}get functionExecutorMap(){return this.parent?this.parent.functionExecutorMap:this._functionExecutorMap}get weightMap(){return this.parent?this.parent.weightMap:this._weightMap}set weightMap(e){const t=Object.keys(e).map((t=>e[t].map((e=>e.id))));this._weightIds=[].concat(...t),this._weightMap=e}set resourceManager(e){this._resourceManager=e}get inputs(){return this._inputs.map((e=>({name:e.name,shape:e.attrParams.shape?e.attrParams.shape.value:void 0,dtype:e.attrParams.dtype?e.attrParams.dtype.value:void 0})))}get outputs(){return this._outputs.map((e=>({name:e.name,shape:e.attrParams.shape?e.attrParams.shape.value:void 0,dtype:e.attrParams.dtype?e.attrParams.dtype.value:void 0})))}get inputNodes(){return this._inputs.map((e=>e.signatureKey||e.name))}get outputNodes(){return this._outputs.map((e=>{const t=e.signatureKey||e.name;return e.defaultOutput?`${t}:${e.defaultOutput}`:t}))}get functions(){return Object.keys(this._functions).reduce(((e,t)=>(e[t]=this._functions[t].signature,e)),{})}getCompilationKey(e,t){const n=e.map((e=>e.name)).sort(),s=t.map((e=>e.name)).sort();return n.join(this.SEPERATOR)+"--"+s.join(this.SEPERATOR)}compile(e,t){const n=iB(e,t,this.weightMap,this._initNodes),{missingInputs:s,dynamicNode:r,syncInputs:a}=n;if(null!=r)throw new Error(`This execution contains the node '${r.name}', which has the dynamic op '${r.op}'. Please use model.executeAsync() instead. Alternatively, to avoid the dynamic ops, specify the inputs [${a}]`);if(s.length>0){const n=t.map((e=>e.name)),r=Object.keys(e);throw new Error(`Cannot compute the outputs [${n}] from the provided inputs [${r}]. Missing the following inputs: [${s}]`)}return function(e,t,n){const{usedNodes:s,inputs:r}=n,a=[],i=Object.keys(r).map((e=>GL(e)[0])).map((t=>e.nodes[t])),o=e.initNodes;i.forEach((e=>{s.has(e.name)&&a.push(e)})),e.weights.forEach((e=>{s.has(e.name)&&a.push(e)})),null!=o&&o.forEach((e=>{s.has(e.name)&&a.push(e)}));const l=new Set,u=[];for(;a.length>0;){const e=a.pop();l.add(e.name),t[e.name]||u.push(e),e.children.forEach((e=>{!l.has(e.name)&&s.has(e.name)&&e.inputs.every((e=>l.has(e.name)))&&a.push(e)}))}return u}(this.graph,this.weightMap,n)}execute(e,t){e=this.mapInputs(e);const n=Object.keys(e).sort();this.checkInputs(e),this.checkInputShapeAndType(e),t=this.mapOutputs(t),this.checkOutputs(t);const s=n.map((e=>this.graph.nodes[GL(e)[0]])),r=t.map((e=>GL(e)[0]));let a=r.map((e=>this.graph.nodes[e]));this.resetIntermediateTensors(),0===a.length&&(a=this._outputs);const i=this.getCompilationKey(s,a);let o=this.compiledMap.get(i);null==o&&(o=this.compile(e,a),this.compiledMap.set(i,o));const l={},u={};return th((()=>{const n=new aB(this.weightMap,l,u,this.functionExecutorMap),s=Object.assign({},this.weightMap);Object.keys(e).forEach((t=>{const[n,r]=GL(t),a=[];a[r]=e[t],s[n]=a}));const a=this.getFrozenTensorIds(s),i={};for(let e=0;e<o.length;e++){const t=o[e];if(!s[t.name]){const e=rB(t,s,n,this._resourceManager);if(Us.isPromise(e))throw new Error(`The execution of the op '${t.op}' returned a promise. Please use model.executeAsync() instead.`);s[t.name]=e,this.checkTensorForDisposal(t.name,t,s,n,a,r,i)}}return null==this.parent&&n.dispose(a),t.map((e=>WL(e,s,n)))}))}getFrozenTensorIds(e){const t=[].concat.apply([],Object.keys(e).map((t=>e[t])).map((e=>e.map((e=>e.id)))));return new Set(t)}checkTensorForDisposal(e,t,n,s,r,a,i){"control"!==t.category&&-1===a.indexOf(e)&&(n[e].forEach((e=>{null!=e&&(i[e.id]=(i[e.id]||0)+t.children.length)})),t.inputs.forEach((e=>{if("control"!==e.category){const a=function(e,t,n){return t[VL(e,n.currentContextId)]}(e.name,n,s);null!=a&&a.forEach((e=>{if(e&&!e.kept&&!r.has(e.id)){const n=i[e.id];if(1===n){if(this.keepTensorForDebug){const[n,r]=UL(t.name,s);this.intermediateTensors[n]||(this.intermediateTensors[n]=[]),this.intermediateTensors[n][r]=e}else e.dispose();delete i[e.id]}else null!=n&&i[e.id]--}}))}})))}async executeAsync(e,t){return this._executeAsync(e,t)}disposeIntermediateTensors(){this.intermediateTensors&&(Object.keys(this.intermediateTensors).forEach((e=>this.intermediateTensors[e].forEach((e=>e.dispose())))),this.disposeTensorsMap())}disposeTensorsMap(){this.tensorsMap&&Object.keys(this.tensorsMap).forEach((e=>{this.tensorsMap[e].forEach((e=>{!e||e.kept||e.isDisposed||this.keepIds.has(e.id)||e.dispose()}))}))}getIntermediateTensors(){return this.tensorsMap}resetIntermediateTensors(){for(const e in this.intermediateTensors)this.intermediateTensors[e].forEach((e=>e.dispose())),delete this.intermediateTensors[e]}async _executeAsync(e,t,n=!1,s={},r={}){n||(e=this.mapInputs(e),this.checkInputs(e),this.checkInputShapeAndType(e),t=this.mapOutputs(t),this.checkOutputs(t));try{this.keepTensorForDebug=le().getBool("KEEP_INTERMEDIATE_TENSORS")}catch(e){console.warn(e.message)}this.resetIntermediateTensors();const a=new aB(this.weightMap,s,r,this.functionExecutorMap);this.tensorsMap=await this.executeWithControlFlow(e,a,t,n);const i=t.map((e=>WL(e,this.tensorsMap,a))),o=i.map((e=>e.id)),l=Object.keys(e).map((t=>e[t].id));return this.keepIds=new Set([...o,...l,...this.weightIds]),this.keepTensorForDebug||this.disposeTensorsMap(),null==this.parent&&a.dispose(this.keepIds),i}async executeFunctionAsync(e,t,n){const s=e.reduce(((e,t,n)=>(e[this.inputs[n].name]=t,e)),{});return this._executeAsync(s,this.outputNodes,!0,t,n)}async executeWithControlFlow(e,t,n,s){const r=Object.keys(e),a=r.map((e=>this.graph.nodes[GL(e)[0]])),i=n.map((e=>GL(e)[0]));let o=i.map((e=>this.graph.nodes[e]));0===o.length&&(o=this._outputs);const{usedNodes:l,missingInputs:u,dynamicNode:c,syncInputs:h}=iB(e,o,this.weightMap,this._initNodes),p=[...a,...this.graph.weights,...this._initNodes||[]].map((e=>({node:e,contexts:t.currentContext}))),d=Object.assign({},this.weightMap);Object.keys(e).forEach((t=>{const[n,s]=GL(t),r=[];r[s]=e[t],d[n]=r}));const f={},m=this.getFrozenTensorIds(d),g={};for(;p.length>0;){const e=this.processStack(a,p,t,d,g,m,i,f,l);await Promise.all(e)}null!=c||s||console.warn("This model execution did not contain any nodes with control flow or dynamic output shapes. You can use model.execute() instead.");const y=o.filter((e=>!cB(e)&&!WL(e.name,d,t))).map((e=>e.name));if(y.length>0){let e="";throw null!=c&&(e=`Alternatively, to avoid the dynamic ops, use model.execute() and specify the inputs [${h}]`),new Error(`Cannot compute the outputs [${y}] from the provided inputs [${r}]. Consider providing the following inputs: [${u}]. ${e}`)}return d}processStack(e,t,n,s,r,a,i,o,l){const u=[];for(;t.length>0;){const e=t.pop();n.currentContext=e.contexts;let c="";if("Enter"===e.node.op&&PL("isConstant",e.node,s,n)&&([c]=UL(e.node.name,n)),null==s[e.node.name]){const h=rB(e.node,s,n,this._resourceManager);c||([c]=UL(e.node.name,n));const p=n.currentContext;Us.isPromise(h)?u.push(h.then((u=>(s[c]=u,n.currentContext=p,this.checkTensorForDisposal(c,e.node,s,n,a,i,o),this.processChildNodes(e.node,t,n,s,r,l),u)))):(s[c]=h,this.checkTensorForDisposal(c,e.node,s,n,a,i,o),this.processChildNodes(e.node,t,n,s,r,l))}else this.processChildNodes(e.node,t,n,s,r,l)}return u}processChildNodes(e,t,n,s,r,a){e.children.forEach((e=>{const[i]=UL(e.name,n);!r[i]&&a.has(e.name)&&("Merge"===e.op?e.inputNames.some((e=>!!WL(e,s,n)))&&(r[i]=!0,t.push({contexts:n.currentContext,node:e})):e.inputNames.every((e=>!!WL(e,s,n)))&&(r[i]=!0,t.push({contexts:n.currentContext,node:e})))}))}dispose(){Object.keys(this.weightMap).forEach((e=>this.weightMap[e].forEach((e=>e.dispose()))))}checkInputShapeAndType(e){Object.keys(e).forEach((t=>{const n=e[t],[s]=GL(t),r=this.graph.nodes[s];if(r.attrParams.shape&&r.attrParams.shape.value){const e=r.attrParams.shape.value,t=e.length===n.shape.length&&n.shape.every(((t,n)=>-1===e[n]||e[n]===t));Us.assert(t,(()=>`The shape of dict['${r.name}'] provided in model.execute(dict) must be [${e}], but was [${n.shape}]`))}r.attrParams.dtype&&r.attrParams.dtype.value&&Us.assert(n.dtype===r.attrParams.dtype.value,(()=>`The dtype of dict['${r.name}'] provided in model.execute(dict) must be ${r.attrParams.dtype.value}, but was ${n.dtype}`))}))}mapInputs(e){const t={};for(const n in e)if(null!=this._signature&&null!=this._signature.inputs&&null!=this._signature.inputs[n]){t[this._signature.inputs[n].name]=e[n]}else t[n]=e[n];return t}checkInputs(e){const t=Object.keys(e).filter((e=>{const[t]=GL(e);return null==this.graph.nodes[t]}));if(t.length>0)throw new Error(`The dict provided in model.execute(dict) has keys: [${t}] that are not part of graph`)}mapOutputs(e){return e.map((e=>{if(null!=this._signature&&null!=this._signature.outputs&&null!=this._signature.outputs[e]){return this._signature.outputs[e].name}return e}),{})}checkOutputs(e){e.forEach((e=>{const[t]=GL(e);if(!this.graph.nodes[t])throw new Error(`The output '${e}' is not found in the graph`)}))}}class fB{constructor(e={},t={}){this.hashTableNameToHandle=e,this.hashTableMap=t}addHashTable(e,t){this.hashTableNameToHandle[e]=t.handle,this.hashTableMap[t.id]=t}getHashTableHandleByName(e){return this.hashTableNameToHandle[e]}getHashTableById(e){return this.hashTableMap[e]}dispose(){for(const e in this.hashTableMap)this.hashTableMap[e].clearAndClose(),delete this.hashTableMap[e];for(const e in this.hashTableNameToHandle)this.hashTableNameToHandle[e].dispose(),delete this.hashTableNameToHandle[e]}}class mB{constructor(e,t={}){this.modelUrl=e,this.loadOptions=t,this.version="n/a",null==t&&(this.loadOptions={}),this.resourceManager=new fB}get modelVersion(){return this.version}get inputNodes(){return this.executor.inputNodes}get outputNodes(){return this.executor.outputNodes}get inputs(){return this.executor.inputs}get outputs(){return this.executor.outputs}get weights(){return this.executor.weightMap}get metadata(){return this.artifacts.userDefinedMetadata}get modelSignature(){return this.signature}findIOHandler(){const e=this.modelUrl;if(null!=e.load)this.handler=e;else if(null!=this.loadOptions.requestInit)this.handler=Uo.browserHTTPRequest(e,this.loadOptions);else{const t=Uo.getLoadHandlers(e,this.loadOptions);if(0===t.length)t.push(Uo.browserHTTPRequest(e,this.loadOptions));else if(t.length>1)throw new Error(`Found more than one (${t.length}) load handlers for URL '${[e]}'`);this.handler=t[0]}}async load(){if(this.findIOHandler(),null==this.handler.load)throw new Error("Cannot proceed with model loading because the IOHandler provided does not have the `load` method implemented.");const e=await this.handler.load();return this.loadSync(e)}loadSync(e){this.artifacts=e;const t=this.artifacts.modelTopology;let n;n=null!=this.artifacts.userDefinedMetadata&&null!=this.artifacts.userDefinedMetadata.signature?this.artifacts.userDefinedMetadata.signature:this.artifacts.signature,this.signature=n,this.version=`${t.versions.producer}.${t.versions.minConsumer}`;const s=Uo.decodeWeights(this.artifacts.weightData,this.artifacts.weightSpecs);if(this.executor=new dB(Fz.Instance.transformGraph(t,this.signature)),this.executor.weightMap=this.convertTensorMapToTensorsMap(s),this.executor.resourceManager=this.resourceManager,null!=e.modelInitializer&&null!=e.modelInitializer.node){const t=Fz.Instance.transformGraph(e.modelInitializer);this.initializer=new dB(t),this.initializer.weightMap=this.executor.weightMap,this.initializer.resourceManager=this.resourceManager,this.initializer.executeAsync({},[])}return!0}async save(e,t){if("string"==typeof e){const t=Uo.getSaveHandlers(e);if(0===t.length)throw new Error(`Cannot find any save handlers for URL '${e}'`);if(t.length>1)throw new Error(`Found more than one (${t.length}) save handlers for URL '${e}'`);e=t[0]}if(null==e.save)throw new Error("GraphModel.save() cannot proceed because the IOHandler provided does not have the `save` attribute defined.");return e.save(this.artifacts)}predict(e,t){return this.execute(e,this.outputNodes)}normalizeInputs(e){if(!(e instanceof jr||Array.isArray(e)))return e;if((e=Array.isArray(e)?e:[e]).length!==this.inputNodes.length)throw new Error(`Input tensor count mismatch,the graph model has ${this.inputNodes.length} placeholders, while there are ${e.length} input tensors.`);return this.inputNodes.reduce(((t,n,s)=>(t[n]=e[s],t)),{})}normalizeOutputs(e){return e=e||this.outputNodes,Array.isArray(e)?e:[e]}execute(e,t){e=this.normalizeInputs(e),t=this.normalizeOutputs(t);const n=this.executor.execute(e,t);return n.length>1?n:n[0]}async executeAsync(e,t){e=this.normalizeInputs(e),t=this.normalizeOutputs(t);const n=await this.executor.executeAsync(e,t);return n.length>1?n:n[0]}getIntermediateTensors(){return this.executor.getIntermediateTensors()}disposeIntermediateTensors(){this.executor.disposeIntermediateTensors()}convertTensorMapToTensorsMap(e){return Object.keys(e).reduce(((t,n)=>(t[n]=[e[n]],t)),{})}dispose(){this.executor.dispose(),this.initializer&&this.initializer.dispose(),this.resourceManager.dispose()}}async function gB(e,t={}){if(null==e)throw new Error("modelUrl in loadGraphModel() cannot be null. Please provide a url or an IOHandler that loads the model");null==t&&(t={}),t.fromTFHub&&null==e.load&&(e.endsWith("/")||(e+="/"),e=`${e}model.json?tfjs-format=file`);const n=new mB(e,t);return await n.load(),n}
/** @license See the LICENSE file. */chrome.runtime.onConnect.addListener((function(e){console.assert("images"===e.name),e.onMessage.addListener((function(t){"img_find"==t.action&&async function(e,t){const n=e.image_src;!async function(e,t){const[n,s,r]=await async function(e){try{const n=await fetch(e),s=await n.blob(),r=await createImageBitmap(s),a=r.width,i=r.height,o=Math.max(416,a),l=Math.max(416,i);var t=new OffscreenCanvas(o,l).getContext("2d");return createImageBitmap(r,{premultiplyAlpha:"none",colorSpaceConversion:"none",resizeWidth:a,resizeHeight:i,resizeQuality:"high"}).then((e=>(t.drawImage(e,0,0),[t.getImageData(0,0,o,l),o,l])))}catch(t){return console.log(`getResizedImageBlob failed for ${e} : ${t}.`),[void 0,0,0]}}(e);if(n){const a=new ImageData(Uint8ClampedArray.from(Array.from(n.data)),s,r);yB.analyzeImage(e,a).then((e=>{t(e)}))}}(n,(e=>{!function(e,t,n){1==function(e,t){for(console.log(`shouldHide ${e} : ${t.valid_detections_data}`),i=0;i<t.valid_detections_data;++i){const n=t.scores_data[i].toFixed(2);if(console.warn(`Found a pistol or weapon! score: ${n} - ${e}`),n>=.34)return!0}return!1}(n,t)&&e.postMessage({src:n})}(t,e,n)}))}(t,e)}))}));const yB=new class{constructor(){this.loadModel()}async loadModel(){console.log("Loading model...");const e=performance.now();try{this.pistols_model=await gB("/pistol_web_model/model.json");let[t,n]=this.pistols_model.inputs[0].shape.slice(1,3);this.pistols_modelWidth=t,this.pistols_modelHeight=n;const s=th((()=>ph([1,this.pistols_modelWidth,this.pistols_modelHeight,3])));await this.pistols_model.executeAsync(s),this.weapons_model=await gB("/weapons_web_model/model.json");let[r,a]=this.weapons_model.inputs[0].shape.slice(1,3);this.weapons_modelWidth=r,this.weapons_modelHeight=a;const i=th((()=>ph([1,this.weapons_modelWidth,this.weapons_modelHeight,3])));await this.weapons_model.executeAsync(i);const o=Math.floor(performance.now()-e);console.log(`Models loaded and initialized in ${o} ms...`)}catch(e){console.error("Unable to load model",e)}}async doInference(e,t,n,s){const r=performance.now(),a=await n.executeAsync(e),[i,o,l,u]=a,c=performance.now()-r;console.log(t+` ${c.toFixed(1)} ms `);const h=i.dataSync(),p=o.dataSync(),d=l.dataSync(),f=u.dataSync()[0],m={boxes_data:h,scores_data:p,classes_data:d,valid_detections_data:f};return nh(a),f>0&&console.log(s),m}async analyzeImage(e,t){if(!this.pistols_model||!this.weapons_model)return console.log("Waiting for models to load..."),void setTimeout((()=>{this.analyzeImage(e,t)}),5e3);const[n,s]=[640,640];console.log("Predicting...");const r=th((()=>{const e=cl.fromPixels(t),[r,a]=e.shape.slice(0,2),i=Math.max(a,r),o=e.pad([[0,i-r],[0,i-a],[0,0]]);return jf.resizeBilinear(o,[n,s]).div(255).expandDims(0)}));var a=await this.doInference(r,"First inference done in",this.weapons_model,`Found a weapon in ${e}`);return a.valid_detections_data>0?a:await this.doInference(r,"Second inference done in",this.pistols_model,`Found a pistol in ${e}`)}}})();
//# sourceMappingURL=service_worker.js.map
